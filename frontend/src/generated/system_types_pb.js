// source: system_types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.skynet.types.AuthenticationMessage', null, global);
goog.exportSymbol('proto.skynet.types.Command', null, global);
goog.exportSymbol('proto.skynet.types.CommandResponse', null, global);
goog.exportSymbol('proto.skynet.types.Conditional', null, global);
goog.exportSymbol('proto.skynet.types.ConditionalResponse', null, global);
goog.exportSymbol('proto.skynet.types.CrudBundle', null, global);
goog.exportSymbol('proto.skynet.types.CrudBundle.ObjectCase', null, global);
goog.exportSymbol('proto.skynet.types.Edge', null, global);
goog.exportSymbol('proto.skynet.types.ExecutionContext', null, global);
goog.exportSymbol('proto.skynet.types.ExecutionResponse', null, global);
goog.exportSymbol('proto.skynet.types.Graph', null, global);
goog.exportSymbol('proto.skynet.types.GraphAction', null, global);
goog.exportSymbol('proto.skynet.types.GraphAction.Action', null, global);
goog.exportSymbol('proto.skynet.types.GraphAction.ObjectCase', null, global);
goog.exportSymbol('proto.skynet.types.GraphNodeInfo', null, global);
goog.exportSymbol('proto.skynet.types.GraphState', null, global);
goog.exportSymbol('proto.skynet.types.Node', null, global);
goog.exportSymbol('proto.skynet.types.Node.NodeContentCase', null, global);
goog.exportSymbol('proto.skynet.types.NodeExecutionResponse', null, global);
goog.exportSymbol('proto.skynet.types.NodeExecutionResponse.ResponseCase', null, global);
goog.exportSymbol('proto.skynet.types.NodeTypeNames', null, global);
goog.exportSymbol('proto.skynet.types.Process', null, global);
goog.exportSymbol('proto.skynet.types.Prompt', null, global);
goog.exportSymbol('proto.skynet.types.PromptResponse', null, global);
goog.exportSymbol('proto.skynet.types.ResponseObject', null, global);
goog.exportSymbol('proto.skynet.types.ResponseObject.ObjectCase', null, global);
goog.exportSymbol('proto.skynet.types.SystemErrors', null, global);
goog.exportSymbol('proto.skynet.types.SystemState', null, global);
goog.exportSymbol('proto.skynet.types.UserSettings', null, global);
goog.exportSymbol('proto.skynet.types.VerbTypeNames', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.GraphNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.GraphNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.GraphNodeInfo.displayName = 'proto.skynet.types.GraphNodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.Edge.displayName = 'proto.skynet.types.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.GraphAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.skynet.types.GraphAction.oneofGroups_);
};
goog.inherits(proto.skynet.types.GraphAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.GraphAction.displayName = 'proto.skynet.types.GraphAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.Prompt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.Prompt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.Prompt.displayName = 'proto.skynet.types.Prompt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.Command.displayName = 'proto.skynet.types.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.Conditional = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.Conditional, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.Conditional.displayName = 'proto.skynet.types.Conditional';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skynet.types.Graph.repeatedFields_, null);
};
goog.inherits(proto.skynet.types.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.Graph.displayName = 'proto.skynet.types.Graph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skynet.types.Process.repeatedFields_, null);
};
goog.inherits(proto.skynet.types.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.Process.displayName = 'proto.skynet.types.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skynet.types.Node.repeatedFields_, proto.skynet.types.Node.oneofGroups_);
};
goog.inherits(proto.skynet.types.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.Node.displayName = 'proto.skynet.types.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.GraphState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skynet.types.GraphState.repeatedFields_, null);
};
goog.inherits(proto.skynet.types.GraphState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.GraphState.displayName = 'proto.skynet.types.GraphState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.ExecutionContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skynet.types.ExecutionContext.repeatedFields_, null);
};
goog.inherits(proto.skynet.types.ExecutionContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.ExecutionContext.displayName = 'proto.skynet.types.ExecutionContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.SystemState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skynet.types.SystemState.repeatedFields_, null);
};
goog.inherits(proto.skynet.types.SystemState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.SystemState.displayName = 'proto.skynet.types.SystemState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.AuthenticationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.AuthenticationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.AuthenticationMessage.displayName = 'proto.skynet.types.AuthenticationMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.UserSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.UserSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.UserSettings.displayName = 'proto.skynet.types.UserSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.CrudBundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.skynet.types.CrudBundle.oneofGroups_);
};
goog.inherits(proto.skynet.types.CrudBundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.CrudBundle.displayName = 'proto.skynet.types.CrudBundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.CommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.CommandResponse.displayName = 'proto.skynet.types.CommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.PromptResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.PromptResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.PromptResponse.displayName = 'proto.skynet.types.PromptResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.ConditionalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.ConditionalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.ConditionalResponse.displayName = 'proto.skynet.types.ConditionalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.NodeExecutionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.skynet.types.NodeExecutionResponse.oneofGroups_);
};
goog.inherits(proto.skynet.types.NodeExecutionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.NodeExecutionResponse.displayName = 'proto.skynet.types.NodeExecutionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.ExecutionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skynet.types.ExecutionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.ExecutionResponse.displayName = 'proto.skynet.types.ExecutionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skynet.types.ResponseObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.skynet.types.ResponseObject.oneofGroups_);
};
goog.inherits(proto.skynet.types.ResponseObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skynet.types.ResponseObject.displayName = 'proto.skynet.types.ResponseObject';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.GraphNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.GraphNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.GraphNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.GraphNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.GraphNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.GraphNodeInfo;
  return proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.GraphNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.GraphNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.GraphNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.skynet.types.GraphNodeInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.GraphNodeInfo} returns this
 */
proto.skynet.types.GraphNodeInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.skynet.types.GraphNodeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.GraphNodeInfo} returns this
 */
proto.skynet.types.GraphNodeInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.skynet.types.GraphNodeInfo.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.skynet.types.GraphNodeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.Edge}
 */
proto.skynet.types.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.Edge;
  return proto.skynet.types.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.Edge}
 */
proto.skynet.types.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skynet.types.GraphNodeInfo;
      reader.readMessage(value,proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.skynet.types.GraphNodeInfo;
      reader.readMessage(value,proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional GraphNodeInfo source = 1;
 * @return {?proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.Edge.prototype.getSource = function() {
  return /** @type{?proto.skynet.types.GraphNodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.GraphNodeInfo, 1));
};


/**
 * @param {?proto.skynet.types.GraphNodeInfo|undefined} value
 * @return {!proto.skynet.types.Edge} returns this
*/
proto.skynet.types.Edge.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Edge} returns this
 */
proto.skynet.types.Edge.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Edge.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GraphNodeInfo target = 2;
 * @return {?proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.Edge.prototype.getTarget = function() {
  return /** @type{?proto.skynet.types.GraphNodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.GraphNodeInfo, 2));
};


/**
 * @param {?proto.skynet.types.GraphNodeInfo|undefined} value
 * @return {!proto.skynet.types.Edge} returns this
*/
proto.skynet.types.Edge.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Edge} returns this
 */
proto.skynet.types.Edge.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Edge.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skynet.types.GraphAction.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.skynet.types.GraphAction.ObjectCase = {
  OBJECT_NOT_SET: 0,
  NODE: 2,
  EDGE: 3
};

/**
 * @return {proto.skynet.types.GraphAction.ObjectCase}
 */
proto.skynet.types.GraphAction.prototype.getObjectCase = function() {
  return /** @type {proto.skynet.types.GraphAction.ObjectCase} */(jspb.Message.computeOneofCase(this, proto.skynet.types.GraphAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.GraphAction.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.GraphAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.GraphAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.GraphAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    node: (f = msg.getNode()) && proto.skynet.types.GraphNodeInfo.toObject(includeInstance, f),
    edge: (f = msg.getEdge()) && proto.skynet.types.Edge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.GraphAction}
 */
proto.skynet.types.GraphAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.GraphAction;
  return proto.skynet.types.GraphAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.GraphAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.GraphAction}
 */
proto.skynet.types.GraphAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.skynet.types.GraphAction.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = new proto.skynet.types.GraphNodeInfo;
      reader.readMessage(value,proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 3:
      var value = new proto.skynet.types.Edge;
      reader.readMessage(value,proto.skynet.types.Edge.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.GraphAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.GraphAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.GraphAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.GraphAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.skynet.types.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.skynet.types.GraphAction.Action = {
  ADD: 0,
  REMOVE: 1,
  SELECT: 2,
  DESELECT: 3,
  RESET: 4,
  NONE: 5
};

/**
 * optional Action action = 1;
 * @return {!proto.skynet.types.GraphAction.Action}
 */
proto.skynet.types.GraphAction.prototype.getAction = function() {
  return /** @type {!proto.skynet.types.GraphAction.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.skynet.types.GraphAction.Action} value
 * @return {!proto.skynet.types.GraphAction} returns this
 */
proto.skynet.types.GraphAction.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional GraphNodeInfo node = 2;
 * @return {?proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.GraphAction.prototype.getNode = function() {
  return /** @type{?proto.skynet.types.GraphNodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.GraphNodeInfo, 2));
};


/**
 * @param {?proto.skynet.types.GraphNodeInfo|undefined} value
 * @return {!proto.skynet.types.GraphAction} returns this
*/
proto.skynet.types.GraphAction.prototype.setNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.skynet.types.GraphAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.GraphAction} returns this
 */
proto.skynet.types.GraphAction.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.GraphAction.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Edge edge = 3;
 * @return {?proto.skynet.types.Edge}
 */
proto.skynet.types.GraphAction.prototype.getEdge = function() {
  return /** @type{?proto.skynet.types.Edge} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Edge, 3));
};


/**
 * @param {?proto.skynet.types.Edge|undefined} value
 * @return {!proto.skynet.types.GraphAction} returns this
*/
proto.skynet.types.GraphAction.prototype.setEdge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.skynet.types.GraphAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.GraphAction} returns this
 */
proto.skynet.types.GraphAction.prototype.clearEdge = function() {
  return this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.GraphAction.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.Prompt.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.Prompt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.Prompt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Prompt.toObject = function(includeInstance, msg) {
  var f, obj = {
    prompt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    system: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.Prompt}
 */
proto.skynet.types.Prompt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.Prompt;
  return proto.skynet.types.Prompt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.Prompt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.Prompt}
 */
proto.skynet.types.Prompt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrompt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.Prompt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.Prompt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.Prompt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Prompt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrompt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSystem();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string prompt = 1;
 * @return {string}
 */
proto.skynet.types.Prompt.prototype.getPrompt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.Prompt} returns this
 */
proto.skynet.types.Prompt.prototype.setPrompt = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string system = 2;
 * @return {string}
 */
proto.skynet.types.Prompt.prototype.getSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.Prompt} returns this
 */
proto.skynet.types.Prompt.prototype.setSystem = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.Command}
 */
proto.skynet.types.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.Command;
  return proto.skynet.types.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.Command}
 */
proto.skynet.types.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.skynet.types.Command.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.Command} returns this
 */
proto.skynet.types.Command.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.Conditional.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.Conditional.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.Conditional} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Conditional.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemVariablesMap: (f = msg.getSystemVariablesMap()) ? f.toObject(includeInstance, undefined) : [],
    statement: jspb.Message.getFieldWithDefault(msg, 2, ""),
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.Conditional}
 */
proto.skynet.types.Conditional.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.Conditional;
  return proto.skynet.types.Conditional.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.Conditional} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.Conditional}
 */
proto.skynet.types.Conditional.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSystemVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatement(value);
      break;
    case 3:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.Conditional.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.Conditional.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.Conditional} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Conditional.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getStatement();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> system_variables = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.skynet.types.Conditional.prototype.getSystemVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.skynet.types.Conditional} returns this
 */
proto.skynet.types.Conditional.prototype.clearSystemVariablesMap = function() {
  this.getSystemVariablesMap().clear();
  return this;
};


/**
 * optional string statement = 2;
 * @return {string}
 */
proto.skynet.types.Conditional.prototype.getStatement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.Conditional} returns this
 */
proto.skynet.types.Conditional.prototype.setStatement = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> options = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.skynet.types.Conditional.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.skynet.types.Conditional} returns this
 */
proto.skynet.types.Conditional.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skynet.types.Graph.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.skynet.types.GraphNodeInfo.toObject, includeInstance),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.skynet.types.Edge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.Graph}
 */
proto.skynet.types.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.Graph;
  return proto.skynet.types.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.Graph}
 */
proto.skynet.types.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skynet.types.GraphNodeInfo;
      reader.readMessage(value,proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.skynet.types.Edge;
      reader.readMessage(value,proto.skynet.types.Edge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.skynet.types.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GraphNodeInfo nodes = 1;
 * @return {!Array<!proto.skynet.types.GraphNodeInfo>}
 */
proto.skynet.types.Graph.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.skynet.types.GraphNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skynet.types.GraphNodeInfo, 1));
};


/**
 * @param {!Array<!proto.skynet.types.GraphNodeInfo>} value
 * @return {!proto.skynet.types.Graph} returns this
*/
proto.skynet.types.Graph.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.skynet.types.GraphNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.Graph.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.skynet.types.GraphNodeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.Graph} returns this
 */
proto.skynet.types.Graph.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated Edge edges = 2;
 * @return {!Array<!proto.skynet.types.Edge>}
 */
proto.skynet.types.Graph.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.skynet.types.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skynet.types.Edge, 2));
};


/**
 * @param {!Array<!proto.skynet.types.Edge>} value
 * @return {!proto.skynet.types.Graph} returns this
*/
proto.skynet.types.Graph.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.skynet.types.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.Edge}
 */
proto.skynet.types.Graph.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.skynet.types.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.Graph} returns this
 */
proto.skynet.types.Graph.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skynet.types.Process.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    graphState: (f = msg.getGraphState()) && proto.skynet.types.GraphState.toObject(includeInstance, f),
    initialVariablesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    topologicalOrderList: jspb.Message.toObjectList(msg.getTopologicalOrderList(),
    proto.skynet.types.GraphNodeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.Process}
 */
proto.skynet.types.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.Process;
  return proto.skynet.types.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.Process}
 */
proto.skynet.types.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skynet.types.GraphState;
      reader.readMessage(value,proto.skynet.types.GraphState.deserializeBinaryFromReader);
      msg.setGraphState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addInitialVariables(value);
      break;
    case 3:
      var value = new proto.skynet.types.GraphNodeInfo;
      reader.readMessage(value,proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader);
      msg.addTopologicalOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraphState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.skynet.types.GraphState.serializeBinaryToWriter
    );
  }
  f = message.getInitialVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTopologicalOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional GraphState graph_state = 1;
 * @return {?proto.skynet.types.GraphState}
 */
proto.skynet.types.Process.prototype.getGraphState = function() {
  return /** @type{?proto.skynet.types.GraphState} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.GraphState, 1));
};


/**
 * @param {?proto.skynet.types.GraphState|undefined} value
 * @return {!proto.skynet.types.Process} returns this
*/
proto.skynet.types.Process.prototype.setGraphState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Process} returns this
 */
proto.skynet.types.Process.prototype.clearGraphState = function() {
  return this.setGraphState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Process.prototype.hasGraphState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string initial_variables = 2;
 * @return {!Array<string>}
 */
proto.skynet.types.Process.prototype.getInitialVariablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.skynet.types.Process} returns this
 */
proto.skynet.types.Process.prototype.setInitialVariablesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.Process} returns this
 */
proto.skynet.types.Process.prototype.addInitialVariables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.Process} returns this
 */
proto.skynet.types.Process.prototype.clearInitialVariablesList = function() {
  return this.setInitialVariablesList([]);
};


/**
 * repeated GraphNodeInfo topological_order = 3;
 * @return {!Array<!proto.skynet.types.GraphNodeInfo>}
 */
proto.skynet.types.Process.prototype.getTopologicalOrderList = function() {
  return /** @type{!Array<!proto.skynet.types.GraphNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skynet.types.GraphNodeInfo, 3));
};


/**
 * @param {!Array<!proto.skynet.types.GraphNodeInfo>} value
 * @return {!proto.skynet.types.Process} returns this
*/
proto.skynet.types.Process.prototype.setTopologicalOrderList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.skynet.types.GraphNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.Process.prototype.addTopologicalOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.skynet.types.GraphNodeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.Process} returns this
 */
proto.skynet.types.Process.prototype.clearTopologicalOrderList = function() {
  return this.setTopologicalOrderList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skynet.types.Node.repeatedFields_ = [9,10];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skynet.types.Node.oneofGroups_ = [[4,5,6,7]];

/**
 * @enum {number}
 */
proto.skynet.types.Node.NodeContentCase = {
  NODE_CONTENT_NOT_SET: 0,
  PROMPT: 4,
  PROCESS: 5,
  CONDITIONAL: 6,
  COMMAND: 7
};

/**
 * @return {proto.skynet.types.Node.NodeContentCase}
 */
proto.skynet.types.Node.prototype.getNodeContentCase = function() {
  return /** @type {proto.skynet.types.Node.NodeContentCase} */(jspb.Message.computeOneofCase(this, proto.skynet.types.Node.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeInfo: (f = msg.getNodeInfo()) && proto.skynet.types.GraphNodeInfo.toObject(includeInstance, f),
    typeName: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prompt: (f = msg.getPrompt()) && proto.skynet.types.Prompt.toObject(includeInstance, f),
    process: (f = msg.getProcess()) && proto.skynet.types.Process.toObject(includeInstance, f),
    conditional: (f = msg.getConditional()) && proto.skynet.types.Conditional.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.skynet.types.Command.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    inputVariablesList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    outputVariablesList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.Node}
 */
proto.skynet.types.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.Node;
  return proto.skynet.types.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.Node}
 */
proto.skynet.types.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skynet.types.GraphNodeInfo;
      reader.readMessage(value,proto.skynet.types.GraphNodeInfo.deserializeBinaryFromReader);
      msg.setNodeInfo(value);
      break;
    case 3:
      var value = /** @type {!proto.skynet.types.NodeTypeNames} */ (reader.readEnum());
      msg.setTypeName(value);
      break;
    case 4:
      var value = new proto.skynet.types.Prompt;
      reader.readMessage(value,proto.skynet.types.Prompt.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    case 5:
      var value = new proto.skynet.types.Process;
      reader.readMessage(value,proto.skynet.types.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 6:
      var value = new proto.skynet.types.Conditional;
      reader.readMessage(value,proto.skynet.types.Conditional.deserializeBinaryFromReader);
      msg.setConditional(value);
      break;
    case 7:
      var value = new proto.skynet.types.Command;
      reader.readMessage(value,proto.skynet.types.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addInputVariables(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutputVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.skynet.types.GraphNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getTypeName();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.skynet.types.Prompt.serializeBinaryToWriter
    );
  }
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.skynet.types.Process.serializeBinaryToWriter
    );
  }
  f = message.getConditional();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.skynet.types.Conditional.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.skynet.types.Command.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getInputVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getOutputVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * optional GraphNodeInfo node_info = 1;
 * @return {?proto.skynet.types.GraphNodeInfo}
 */
proto.skynet.types.Node.prototype.getNodeInfo = function() {
  return /** @type{?proto.skynet.types.GraphNodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.GraphNodeInfo, 1));
};


/**
 * @param {?proto.skynet.types.GraphNodeInfo|undefined} value
 * @return {!proto.skynet.types.Node} returns this
*/
proto.skynet.types.Node.prototype.setNodeInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.clearNodeInfo = function() {
  return this.setNodeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Node.prototype.hasNodeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeTypeNames type_name = 3;
 * @return {!proto.skynet.types.NodeTypeNames}
 */
proto.skynet.types.Node.prototype.getTypeName = function() {
  return /** @type {!proto.skynet.types.NodeTypeNames} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.skynet.types.NodeTypeNames} value
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.setTypeName = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Prompt prompt = 4;
 * @return {?proto.skynet.types.Prompt}
 */
proto.skynet.types.Node.prototype.getPrompt = function() {
  return /** @type{?proto.skynet.types.Prompt} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Prompt, 4));
};


/**
 * @param {?proto.skynet.types.Prompt|undefined} value
 * @return {!proto.skynet.types.Node} returns this
*/
proto.skynet.types.Node.prototype.setPrompt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.skynet.types.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.clearPrompt = function() {
  return this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Node.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Process process = 5;
 * @return {?proto.skynet.types.Process}
 */
proto.skynet.types.Node.prototype.getProcess = function() {
  return /** @type{?proto.skynet.types.Process} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Process, 5));
};


/**
 * @param {?proto.skynet.types.Process|undefined} value
 * @return {!proto.skynet.types.Node} returns this
*/
proto.skynet.types.Node.prototype.setProcess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.skynet.types.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Node.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Conditional conditional = 6;
 * @return {?proto.skynet.types.Conditional}
 */
proto.skynet.types.Node.prototype.getConditional = function() {
  return /** @type{?proto.skynet.types.Conditional} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Conditional, 6));
};


/**
 * @param {?proto.skynet.types.Conditional|undefined} value
 * @return {!proto.skynet.types.Node} returns this
*/
proto.skynet.types.Node.prototype.setConditional = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.skynet.types.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.clearConditional = function() {
  return this.setConditional(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Node.prototype.hasConditional = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Command command = 7;
 * @return {?proto.skynet.types.Command}
 */
proto.skynet.types.Node.prototype.getCommand = function() {
  return /** @type{?proto.skynet.types.Command} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Command, 7));
};


/**
 * @param {?proto.skynet.types.Command|undefined} value
 * @return {!proto.skynet.types.Node} returns this
*/
proto.skynet.types.Node.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.skynet.types.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.Node.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string description = 8;
 * @return {string}
 */
proto.skynet.types.Node.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string input_variables = 9;
 * @return {!Array<string>}
 */
proto.skynet.types.Node.prototype.getInputVariablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.setInputVariablesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.addInputVariables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.clearInputVariablesList = function() {
  return this.setInputVariablesList([]);
};


/**
 * repeated string output_variables = 10;
 * @return {!Array<string>}
 */
proto.skynet.types.Node.prototype.getOutputVariablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.setOutputVariablesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.addOutputVariables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.Node} returns this
 */
proto.skynet.types.Node.prototype.clearOutputVariablesList = function() {
  return this.setOutputVariablesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skynet.types.GraphState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.GraphState.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.GraphState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.GraphState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.GraphState.toObject = function(includeInstance, msg) {
  var f, obj = {
    graph: (f = msg.getGraph()) && proto.skynet.types.Graph.toObject(includeInstance, f),
    actionHistoryList: jspb.Message.toObjectList(msg.getActionHistoryList(),
    proto.skynet.types.GraphAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.GraphState}
 */
proto.skynet.types.GraphState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.GraphState;
  return proto.skynet.types.GraphState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.GraphState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.GraphState}
 */
proto.skynet.types.GraphState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skynet.types.Graph;
      reader.readMessage(value,proto.skynet.types.Graph.deserializeBinaryFromReader);
      msg.setGraph(value);
      break;
    case 2:
      var value = new proto.skynet.types.GraphAction;
      reader.readMessage(value,proto.skynet.types.GraphAction.deserializeBinaryFromReader);
      msg.addActionHistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.GraphState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.GraphState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.GraphState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.GraphState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraph();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.skynet.types.Graph.serializeBinaryToWriter
    );
  }
  f = message.getActionHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.skynet.types.GraphAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional Graph graph = 1;
 * @return {?proto.skynet.types.Graph}
 */
proto.skynet.types.GraphState.prototype.getGraph = function() {
  return /** @type{?proto.skynet.types.Graph} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Graph, 1));
};


/**
 * @param {?proto.skynet.types.Graph|undefined} value
 * @return {!proto.skynet.types.GraphState} returns this
*/
proto.skynet.types.GraphState.prototype.setGraph = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.GraphState} returns this
 */
proto.skynet.types.GraphState.prototype.clearGraph = function() {
  return this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.GraphState.prototype.hasGraph = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated GraphAction action_history = 2;
 * @return {!Array<!proto.skynet.types.GraphAction>}
 */
proto.skynet.types.GraphState.prototype.getActionHistoryList = function() {
  return /** @type{!Array<!proto.skynet.types.GraphAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skynet.types.GraphAction, 2));
};


/**
 * @param {!Array<!proto.skynet.types.GraphAction>} value
 * @return {!proto.skynet.types.GraphState} returns this
*/
proto.skynet.types.GraphState.prototype.setActionHistoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.skynet.types.GraphAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.GraphAction}
 */
proto.skynet.types.GraphState.prototype.addActionHistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.skynet.types.GraphAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.GraphState} returns this
 */
proto.skynet.types.GraphState.prototype.clearActionHistoryList = function() {
  return this.setActionHistoryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skynet.types.ExecutionContext.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.ExecutionContext.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.ExecutionContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.ExecutionContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ExecutionContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    topologicalOrderList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    currentNode: (f = msg.getCurrentNode()) && proto.skynet.types.Node.toObject(includeInstance, f),
    globalVariablesMap: (f = msg.getGlobalVariablesMap()) ? f.toObject(includeInstance, undefined) : [],
    executionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    returnExecutionId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.ExecutionContext}
 */
proto.skynet.types.ExecutionContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.ExecutionContext;
  return proto.skynet.types.ExecutionContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.ExecutionContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.ExecutionContext}
 */
proto.skynet.types.ExecutionContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopologicalOrder(value);
      break;
    case 2:
      var value = new proto.skynet.types.Node;
      reader.readMessage(value,proto.skynet.types.Node.deserializeBinaryFromReader);
      msg.setCurrentNode(value);
      break;
    case 3:
      var value = msg.getGlobalVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnExecutionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.ExecutionContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.ExecutionContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.ExecutionContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ExecutionContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopologicalOrderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getCurrentNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.skynet.types.Node.serializeBinaryToWriter
    );
  }
  f = message.getGlobalVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExecutionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReturnExecutionId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated string topological_order = 1;
 * @return {!Array<string>}
 */
proto.skynet.types.ExecutionContext.prototype.getTopologicalOrderList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.skynet.types.ExecutionContext} returns this
 */
proto.skynet.types.ExecutionContext.prototype.setTopologicalOrderList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.ExecutionContext} returns this
 */
proto.skynet.types.ExecutionContext.prototype.addTopologicalOrder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.ExecutionContext} returns this
 */
proto.skynet.types.ExecutionContext.prototype.clearTopologicalOrderList = function() {
  return this.setTopologicalOrderList([]);
};


/**
 * optional Node current_node = 2;
 * @return {?proto.skynet.types.Node}
 */
proto.skynet.types.ExecutionContext.prototype.getCurrentNode = function() {
  return /** @type{?proto.skynet.types.Node} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Node, 2));
};


/**
 * @param {?proto.skynet.types.Node|undefined} value
 * @return {!proto.skynet.types.ExecutionContext} returns this
*/
proto.skynet.types.ExecutionContext.prototype.setCurrentNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.ExecutionContext} returns this
 */
proto.skynet.types.ExecutionContext.prototype.clearCurrentNode = function() {
  return this.setCurrentNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.ExecutionContext.prototype.hasCurrentNode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> global_variables = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.skynet.types.ExecutionContext.prototype.getGlobalVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.skynet.types.ExecutionContext} returns this
 */
proto.skynet.types.ExecutionContext.prototype.clearGlobalVariablesMap = function() {
  this.getGlobalVariablesMap().clear();
  return this;
};


/**
 * optional string execution_id = 4;
 * @return {string}
 */
proto.skynet.types.ExecutionContext.prototype.getExecutionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ExecutionContext} returns this
 */
proto.skynet.types.ExecutionContext.prototype.setExecutionId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string return_execution_id = 5;
 * @return {string}
 */
proto.skynet.types.ExecutionContext.prototype.getReturnExecutionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ExecutionContext} returns this
 */
proto.skynet.types.ExecutionContext.prototype.setReturnExecutionId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skynet.types.SystemState.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.SystemState.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.SystemState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.SystemState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.SystemState.toObject = function(includeInstance, msg) {
  var f, obj = {
    authenticated: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    websocketReady: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    graphState: (f = msg.getGraphState()) && proto.skynet.types.GraphState.toObject(includeInstance, f),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.skynet.types.Node.toObject, includeInstance),
    selectedNodeList: jspb.Message.toObjectList(msg.getSelectedNodeList(),
    proto.skynet.types.Node.toObject, includeInstance),
    executionContext: (f = msg.getExecutionContext()) && proto.skynet.types.ExecutionContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.SystemState}
 */
proto.skynet.types.SystemState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.SystemState;
  return proto.skynet.types.SystemState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.SystemState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.SystemState}
 */
proto.skynet.types.SystemState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthenticated(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWebsocketReady(value);
      break;
    case 3:
      var value = new proto.skynet.types.GraphState;
      reader.readMessage(value,proto.skynet.types.GraphState.deserializeBinaryFromReader);
      msg.setGraphState(value);
      break;
    case 4:
      var value = new proto.skynet.types.Node;
      reader.readMessage(value,proto.skynet.types.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 5:
      var value = new proto.skynet.types.Node;
      reader.readMessage(value,proto.skynet.types.Node.deserializeBinaryFromReader);
      msg.addSelectedNode(value);
      break;
    case 6:
      var value = new proto.skynet.types.ExecutionContext;
      reader.readMessage(value,proto.skynet.types.ExecutionContext.deserializeBinaryFromReader);
      msg.setExecutionContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.SystemState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.SystemState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.SystemState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.SystemState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthenticated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getWebsocketReady();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGraphState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.skynet.types.GraphState.serializeBinaryToWriter
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.skynet.types.Node.serializeBinaryToWriter
    );
  }
  f = message.getSelectedNodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.skynet.types.Node.serializeBinaryToWriter
    );
  }
  f = message.getExecutionContext();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.skynet.types.ExecutionContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool authenticated = 1;
 * @return {boolean}
 */
proto.skynet.types.SystemState.prototype.getAuthenticated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.skynet.types.SystemState} returns this
 */
proto.skynet.types.SystemState.prototype.setAuthenticated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool websocket_ready = 2;
 * @return {boolean}
 */
proto.skynet.types.SystemState.prototype.getWebsocketReady = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.skynet.types.SystemState} returns this
 */
proto.skynet.types.SystemState.prototype.setWebsocketReady = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional GraphState graph_state = 3;
 * @return {?proto.skynet.types.GraphState}
 */
proto.skynet.types.SystemState.prototype.getGraphState = function() {
  return /** @type{?proto.skynet.types.GraphState} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.GraphState, 3));
};


/**
 * @param {?proto.skynet.types.GraphState|undefined} value
 * @return {!proto.skynet.types.SystemState} returns this
*/
proto.skynet.types.SystemState.prototype.setGraphState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.SystemState} returns this
 */
proto.skynet.types.SystemState.prototype.clearGraphState = function() {
  return this.setGraphState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.SystemState.prototype.hasGraphState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Node nodes = 4;
 * @return {!Array<!proto.skynet.types.Node>}
 */
proto.skynet.types.SystemState.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.skynet.types.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skynet.types.Node, 4));
};


/**
 * @param {!Array<!proto.skynet.types.Node>} value
 * @return {!proto.skynet.types.SystemState} returns this
*/
proto.skynet.types.SystemState.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.skynet.types.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.Node}
 */
proto.skynet.types.SystemState.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.skynet.types.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.SystemState} returns this
 */
proto.skynet.types.SystemState.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated Node selected_node = 5;
 * @return {!Array<!proto.skynet.types.Node>}
 */
proto.skynet.types.SystemState.prototype.getSelectedNodeList = function() {
  return /** @type{!Array<!proto.skynet.types.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skynet.types.Node, 5));
};


/**
 * @param {!Array<!proto.skynet.types.Node>} value
 * @return {!proto.skynet.types.SystemState} returns this
*/
proto.skynet.types.SystemState.prototype.setSelectedNodeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.skynet.types.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skynet.types.Node}
 */
proto.skynet.types.SystemState.prototype.addSelectedNode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.skynet.types.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skynet.types.SystemState} returns this
 */
proto.skynet.types.SystemState.prototype.clearSelectedNodeList = function() {
  return this.setSelectedNodeList([]);
};


/**
 * optional ExecutionContext execution_context = 6;
 * @return {?proto.skynet.types.ExecutionContext}
 */
proto.skynet.types.SystemState.prototype.getExecutionContext = function() {
  return /** @type{?proto.skynet.types.ExecutionContext} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.ExecutionContext, 6));
};


/**
 * @param {?proto.skynet.types.ExecutionContext|undefined} value
 * @return {!proto.skynet.types.SystemState} returns this
*/
proto.skynet.types.SystemState.prototype.setExecutionContext = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.SystemState} returns this
 */
proto.skynet.types.SystemState.prototype.clearExecutionContext = function() {
  return this.setExecutionContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.SystemState.prototype.hasExecutionContext = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.AuthenticationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.AuthenticationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.AuthenticationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.AuthenticationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientEmail: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientPassword: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.AuthenticationMessage}
 */
proto.skynet.types.AuthenticationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.AuthenticationMessage;
  return proto.skynet.types.AuthenticationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.AuthenticationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.AuthenticationMessage}
 */
proto.skynet.types.AuthenticationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.AuthenticationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.AuthenticationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.AuthenticationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.AuthenticationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string client_email = 1;
 * @return {string}
 */
proto.skynet.types.AuthenticationMessage.prototype.getClientEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.AuthenticationMessage} returns this
 */
proto.skynet.types.AuthenticationMessage.prototype.setClientEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_password = 2;
 * @return {string}
 */
proto.skynet.types.AuthenticationMessage.prototype.getClientPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.AuthenticationMessage} returns this
 */
proto.skynet.types.AuthenticationMessage.prototype.setClientPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.UserSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.UserSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.UserSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.UserSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    openaiApiKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mongoDbUri: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.UserSettings}
 */
proto.skynet.types.UserSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.UserSettings;
  return proto.skynet.types.UserSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.UserSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.UserSettings}
 */
proto.skynet.types.UserSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenaiApiKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMongoDbUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.UserSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.UserSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.UserSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.UserSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenaiApiKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMongoDbUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string openai_api_key = 1;
 * @return {string}
 */
proto.skynet.types.UserSettings.prototype.getOpenaiApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.UserSettings} returns this
 */
proto.skynet.types.UserSettings.prototype.setOpenaiApiKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mongo_db_uri = 2;
 * @return {string}
 */
proto.skynet.types.UserSettings.prototype.getMongoDbUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.UserSettings} returns this
 */
proto.skynet.types.UserSettings.prototype.setMongoDbUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skynet.types.CrudBundle.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.skynet.types.CrudBundle.ObjectCase = {
  OBJECT_NOT_SET: 0,
  NODE: 2,
  AUTHENTICATION_MESSAGE: 3,
  USER_SETTINGS: 4,
  EXECUTION_CONTEXT: 5
};

/**
 * @return {proto.skynet.types.CrudBundle.ObjectCase}
 */
proto.skynet.types.CrudBundle.prototype.getObjectCase = function() {
  return /** @type {proto.skynet.types.CrudBundle.ObjectCase} */(jspb.Message.computeOneofCase(this, proto.skynet.types.CrudBundle.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.CrudBundle.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.CrudBundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.CrudBundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.CrudBundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    verb: jspb.Message.getFieldWithDefault(msg, 1, 0),
    node: (f = msg.getNode()) && proto.skynet.types.Node.toObject(includeInstance, f),
    authenticationMessage: (f = msg.getAuthenticationMessage()) && proto.skynet.types.AuthenticationMessage.toObject(includeInstance, f),
    userSettings: (f = msg.getUserSettings()) && proto.skynet.types.UserSettings.toObject(includeInstance, f),
    executionContext: (f = msg.getExecutionContext()) && proto.skynet.types.ExecutionContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.CrudBundle}
 */
proto.skynet.types.CrudBundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.CrudBundle;
  return proto.skynet.types.CrudBundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.CrudBundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.CrudBundle}
 */
proto.skynet.types.CrudBundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.skynet.types.VerbTypeNames} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 2:
      var value = new proto.skynet.types.Node;
      reader.readMessage(value,proto.skynet.types.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 3:
      var value = new proto.skynet.types.AuthenticationMessage;
      reader.readMessage(value,proto.skynet.types.AuthenticationMessage.deserializeBinaryFromReader);
      msg.setAuthenticationMessage(value);
      break;
    case 4:
      var value = new proto.skynet.types.UserSettings;
      reader.readMessage(value,proto.skynet.types.UserSettings.deserializeBinaryFromReader);
      msg.setUserSettings(value);
      break;
    case 5:
      var value = new proto.skynet.types.ExecutionContext;
      reader.readMessage(value,proto.skynet.types.ExecutionContext.deserializeBinaryFromReader);
      msg.setExecutionContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.CrudBundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.CrudBundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.CrudBundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.CrudBundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.skynet.types.Node.serializeBinaryToWriter
    );
  }
  f = message.getAuthenticationMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.skynet.types.AuthenticationMessage.serializeBinaryToWriter
    );
  }
  f = message.getUserSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.skynet.types.UserSettings.serializeBinaryToWriter
    );
  }
  f = message.getExecutionContext();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.skynet.types.ExecutionContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional VerbTypeNames verb = 1;
 * @return {!proto.skynet.types.VerbTypeNames}
 */
proto.skynet.types.CrudBundle.prototype.getVerb = function() {
  return /** @type {!proto.skynet.types.VerbTypeNames} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.skynet.types.VerbTypeNames} value
 * @return {!proto.skynet.types.CrudBundle} returns this
 */
proto.skynet.types.CrudBundle.prototype.setVerb = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Node node = 2;
 * @return {?proto.skynet.types.Node}
 */
proto.skynet.types.CrudBundle.prototype.getNode = function() {
  return /** @type{?proto.skynet.types.Node} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Node, 2));
};


/**
 * @param {?proto.skynet.types.Node|undefined} value
 * @return {!proto.skynet.types.CrudBundle} returns this
*/
proto.skynet.types.CrudBundle.prototype.setNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.skynet.types.CrudBundle.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.CrudBundle} returns this
 */
proto.skynet.types.CrudBundle.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.CrudBundle.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AuthenticationMessage authentication_message = 3;
 * @return {?proto.skynet.types.AuthenticationMessage}
 */
proto.skynet.types.CrudBundle.prototype.getAuthenticationMessage = function() {
  return /** @type{?proto.skynet.types.AuthenticationMessage} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.AuthenticationMessage, 3));
};


/**
 * @param {?proto.skynet.types.AuthenticationMessage|undefined} value
 * @return {!proto.skynet.types.CrudBundle} returns this
*/
proto.skynet.types.CrudBundle.prototype.setAuthenticationMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.skynet.types.CrudBundle.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.CrudBundle} returns this
 */
proto.skynet.types.CrudBundle.prototype.clearAuthenticationMessage = function() {
  return this.setAuthenticationMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.CrudBundle.prototype.hasAuthenticationMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UserSettings user_settings = 4;
 * @return {?proto.skynet.types.UserSettings}
 */
proto.skynet.types.CrudBundle.prototype.getUserSettings = function() {
  return /** @type{?proto.skynet.types.UserSettings} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.UserSettings, 4));
};


/**
 * @param {?proto.skynet.types.UserSettings|undefined} value
 * @return {!proto.skynet.types.CrudBundle} returns this
*/
proto.skynet.types.CrudBundle.prototype.setUserSettings = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.skynet.types.CrudBundle.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.CrudBundle} returns this
 */
proto.skynet.types.CrudBundle.prototype.clearUserSettings = function() {
  return this.setUserSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.CrudBundle.prototype.hasUserSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ExecutionContext execution_context = 5;
 * @return {?proto.skynet.types.ExecutionContext}
 */
proto.skynet.types.CrudBundle.prototype.getExecutionContext = function() {
  return /** @type{?proto.skynet.types.ExecutionContext} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.ExecutionContext, 5));
};


/**
 * @param {?proto.skynet.types.ExecutionContext|undefined} value
 * @return {!proto.skynet.types.CrudBundle} returns this
*/
proto.skynet.types.CrudBundle.prototype.setExecutionContext = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.skynet.types.CrudBundle.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.CrudBundle} returns this
 */
proto.skynet.types.CrudBundle.prototype.clearExecutionContext = function() {
  return this.setExecutionContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.CrudBundle.prototype.hasExecutionContext = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.CommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.CommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.CommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.CommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.CommandResponse}
 */
proto.skynet.types.CommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.CommandResponse;
  return proto.skynet.types.CommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.CommandResponse}
 */
proto.skynet.types.CommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.CommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.CommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.CommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.StringValue error = 1;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.skynet.types.CommandResponse.prototype.getError = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 1));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.skynet.types.CommandResponse} returns this
*/
proto.skynet.types.CommandResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.CommandResponse} returns this
 */
proto.skynet.types.CommandResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.CommandResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.StringValue output = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.skynet.types.CommandResponse.prototype.getOutput = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.skynet.types.CommandResponse} returns this
*/
proto.skynet.types.CommandResponse.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.CommandResponse} returns this
 */
proto.skynet.types.CommandResponse.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.CommandResponse.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.PromptResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.PromptResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.PromptResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.PromptResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aiTextResponse: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.PromptResponse}
 */
proto.skynet.types.PromptResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.PromptResponse;
  return proto.skynet.types.PromptResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.PromptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.PromptResponse}
 */
proto.skynet.types.PromptResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAiTextResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.PromptResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.PromptResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.PromptResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.PromptResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAiTextResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ai_text_response = 1;
 * @return {string}
 */
proto.skynet.types.PromptResponse.prototype.getAiTextResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.PromptResponse} returns this
 */
proto.skynet.types.PromptResponse.prototype.setAiTextResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.ConditionalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.ConditionalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.ConditionalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ConditionalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chosenOption: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.ConditionalResponse}
 */
proto.skynet.types.ConditionalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.ConditionalResponse;
  return proto.skynet.types.ConditionalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.ConditionalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.ConditionalResponse}
 */
proto.skynet.types.ConditionalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChosenOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.ConditionalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.ConditionalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.ConditionalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ConditionalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChosenOption();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string chosen_option = 1;
 * @return {string}
 */
proto.skynet.types.ConditionalResponse.prototype.getChosenOption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ConditionalResponse} returns this
 */
proto.skynet.types.ConditionalResponse.prototype.setChosenOption = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skynet.types.NodeExecutionResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.skynet.types.NodeExecutionResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  PROMPT_RESPONSE: 1,
  COMMAND_RESPONSE: 2,
  CONDITIONAL_RESPONSE: 3
};

/**
 * @return {proto.skynet.types.NodeExecutionResponse.ResponseCase}
 */
proto.skynet.types.NodeExecutionResponse.prototype.getResponseCase = function() {
  return /** @type {proto.skynet.types.NodeExecutionResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.skynet.types.NodeExecutionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.NodeExecutionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.NodeExecutionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.NodeExecutionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.NodeExecutionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    promptResponse: (f = msg.getPromptResponse()) && proto.skynet.types.PromptResponse.toObject(includeInstance, f),
    commandResponse: (f = msg.getCommandResponse()) && proto.skynet.types.CommandResponse.toObject(includeInstance, f),
    conditionalResponse: (f = msg.getConditionalResponse()) && proto.skynet.types.ConditionalResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.NodeExecutionResponse}
 */
proto.skynet.types.NodeExecutionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.NodeExecutionResponse;
  return proto.skynet.types.NodeExecutionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.NodeExecutionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.NodeExecutionResponse}
 */
proto.skynet.types.NodeExecutionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skynet.types.PromptResponse;
      reader.readMessage(value,proto.skynet.types.PromptResponse.deserializeBinaryFromReader);
      msg.setPromptResponse(value);
      break;
    case 2:
      var value = new proto.skynet.types.CommandResponse;
      reader.readMessage(value,proto.skynet.types.CommandResponse.deserializeBinaryFromReader);
      msg.setCommandResponse(value);
      break;
    case 3:
      var value = new proto.skynet.types.ConditionalResponse;
      reader.readMessage(value,proto.skynet.types.ConditionalResponse.deserializeBinaryFromReader);
      msg.setConditionalResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.NodeExecutionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.NodeExecutionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.NodeExecutionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.NodeExecutionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromptResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.skynet.types.PromptResponse.serializeBinaryToWriter
    );
  }
  f = message.getCommandResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.skynet.types.CommandResponse.serializeBinaryToWriter
    );
  }
  f = message.getConditionalResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.skynet.types.ConditionalResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional PromptResponse prompt_response = 1;
 * @return {?proto.skynet.types.PromptResponse}
 */
proto.skynet.types.NodeExecutionResponse.prototype.getPromptResponse = function() {
  return /** @type{?proto.skynet.types.PromptResponse} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.PromptResponse, 1));
};


/**
 * @param {?proto.skynet.types.PromptResponse|undefined} value
 * @return {!proto.skynet.types.NodeExecutionResponse} returns this
*/
proto.skynet.types.NodeExecutionResponse.prototype.setPromptResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.skynet.types.NodeExecutionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.NodeExecutionResponse} returns this
 */
proto.skynet.types.NodeExecutionResponse.prototype.clearPromptResponse = function() {
  return this.setPromptResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.NodeExecutionResponse.prototype.hasPromptResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommandResponse command_response = 2;
 * @return {?proto.skynet.types.CommandResponse}
 */
proto.skynet.types.NodeExecutionResponse.prototype.getCommandResponse = function() {
  return /** @type{?proto.skynet.types.CommandResponse} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.CommandResponse, 2));
};


/**
 * @param {?proto.skynet.types.CommandResponse|undefined} value
 * @return {!proto.skynet.types.NodeExecutionResponse} returns this
*/
proto.skynet.types.NodeExecutionResponse.prototype.setCommandResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.skynet.types.NodeExecutionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.NodeExecutionResponse} returns this
 */
proto.skynet.types.NodeExecutionResponse.prototype.clearCommandResponse = function() {
  return this.setCommandResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.NodeExecutionResponse.prototype.hasCommandResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConditionalResponse conditional_response = 3;
 * @return {?proto.skynet.types.ConditionalResponse}
 */
proto.skynet.types.NodeExecutionResponse.prototype.getConditionalResponse = function() {
  return /** @type{?proto.skynet.types.ConditionalResponse} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.ConditionalResponse, 3));
};


/**
 * @param {?proto.skynet.types.ConditionalResponse|undefined} value
 * @return {!proto.skynet.types.NodeExecutionResponse} returns this
*/
proto.skynet.types.NodeExecutionResponse.prototype.setConditionalResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.skynet.types.NodeExecutionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.NodeExecutionResponse} returns this
 */
proto.skynet.types.NodeExecutionResponse.prototype.clearConditionalResponse = function() {
  return this.setConditionalResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.NodeExecutionResponse.prototype.hasConditionalResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.ExecutionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.ExecutionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.ExecutionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ExecutionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    executionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    containerExecutionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    currentNodeId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currentNodeType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    response: (f = msg.getResponse()) && proto.skynet.types.NodeExecutionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.ExecutionResponse}
 */
proto.skynet.types.ExecutionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.ExecutionResponse;
  return proto.skynet.types.ExecutionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.ExecutionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.ExecutionResponse}
 */
proto.skynet.types.ExecutionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerExecutionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentNodeId(value);
      break;
    case 4:
      var value = /** @type {!proto.skynet.types.NodeTypeNames} */ (reader.readEnum());
      msg.setCurrentNodeType(value);
      break;
    case 5:
      var value = new proto.skynet.types.NodeExecutionResponse;
      reader.readMessage(value,proto.skynet.types.NodeExecutionResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.ExecutionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.ExecutionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.ExecutionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ExecutionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContainerExecutionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrentNodeId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrentNodeType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.skynet.types.NodeExecutionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string execution_id = 1;
 * @return {string}
 */
proto.skynet.types.ExecutionResponse.prototype.getExecutionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ExecutionResponse} returns this
 */
proto.skynet.types.ExecutionResponse.prototype.setExecutionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string container_execution_id = 2;
 * @return {string}
 */
proto.skynet.types.ExecutionResponse.prototype.getContainerExecutionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ExecutionResponse} returns this
 */
proto.skynet.types.ExecutionResponse.prototype.setContainerExecutionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string current_node_id = 3;
 * @return {string}
 */
proto.skynet.types.ExecutionResponse.prototype.getCurrentNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ExecutionResponse} returns this
 */
proto.skynet.types.ExecutionResponse.prototype.setCurrentNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional NodeTypeNames current_node_type = 4;
 * @return {!proto.skynet.types.NodeTypeNames}
 */
proto.skynet.types.ExecutionResponse.prototype.getCurrentNodeType = function() {
  return /** @type {!proto.skynet.types.NodeTypeNames} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.skynet.types.NodeTypeNames} value
 * @return {!proto.skynet.types.ExecutionResponse} returns this
 */
proto.skynet.types.ExecutionResponse.prototype.setCurrentNodeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional NodeExecutionResponse response = 5;
 * @return {?proto.skynet.types.NodeExecutionResponse}
 */
proto.skynet.types.ExecutionResponse.prototype.getResponse = function() {
  return /** @type{?proto.skynet.types.NodeExecutionResponse} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.NodeExecutionResponse, 5));
};


/**
 * @param {?proto.skynet.types.NodeExecutionResponse|undefined} value
 * @return {!proto.skynet.types.ExecutionResponse} returns this
*/
proto.skynet.types.ExecutionResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.ExecutionResponse} returns this
 */
proto.skynet.types.ExecutionResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.ExecutionResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skynet.types.ResponseObject.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.skynet.types.ResponseObject.ObjectCase = {
  OBJECT_NOT_SET: 0,
  NODE: 1,
  AUTHENTICATION_MESSAGE: 2,
  USER_SETTINGS: 3,
  EXECUTION_RESPONSE: 4
};

/**
 * @return {proto.skynet.types.ResponseObject.ObjectCase}
 */
proto.skynet.types.ResponseObject.prototype.getObjectCase = function() {
  return /** @type {proto.skynet.types.ResponseObject.ObjectCase} */(jspb.Message.computeOneofCase(this, proto.skynet.types.ResponseObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skynet.types.ResponseObject.prototype.toObject = function(opt_includeInstance) {
  return proto.skynet.types.ResponseObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skynet.types.ResponseObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ResponseObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.skynet.types.Node.toObject(includeInstance, f),
    authenticationMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userSettings: jspb.Message.getFieldWithDefault(msg, 3, ""),
    executionResponse: (f = msg.getExecutionResponse()) && proto.skynet.types.ExecutionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skynet.types.ResponseObject}
 */
proto.skynet.types.ResponseObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skynet.types.ResponseObject;
  return proto.skynet.types.ResponseObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skynet.types.ResponseObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skynet.types.ResponseObject}
 */
proto.skynet.types.ResponseObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skynet.types.Node;
      reader.readMessage(value,proto.skynet.types.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthenticationMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserSettings(value);
      break;
    case 4:
      var value = new proto.skynet.types.ExecutionResponse;
      reader.readMessage(value,proto.skynet.types.ExecutionResponse.deserializeBinaryFromReader);
      msg.setExecutionResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skynet.types.ResponseObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skynet.types.ResponseObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skynet.types.ResponseObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skynet.types.ResponseObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.skynet.types.Node.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExecutionResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.skynet.types.ExecutionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node node = 1;
 * @return {?proto.skynet.types.Node}
 */
proto.skynet.types.ResponseObject.prototype.getNode = function() {
  return /** @type{?proto.skynet.types.Node} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.Node, 1));
};


/**
 * @param {?proto.skynet.types.Node|undefined} value
 * @return {!proto.skynet.types.ResponseObject} returns this
*/
proto.skynet.types.ResponseObject.prototype.setNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.skynet.types.ResponseObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.ResponseObject} returns this
 */
proto.skynet.types.ResponseObject.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.ResponseObject.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string authentication_message = 2;
 * @return {string}
 */
proto.skynet.types.ResponseObject.prototype.getAuthenticationMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ResponseObject} returns this
 */
proto.skynet.types.ResponseObject.prototype.setAuthenticationMessage = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.skynet.types.ResponseObject.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.skynet.types.ResponseObject} returns this
 */
proto.skynet.types.ResponseObject.prototype.clearAuthenticationMessage = function() {
  return jspb.Message.setOneofField(this, 2, proto.skynet.types.ResponseObject.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.ResponseObject.prototype.hasAuthenticationMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string user_settings = 3;
 * @return {string}
 */
proto.skynet.types.ResponseObject.prototype.getUserSettings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.skynet.types.ResponseObject} returns this
 */
proto.skynet.types.ResponseObject.prototype.setUserSettings = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.skynet.types.ResponseObject.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.skynet.types.ResponseObject} returns this
 */
proto.skynet.types.ResponseObject.prototype.clearUserSettings = function() {
  return jspb.Message.setOneofField(this, 3, proto.skynet.types.ResponseObject.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.ResponseObject.prototype.hasUserSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExecutionResponse execution_response = 4;
 * @return {?proto.skynet.types.ExecutionResponse}
 */
proto.skynet.types.ResponseObject.prototype.getExecutionResponse = function() {
  return /** @type{?proto.skynet.types.ExecutionResponse} */ (
    jspb.Message.getWrapperField(this, proto.skynet.types.ExecutionResponse, 4));
};


/**
 * @param {?proto.skynet.types.ExecutionResponse|undefined} value
 * @return {!proto.skynet.types.ResponseObject} returns this
*/
proto.skynet.types.ResponseObject.prototype.setExecutionResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.skynet.types.ResponseObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skynet.types.ResponseObject} returns this
 */
proto.skynet.types.ResponseObject.prototype.clearExecutionResponse = function() {
  return this.setExecutionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skynet.types.ResponseObject.prototype.hasExecutionResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.skynet.types.NodeTypeNames = {
  PROMPT: 0,
  PROCESS: 1,
  CONDITIONAL: 2,
  COMMAND: 3
};

/**
 * @enum {number}
 */
proto.skynet.types.SystemErrors = {
  GRAPH_DOESNT_EXIST: 0,
  GRAPH_STATE_DOESNT_EXIST: 1,
  OTHER_ERROR: 2,
  NODE_DOESNT_EXIST: 3
};

/**
 * @enum {number}
 */
proto.skynet.types.VerbTypeNames = {
  POST: 0,
  PUT: 1,
  PATCH: 2,
  DELETE: 3,
  GET: 4,
  EXECUTE: 5
};

goog.object.extend(exports, proto.skynet.types);
