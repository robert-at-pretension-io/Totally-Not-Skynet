/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: system_types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/wrappers";
import * as pb_1 from "google-protobuf";
export enum NodeTypeNames {
    PROMPT = 0,
    PROCESS = 1,
    CONDITIONAL = 2,
    COMMAND = 3
}
export enum SystemErrors {
    GRAPH_DOESNT_EXIST = 0,
    GRAPH_STATE_DOESNT_EXIST = 1,
    OTHER_ERROR = 2,
    NODE_DOESNT_EXIST = 3
}
export enum VerbTypeNames {
    Post = 0,
    Put = 1,
    Patch = 2,
    Delete = 3,
    Get = 4,
    Execute = 5
}
export class GraphNodeInfo extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        id?: string;
        name?: string;
        description?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("id" in data && data.id != undefined) {
        this.id = data.id;
      }
      if ("name" in data && data.name != undefined) {
        this.name = data.name;
      }
      if ("description" in data && data.description != undefined) {
        this.description = data.description;
      }
    }
  }
  get id() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get name() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set name(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get description() {
    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
  }
  set description(value: string) {
    pb_1.Message.setField(this, 3, value);
  }
  static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
    }): GraphNodeInfo {
    const message = new GraphNodeInfo({});
    if (data.id != null) {
      message.id = data.id;
    }
    if (data.name != null) {
      message.name = data.name;
    }
    if (data.description != null) {
      message.description = data.description;
    }
    return message;
  }
  toObject() {
    const data: {
            id?: string;
            name?: string;
            description?: string;
        } = {};
    if (this.id != null) {
      data.id = this.id;
    }
    if (this.name != null) {
      data.name = this.name;
    }
    if (this.description != null) {
      data.description = this.description;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.id.length)
      writer.writeString(1, this.id);
    if (this.name.length)
      writer.writeString(2, this.name);
    if (this.description.length)
      writer.writeString(3, this.description);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GraphNodeInfo {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GraphNodeInfo();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.id = reader.readString();
        break;
      case 2:
        message.name = reader.readString();
        break;
      case 3:
        message.description = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): GraphNodeInfo {
    return GraphNodeInfo.deserialize(bytes);
  }
}
export class Edge extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        source?: GraphNodeInfo;
        target?: GraphNodeInfo;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("source" in data && data.source != undefined) {
        this.source = data.source;
      }
      if ("target" in data && data.target != undefined) {
        this.target = data.target;
      }
    }
  }
  get source() {
    return pb_1.Message.getWrapperField(this, GraphNodeInfo, 1) as GraphNodeInfo;
  }
  set source(value: GraphNodeInfo) {
    pb_1.Message.setWrapperField(this, 1, value);
  }
  get has_source() {
    return pb_1.Message.getField(this, 1) != null;
  }
  get target() {
    return pb_1.Message.getWrapperField(this, GraphNodeInfo, 2) as GraphNodeInfo;
  }
  set target(value: GraphNodeInfo) {
    pb_1.Message.setWrapperField(this, 2, value);
  }
  get has_target() {
    return pb_1.Message.getField(this, 2) != null;
  }
  static fromObject(data: {
        source?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
        target?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
    }): Edge {
    const message = new Edge({});
    if (data.source != null) {
      message.source = GraphNodeInfo.fromObject(data.source);
    }
    if (data.target != null) {
      message.target = GraphNodeInfo.fromObject(data.target);
    }
    return message;
  }
  toObject() {
    const data: {
            source?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
            target?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
        } = {};
    if (this.source != null) {
      data.source = this.source.toObject();
    }
    if (this.target != null) {
      data.target = this.target.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_source)
      writer.writeMessage(1, this.source, () => this.source.serialize(writer));
    if (this.has_target)
      writer.writeMessage(2, this.target, () => this.target.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Edge {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Edge();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.source, () => message.source = GraphNodeInfo.deserialize(reader));
        break;
      case 2:
        reader.readMessage(message.target, () => message.target = GraphNodeInfo.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Edge {
    return Edge.deserialize(bytes);
  }
}
export class Prompt extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        prompt?: string;
        system?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("prompt" in data && data.prompt != undefined) {
        this.prompt = data.prompt;
      }
      if ("system" in data && data.system != undefined) {
        this.system = data.system;
      }
    }
  }
  get prompt() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set prompt(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get system() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set system(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
        prompt?: string;
        system?: string;
    }): Prompt {
    const message = new Prompt({});
    if (data.prompt != null) {
      message.prompt = data.prompt;
    }
    if (data.system != null) {
      message.system = data.system;
    }
    return message;
  }
  toObject() {
    const data: {
            prompt?: string;
            system?: string;
        } = {};
    if (this.prompt != null) {
      data.prompt = this.prompt;
    }
    if (this.system != null) {
      data.system = this.system;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.prompt.length)
      writer.writeString(1, this.prompt);
    if (this.system.length)
      writer.writeString(2, this.system);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Prompt {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Prompt();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.prompt = reader.readString();
        break;
      case 2:
        message.system = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Prompt {
    return Prompt.deserialize(bytes);
  }
}
export class Command extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        command?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("command" in data && data.command != undefined) {
        this.command = data.command;
      }
    }
  }
  get command() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set command(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: {
        command?: string;
    }): Command {
    const message = new Command({});
    if (data.command != null) {
      message.command = data.command;
    }
    return message;
  }
  toObject() {
    const data: {
            command?: string;
        } = {};
    if (this.command != null) {
      data.command = this.command;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.command.length)
      writer.writeString(1, this.command);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.command = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Command {
    return Command.deserialize(bytes);
  }
}
export class Conditional extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        system_variables?: Map<string, string>;
        statement?: string;
        options?: Map<string, string>;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("system_variables" in data && data.system_variables != undefined) {
        this.system_variables = data.system_variables;
      }
      if ("statement" in data && data.statement != undefined) {
        this.statement = data.statement;
      }
      if ("options" in data && data.options != undefined) {
        this.options = data.options;
      }
    }
    if (!this.system_variables)
      this.system_variables = new Map();
    if (!this.options)
      this.options = new Map();
  }
  get system_variables() {
    return pb_1.Message.getField(this, 1) as any as Map<string, string>;
  }
  set system_variables(value: Map<string, string>) {
    pb_1.Message.setField(this, 1, value as any);
  }
  get statement() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set statement(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get options() {
    return pb_1.Message.getField(this, 3) as any as Map<string, string>;
  }
  set options(value: Map<string, string>) {
    pb_1.Message.setField(this, 3, value as any);
  }
  static fromObject(data: {
        system_variables?: {
            [key: string]: string;
        };
        statement?: string;
        options?: {
            [key: string]: string;
        };
    }): Conditional {
    const message = new Conditional({});
    if (typeof data.system_variables == "object") {
      message.system_variables = new Map(Object.entries(data.system_variables));
    }
    if (data.statement != null) {
      message.statement = data.statement;
    }
    if (typeof data.options == "object") {
      message.options = new Map(Object.entries(data.options));
    }
    return message;
  }
  toObject() {
    const data: {
            system_variables?: {
                [key: string]: string;
            };
            statement?: string;
            options?: {
                [key: string]: string;
            };
        } = {};
    if (this.system_variables != null) {
      data.system_variables = (Object.fromEntries)(this.system_variables);
    }
    if (this.statement != null) {
      data.statement = this.statement;
    }
    if (this.options != null) {
      data.options = (Object.fromEntries)(this.options);
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    for (const [key, value] of this.system_variables) {
      writer.writeMessage(1, this.system_variables, () => {
        writer.writeString(1, key);
        writer.writeString(2, value);
      });
    }
    if (this.statement.length)
      writer.writeString(2, this.statement);
    for (const [key, value] of this.options) {
      writer.writeMessage(3, this.options, () => {
        writer.writeString(1, key);
        writer.writeString(2, value);
      });
    }
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Conditional {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Conditional();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.system_variables as any, reader, reader.readString, reader.readString));
        break;
      case 2:
        message.statement = reader.readString();
        break;
      case 3:
        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.options as any, reader, reader.readString, reader.readString));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Conditional {
    return Conditional.deserialize(bytes);
  }
}
export class Graph extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        nodes?: GraphNodeInfo[];
        edges?: Edge[];
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("nodes" in data && data.nodes != undefined) {
        this.nodes = data.nodes;
      }
      if ("edges" in data && data.edges != undefined) {
        this.edges = data.edges;
      }
    }
  }
  get nodes() {
    return pb_1.Message.getRepeatedWrapperField(this, GraphNodeInfo, 1) as GraphNodeInfo[];
  }
  set nodes(value: GraphNodeInfo[]) {
    pb_1.Message.setRepeatedWrapperField(this, 1, value);
  }
  get edges() {
    return pb_1.Message.getRepeatedWrapperField(this, Edge, 2) as Edge[];
  }
  set edges(value: Edge[]) {
    pb_1.Message.setRepeatedWrapperField(this, 2, value);
  }
  static fromObject(data: {
        nodes?: ReturnType<typeof GraphNodeInfo.prototype.toObject>[];
        edges?: ReturnType<typeof Edge.prototype.toObject>[];
    }): Graph {
    const message = new Graph({});
    if (data.nodes != null) {
      message.nodes = data.nodes.map(item => GraphNodeInfo.fromObject(item));
    }
    if (data.edges != null) {
      message.edges = data.edges.map(item => Edge.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
            nodes?: ReturnType<typeof GraphNodeInfo.prototype.toObject>[];
            edges?: ReturnType<typeof Edge.prototype.toObject>[];
        } = {};
    if (this.nodes != null) {
      data.nodes = this.nodes.map((item: GraphNodeInfo) => item.toObject());
    }
    if (this.edges != null) {
      data.edges = this.edges.map((item: Edge) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.nodes.length)
      writer.writeRepeatedMessage(1, this.nodes, (item: GraphNodeInfo) => item.serialize(writer));
    if (this.edges.length)
      writer.writeRepeatedMessage(2, this.edges, (item: Edge) => item.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Graph {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Graph();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GraphNodeInfo.deserialize(reader), GraphNodeInfo));
        break;
      case 2:
        reader.readMessage(message.edges, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Edge.deserialize(reader), Edge));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Graph {
    return Graph.deserialize(bytes);
  }
}
export class Process extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        graph?: Graph;
        topological_order?: GraphNodeInfo[];
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("graph" in data && data.graph != undefined) {
        this.graph = data.graph;
      }
      if ("topological_order" in data && data.topological_order != undefined) {
        this.topological_order = data.topological_order;
      }
    }
  }
  get graph() {
    return pb_1.Message.getWrapperField(this, Graph, 1) as Graph;
  }
  set graph(value: Graph) {
    pb_1.Message.setWrapperField(this, 1, value);
  }
  get has_graph() {
    return pb_1.Message.getField(this, 1) != null;
  }
  get topological_order() {
    return pb_1.Message.getRepeatedWrapperField(this, GraphNodeInfo, 2) as GraphNodeInfo[];
  }
  set topological_order(value: GraphNodeInfo[]) {
    pb_1.Message.setRepeatedWrapperField(this, 2, value);
  }
  static fromObject(data: {
        graph?: ReturnType<typeof Graph.prototype.toObject>;
        topological_order?: ReturnType<typeof GraphNodeInfo.prototype.toObject>[];
    }): Process {
    const message = new Process({});
    if (data.graph != null) {
      message.graph = Graph.fromObject(data.graph);
    }
    if (data.topological_order != null) {
      message.topological_order = data.topological_order.map(item => GraphNodeInfo.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
            graph?: ReturnType<typeof Graph.prototype.toObject>;
            topological_order?: ReturnType<typeof GraphNodeInfo.prototype.toObject>[];
        } = {};
    if (this.graph != null) {
      data.graph = this.graph.toObject();
    }
    if (this.topological_order != null) {
      data.topological_order = this.topological_order.map((item: GraphNodeInfo) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_graph)
      writer.writeMessage(1, this.graph, () => this.graph.serialize(writer));
    if (this.topological_order.length)
      writer.writeRepeatedMessage(2, this.topological_order, (item: GraphNodeInfo) => item.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Process {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Process();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.graph, () => message.graph = Graph.deserialize(reader));
        break;
      case 2:
        reader.readMessage(message.topological_order, () => pb_1.Message.addToRepeatedWrapperField(message, 2, GraphNodeInfo.deserialize(reader), GraphNodeInfo));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Process {
    return Process.deserialize(bytes);
  }
}
export class Node extends pb_1.Message {
  #one_of_decls: number[][] = [[5, 6, 7, 8]];
  constructor(data?: any[] | ({
        node_info?: GraphNodeInfo;
        type_name?: NodeTypeNames;
        input_variables?: string[];
        output_variables?: string[];
    } & (({
        prompt?: Prompt;
        process?: never;
        conditional?: never;
        command?: never;
    } | {
        prompt?: never;
        process?: Process;
        conditional?: never;
        command?: never;
    } | {
        prompt?: never;
        process?: never;
        conditional?: Conditional;
        command?: never;
    } | {
        prompt?: never;
        process?: never;
        conditional?: never;
        command?: Command;
    })))) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("node_info" in data && data.node_info != undefined) {
        this.node_info = data.node_info;
      }
      if ("type_name" in data && data.type_name != undefined) {
        this.type_name = data.type_name;
      }
      if ("input_variables" in data && data.input_variables != undefined) {
        this.input_variables = data.input_variables;
      }
      if ("output_variables" in data && data.output_variables != undefined) {
        this.output_variables = data.output_variables;
      }
      if ("prompt" in data && data.prompt != undefined) {
        this.prompt = data.prompt;
      }
      if ("process" in data && data.process != undefined) {
        this.process = data.process;
      }
      if ("conditional" in data && data.conditional != undefined) {
        this.conditional = data.conditional;
      }
      if ("command" in data && data.command != undefined) {
        this.command = data.command;
      }
    }
  }
  get node_info() {
    return pb_1.Message.getWrapperField(this, GraphNodeInfo, 1) as GraphNodeInfo;
  }
  set node_info(value: GraphNodeInfo) {
    pb_1.Message.setWrapperField(this, 1, value);
  }
  get has_node_info() {
    return pb_1.Message.getField(this, 1) != null;
  }
  get type_name() {
    return pb_1.Message.getFieldWithDefault(this, 2, NodeTypeNames.PROMPT) as NodeTypeNames;
  }
  set type_name(value: NodeTypeNames) {
    pb_1.Message.setField(this, 2, value);
  }
  get input_variables() {
    return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
  }
  set input_variables(value: string[]) {
    pb_1.Message.setField(this, 3, value);
  }
  get output_variables() {
    return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
  }
  set output_variables(value: string[]) {
    pb_1.Message.setField(this, 4, value);
  }
  get prompt() {
    return pb_1.Message.getWrapperField(this, Prompt, 5) as Prompt;
  }
  set prompt(value: Prompt) {
    pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
  }
  get has_prompt() {
    return pb_1.Message.getField(this, 5) != null;
  }
  get process() {
    return pb_1.Message.getWrapperField(this, Process, 6) as Process;
  }
  set process(value: Process) {
    pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
  }
  get has_process() {
    return pb_1.Message.getField(this, 6) != null;
  }
  get conditional() {
    return pb_1.Message.getWrapperField(this, Conditional, 7) as Conditional;
  }
  set conditional(value: Conditional) {
    pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
  }
  get has_conditional() {
    return pb_1.Message.getField(this, 7) != null;
  }
  get command() {
    return pb_1.Message.getWrapperField(this, Command, 8) as Command;
  }
  set command(value: Command) {
    pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
  }
  get has_command() {
    return pb_1.Message.getField(this, 8) != null;
  }
  get node_content() {
    const cases: {
            [index: number]: "none" | "prompt" | "process" | "conditional" | "command";
        } = {
          0: "none",
          5: "prompt",
          6: "process",
          7: "conditional",
          8: "command"
        };
    return cases[pb_1.Message.computeOneofCase(this, [5, 6, 7, 8])];
  }
  static fromObject(data: {
        node_info?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
        type_name?: NodeTypeNames;
        input_variables?: string[];
        output_variables?: string[];
        prompt?: ReturnType<typeof Prompt.prototype.toObject>;
        process?: ReturnType<typeof Process.prototype.toObject>;
        conditional?: ReturnType<typeof Conditional.prototype.toObject>;
        command?: ReturnType<typeof Command.prototype.toObject>;
    }): Node {
    const message = new Node({});
    if (data.node_info != null) {
      message.node_info = GraphNodeInfo.fromObject(data.node_info);
    }
    if (data.type_name != null) {
      message.type_name = data.type_name;
    }
    if (data.input_variables != null) {
      message.input_variables = data.input_variables;
    }
    if (data.output_variables != null) {
      message.output_variables = data.output_variables;
    }
    if (data.prompt != null) {
      message.prompt = Prompt.fromObject(data.prompt);
    }
    if (data.process != null) {
      message.process = Process.fromObject(data.process);
    }
    if (data.conditional != null) {
      message.conditional = Conditional.fromObject(data.conditional);
    }
    if (data.command != null) {
      message.command = Command.fromObject(data.command);
    }
    return message;
  }
  toObject() {
    const data: {
            node_info?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
            type_name?: NodeTypeNames;
            input_variables?: string[];
            output_variables?: string[];
            prompt?: ReturnType<typeof Prompt.prototype.toObject>;
            process?: ReturnType<typeof Process.prototype.toObject>;
            conditional?: ReturnType<typeof Conditional.prototype.toObject>;
            command?: ReturnType<typeof Command.prototype.toObject>;
        } = {};
    if (this.node_info != null) {
      data.node_info = this.node_info.toObject();
    }
    if (this.type_name != null) {
      data.type_name = this.type_name;
    }
    if (this.input_variables != null) {
      data.input_variables = this.input_variables;
    }
    if (this.output_variables != null) {
      data.output_variables = this.output_variables;
    }
    if (this.prompt != null) {
      data.prompt = this.prompt.toObject();
    }
    if (this.process != null) {
      data.process = this.process.toObject();
    }
    if (this.conditional != null) {
      data.conditional = this.conditional.toObject();
    }
    if (this.command != null) {
      data.command = this.command.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_node_info)
      writer.writeMessage(1, this.node_info, () => this.node_info.serialize(writer));
    if (this.type_name != NodeTypeNames.PROMPT)
      writer.writeEnum(2, this.type_name);
    if (this.input_variables.length)
      writer.writeRepeatedString(3, this.input_variables);
    if (this.output_variables.length)
      writer.writeRepeatedString(4, this.output_variables);
    if (this.has_prompt)
      writer.writeMessage(5, this.prompt, () => this.prompt.serialize(writer));
    if (this.has_process)
      writer.writeMessage(6, this.process, () => this.process.serialize(writer));
    if (this.has_conditional)
      writer.writeMessage(7, this.conditional, () => this.conditional.serialize(writer));
    if (this.has_command)
      writer.writeMessage(8, this.command, () => this.command.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Node {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Node();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.node_info, () => message.node_info = GraphNodeInfo.deserialize(reader));
        break;
      case 2:
        message.type_name = reader.readEnum();
        break;
      case 3:
        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
        break;
      case 4:
        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
        break;
      case 5:
        reader.readMessage(message.prompt, () => message.prompt = Prompt.deserialize(reader));
        break;
      case 6:
        reader.readMessage(message.process, () => message.process = Process.deserialize(reader));
        break;
      case 7:
        reader.readMessage(message.conditional, () => message.conditional = Conditional.deserialize(reader));
        break;
      case 8:
        reader.readMessage(message.command, () => message.command = Command.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Node {
    return Node.deserialize(bytes);
  }
}
export class ExecutionContext extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        topological_order?: string[];
        current_node?: Node;
        global_variables?: Map<string, string>;
        execution_id?: string;
        return_execution_id?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("topological_order" in data && data.topological_order != undefined) {
        this.topological_order = data.topological_order;
      }
      if ("current_node" in data && data.current_node != undefined) {
        this.current_node = data.current_node;
      }
      if ("global_variables" in data && data.global_variables != undefined) {
        this.global_variables = data.global_variables;
      }
      if ("execution_id" in data && data.execution_id != undefined) {
        this.execution_id = data.execution_id;
      }
      if ("return_execution_id" in data && data.return_execution_id != undefined) {
        this.return_execution_id = data.return_execution_id;
      }
    }
    if (!this.global_variables)
      this.global_variables = new Map();
  }
  get topological_order() {
    return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
  }
  set topological_order(value: string[]) {
    pb_1.Message.setField(this, 1, value);
  }
  get current_node() {
    return pb_1.Message.getWrapperField(this, Node, 2) as Node;
  }
  set current_node(value: Node) {
    pb_1.Message.setWrapperField(this, 2, value);
  }
  get has_current_node() {
    return pb_1.Message.getField(this, 2) != null;
  }
  get global_variables() {
    return pb_1.Message.getField(this, 3) as any as Map<string, string>;
  }
  set global_variables(value: Map<string, string>) {
    pb_1.Message.setField(this, 3, value as any);
  }
  get execution_id() {
    return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
  }
  set execution_id(value: string) {
    pb_1.Message.setField(this, 4, value);
  }
  get return_execution_id() {
    return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
  }
  set return_execution_id(value: string) {
    pb_1.Message.setField(this, 5, value);
  }
  static fromObject(data: {
        topological_order?: string[];
        current_node?: ReturnType<typeof Node.prototype.toObject>;
        global_variables?: {
            [key: string]: string;
        };
        execution_id?: string;
        return_execution_id?: string;
    }): ExecutionContext {
    const message = new ExecutionContext({});
    if (data.topological_order != null) {
      message.topological_order = data.topological_order;
    }
    if (data.current_node != null) {
      message.current_node = Node.fromObject(data.current_node);
    }
    if (typeof data.global_variables == "object") {
      message.global_variables = new Map(Object.entries(data.global_variables));
    }
    if (data.execution_id != null) {
      message.execution_id = data.execution_id;
    }
    if (data.return_execution_id != null) {
      message.return_execution_id = data.return_execution_id;
    }
    return message;
  }
  toObject() {
    const data: {
            topological_order?: string[];
            current_node?: ReturnType<typeof Node.prototype.toObject>;
            global_variables?: {
                [key: string]: string;
            };
            execution_id?: string;
            return_execution_id?: string;
        } = {};
    if (this.topological_order != null) {
      data.topological_order = this.topological_order;
    }
    if (this.current_node != null) {
      data.current_node = this.current_node.toObject();
    }
    if (this.global_variables != null) {
      data.global_variables = (Object.fromEntries)(this.global_variables);
    }
    if (this.execution_id != null) {
      data.execution_id = this.execution_id;
    }
    if (this.return_execution_id != null) {
      data.return_execution_id = this.return_execution_id;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.topological_order.length)
      writer.writeRepeatedString(1, this.topological_order);
    if (this.has_current_node)
      writer.writeMessage(2, this.current_node, () => this.current_node.serialize(writer));
    for (const [key, value] of this.global_variables) {
      writer.writeMessage(3, this.global_variables, () => {
        writer.writeString(1, key);
        writer.writeString(2, value);
      });
    }
    if (this.execution_id.length)
      writer.writeString(4, this.execution_id);
    if (this.return_execution_id.length)
      writer.writeString(5, this.return_execution_id);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecutionContext {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecutionContext();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
        break;
      case 2:
        reader.readMessage(message.current_node, () => message.current_node = Node.deserialize(reader));
        break;
      case 3:
        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.global_variables as any, reader, reader.readString, reader.readString));
        break;
      case 4:
        message.execution_id = reader.readString();
        break;
      case 5:
        message.return_execution_id = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ExecutionContext {
    return ExecutionContext.deserialize(bytes);
  }
}
export class SystemState extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        authenticated?: boolean;
        websocket_ready?: boolean;
        graph?: Graph;
        nodes?: Node[];
        selected_node?: GraphNodeInfo[];
        selected_edge?: Edge[];
        execution_context?: ExecutionContext;
        selected_process?: Node;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("authenticated" in data && data.authenticated != undefined) {
        this.authenticated = data.authenticated;
      }
      if ("websocket_ready" in data && data.websocket_ready != undefined) {
        this.websocket_ready = data.websocket_ready;
      }
      if ("graph" in data && data.graph != undefined) {
        this.graph = data.graph;
      }
      if ("nodes" in data && data.nodes != undefined) {
        this.nodes = data.nodes;
      }
      if ("selected_node" in data && data.selected_node != undefined) {
        this.selected_node = data.selected_node;
      }
      if ("selected_edge" in data && data.selected_edge != undefined) {
        this.selected_edge = data.selected_edge;
      }
      if ("execution_context" in data && data.execution_context != undefined) {
        this.execution_context = data.execution_context;
      }
      if ("selected_process" in data && data.selected_process != undefined) {
        this.selected_process = data.selected_process;
      }
    }
  }
  get authenticated() {
    return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
  }
  set authenticated(value: boolean) {
    pb_1.Message.setField(this, 1, value);
  }
  get websocket_ready() {
    return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
  }
  set websocket_ready(value: boolean) {
    pb_1.Message.setField(this, 2, value);
  }
  get graph() {
    return pb_1.Message.getWrapperField(this, Graph, 3) as Graph;
  }
  set graph(value: Graph) {
    pb_1.Message.setWrapperField(this, 3, value);
  }
  get has_graph() {
    return pb_1.Message.getField(this, 3) != null;
  }
  get nodes() {
    return pb_1.Message.getRepeatedWrapperField(this, Node, 4) as Node[];
  }
  set nodes(value: Node[]) {
    pb_1.Message.setRepeatedWrapperField(this, 4, value);
  }
  get selected_node() {
    return pb_1.Message.getRepeatedWrapperField(this, GraphNodeInfo, 5) as GraphNodeInfo[];
  }
  set selected_node(value: GraphNodeInfo[]) {
    pb_1.Message.setRepeatedWrapperField(this, 5, value);
  }
  get selected_edge() {
    return pb_1.Message.getRepeatedWrapperField(this, Edge, 6) as Edge[];
  }
  set selected_edge(value: Edge[]) {
    pb_1.Message.setRepeatedWrapperField(this, 6, value);
  }
  get execution_context() {
    return pb_1.Message.getWrapperField(this, ExecutionContext, 7) as ExecutionContext;
  }
  set execution_context(value: ExecutionContext) {
    pb_1.Message.setWrapperField(this, 7, value);
  }
  get has_execution_context() {
    return pb_1.Message.getField(this, 7) != null;
  }
  get selected_process() {
    return pb_1.Message.getWrapperField(this, Node, 8) as Node;
  }
  set selected_process(value: Node) {
    pb_1.Message.setWrapperField(this, 8, value);
  }
  get has_selected_process() {
    return pb_1.Message.getField(this, 8) != null;
  }
  static fromObject(data: {
        authenticated?: boolean;
        websocket_ready?: boolean;
        graph?: ReturnType<typeof Graph.prototype.toObject>;
        nodes?: ReturnType<typeof Node.prototype.toObject>[];
        selected_node?: ReturnType<typeof GraphNodeInfo.prototype.toObject>[];
        selected_edge?: ReturnType<typeof Edge.prototype.toObject>[];
        execution_context?: ReturnType<typeof ExecutionContext.prototype.toObject>;
        selected_process?: ReturnType<typeof Node.prototype.toObject>;
    }): SystemState {
    const message = new SystemState({});
    if (data.authenticated != null) {
      message.authenticated = data.authenticated;
    }
    if (data.websocket_ready != null) {
      message.websocket_ready = data.websocket_ready;
    }
    if (data.graph != null) {
      message.graph = Graph.fromObject(data.graph);
    }
    if (data.nodes != null) {
      message.nodes = data.nodes.map(item => Node.fromObject(item));
    }
    if (data.selected_node != null) {
      message.selected_node = data.selected_node.map(item => GraphNodeInfo.fromObject(item));
    }
    if (data.selected_edge != null) {
      message.selected_edge = data.selected_edge.map(item => Edge.fromObject(item));
    }
    if (data.execution_context != null) {
      message.execution_context = ExecutionContext.fromObject(data.execution_context);
    }
    if (data.selected_process != null) {
      message.selected_process = Node.fromObject(data.selected_process);
    }
    return message;
  }
  toObject() {
    const data: {
            authenticated?: boolean;
            websocket_ready?: boolean;
            graph?: ReturnType<typeof Graph.prototype.toObject>;
            nodes?: ReturnType<typeof Node.prototype.toObject>[];
            selected_node?: ReturnType<typeof GraphNodeInfo.prototype.toObject>[];
            selected_edge?: ReturnType<typeof Edge.prototype.toObject>[];
            execution_context?: ReturnType<typeof ExecutionContext.prototype.toObject>;
            selected_process?: ReturnType<typeof Node.prototype.toObject>;
        } = {};
    if (this.authenticated != null) {
      data.authenticated = this.authenticated;
    }
    if (this.websocket_ready != null) {
      data.websocket_ready = this.websocket_ready;
    }
    if (this.graph != null) {
      data.graph = this.graph.toObject();
    }
    if (this.nodes != null) {
      data.nodes = this.nodes.map((item: Node) => item.toObject());
    }
    if (this.selected_node != null) {
      data.selected_node = this.selected_node.map((item: GraphNodeInfo) => item.toObject());
    }
    if (this.selected_edge != null) {
      data.selected_edge = this.selected_edge.map((item: Edge) => item.toObject());
    }
    if (this.execution_context != null) {
      data.execution_context = this.execution_context.toObject();
    }
    if (this.selected_process != null) {
      data.selected_process = this.selected_process.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.authenticated != false)
      writer.writeBool(1, this.authenticated);
    if (this.websocket_ready != false)
      writer.writeBool(2, this.websocket_ready);
    if (this.has_graph)
      writer.writeMessage(3, this.graph, () => this.graph.serialize(writer));
    if (this.nodes.length)
      writer.writeRepeatedMessage(4, this.nodes, (item: Node) => item.serialize(writer));
    if (this.selected_node.length)
      writer.writeRepeatedMessage(5, this.selected_node, (item: GraphNodeInfo) => item.serialize(writer));
    if (this.selected_edge.length)
      writer.writeRepeatedMessage(6, this.selected_edge, (item: Edge) => item.serialize(writer));
    if (this.has_execution_context)
      writer.writeMessage(7, this.execution_context, () => this.execution_context.serialize(writer));
    if (this.has_selected_process)
      writer.writeMessage(8, this.selected_process, () => this.selected_process.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SystemState {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SystemState();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.authenticated = reader.readBool();
        break;
      case 2:
        message.websocket_ready = reader.readBool();
        break;
      case 3:
        reader.readMessage(message.graph, () => message.graph = Graph.deserialize(reader));
        break;
      case 4:
        reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Node.deserialize(reader), Node));
        break;
      case 5:
        reader.readMessage(message.selected_node, () => pb_1.Message.addToRepeatedWrapperField(message, 5, GraphNodeInfo.deserialize(reader), GraphNodeInfo));
        break;
      case 6:
        reader.readMessage(message.selected_edge, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Edge.deserialize(reader), Edge));
        break;
      case 7:
        reader.readMessage(message.execution_context, () => message.execution_context = ExecutionContext.deserialize(reader));
        break;
      case 8:
        reader.readMessage(message.selected_process, () => message.selected_process = Node.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): SystemState {
    return SystemState.deserialize(bytes);
  }
}
export class AuthenticationMessage extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        client_email?: string;
        client_password?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("client_email" in data && data.client_email != undefined) {
        this.client_email = data.client_email;
      }
      if ("client_password" in data && data.client_password != undefined) {
        this.client_password = data.client_password;
      }
    }
  }
  get client_email() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set client_email(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get client_password() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set client_password(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
        client_email?: string;
        client_password?: string;
    }): AuthenticationMessage {
    const message = new AuthenticationMessage({});
    if (data.client_email != null) {
      message.client_email = data.client_email;
    }
    if (data.client_password != null) {
      message.client_password = data.client_password;
    }
    return message;
  }
  toObject() {
    const data: {
            client_email?: string;
            client_password?: string;
        } = {};
    if (this.client_email != null) {
      data.client_email = this.client_email;
    }
    if (this.client_password != null) {
      data.client_password = this.client_password;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.client_email.length)
      writer.writeString(1, this.client_email);
    if (this.client_password.length)
      writer.writeString(2, this.client_password);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticationMessage {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticationMessage();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.client_email = reader.readString();
        break;
      case 2:
        message.client_password = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): AuthenticationMessage {
    return AuthenticationMessage.deserialize(bytes);
  }
}
export class UserSettings extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        openai_api_key?: string;
        mongo_db_uri?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("openai_api_key" in data && data.openai_api_key != undefined) {
        this.openai_api_key = data.openai_api_key;
      }
      if ("mongo_db_uri" in data && data.mongo_db_uri != undefined) {
        this.mongo_db_uri = data.mongo_db_uri;
      }
    }
  }
  get openai_api_key() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set openai_api_key(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get mongo_db_uri() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set mongo_db_uri(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
        openai_api_key?: string;
        mongo_db_uri?: string;
    }): UserSettings {
    const message = new UserSettings({});
    if (data.openai_api_key != null) {
      message.openai_api_key = data.openai_api_key;
    }
    if (data.mongo_db_uri != null) {
      message.mongo_db_uri = data.mongo_db_uri;
    }
    return message;
  }
  toObject() {
    const data: {
            openai_api_key?: string;
            mongo_db_uri?: string;
        } = {};
    if (this.openai_api_key != null) {
      data.openai_api_key = this.openai_api_key;
    }
    if (this.mongo_db_uri != null) {
      data.mongo_db_uri = this.mongo_db_uri;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.openai_api_key.length)
      writer.writeString(1, this.openai_api_key);
    if (this.mongo_db_uri.length)
      writer.writeString(2, this.mongo_db_uri);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSettings {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSettings();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.openai_api_key = reader.readString();
        break;
      case 2:
        message.mongo_db_uri = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): UserSettings {
    return UserSettings.deserialize(bytes);
  }
}
export class ValidateNodes extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        nodes?: Node[];
        containing_node?: GraphNodeInfo;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("nodes" in data && data.nodes != undefined) {
        this.nodes = data.nodes;
      }
      if ("containing_node" in data && data.containing_node != undefined) {
        this.containing_node = data.containing_node;
      }
    }
  }
  get nodes() {
    return pb_1.Message.getRepeatedWrapperField(this, Node, 1) as Node[];
  }
  set nodes(value: Node[]) {
    pb_1.Message.setRepeatedWrapperField(this, 1, value);
  }
  get containing_node() {
    return pb_1.Message.getWrapperField(this, GraphNodeInfo, 2) as GraphNodeInfo;
  }
  set containing_node(value: GraphNodeInfo) {
    pb_1.Message.setWrapperField(this, 2, value);
  }
  get has_containing_node() {
    return pb_1.Message.getField(this, 2) != null;
  }
  static fromObject(data: {
        nodes?: ReturnType<typeof Node.prototype.toObject>[];
        containing_node?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
    }): ValidateNodes {
    const message = new ValidateNodes({});
    if (data.nodes != null) {
      message.nodes = data.nodes.map(item => Node.fromObject(item));
    }
    if (data.containing_node != null) {
      message.containing_node = GraphNodeInfo.fromObject(data.containing_node);
    }
    return message;
  }
  toObject() {
    const data: {
            nodes?: ReturnType<typeof Node.prototype.toObject>[];
            containing_node?: ReturnType<typeof GraphNodeInfo.prototype.toObject>;
        } = {};
    if (this.nodes != null) {
      data.nodes = this.nodes.map((item: Node) => item.toObject());
    }
    if (this.containing_node != null) {
      data.containing_node = this.containing_node.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.nodes.length)
      writer.writeRepeatedMessage(1, this.nodes, (item: Node) => item.serialize(writer));
    if (this.has_containing_node)
      writer.writeMessage(2, this.containing_node, () => this.containing_node.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateNodes {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateNodes();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Node.deserialize(reader), Node));
        break;
      case 2:
        reader.readMessage(message.containing_node, () => message.containing_node = GraphNodeInfo.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ValidateNodes {
    return ValidateNodes.deserialize(bytes);
  }
}
export class CrudBundle extends pb_1.Message {
  #one_of_decls: number[][] = [[2, 3, 4, 5, 6]];
  constructor(data?: any[] | ({
        verb?: VerbTypeNames;
    } & (({
        node?: Node;
        authentication_message?: never;
        user_settings?: never;
        execution_context?: never;
        validate_nodes?: never;
    } | {
        node?: never;
        authentication_message?: AuthenticationMessage;
        user_settings?: never;
        execution_context?: never;
        validate_nodes?: never;
    } | {
        node?: never;
        authentication_message?: never;
        user_settings?: UserSettings;
        execution_context?: never;
        validate_nodes?: never;
    } | {
        node?: never;
        authentication_message?: never;
        user_settings?: never;
        execution_context?: ExecutionContext;
        validate_nodes?: never;
    } | {
        node?: never;
        authentication_message?: never;
        user_settings?: never;
        execution_context?: never;
        validate_nodes?: ValidateNodes;
    })))) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("verb" in data && data.verb != undefined) {
        this.verb = data.verb;
      }
      if ("node" in data && data.node != undefined) {
        this.node = data.node;
      }
      if ("authentication_message" in data && data.authentication_message != undefined) {
        this.authentication_message = data.authentication_message;
      }
      if ("user_settings" in data && data.user_settings != undefined) {
        this.user_settings = data.user_settings;
      }
      if ("execution_context" in data && data.execution_context != undefined) {
        this.execution_context = data.execution_context;
      }
      if ("validate_nodes" in data && data.validate_nodes != undefined) {
        this.validate_nodes = data.validate_nodes;
      }
    }
  }
  get verb() {
    return pb_1.Message.getFieldWithDefault(this, 1, VerbTypeNames.Post) as VerbTypeNames;
  }
  set verb(value: VerbTypeNames) {
    pb_1.Message.setField(this, 1, value);
  }
  get node() {
    return pb_1.Message.getWrapperField(this, Node, 2) as Node;
  }
  set node(value: Node) {
    pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
  }
  get has_node() {
    return pb_1.Message.getField(this, 2) != null;
  }
  get authentication_message() {
    return pb_1.Message.getWrapperField(this, AuthenticationMessage, 3) as AuthenticationMessage;
  }
  set authentication_message(value: AuthenticationMessage) {
    pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
  }
  get has_authentication_message() {
    return pb_1.Message.getField(this, 3) != null;
  }
  get user_settings() {
    return pb_1.Message.getWrapperField(this, UserSettings, 4) as UserSettings;
  }
  set user_settings(value: UserSettings) {
    pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
  }
  get has_user_settings() {
    return pb_1.Message.getField(this, 4) != null;
  }
  get execution_context() {
    return pb_1.Message.getWrapperField(this, ExecutionContext, 5) as ExecutionContext;
  }
  set execution_context(value: ExecutionContext) {
    pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
  }
  get has_execution_context() {
    return pb_1.Message.getField(this, 5) != null;
  }
  get validate_nodes() {
    return pb_1.Message.getWrapperField(this, ValidateNodes, 6) as ValidateNodes;
  }
  set validate_nodes(value: ValidateNodes) {
    pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
  }
  get has_validate_nodes() {
    return pb_1.Message.getField(this, 6) != null;
  }
  get object() {
    const cases: {
            [index: number]: "none" | "node" | "authentication_message" | "user_settings" | "execution_context" | "validate_nodes";
        } = {
          0: "none",
          2: "node",
          3: "authentication_message",
          4: "user_settings",
          5: "execution_context",
          6: "validate_nodes"
        };
    return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6])];
  }
  static fromObject(data: {
        verb?: VerbTypeNames;
        node?: ReturnType<typeof Node.prototype.toObject>;
        authentication_message?: ReturnType<typeof AuthenticationMessage.prototype.toObject>;
        user_settings?: ReturnType<typeof UserSettings.prototype.toObject>;
        execution_context?: ReturnType<typeof ExecutionContext.prototype.toObject>;
        validate_nodes?: ReturnType<typeof ValidateNodes.prototype.toObject>;
    }): CrudBundle {
    const message = new CrudBundle({});
    if (data.verb != null) {
      message.verb = data.verb;
    }
    if (data.node != null) {
      message.node = Node.fromObject(data.node);
    }
    if (data.authentication_message != null) {
      message.authentication_message = AuthenticationMessage.fromObject(data.authentication_message);
    }
    if (data.user_settings != null) {
      message.user_settings = UserSettings.fromObject(data.user_settings);
    }
    if (data.execution_context != null) {
      message.execution_context = ExecutionContext.fromObject(data.execution_context);
    }
    if (data.validate_nodes != null) {
      message.validate_nodes = ValidateNodes.fromObject(data.validate_nodes);
    }
    return message;
  }
  toObject() {
    const data: {
            verb?: VerbTypeNames;
            node?: ReturnType<typeof Node.prototype.toObject>;
            authentication_message?: ReturnType<typeof AuthenticationMessage.prototype.toObject>;
            user_settings?: ReturnType<typeof UserSettings.prototype.toObject>;
            execution_context?: ReturnType<typeof ExecutionContext.prototype.toObject>;
            validate_nodes?: ReturnType<typeof ValidateNodes.prototype.toObject>;
        } = {};
    if (this.verb != null) {
      data.verb = this.verb;
    }
    if (this.node != null) {
      data.node = this.node.toObject();
    }
    if (this.authentication_message != null) {
      data.authentication_message = this.authentication_message.toObject();
    }
    if (this.user_settings != null) {
      data.user_settings = this.user_settings.toObject();
    }
    if (this.execution_context != null) {
      data.execution_context = this.execution_context.toObject();
    }
    if (this.validate_nodes != null) {
      data.validate_nodes = this.validate_nodes.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.verb != VerbTypeNames.Post)
      writer.writeEnum(1, this.verb);
    if (this.has_node)
      writer.writeMessage(2, this.node, () => this.node.serialize(writer));
    if (this.has_authentication_message)
      writer.writeMessage(3, this.authentication_message, () => this.authentication_message.serialize(writer));
    if (this.has_user_settings)
      writer.writeMessage(4, this.user_settings, () => this.user_settings.serialize(writer));
    if (this.has_execution_context)
      writer.writeMessage(5, this.execution_context, () => this.execution_context.serialize(writer));
    if (this.has_validate_nodes)
      writer.writeMessage(6, this.validate_nodes, () => this.validate_nodes.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CrudBundle {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CrudBundle();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.verb = reader.readEnum();
        break;
      case 2:
        reader.readMessage(message.node, () => message.node = Node.deserialize(reader));
        break;
      case 3:
        reader.readMessage(message.authentication_message, () => message.authentication_message = AuthenticationMessage.deserialize(reader));
        break;
      case 4:
        reader.readMessage(message.user_settings, () => message.user_settings = UserSettings.deserialize(reader));
        break;
      case 5:
        reader.readMessage(message.execution_context, () => message.execution_context = ExecutionContext.deserialize(reader));
        break;
      case 6:
        reader.readMessage(message.validate_nodes, () => message.validate_nodes = ValidateNodes.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): CrudBundle {
    return CrudBundle.deserialize(bytes);
  }
}
export class CommandResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        error?: dependency_1.StringValue;
        output?: dependency_1.StringValue;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("error" in data && data.error != undefined) {
        this.error = data.error;
      }
      if ("output" in data && data.output != undefined) {
        this.output = data.output;
      }
    }
  }
  get error() {
    return pb_1.Message.getWrapperField(this, dependency_1.StringValue, 1) as dependency_1.StringValue;
  }
  set error(value: dependency_1.StringValue) {
    pb_1.Message.setWrapperField(this, 1, value);
  }
  get has_error() {
    return pb_1.Message.getField(this, 1) != null;
  }
  get output() {
    return pb_1.Message.getWrapperField(this, dependency_1.StringValue, 2) as dependency_1.StringValue;
  }
  set output(value: dependency_1.StringValue) {
    pb_1.Message.setWrapperField(this, 2, value);
  }
  get has_output() {
    return pb_1.Message.getField(this, 2) != null;
  }
  static fromObject(data: {
        error?: ReturnType<typeof dependency_1.StringValue.prototype.toObject>;
        output?: ReturnType<typeof dependency_1.StringValue.prototype.toObject>;
    }): CommandResponse {
    const message = new CommandResponse({});
    if (data.error != null) {
      message.error = dependency_1.StringValue.fromObject(data.error);
    }
    if (data.output != null) {
      message.output = dependency_1.StringValue.fromObject(data.output);
    }
    return message;
  }
  toObject() {
    const data: {
            error?: ReturnType<typeof dependency_1.StringValue.prototype.toObject>;
            output?: ReturnType<typeof dependency_1.StringValue.prototype.toObject>;
        } = {};
    if (this.error != null) {
      data.error = this.error.toObject();
    }
    if (this.output != null) {
      data.output = this.output.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_error)
      writer.writeMessage(1, this.error, () => this.error.serialize(writer));
    if (this.has_output)
      writer.writeMessage(2, this.output, () => this.output.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommandResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommandResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.error, () => message.error = dependency_1.StringValue.deserialize(reader));
        break;
      case 2:
        reader.readMessage(message.output, () => message.output = dependency_1.StringValue.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): CommandResponse {
    return CommandResponse.deserialize(bytes);
  }
}
export class PromptResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        ai_text_response?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("ai_text_response" in data && data.ai_text_response != undefined) {
        this.ai_text_response = data.ai_text_response;
      }
    }
  }
  get ai_text_response() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set ai_text_response(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: {
        ai_text_response?: string;
    }): PromptResponse {
    const message = new PromptResponse({});
    if (data.ai_text_response != null) {
      message.ai_text_response = data.ai_text_response;
    }
    return message;
  }
  toObject() {
    const data: {
            ai_text_response?: string;
        } = {};
    if (this.ai_text_response != null) {
      data.ai_text_response = this.ai_text_response;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.ai_text_response.length)
      writer.writeString(1, this.ai_text_response);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromptResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PromptResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.ai_text_response = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): PromptResponse {
    return PromptResponse.deserialize(bytes);
  }
}
export class ConditionalResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        chosen_option?: string;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("chosen_option" in data && data.chosen_option != undefined) {
        this.chosen_option = data.chosen_option;
      }
    }
  }
  get chosen_option() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set chosen_option(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: {
        chosen_option?: string;
    }): ConditionalResponse {
    const message = new ConditionalResponse({});
    if (data.chosen_option != null) {
      message.chosen_option = data.chosen_option;
    }
    return message;
  }
  toObject() {
    const data: {
            chosen_option?: string;
        } = {};
    if (this.chosen_option != null) {
      data.chosen_option = this.chosen_option;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.chosen_option.length)
      writer.writeString(1, this.chosen_option);
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConditionalResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConditionalResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.chosen_option = reader.readString();
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ConditionalResponse {
    return ConditionalResponse.deserialize(bytes);
  }
}
export class NodeExecutionResponse extends pb_1.Message {
  #one_of_decls: number[][] = [[1, 2, 3]];
  constructor(data?: any[] | ({} & (({
        prompt_response?: PromptResponse;
        command_response?: never;
        conditional_response?: never;
    } | {
        prompt_response?: never;
        command_response?: CommandResponse;
        conditional_response?: never;
    } | {
        prompt_response?: never;
        command_response?: never;
        conditional_response?: ConditionalResponse;
    })))) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("prompt_response" in data && data.prompt_response != undefined) {
        this.prompt_response = data.prompt_response;
      }
      if ("command_response" in data && data.command_response != undefined) {
        this.command_response = data.command_response;
      }
      if ("conditional_response" in data && data.conditional_response != undefined) {
        this.conditional_response = data.conditional_response;
      }
    }
  }
  get prompt_response() {
    return pb_1.Message.getWrapperField(this, PromptResponse, 1) as PromptResponse;
  }
  set prompt_response(value: PromptResponse) {
    pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
  }
  get has_prompt_response() {
    return pb_1.Message.getField(this, 1) != null;
  }
  get command_response() {
    return pb_1.Message.getWrapperField(this, CommandResponse, 2) as CommandResponse;
  }
  set command_response(value: CommandResponse) {
    pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
  }
  get has_command_response() {
    return pb_1.Message.getField(this, 2) != null;
  }
  get conditional_response() {
    return pb_1.Message.getWrapperField(this, ConditionalResponse, 3) as ConditionalResponse;
  }
  set conditional_response(value: ConditionalResponse) {
    pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
  }
  get has_conditional_response() {
    return pb_1.Message.getField(this, 3) != null;
  }
  get response() {
    const cases: {
            [index: number]: "none" | "prompt_response" | "command_response" | "conditional_response";
        } = {
          0: "none",
          1: "prompt_response",
          2: "command_response",
          3: "conditional_response"
        };
    return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
  }
  static fromObject(data: {
        prompt_response?: ReturnType<typeof PromptResponse.prototype.toObject>;
        command_response?: ReturnType<typeof CommandResponse.prototype.toObject>;
        conditional_response?: ReturnType<typeof ConditionalResponse.prototype.toObject>;
    }): NodeExecutionResponse {
    const message = new NodeExecutionResponse({});
    if (data.prompt_response != null) {
      message.prompt_response = PromptResponse.fromObject(data.prompt_response);
    }
    if (data.command_response != null) {
      message.command_response = CommandResponse.fromObject(data.command_response);
    }
    if (data.conditional_response != null) {
      message.conditional_response = ConditionalResponse.fromObject(data.conditional_response);
    }
    return message;
  }
  toObject() {
    const data: {
            prompt_response?: ReturnType<typeof PromptResponse.prototype.toObject>;
            command_response?: ReturnType<typeof CommandResponse.prototype.toObject>;
            conditional_response?: ReturnType<typeof ConditionalResponse.prototype.toObject>;
        } = {};
    if (this.prompt_response != null) {
      data.prompt_response = this.prompt_response.toObject();
    }
    if (this.command_response != null) {
      data.command_response = this.command_response.toObject();
    }
    if (this.conditional_response != null) {
      data.conditional_response = this.conditional_response.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_prompt_response)
      writer.writeMessage(1, this.prompt_response, () => this.prompt_response.serialize(writer));
    if (this.has_command_response)
      writer.writeMessage(2, this.command_response, () => this.command_response.serialize(writer));
    if (this.has_conditional_response)
      writer.writeMessage(3, this.conditional_response, () => this.conditional_response.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeExecutionResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeExecutionResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.prompt_response, () => message.prompt_response = PromptResponse.deserialize(reader));
        break;
      case 2:
        reader.readMessage(message.command_response, () => message.command_response = CommandResponse.deserialize(reader));
        break;
      case 3:
        reader.readMessage(message.conditional_response, () => message.conditional_response = ConditionalResponse.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): NodeExecutionResponse {
    return NodeExecutionResponse.deserialize(bytes);
  }
}
export class ExecutionResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        execution_id?: string;
        container_execution_id?: string;
        current_node_id?: string;
        current_node_type?: NodeTypeNames;
        response?: NodeExecutionResponse;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("execution_id" in data && data.execution_id != undefined) {
        this.execution_id = data.execution_id;
      }
      if ("container_execution_id" in data && data.container_execution_id != undefined) {
        this.container_execution_id = data.container_execution_id;
      }
      if ("current_node_id" in data && data.current_node_id != undefined) {
        this.current_node_id = data.current_node_id;
      }
      if ("current_node_type" in data && data.current_node_type != undefined) {
        this.current_node_type = data.current_node_type;
      }
      if ("response" in data && data.response != undefined) {
        this.response = data.response;
      }
    }
  }
  get execution_id() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set execution_id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get container_execution_id() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set container_execution_id(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get current_node_id() {
    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
  }
  set current_node_id(value: string) {
    pb_1.Message.setField(this, 3, value);
  }
  get current_node_type() {
    return pb_1.Message.getFieldWithDefault(this, 4, NodeTypeNames.PROMPT) as NodeTypeNames;
  }
  set current_node_type(value: NodeTypeNames) {
    pb_1.Message.setField(this, 4, value);
  }
  get response() {
    return pb_1.Message.getWrapperField(this, NodeExecutionResponse, 5) as NodeExecutionResponse;
  }
  set response(value: NodeExecutionResponse) {
    pb_1.Message.setWrapperField(this, 5, value);
  }
  get has_response() {
    return pb_1.Message.getField(this, 5) != null;
  }
  static fromObject(data: {
        execution_id?: string;
        container_execution_id?: string;
        current_node_id?: string;
        current_node_type?: NodeTypeNames;
        response?: ReturnType<typeof NodeExecutionResponse.prototype.toObject>;
    }): ExecutionResponse {
    const message = new ExecutionResponse({});
    if (data.execution_id != null) {
      message.execution_id = data.execution_id;
    }
    if (data.container_execution_id != null) {
      message.container_execution_id = data.container_execution_id;
    }
    if (data.current_node_id != null) {
      message.current_node_id = data.current_node_id;
    }
    if (data.current_node_type != null) {
      message.current_node_type = data.current_node_type;
    }
    if (data.response != null) {
      message.response = NodeExecutionResponse.fromObject(data.response);
    }
    return message;
  }
  toObject() {
    const data: {
            execution_id?: string;
            container_execution_id?: string;
            current_node_id?: string;
            current_node_type?: NodeTypeNames;
            response?: ReturnType<typeof NodeExecutionResponse.prototype.toObject>;
        } = {};
    if (this.execution_id != null) {
      data.execution_id = this.execution_id;
    }
    if (this.container_execution_id != null) {
      data.container_execution_id = this.container_execution_id;
    }
    if (this.current_node_id != null) {
      data.current_node_id = this.current_node_id;
    }
    if (this.current_node_type != null) {
      data.current_node_type = this.current_node_type;
    }
    if (this.response != null) {
      data.response = this.response.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.execution_id.length)
      writer.writeString(1, this.execution_id);
    if (this.container_execution_id.length)
      writer.writeString(2, this.container_execution_id);
    if (this.current_node_id.length)
      writer.writeString(3, this.current_node_id);
    if (this.current_node_type != NodeTypeNames.PROMPT)
      writer.writeEnum(4, this.current_node_type);
    if (this.has_response)
      writer.writeMessage(5, this.response, () => this.response.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecutionResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecutionResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.execution_id = reader.readString();
        break;
      case 2:
        message.container_execution_id = reader.readString();
        break;
      case 3:
        message.current_node_id = reader.readString();
        break;
      case 4:
        message.current_node_type = reader.readEnum();
        break;
      case 5:
        reader.readMessage(message.response, () => message.response = NodeExecutionResponse.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ExecutionResponse {
    return ExecutionResponse.deserialize(bytes);
  }
}
export class ValidateNodesResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {
        errors?: SystemErrors[];
        process?: Node;
    }) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("errors" in data && data.errors != undefined) {
        this.errors = data.errors;
      }
      if ("process" in data && data.process != undefined) {
        this.process = data.process;
      }
    }
  }
  get errors() {
    return pb_1.Message.getFieldWithDefault(this, 1, []) as SystemErrors[];
  }
  set errors(value: SystemErrors[]) {
    pb_1.Message.setField(this, 1, value);
  }
  get process() {
    return pb_1.Message.getWrapperField(this, Node, 2) as Node;
  }
  set process(value: Node) {
    pb_1.Message.setWrapperField(this, 2, value);
  }
  get has_process() {
    return pb_1.Message.getField(this, 2) != null;
  }
  static fromObject(data: {
        errors?: SystemErrors[];
        process?: ReturnType<typeof Node.prototype.toObject>;
    }): ValidateNodesResponse {
    const message = new ValidateNodesResponse({});
    if (data.errors != null) {
      message.errors = data.errors;
    }
    if (data.process != null) {
      message.process = Node.fromObject(data.process);
    }
    return message;
  }
  toObject() {
    const data: {
            errors?: SystemErrors[];
            process?: ReturnType<typeof Node.prototype.toObject>;
        } = {};
    if (this.errors != null) {
      data.errors = this.errors;
    }
    if (this.process != null) {
      data.process = this.process.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.errors.length)
      writer.writePackedEnum(1, this.errors);
    if (this.has_process)
      writer.writeMessage(2, this.process, () => this.process.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateNodesResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateNodesResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        message.errors = reader.readPackedEnum();
        break;
      case 2:
        reader.readMessage(message.process, () => message.process = Node.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ValidateNodesResponse {
    return ValidateNodesResponse.deserialize(bytes);
  }
}
export class ResponseObject extends pb_1.Message {
  #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
  constructor(data?: any[] | ({} & (({
        node?: Node;
        authentication_message?: never;
        user_settings?: never;
        execution_response?: never;
        validate_nodes_response?: never;
    } | {
        node?: never;
        authentication_message?: string;
        user_settings?: never;
        execution_response?: never;
        validate_nodes_response?: never;
    } | {
        node?: never;
        authentication_message?: never;
        user_settings?: string;
        execution_response?: never;
        validate_nodes_response?: never;
    } | {
        node?: never;
        authentication_message?: never;
        user_settings?: never;
        execution_response?: ExecutionResponse;
        validate_nodes_response?: never;
    } | {
        node?: never;
        authentication_message?: never;
        user_settings?: never;
        execution_response?: never;
        validate_nodes_response?: ValidateNodesResponse;
    })))) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("node" in data && data.node != undefined) {
        this.node = data.node;
      }
      if ("authentication_message" in data && data.authentication_message != undefined) {
        this.authentication_message = data.authentication_message;
      }
      if ("user_settings" in data && data.user_settings != undefined) {
        this.user_settings = data.user_settings;
      }
      if ("execution_response" in data && data.execution_response != undefined) {
        this.execution_response = data.execution_response;
      }
      if ("validate_nodes_response" in data && data.validate_nodes_response != undefined) {
        this.validate_nodes_response = data.validate_nodes_response;
      }
    }
  }
  get node() {
    return pb_1.Message.getWrapperField(this, Node, 1) as Node;
  }
  set node(value: Node) {
    pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
  }
  get has_node() {
    return pb_1.Message.getField(this, 1) != null;
  }
  get authentication_message() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set authentication_message(value: string) {
    pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
  }
  get has_authentication_message() {
    return pb_1.Message.getField(this, 2) != null;
  }
  get user_settings() {
    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
  }
  set user_settings(value: string) {
    pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
  }
  get has_user_settings() {
    return pb_1.Message.getField(this, 3) != null;
  }
  get execution_response() {
    return pb_1.Message.getWrapperField(this, ExecutionResponse, 4) as ExecutionResponse;
  }
  set execution_response(value: ExecutionResponse) {
    pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
  }
  get has_execution_response() {
    return pb_1.Message.getField(this, 4) != null;
  }
  get validate_nodes_response() {
    return pb_1.Message.getWrapperField(this, ValidateNodesResponse, 5) as ValidateNodesResponse;
  }
  set validate_nodes_response(value: ValidateNodesResponse) {
    pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
  }
  get has_validate_nodes_response() {
    return pb_1.Message.getField(this, 5) != null;
  }
  get object() {
    const cases: {
            [index: number]: "none" | "node" | "authentication_message" | "user_settings" | "execution_response" | "validate_nodes_response";
        } = {
          0: "none",
          1: "node",
          2: "authentication_message",
          3: "user_settings",
          4: "execution_response",
          5: "validate_nodes_response"
        };
    return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
  }
  static fromObject(data: {
        node?: ReturnType<typeof Node.prototype.toObject>;
        authentication_message?: string;
        user_settings?: string;
        execution_response?: ReturnType<typeof ExecutionResponse.prototype.toObject>;
        validate_nodes_response?: ReturnType<typeof ValidateNodesResponse.prototype.toObject>;
    }): ResponseObject {
    const message = new ResponseObject({});
    if (data.node != null) {
      message.node = Node.fromObject(data.node);
    }
    if (data.authentication_message != null) {
      message.authentication_message = data.authentication_message;
    }
    if (data.user_settings != null) {
      message.user_settings = data.user_settings;
    }
    if (data.execution_response != null) {
      message.execution_response = ExecutionResponse.fromObject(data.execution_response);
    }
    if (data.validate_nodes_response != null) {
      message.validate_nodes_response = ValidateNodesResponse.fromObject(data.validate_nodes_response);
    }
    return message;
  }
  toObject() {
    const data: {
            node?: ReturnType<typeof Node.prototype.toObject>;
            authentication_message?: string;
            user_settings?: string;
            execution_response?: ReturnType<typeof ExecutionResponse.prototype.toObject>;
            validate_nodes_response?: ReturnType<typeof ValidateNodesResponse.prototype.toObject>;
        } = {};
    if (this.node != null) {
      data.node = this.node.toObject();
    }
    if (this.authentication_message != null) {
      data.authentication_message = this.authentication_message;
    }
    if (this.user_settings != null) {
      data.user_settings = this.user_settings;
    }
    if (this.execution_response != null) {
      data.execution_response = this.execution_response.toObject();
    }
    if (this.validate_nodes_response != null) {
      data.validate_nodes_response = this.validate_nodes_response.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_node)
      writer.writeMessage(1, this.node, () => this.node.serialize(writer));
    if (this.has_authentication_message)
      writer.writeString(2, this.authentication_message);
    if (this.has_user_settings)
      writer.writeString(3, this.user_settings);
    if (this.has_execution_response)
      writer.writeMessage(4, this.execution_response, () => this.execution_response.serialize(writer));
    if (this.has_validate_nodes_response)
      writer.writeMessage(5, this.validate_nodes_response, () => this.validate_nodes_response.serialize(writer));
    if (!w)
      return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseObject {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseObject();
    while (reader.nextField()) {
      if (reader.isEndGroup())
        break;
      switch (reader.getFieldNumber()) {
      case 1:
        reader.readMessage(message.node, () => message.node = Node.deserialize(reader));
        break;
      case 2:
        message.authentication_message = reader.readString();
        break;
      case 3:
        message.user_settings = reader.readString();
        break;
      case 4:
        reader.readMessage(message.execution_response, () => message.execution_response = ExecutionResponse.deserialize(reader));
        break;
      case 5:
        reader.readMessage(message.validate_nodes_response, () => message.validate_nodes_response = ValidateNodesResponse.deserialize(reader));
        break;
      default: reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ResponseObject {
    return ResponseObject.deserialize(bytes);
  }
}
