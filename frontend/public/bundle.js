
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$3() { }
    const identity$2 = x => x;
    function assign$3(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run$3(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run$3);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$3;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign$3($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function compute_slots(slots) {
        const result = {};
        for (const key in slots) {
            result[key] = true;
        }
        return result;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$3;
    }
    function split_css_unit(value) {
        const split = typeof value === 'string' && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
        return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];
    }

    const is_client = typeof window !== 'undefined';
    let now$2 = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf$1 = is_client ? cb => requestAnimationFrame(cb) : noop$3;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf$1(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf$1(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element$1('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element$1(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function select_option(select, value, mounting) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        if (!mounting || value !== undefined) {
            select.selectedIndex = -1; // no option should be selected
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked');
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf$1(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * Schedules a callback to run immediately before the component is updated after any state change.
     *
     * The first time the callback runs will be before the initial `onMount`
     *
     * https://svelte.dev/docs#run-time-svelte-beforeupdate
     */
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    /**
     * Associates an arbitrary `context` object with the current component and the specified `key`
     * and returns that object. The context is then available to children of the component
     * (including slotted content) with `getContext`.
     *
     * Like lifecycle functions, this must be called during component initialisation.
     *
     * https://svelte.dev/docs#run-time-svelte-setcontext
     */
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
        return context;
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }

    let promise$1;
    function wait() {
        if (!promise$1) {
            promise$1 = Promise.resolve();
            promise$1.then(() => {
                promise$1 = null;
            });
        }
        return promise$1;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        const options = { direction: 'in' };
        let config = fn(node, params, options);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity$2, tick = noop$3, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now$2() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config(options);
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        const options = { direction: 'out' };
        let config = fn(node, params, options);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity$2, tick = noop$3, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now$2() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config(options);
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        const updates = [];
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                // defer updates until all the DOM shuffling is done
                updates.push(() => block.p(child_ctx, dirty));
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        run_all(updates);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run$3).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop$3,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$3;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop$3;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.58.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    function construct_svelte_component_dev(component, props) {
        const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
        try {
            const instance = new component(props);
            if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
                throw new Error(error_message);
            }
            return instance;
        }
        catch (err) {
            const { message } = err;
            if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
                throw new Error(error_message);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$3) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$3) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$3;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0 && stop) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const websocket = new WebSocket("ws://localhost:8080");
    const websocketStore = writable(websocket);

    /* src/components/sidebarComponents/AddNodeButton.svelte generated by Svelte v3.58.0 */
    const file$b = "src/components/sidebarComponents/AddNodeButton.svelte";

    function create_fragment$c(ctx) {
    	let form;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let label1;
    	let t4;
    	let input1;
    	let t5;
    	let label2;
    	let t7;
    	let input2;
    	let t8;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element$1("form");
    			label0 = element$1("label");
    			label0.textContent = "Prompt";
    			t1 = space();
    			input0 = element$1("input");
    			t2 = space();
    			label1 = element$1("label");
    			label1.textContent = "Name";
    			t4 = space();
    			input1 = element$1("input");
    			t5 = space();
    			label2 = element$1("label");
    			label2.textContent = "System";
    			t7 = space();
    			input2 = element$1("input");
    			t8 = space();
    			button = element$1("button");
    			button.textContent = "Submit";
    			attr_dev(label0, "for", "prompt");
    			add_location(label0, file$b, 34, 2, 1324);
    			attr_dev(input0, "id", "prompt");
    			attr_dev(input0, "type", "text");
    			input0.required = true;
    			add_location(input0, file$b, 35, 2, 1361);
    			attr_dev(label1, "for", "name");
    			add_location(label1, file$b, 37, 2, 1432);
    			attr_dev(input1, "id", "name");
    			attr_dev(input1, "type", "text");
    			input1.required = true;
    			add_location(input1, file$b, 38, 2, 1465);
    			attr_dev(label2, "for", "system");
    			add_location(label2, file$b, 40, 2, 1532);
    			attr_dev(input2, "id", "system");
    			attr_dev(input2, "type", "text");
    			input2.required = true;
    			add_location(input2, file$b, 41, 2, 1569);
    			attr_dev(button, "type", "submit");
    			add_location(button, file$b, 43, 2, 1640);
    			add_location(form, file$b, 33, 0, 1275);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, label0);
    			append_dev(form, t1);
    			append_dev(form, input0);
    			set_input_value(input0, /*action*/ ctx[0].prompt);
    			append_dev(form, t2);
    			append_dev(form, label1);
    			append_dev(form, t4);
    			append_dev(form, input1);
    			set_input_value(input1, /*action*/ ctx[0].name);
    			append_dev(form, t5);
    			append_dev(form, label2);
    			append_dev(form, t7);
    			append_dev(form, input2);
    			set_input_value(input2, /*action*/ ctx[0].system);
    			append_dev(form, t8);
    			append_dev(form, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[2]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[3]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[4]),
    					listen_dev(form, "submit", prevent_default(/*localAddNode*/ ctx[1]), false, true, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*action*/ 1 && input0.value !== /*action*/ ctx[0].prompt) {
    				set_input_value(input0, /*action*/ ctx[0].prompt);
    			}

    			if (dirty & /*action*/ 1 && input1.value !== /*action*/ ctx[0].name) {
    				set_input_value(input1, /*action*/ ctx[0].name);
    			}

    			if (dirty & /*action*/ 1 && input2.value !== /*action*/ ctx[0].system) {
    				set_input_value(input2, /*action*/ ctx[0].system);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $websocketStore;
    	validate_store(websocketStore, 'websocketStore');
    	component_subscribe($$self, websocketStore, $$value => $$invalidate(5, $websocketStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AddNodeButton', slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let action = {
    		_id: "",
    		prompt: "",
    		name: "",
    		system: ""
    	};

    	function localAddNode() {
    		return __awaiter(this, void 0, void 0, function* () {
    			// The id should come from the mongod database after the creation of the action
    			// create the action in the database by sending a message to the backend
    			$websocketStore.send(JSON.stringify({ create_action: action }));
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AddNodeButton> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		action.prompt = this.value;
    		$$invalidate(0, action);
    	}

    	function input1_input_handler() {
    		action.name = this.value;
    		$$invalidate(0, action);
    	}

    	function input2_input_handler() {
    		action.system = this.value;
    		$$invalidate(0, action);
    	}

    	$$self.$capture_state = () => ({
    		__awaiter,
    		websocketStore,
    		action,
    		localAddNode,
    		$websocketStore
    	});

    	$$self.$inject_state = $$props => {
    		if ('__awaiter' in $$props) __awaiter = $$props.__awaiter;
    		if ('action' in $$props) $$invalidate(0, action = $$props.action);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		action,
    		localAddNode,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler
    	];
    }

    class AddNodeButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AddNodeButton",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src/components/sidebarComponents/SetOpenaiKey.svelte generated by Svelte v3.58.0 */

    const { console: console_1$5 } = globals;
    const file$a = "src/components/sidebarComponents/SetOpenaiKey.svelte";

    function create_fragment$b(ctx) {
    	let div;
    	let t0;
    	let input;
    	let t1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			t0 = space();
    			input = element$1("input");
    			t1 = space();
    			button = element$1("button");
    			button.textContent = "Set Key";
    			attr_dev(div, "id", "cy");
    			add_location(div, file$a, 9, 2, 325);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Enter the openai api key here.");
    			add_location(input, file$a, 10, 2, 343);
    			add_location(button, file$a, 11, 2, 432);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*apiKey*/ ctx[0]);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[2]),
    					listen_dev(button, "click", /*set_api_key*/ ctx[1], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*apiKey*/ 1 && input.value !== /*apiKey*/ ctx[0]) {
    				set_input_value(input, /*apiKey*/ ctx[0]);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $websocketStore;
    	validate_store(websocketStore, 'websocketStore');
    	component_subscribe($$self, websocketStore, $$value => $$invalidate(3, $websocketStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SetOpenaiKey', slots, []);
    	let apiKey = localStorage.getItem("apiKey") || "Api Key";

    	function set_api_key() {
    		localStorage.setItem("apiKey", apiKey);
    		$websocketStore.send(JSON.stringify({ key: apiKey }));
    		console.log("Set api key to: " + apiKey);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<SetOpenaiKey> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		apiKey = this.value;
    		$$invalidate(0, apiKey);
    	}

    	$$self.$capture_state = () => ({
    		websocketStore,
    		apiKey,
    		set_api_key,
    		$websocketStore
    	});

    	$$self.$inject_state = $$props => {
    		if ('apiKey' in $$props) $$invalidate(0, apiKey = $$props.apiKey);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [apiKey, set_api_key, input_input_handler];
    }

    class SetOpenaiKey extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SetOpenaiKey",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    // Create the store
    const aiSystemStore = writable({
        actions: [],
        messages: [],
        processes: []
    });

    var DEFAULT_EDGE_NAME$1 = "\x00";
    var GRAPH_NODE$1 = "\x00";
    var EDGE_KEY_DELIM$1 = "\x01";

    // Implementation notes:
    //
    //  * Node id query functions should return string ids for the nodes
    //  * Edge id query functions should return an "edgeObj", edge object, that is
    //    composed of enough information to uniquely identify an edge: {v, w, name}.
    //  * Internally we use an "edgeId", a stringified form of the edgeObj, to
    //    reference edges. This is because we need a performant way to look these
    //    edges up and, object properties, which have string keys, are the closest
    //    we're going to get to a performant hashtable in JavaScript.

    class Graph$9 {
      #isDirected = true;
      #isMultigraph = false;
      #isCompound = false;

      // Label for the graph itself
      #label;

      // Defaults to be set when creating a new node
      #defaultNodeLabelFn = () => undefined;

      // Defaults to be set when creating a new edge
      #defaultEdgeLabelFn = () => undefined;

      // v -> label
      #nodes = {};

      // v -> edgeObj
      #in = {};

      // u -> v -> Number
      #preds = {};

      // v -> edgeObj
      #out = {};

      // v -> w -> Number
      #sucs = {};

      // e -> edgeObj
      #edgeObjs = {};

      // e -> label
      #edgeLabels = {};

      /* Number of nodes in the graph. Should only be changed by the implementation. */
      #nodeCount = 0;

      /* Number of edges in the graph. Should only be changed by the implementation. */
      #edgeCount = 0;

      #parent;

      #children;

      constructor(opts) {
        if (opts) {
          this.#isDirected = opts.hasOwnProperty("directed") ? opts.directed : true;
          this.#isMultigraph = opts.hasOwnProperty("multigraph") ? opts.multigraph : false;
          this.#isCompound = opts.hasOwnProperty("compound") ? opts.compound : false;
        }

        if (this.#isCompound) {
          // v -> parent
          this.#parent = {};

          // v -> children
          this.#children = {};
          this.#children[GRAPH_NODE$1] = {};
        }
      }

      /* === Graph functions ========= */

      /**
       * Whether graph was created with 'directed' flag set to true or not.
       */
      isDirected() {
        return this.#isDirected;
      }

      /**
       * Whether graph was created with 'multigraph' flag set to true or not.
       */
      isMultigraph() {
        return this.#isMultigraph;
      }

      /**
       * Whether graph was created with 'compound' flag set to true or not.
       */
      isCompound() {
        return this.#isCompound;
      }

      /**
       * Sets the label of the graph.
       */
      setGraph(label) {
        this.#label = label;
        return this;
      }

      /**
       * Gets the graph label.
       */
      graph() {
        return this.#label;
      }


      /* === Node functions ========== */

      /**
       * Sets the default node label. If newDefault is a function, it will be
       * invoked ach time when setting a label for a node. Otherwise, this label
       * will be assigned as default label in case if no label was specified while
       * setting a node.
       * Complexity: O(1).
       */
      setDefaultNodeLabel(newDefault) {
        this.#defaultNodeLabelFn = newDefault;
        if (typeof newDefault !== 'function') {
          this.#defaultNodeLabelFn = () => newDefault;
        }

        return this;
      }

      /**
       * Gets the number of nodes in the graph.
       * Complexity: O(1).
       */
      nodeCount() {
        return this.#nodeCount;
      }

      /**
       * Gets all nodes of the graph. Note, the in case of compound graph subnodes are
       * not included in list.
       * Complexity: O(1).
       */
      nodes() {
        return Object.keys(this.#nodes);
      }

      /**
       * Gets list of nodes without in-edges.
       * Complexity: O(|V|).
       */
      sources() {
        var self = this;
        return this.nodes().filter(v => Object.keys(self.#in[v]).length === 0);
      }

      /**
       * Gets list of nodes without out-edges.
       * Complexity: O(|V|).
       */
      sinks() {
        var self = this;
        return this.nodes().filter(v => Object.keys(self.#out[v]).length === 0);
      }

      /**
       * Invokes setNode method for each node in names list.
       * Complexity: O(|names|).
       */
      setNodes(vs, value) {
        var args = arguments;
        var self = this;
        vs.forEach(function(v) {
          if (args.length > 1) {
            self.setNode(v, value);
          } else {
            self.setNode(v);
          }
        });
        return this;
      }

      /**
       * Creates or updates the value for the node v in the graph. If label is supplied
       * it is set as the value for the node. If label is not supplied and the node was
       * created by this call then the default node label will be assigned.
       * Complexity: O(1).
       */
      setNode(v, value) {
        if (this.#nodes.hasOwnProperty(v)) {
          if (arguments.length > 1) {
            this.#nodes[v] = value;
          }
          return this;
        }

        this.#nodes[v] = arguments.length > 1 ? value : this.#defaultNodeLabelFn(v);
        if (this.#isCompound) {
          this.#parent[v] = GRAPH_NODE$1;
          this.#children[v] = {};
          this.#children[GRAPH_NODE$1][v] = true;
        }
        this.#in[v] = {};
        this.#preds[v] = {};
        this.#out[v] = {};
        this.#sucs[v] = {};
        ++this.#nodeCount;
        return this;
      }

      /**
       * Gets the label of node with specified name.
       * Complexity: O(|V|).
       */
      node(v) {
        return this.#nodes[v];
      }

      /**
       * Detects whether graph has a node with specified name or not.
       */
      hasNode(v) {
        return this.#nodes.hasOwnProperty(v);
      }

      /**
       * Remove the node with the name from the graph or do nothing if the node is not in
       * the graph. If the node was removed this function also removes any incident
       * edges.
       * Complexity: O(1).
       */
      removeNode(v) {
        var self = this;
        if (this.#nodes.hasOwnProperty(v)) {
          var removeEdge = e => self.removeEdge(self.#edgeObjs[e]);
          delete this.#nodes[v];
          if (this.#isCompound) {
            this.#removeFromParentsChildList(v);
            delete this.#parent[v];
            this.children(v).forEach(function(child) {
              self.setParent(child);
            });
            delete this.#children[v];
          }
          Object.keys(this.#in[v]).forEach(removeEdge);
          delete this.#in[v];
          delete this.#preds[v];
          Object.keys(this.#out[v]).forEach(removeEdge);
          delete this.#out[v];
          delete this.#sucs[v];
          --this.#nodeCount;
        }
        return this;
      }

      /**
       * Sets node p as a parent for node v if it is defined, or removes the
       * parent for v if p is undefined. Method throws an exception in case of
       * invoking it in context of noncompound graph.
       * Average-case complexity: O(1).
       */
      setParent(v, parent) {
        if (!this.#isCompound) {
          throw new Error("Cannot set parent in a non-compound graph");
        }

        if (parent === undefined) {
          parent = GRAPH_NODE$1;
        } else {
          // Coerce parent to string
          parent += "";
          for (var ancestor = parent; ancestor !== undefined; ancestor = this.parent(ancestor)) {
            if (ancestor === v) {
              throw new Error("Setting " + parent+ " as parent of " + v +
                  " would create a cycle");
            }
          }

          this.setNode(parent);
        }

        this.setNode(v);
        this.#removeFromParentsChildList(v);
        this.#parent[v] = parent;
        this.#children[parent][v] = true;
        return this;
      }

      #removeFromParentsChildList(v) {
        delete this.#children[this.#parent[v]][v];
      }

      /**
       * Gets parent node for node v.
       * Complexity: O(1).
       */
      parent(v) {
        if (this.#isCompound) {
          var parent = this.#parent[v];
          if (parent !== GRAPH_NODE$1) {
            return parent;
          }
        }
      }

      /**
       * Gets list of direct children of node v.
       * Complexity: O(1).
       */
      children(v = GRAPH_NODE$1) {
        if (this.#isCompound) {
          var children = this.#children[v];
          if (children) {
            return Object.keys(children);
          }
        } else if (v === GRAPH_NODE$1) {
          return this.nodes();
        } else if (this.hasNode(v)) {
          return [];
        }
      }

      /**
       * Return all nodes that are predecessors of the specified node or undefined if node v is not in
       * the graph. Behavior is undefined for undirected graphs - use neighbors instead.
       * Complexity: O(|V|).
       */
      predecessors(v) {
        var predsV = this.#preds[v];
        if (predsV) {
          return Object.keys(predsV);
        }
      }

      /**
       * Return all nodes that are successors of the specified node or undefined if node v is not in
       * the graph. Behavior is undefined for undirected graphs - use neighbors instead.
       * Complexity: O(|V|).
       */
      successors(v) {
        var sucsV = this.#sucs[v];
        if (sucsV) {
          return Object.keys(sucsV);
        }
      }

      /**
       * Return all nodes that are predecessors or successors of the specified node or undefined if
       * node v is not in the graph.
       * Complexity: O(|V|).
       */
      neighbors(v) {
        var preds = this.predecessors(v);
        if (preds) {
          const union = new Set(preds);
          for (var succ of this.successors(v)) {
            union.add(succ);
          }

          return Array.from(union.values());
        }
      }

      isLeaf(v) {
        var neighbors;
        if (this.isDirected()) {
          neighbors = this.successors(v);
        } else {
          neighbors = this.neighbors(v);
        }
        return neighbors.length === 0;
      }

      /**
       * Creates new graph with nodes filtered via filter. Edges incident to rejected node
       * are also removed. In case of compound graph, if parent is rejected by filter,
       * than all its children are rejected too.
       * Average-case complexity: O(|E|+|V|).
       */
      filterNodes(filter) {
        var copy = new this.constructor({
          directed: this.#isDirected,
          multigraph: this.#isMultigraph,
          compound: this.#isCompound
        });

        copy.setGraph(this.graph());

        var self = this;
        Object.entries(this.#nodes).forEach(function([v, value]) {
          if (filter(v)) {
            copy.setNode(v, value);
          }
        });

        Object.values(this.#edgeObjs).forEach(function(e) {
          if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
            copy.setEdge(e, self.edge(e));
          }
        });

        var parents = {};
        function findParent(v) {
          var parent = self.parent(v);
          if (parent === undefined || copy.hasNode(parent)) {
            parents[v] = parent;
            return parent;
          } else if (parent in parents) {
            return parents[parent];
          } else {
            return findParent(parent);
          }
        }

        if (this.#isCompound) {
          copy.nodes().forEach(v => copy.setParent(v, findParent(v)));
        }

        return copy;
      }

      /* === Edge functions ========== */

      /**
       * Sets the default edge label or factory function. This label will be
       * assigned as default label in case if no label was specified while setting
       * an edge or this function will be invoked each time when setting an edge
       * with no label specified and returned value * will be used as a label for edge.
       * Complexity: O(1).
       */
      setDefaultEdgeLabel(newDefault) {
        this.#defaultEdgeLabelFn = newDefault;
        if (typeof newDefault !== 'function') {
          this.#defaultEdgeLabelFn = () => newDefault;
        }

        return this;
      }

      /**
       * Gets the number of edges in the graph.
       * Complexity: O(1).
       */
      edgeCount() {
        return this.#edgeCount;
      }

      /**
       * Gets edges of the graph. In case of compound graph subgraphs are not considered.
       * Complexity: O(|E|).
       */
      edges() {
        return Object.values(this.#edgeObjs);
      }

      /**
       * Establish an edges path over the nodes in nodes list. If some edge is already
       * exists, it will update its label, otherwise it will create an edge between pair
       * of nodes with label provided or default label if no label provided.
       * Complexity: O(|nodes|).
       */
      setPath(vs, value) {
        var self = this;
        var args = arguments;
        vs.reduce(function(v, w) {
          if (args.length > 1) {
            self.setEdge(v, w, value);
          } else {
            self.setEdge(v, w);
          }
          return w;
        });
        return this;
      }

      /**
       * Creates or updates the label for the edge (v, w) with the optionally supplied
       * name. If label is supplied it is set as the value for the edge. If label is not
       * supplied and the edge was created by this call then the default edge label will
       * be assigned. The name parameter is only useful with multigraphs.
       */
      setEdge() {
        var v, w, name, value;
        var valueSpecified = false;
        var arg0 = arguments[0];

        if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
          v = arg0.v;
          w = arg0.w;
          name = arg0.name;
          if (arguments.length === 2) {
            value = arguments[1];
            valueSpecified = true;
          }
        } else {
          v = arg0;
          w = arguments[1];
          name = arguments[3];
          if (arguments.length > 2) {
            value = arguments[2];
            valueSpecified = true;
          }
        }

        v = "" + v;
        w = "" + w;
        if (name !== undefined) {
          name = "" + name;
        }

        var e = edgeArgsToId$1(this.#isDirected, v, w, name);
        if (this.#edgeLabels.hasOwnProperty(e)) {
          if (valueSpecified) {
            this.#edgeLabels[e] = value;
          }
          return this;
        }

        if (name !== undefined && !this.#isMultigraph) {
          throw new Error("Cannot set a named edge when isMultigraph = false");
        }

        // It didn't exist, so we need to create it.
        // First ensure the nodes exist.
        this.setNode(v);
        this.setNode(w);

        this.#edgeLabels[e] = valueSpecified ? value : this.#defaultEdgeLabelFn(v, w, name);

        var edgeObj = edgeArgsToObj$1(this.#isDirected, v, w, name);
        // Ensure we add undirected edges in a consistent way.
        v = edgeObj.v;
        w = edgeObj.w;

        Object.freeze(edgeObj);
        this.#edgeObjs[e] = edgeObj;
        incrementOrInitEntry$1(this.#preds[w], v);
        incrementOrInitEntry$1(this.#sucs[v], w);
        this.#in[w][e] = edgeObj;
        this.#out[v][e] = edgeObj;
        this.#edgeCount++;
        return this;
      }

      /**
       * Gets the label for the specified edge.
       * Complexity: O(1).
       */
      edge(v, w, name) {
        var e = (arguments.length === 1
          ? edgeObjToId$1(this.#isDirected, arguments[0])
          : edgeArgsToId$1(this.#isDirected, v, w, name));
        return this.#edgeLabels[e];
      }

      /**
       * Detects whether the graph contains specified edge or not. No subgraphs are considered.
       * Complexity: O(1).
       */
      hasEdge(v, w, name) {
        var e = (arguments.length === 1
          ? edgeObjToId$1(this.#isDirected, arguments[0])
          : edgeArgsToId$1(this.#isDirected, v, w, name));
        return this.#edgeLabels.hasOwnProperty(e);
      }

      /**
       * Removes the specified edge from the graph. No subgraphs are considered.
       * Complexity: O(1).
       */
      removeEdge(v, w, name) {
        var e = (arguments.length === 1
          ? edgeObjToId$1(this.#isDirected, arguments[0])
          : edgeArgsToId$1(this.#isDirected, v, w, name));
        var edge = this.#edgeObjs[e];
        if (edge) {
          v = edge.v;
          w = edge.w;
          delete this.#edgeLabels[e];
          delete this.#edgeObjs[e];
          decrementOrRemoveEntry$1(this.#preds[w], v);
          decrementOrRemoveEntry$1(this.#sucs[v], w);
          delete this.#in[w][e];
          delete this.#out[v][e];
          this.#edgeCount--;
        }
        return this;
      }

      /**
       * Return all edges that point to the node v. Optionally filters those edges down to just those
       * coming from node u. Behavior is undefined for undirected graphs - use nodeEdges instead.
       * Complexity: O(|E|).
       */
      inEdges(v, u) {
        var inV = this.#in[v];
        if (inV) {
          var edges = Object.values(inV);
          if (!u) {
            return edges;
          }
          return edges.filter(edge => edge.v === u);
        }
      }

      /**
       * Return all edges that are pointed at by node v. Optionally filters those edges down to just
       * those point to w. Behavior is undefined for undirected graphs - use nodeEdges instead.
       * Complexity: O(|E|).
       */
      outEdges(v, w) {
        var outV = this.#out[v];
        if (outV) {
          var edges = Object.values(outV);
          if (!w) {
            return edges;
          }
          return edges.filter(edge => edge.w === w);
        }
      }

      /**
       * Returns all edges to or from node v regardless of direction. Optionally filters those edges
       * down to just those between nodes v and w regardless of direction.
       * Complexity: O(|E|).
       */
      nodeEdges(v, w) {
        var inEdges = this.inEdges(v, w);
        if (inEdges) {
          return inEdges.concat(this.outEdges(v, w));
        }
      }
    }

    function incrementOrInitEntry$1(map, k) {
      if (map[k]) {
        map[k]++;
      } else {
        map[k] = 1;
      }
    }

    function decrementOrRemoveEntry$1(map, k) {
      if (!--map[k]) { delete map[k]; }
    }

    function edgeArgsToId$1(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      return v + EDGE_KEY_DELIM$1 + w + EDGE_KEY_DELIM$1 +
                 (name === undefined ? DEFAULT_EDGE_NAME$1 : name);
    }

    function edgeArgsToObj$1(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      var edgeObj =  { v: v, w: w };
      if (name) {
        edgeObj.name = name;
      }
      return edgeObj;
    }

    function edgeObjToId$1(isDirected, edgeObj) {
      return edgeArgsToId$1(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
    }

    var graph$1 = Graph$9;

    var version$3 = '2.1.12';

    // Includes only the "core" of graphlib
    var lib$1 = {
      Graph: graph$1,
      version: version$3
    };

    var json$1 = {
      write: write$1,
      read: read$1
    };

    /**
     * Creates a JSON representation of the graph that can be serialized to a string with
     * JSON.stringify. The graph can later be restored using json.read.
     */
    function write$1(g) {
      var json = {
        options: {
          directed: g.isDirected(),
          multigraph: g.isMultigraph(),
          compound: g.isCompound()
        },
        nodes: writeNodes$1(g),
        edges: writeEdges$1(g)
      };

      if (g.graph() !== undefined) {
        json.value = structuredClone(g.graph());
      }
      return json;
    }

    function writeNodes$1(g) {
      return g.nodes().map(function(v) {
        var nodeValue = g.node(v);
        var parent = g.parent(v);
        var node = { v: v };
        if (nodeValue !== undefined) {
          node.value = nodeValue;
        }
        if (parent !== undefined) {
          node.parent = parent;
        }
        return node;
      });
    }

    function writeEdges$1(g) {
      return g.edges().map(function(e) {
        var edgeValue = g.edge(e);
        var edge = { v: e.v, w: e.w };
        if (e.name !== undefined) {
          edge.name = e.name;
        }
        if (edgeValue !== undefined) {
          edge.value = edgeValue;
        }
        return edge;
      });
    }

    /**
     * Takes JSON as input and returns the graph representation.
     *
     * @example
     * var g2 = graphlib.json.read(JSON.parse(str));
     * g2.nodes();
     * // ['a', 'b']
     * g2.edges()
     * // [ { v: 'a', w: 'b' } ]
     */
    function read$1(json) {
      var g = new graph$1(json.options).setGraph(json.value);
      json.nodes.forEach(function(entry) {
        g.setNode(entry.v, entry.value);
        if (entry.parent) {
          g.setParent(entry.v, entry.parent);
        }
      });
      json.edges.forEach(function(entry) {
        g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
      });
      return g;
    }

    var components_1$1 = components$1;

    function components$1(g) {
      var visited = {};
      var cmpts = [];
      var cmpt;

      function dfs(v) {
        if (visited.hasOwnProperty(v)) return;
        visited[v] = true;
        cmpt.push(v);
        g.successors(v).forEach(dfs);
        g.predecessors(v).forEach(dfs);
      }

      g.nodes().forEach(function(v) {
        cmpt = [];
        dfs(v);
        if (cmpt.length) {
          cmpts.push(cmpt);
        }
      });

      return cmpts;
    }

    /**
     * A min-priority queue data structure. This algorithm is derived from Cormen,
     * et al., "Introduction to Algorithms". The basic idea of a min-priority
     * queue is that you can efficiently (in O(1) time) get the smallest key in
     * the queue. Adding and removing elements takes O(log n) time. A key can
     * have its priority decreased in O(log n) time.
     */
    class PriorityQueue$1 {
      #arr = [];
      #keyIndices = {};

      /**
       * Returns the number of elements in the queue. Takes `O(1)` time.
       */
      size() {
        return this.#arr.length;
      }

      /**
       * Returns the keys that are in the queue. Takes `O(n)` time.
       */
      keys() {
        return this.#arr.map(function(x) { return x.key; });
      }

      /**
       * Returns `true` if **key** is in the queue and `false` if not.
       */
      has(key) {
        return this.#keyIndices.hasOwnProperty(key);
      }

      /**
       * Returns the priority for **key**. If **key** is not present in the queue
       * then this function returns `undefined`. Takes `O(1)` time.
       *
       * @param {Object} key
       */
      priority(key) {
        var index = this.#keyIndices[key];
        if (index !== undefined) {
          return this.#arr[index].priority;
        }
      }

      /**
       * Returns the key for the minimum element in this queue. If the queue is
       * empty this function throws an Error. Takes `O(1)` time.
       */
      min() {
        if (this.size() === 0) {
          throw new Error("Queue underflow");
        }
        return this.#arr[0].key;
      }

      /**
       * Inserts a new key into the priority queue. If the key already exists in
       * the queue this function returns `false`; otherwise it will return `true`.
       * Takes `O(n)` time.
       *
       * @param {Object} key the key to add
       * @param {Number} priority the initial priority for the key
       */
      add(key, priority) {
        var keyIndices = this.#keyIndices;
        key = String(key);
        if (!keyIndices.hasOwnProperty(key)) {
          var arr = this.#arr;
          var index = arr.length;
          keyIndices[key] = index;
          arr.push({key: key, priority: priority});
          this.#decrease(index);
          return true;
        }
        return false;
      }

      /**
       * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
       */
      removeMin() {
        this.#swap(0, this.#arr.length - 1);
        var min = this.#arr.pop();
        delete this.#keyIndices[min.key];
        this.#heapify(0);
        return min.key;
      }

      /**
       * Decreases the priority for **key** to **priority**. If the new priority is
       * greater than the previous priority, this function will throw an Error.
       *
       * @param {Object} key the key for which to raise priority
       * @param {Number} priority the new priority for the key
       */
      decrease(key, priority) {
        var index = this.#keyIndices[key];
        if (priority > this.#arr[index].priority) {
          throw new Error("New priority is greater than current priority. " +
              "Key: " + key + " Old: " + this.#arr[index].priority + " New: " + priority);
        }
        this.#arr[index].priority = priority;
        this.#decrease(index);
      }

      #heapify(i) {
        var arr = this.#arr;
        var l = 2 * i;
        var r = l + 1;
        var largest = i;
        if (l < arr.length) {
          largest = arr[l].priority < arr[largest].priority ? l : largest;
          if (r < arr.length) {
            largest = arr[r].priority < arr[largest].priority ? r : largest;
          }
          if (largest !== i) {
            this.#swap(i, largest);
            this.#heapify(largest);
          }
        }
      }

      #decrease(index) {
        var arr = this.#arr;
        var priority = arr[index].priority;
        var parent;
        while (index !== 0) {
          parent = index >> 1;
          if (arr[parent].priority < priority) {
            break;
          }
          this.#swap(index, parent);
          index = parent;
        }
      }

      #swap(i, j) {
        var arr = this.#arr;
        var keyIndices = this.#keyIndices;
        var origArrI = arr[i];
        var origArrJ = arr[j];
        arr[i] = origArrJ;
        arr[j] = origArrI;
        keyIndices[origArrJ.key] = i;
        keyIndices[origArrI.key] = j;
      }
    }

    var priorityQueue$1 = PriorityQueue$1;

    var dijkstra_1$1 = dijkstra$1;

    var DEFAULT_WEIGHT_FUNC$3 = () => 1;

    function dijkstra$1(g, source, weightFn, edgeFn) {
      return runDijkstra$1(g, String(source),
        weightFn || DEFAULT_WEIGHT_FUNC$3,
        edgeFn || function(v) { return g.outEdges(v); });
    }

    function runDijkstra$1(g, source, weightFn, edgeFn) {
      var results = {};
      var pq = new priorityQueue$1();
      var v, vEntry;

      var updateNeighbors = function(edge) {
        var w = edge.v !== v ? edge.v : edge.w;
        var wEntry = results[w];
        var weight = weightFn(edge);
        var distance = vEntry.distance + weight;

        if (weight < 0) {
          throw new Error("dijkstra does not allow negative edge weights. " +
                          "Bad edge: " + edge + " Weight: " + weight);
        }

        if (distance < wEntry.distance) {
          wEntry.distance = distance;
          wEntry.predecessor = v;
          pq.decrease(w, distance);
        }
      };

      g.nodes().forEach(function(v) {
        var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
        results[v] = { distance: distance };
        pq.add(v, distance);
      });

      while (pq.size() > 0) {
        v = pq.removeMin();
        vEntry = results[v];
        if (vEntry.distance === Number.POSITIVE_INFINITY) {
          break;
        }

        edgeFn(v).forEach(updateNeighbors);
      }

      return results;
    }

    var dijkstraAll_1$1 = dijkstraAll$1;

    function dijkstraAll$1(g, weightFunc, edgeFunc) {
      return g.nodes().reduce(function(acc, v) {
        acc[v] = dijkstra_1$1(g, v, weightFunc, edgeFunc);
        return acc;
      }, {});
    }

    var tarjan_1$1 = tarjan$1;

    function tarjan$1(g) {
      var index = 0;
      var stack = [];
      var visited = {}; // node id -> { onStack, lowlink, index }
      var results = [];

      function dfs(v) {
        var entry = visited[v] = {
          onStack: true,
          lowlink: index,
          index: index++
        };
        stack.push(v);

        g.successors(v).forEach(function(w) {
          if (!visited.hasOwnProperty(w)) {
            dfs(w);
            entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
          } else if (visited[w].onStack) {
            entry.lowlink = Math.min(entry.lowlink, visited[w].index);
          }
        });

        if (entry.lowlink === entry.index) {
          var cmpt = [];
          var w;
          do {
            w = stack.pop();
            visited[w].onStack = false;
            cmpt.push(w);
          } while (v !== w);
          results.push(cmpt);
        }
      }

      g.nodes().forEach(function(v) {
        if (!visited.hasOwnProperty(v)) {
          dfs(v);
        }
      });

      return results;
    }

    var findCycles_1$1 = findCycles$1;

    function findCycles$1(g) {
      return tarjan_1$1(g).filter(function(cmpt) {
        return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
      });
    }

    var floydWarshall_1$1 = floydWarshall$1;

    var DEFAULT_WEIGHT_FUNC$2 = () => 1;

    function floydWarshall$1(g, weightFn, edgeFn) {
      return runFloydWarshall$1(g,
        weightFn || DEFAULT_WEIGHT_FUNC$2,
        edgeFn || function(v) { return g.outEdges(v); });
    }

    function runFloydWarshall$1(g, weightFn, edgeFn) {
      var results = {};
      var nodes = g.nodes();

      nodes.forEach(function(v) {
        results[v] = {};
        results[v][v] = { distance: 0 };
        nodes.forEach(function(w) {
          if (v !== w) {
            results[v][w] = { distance: Number.POSITIVE_INFINITY };
          }
        });
        edgeFn(v).forEach(function(edge) {
          var w = edge.v === v ? edge.w : edge.v;
          var d = weightFn(edge);
          results[v][w] = { distance: d, predecessor: v };
        });
      });

      nodes.forEach(function(k) {
        var rowK = results[k];
        nodes.forEach(function(i) {
          var rowI = results[i];
          nodes.forEach(function(j) {
            var ik = rowI[k];
            var kj = rowK[j];
            var ij = rowI[j];
            var altDistance = ik.distance + kj.distance;
            if (altDistance < ij.distance) {
              ij.distance = altDistance;
              ij.predecessor = kj.predecessor;
            }
          });
        });
      });

      return results;
    }

    function topsort$1(g) {
      var visited = {};
      var stack = {};
      var results = [];

      function visit(node) {
        if (stack.hasOwnProperty(node)) {
          throw new CycleException$1();
        }

        if (!visited.hasOwnProperty(node)) {
          stack[node] = true;
          visited[node] = true;
          g.predecessors(node).forEach(visit);
          delete stack[node];
          results.push(node);
        }
      }

      g.sinks().forEach(visit);

      if (Object.keys(visited).length !== g.nodeCount()) {
        throw new CycleException$1();
      }

      return results;
    }

    class CycleException$1 extends Error {
      constructor() {
        super(...arguments);
      }
    }

    var topsort_1$1 = topsort$1;
    topsort$1.CycleException = CycleException$1;

    var isAcyclic_1$1 = isAcyclic$1;

    function isAcyclic$1(g) {
      try {
        topsort_1$1(g);
      } catch (e) {
        if (e instanceof topsort_1$1.CycleException) {
          return false;
        }
        throw e;
      }
      return true;
    }

    var dfs_1$1 = dfs$2;

    /*
     * A helper that preforms a pre- or post-order traversal on the input graph
     * and returns the nodes in the order they were visited. If the graph is
     * undirected then this algorithm will navigate using neighbors. If the graph
     * is directed then this algorithm will navigate using successors.
     *
     * If the order is not "post", it will be treated as "pre".
     */
    function dfs$2(g, vs, order) {
      if (!Array.isArray(vs)) {
        vs = [vs];
      }

      var navigation = g.isDirected() ? v => g.successors(v) : v => g.neighbors(v);
      var orderFunc = order === "post" ? postOrderDfs : preOrderDfs;

      var acc = [];
      var visited = {};
      vs.forEach(v => {
        if (!g.hasNode(v)) {
          throw new Error("Graph does not have node: " + v);
        }

        orderFunc(v, navigation, visited, acc);
      });

      return acc;
    }

    function postOrderDfs(v, navigation, visited, acc) {
      var stack = [[v, false]];
      while (stack.length > 0) {
        var curr = stack.pop();
        if (curr[1]) {
          acc.push(curr[0]);
        } else {
          if (!visited.hasOwnProperty(curr[0])) {
            visited[curr[0]] = true;
            stack.push([curr[0], true]);
            forEachRight(navigation(curr[0]), w => stack.push([w, false]));
          }
        }
      }
    }

    function preOrderDfs(v, navigation, visited, acc) {
      var stack = [v];
      while (stack.length > 0) {
        var curr = stack.pop();
        if (!visited.hasOwnProperty(curr)) {
          visited[curr] = true;
          acc.push(curr);
          forEachRight(navigation(curr), w => stack.push(w));
        }
      }
    }

    function forEachRight(array, iteratee) {
      var length = array.length;
      while (length--) {
        iteratee(array[length], length, array);
      }

      return array;
    }

    var postorder_1$1 = postorder$3;

    function postorder$3(g, vs) {
      return dfs_1$1(g, vs, "post");
    }

    var preorder_1$1 = preorder$2;

    function preorder$2(g, vs) {
      return dfs_1$1(g, vs, "pre");
    }

    var prim_1$1 = prim$1;

    function prim$1(g, weightFunc) {
      var result = new graph$1();
      var parents = {};
      var pq = new priorityQueue$1();
      var v;

      function updateNeighbors(edge) {
        var w = edge.v === v ? edge.w : edge.v;
        var pri = pq.priority(w);
        if (pri !== undefined) {
          var edgeWeight = weightFunc(edge);
          if (edgeWeight < pri) {
            parents[w] = v;
            pq.decrease(w, edgeWeight);
          }
        }
      }

      if (g.nodeCount() === 0) {
        return result;
      }

      g.nodes().forEach(function(v) {
        pq.add(v, Number.POSITIVE_INFINITY);
        result.setNode(v);
      });

      // Start from an arbitrary node
      pq.decrease(g.nodes()[0], 0);

      var init = false;
      while (pq.size() > 0) {
        v = pq.removeMin();
        if (parents.hasOwnProperty(v)) {
          result.setEdge(v, parents[v]);
        } else if (init) {
          throw new Error("Input graph is not connected: " + g);
        } else {
          init = true;
        }

        g.nodeEdges(v).forEach(updateNeighbors);
      }

      return result;
    }

    var alg$1 = {
      components: components_1$1,
      dijkstra: dijkstra_1$1,
      dijkstraAll: dijkstraAll_1$1,
      findCycles: findCycles_1$1,
      floydWarshall: floydWarshall_1$1,
      isAcyclic: isAcyclic_1$1,
      postorder: postorder_1$1,
      preorder: preorder_1$1,
      prim: prim_1$1,
      tarjan: tarjan_1$1,
      topsort: topsort_1$1
    };

    /**
     * Copyright (c) 2014, Chris Pettitt
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice, this
     * list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     * this list of conditions and the following disclaimer in the documentation
     * and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its contributors
     * may be used to endorse or promote products derived from this software without
     * specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */



    var graphlib$2 = {
      Graph: lib$1.Graph,
      json: json$1,
      alg: alg$1,
      version: lib$1.version
    };
    var graphlib_1$2 = graphlib$2.Graph;

    function isProcess(object) {
        if (typeof object !== "object") {
            return false;
        }
        if (typeof object._id !== "object") {
            return false;
        }
        if (typeof object.name !== "string") {
            return false;
        }
        if (typeof object.graph !== "string") {
            return false;
        }
        if (typeof object.description !== "string") {
            return false;
        }
        return true;
    }
    function isAction(object) {
        if (typeof object !== "object") {
            return false;
        }
        if (typeof object._id !== "object") {
            return false;
        }
        if (typeof object.prompt !== "string") {
            return false;
        }
        if (!Array.isArray(object.input_variables)) {
            return false;
        }
        for (const varItem of object.input_variables) {
            if (typeof varItem !== "string") {
                return false;
            }
        }
        if (!Array.isArray(object.output_variables)) {
            return false;
        }
        for (const varItem of object.output_variables) {
            if (typeof varItem !== "string") {
                return false;
            }
        }
        if (typeof object.name !== "string") {
            return false;
        }
        if (typeof object.system !== "string") {
            return false;
        }
        return true;
    }
    function newAction() {
        return {
            _id: { $oid: "" },
            prompt: "",
            input_variables: [],
            output_variables: [],
            name: "",
            system: ""
        };
    }
    function newProcess() {
        return {
            _id: { $oid: "" },
            name: "",
            graph: new graphlib_1$2(),
            description: "",
        };
    }

    // Replace 'ws://example.com' with your WebSocket server URL
    const system_state = {
        websocketReady: false,
        currentlySelected: "action"  ,
        selectedAction: newAction(),
        selectedProcess: newProcess(),
    };
    const systemStateStore = writable(system_state);

    function getAlignment(placement) {
      return placement.split('-')[1];
    }

    function getLengthFromAxis(axis) {
      return axis === 'y' ? 'height' : 'width';
    }

    function getSide(placement) {
      return placement.split('-')[0];
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';
    }

    function computeCoordsFromPlacement(_ref, placement, rtl) {
      let {
        reference,
        floating
      } = _ref;
      const commonX = reference.x + reference.width / 2 - floating.width / 2;
      const commonY = reference.y + reference.height / 2 - floating.height / 2;
      const mainAxis = getMainAxisFromPlacement(placement);
      const length = getLengthFromAxis(mainAxis);
      const commonAlign = reference[length] / 2 - floating[length] / 2;
      const side = getSide(placement);
      const isVertical = mainAxis === 'x';
      let coords;
      switch (side) {
        case 'top':
          coords = {
            x: commonX,
            y: reference.y - floating.height
          };
          break;
        case 'bottom':
          coords = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;
        case 'right':
          coords = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;
        case 'left':
          coords = {
            x: reference.x - floating.width,
            y: commonY
          };
          break;
        default:
          coords = {
            x: reference.x,
            y: reference.y
          };
      }
      switch (getAlignment(placement)) {
        case 'start':
          coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
          break;
        case 'end':
          coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
          break;
      }
      return coords;
    }

    /**
     * Computes the `x` and `y` coordinates that will place the floating element
     * next to a reference element when it is given a certain positioning strategy.
     *
     * This export does not have any `platform` interface logic. You will need to
     * write one for the platform you are using Floating UI with.
     */
    const computePosition$1 = async (reference, floating, config) => {
      const {
        placement = 'bottom',
        strategy = 'absolute',
        middleware = [],
        platform
      } = config;
      const validMiddleware = middleware.filter(Boolean);
      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
      let rects = await platform.getElementRects({
        reference,
        floating,
        strategy
      });
      let {
        x,
        y
      } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i = 0; i < validMiddleware.length; i++) {
        const {
          name,
          fn
        } = validMiddleware[i];
        const {
          x: nextX,
          y: nextY,
          data,
          reset
        } = await fn({
          x,
          y,
          initialPlacement: placement,
          placement: statefulPlacement,
          strategy,
          middlewareData,
          rects,
          platform,
          elements: {
            reference,
            floating
          }
        });
        x = nextX != null ? nextX : x;
        y = nextY != null ? nextY : y;
        middlewareData = {
          ...middlewareData,
          [name]: {
            ...middlewareData[name],
            ...data
          }
        };
        if (reset && resetCount <= 50) {
          resetCount++;
          if (typeof reset === 'object') {
            if (reset.placement) {
              statefulPlacement = reset.placement;
            }
            if (reset.rects) {
              rects = reset.rects === true ? await platform.getElementRects({
                reference,
                floating,
                strategy
              }) : reset.rects;
            }
            ({
              x,
              y
            } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i = -1;
          continue;
        }
      }
      return {
        x,
        y,
        placement: statefulPlacement,
        strategy,
        middlewareData
      };
    };

    function expandPaddingObject(padding) {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        ...padding
      };
    }

    function getSideObjectFromPadding(padding) {
      return typeof padding !== 'number' ? expandPaddingObject(padding) : {
        top: padding,
        right: padding,
        bottom: padding,
        left: padding
      };
    }

    function rectToClientRect(rect) {
      return {
        ...rect,
        top: rect.y,
        left: rect.x,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      };
    }

    /**
     * Resolves with an object of overflow side offsets that determine how much the
     * element is overflowing a given clipping boundary on each side.
     * - positive = overflowing the boundary by that number of pixels
     * - negative = how many pixels left before it will overflow
     * - 0 = lies flush with the boundary
     * @see https://floating-ui.com/docs/detectOverflow
     */
    async function detectOverflow(state, options) {
      var _await$platform$isEle;
      if (options === void 0) {
        options = {};
      }
      const {
        x,
        y,
        platform,
        rects,
        elements,
        strategy
      } = state;
      const {
        boundary = 'clippingAncestors',
        rootBoundary = 'viewport',
        elementContext = 'floating',
        altBoundary = false,
        padding = 0
      } = options;
      const paddingObject = getSideObjectFromPadding(padding);
      const altContext = elementContext === 'floating' ? 'reference' : 'floating';
      const element = elements[altBoundary ? altContext : elementContext];
      const clippingClientRect = rectToClientRect(await platform.getClippingRect({
        element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
        boundary,
        rootBoundary,
        strategy
      }));
      const rect = elementContext === 'floating' ? {
        ...rects.floating,
        x,
        y
      } : rects.reference;
      const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
      const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
        x: 1,
        y: 1
      } : {
        x: 1,
        y: 1
      };
      const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
        rect,
        offsetParent,
        strategy
      }) : rect);
      return {
        top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
        bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
        left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
        right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
      };
    }

    const min$3 = Math.min;
    const max$3 = Math.max;

    function within(min$1, value, max$1) {
      return max$3(min$1, min$3(value, max$1));
    }

    const oppositeSideMap = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
    }

    function getAlignmentSides(placement, rects, rtl) {
      if (rtl === void 0) {
        rtl = false;
      }
      const alignment = getAlignment(placement);
      const mainAxis = getMainAxisFromPlacement(placement);
      const length = getLengthFromAxis(mainAxis);
      let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';
      if (rects.reference[length] > rects.floating[length]) {
        mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
      }
      return {
        main: mainAlignmentSide,
        cross: getOppositePlacement(mainAlignmentSide)
      };
    }

    const oppositeAlignmentMap = {
      start: 'end',
      end: 'start'
    };
    function getOppositeAlignmentPlacement(placement) {
      return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
    }

    function getExpandedPlacements(placement) {
      const oppositePlacement = getOppositePlacement(placement);
      return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
    }

    function getSideList(side, isStart, rtl) {
      const lr = ['left', 'right'];
      const rl = ['right', 'left'];
      const tb = ['top', 'bottom'];
      const bt = ['bottom', 'top'];
      switch (side) {
        case 'top':
        case 'bottom':
          if (rtl) return isStart ? rl : lr;
          return isStart ? lr : rl;
        case 'left':
        case 'right':
          return isStart ? tb : bt;
        default:
          return [];
      }
    }
    function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
      const alignment = getAlignment(placement);
      let list = getSideList(getSide(placement), direction === 'start', rtl);
      if (alignment) {
        list = list.map(side => side + "-" + alignment);
        if (flipAlignment) {
          list = list.concat(list.map(getOppositeAlignmentPlacement));
        }
      }
      return list;
    }

    /**
     * Optimizes the visibility of the floating element by flipping the `placement`
     * in order to keep it in view when the preferred placement(s) will overflow the
     * clipping boundary. Alternative to `autoPlacement`.
     * @see https://floating-ui.com/docs/flip
     */
    const flip = function (options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: 'flip',
        options,
        async fn(state) {
          var _middlewareData$flip;
          const {
            placement,
            middlewareData,
            rects,
            initialPlacement,
            platform,
            elements
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true,
            fallbackPlacements: specifiedFallbackPlacements,
            fallbackStrategy = 'bestFit',
            fallbackAxisSideDirection = 'none',
            flipAlignment = true,
            ...detectOverflowOptions
          } = options;
          const side = getSide(placement);
          const isBasePlacement = getSide(initialPlacement) === initialPlacement;
          const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
          const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
          if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {
            fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
          }
          const placements = [initialPlacement, ...fallbackPlacements];
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const overflows = [];
          let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
          if (checkMainAxis) {
            overflows.push(overflow[side]);
          }
          if (checkCrossAxis) {
            const {
              main,
              cross
            } = getAlignmentSides(placement, rects, rtl);
            overflows.push(overflow[main], overflow[cross]);
          }
          overflowsData = [...overflowsData, {
            placement,
            overflows
          }];

          // One or more sides is overflowing.
          if (!overflows.every(side => side <= 0)) {
            var _middlewareData$flip2, _overflowsData$filter;
            const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
            const nextPlacement = placements[nextIndex];
            if (nextPlacement) {
              // Try next placement and re-run the lifecycle.
              return {
                data: {
                  index: nextIndex,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }

            // First, find the candidates that fit on the mainAxis side of overflow,
            // then find the placement that fits the best on the main crossAxis side.
            let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;

            // Otherwise fallback.
            if (!resetPlacement) {
              switch (fallbackStrategy) {
                case 'bestFit':
                  {
                    var _overflowsData$map$so;
                    const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                    if (placement) {
                      resetPlacement = placement;
                    }
                    break;
                  }
                case 'initialPlacement':
                  resetPlacement = initialPlacement;
                  break;
              }
            }
            if (placement !== resetPlacement) {
              return {
                reset: {
                  placement: resetPlacement
                }
              };
            }
          }
          return {};
        }
      };
    };

    async function convertValueToCoords(state, value) {
      const {
        placement,
        platform,
        elements
      } = state;
      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isVertical = getMainAxisFromPlacement(placement) === 'x';
      const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;
      const crossAxisMulti = rtl && isVertical ? -1 : 1;
      const rawValue = typeof value === 'function' ? value(state) : value;

      // eslint-disable-next-line prefer-const
      let {
        mainAxis,
        crossAxis,
        alignmentAxis
      } = typeof rawValue === 'number' ? {
        mainAxis: rawValue,
        crossAxis: 0,
        alignmentAxis: null
      } : {
        mainAxis: 0,
        crossAxis: 0,
        alignmentAxis: null,
        ...rawValue
      };
      if (alignment && typeof alignmentAxis === 'number') {
        crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
      }
      return isVertical ? {
        x: crossAxis * crossAxisMulti,
        y: mainAxis * mainAxisMulti
      } : {
        x: mainAxis * mainAxisMulti,
        y: crossAxis * crossAxisMulti
      };
    }

    /**
     * Modifies the placement by translating the floating element along the
     * specified axes.
     * A number (shorthand for `mainAxis` or distance), or an axes configuration
     * object may be passed.
     * @see https://floating-ui.com/docs/offset
     */
    const offset = function (value) {
      if (value === void 0) {
        value = 0;
      }
      return {
        name: 'offset',
        options: value,
        async fn(state) {
          const {
            x,
            y
          } = state;
          const diffCoords = await convertValueToCoords(state, value);
          return {
            x: x + diffCoords.x,
            y: y + diffCoords.y,
            data: diffCoords
          };
        }
      };
    };

    function getCrossAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    /**
     * Optimizes the visibility of the floating element by shifting it in order to
     * keep it in view when it will overflow the clipping boundary.
     * @see https://floating-ui.com/docs/shift
     */
    const shift = function (options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: 'shift',
        options,
        async fn(state) {
          const {
            x,
            y,
            placement
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = false,
            limiter = {
              fn: _ref => {
                let {
                  x,
                  y
                } = _ref;
                return {
                  x,
                  y
                };
              }
            },
            ...detectOverflowOptions
          } = options;
          const coords = {
            x,
            y
          };
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const mainAxis = getMainAxisFromPlacement(getSide(placement));
          const crossAxis = getCrossAxis(mainAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          if (checkMainAxis) {
            const minSide = mainAxis === 'y' ? 'top' : 'left';
            const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
            const min = mainAxisCoord + overflow[minSide];
            const max = mainAxisCoord - overflow[maxSide];
            mainAxisCoord = within(min, mainAxisCoord, max);
          }
          if (checkCrossAxis) {
            const minSide = crossAxis === 'y' ? 'top' : 'left';
            const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
            const min = crossAxisCoord + overflow[minSide];
            const max = crossAxisCoord - overflow[maxSide];
            crossAxisCoord = within(min, crossAxisCoord, max);
          }
          const limitedCoords = limiter.fn({
            ...state,
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          });
          return {
            ...limitedCoords,
            data: {
              x: limitedCoords.x - x,
              y: limitedCoords.y - y
            }
          };
        }
      };
    };

    function getWindow(node) {
      var _node$ownerDocument;
      return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
    }

    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isNode(value) {
      return value instanceof getWindow(value).Node;
    }
    function getNodeName$1(node) {
      return isNode(node) ? (node.nodeName || '').toLowerCase() : '';
    }

    let uaString;
    function getUAString() {
      if (uaString) {
        return uaString;
      }
      const uaData = navigator.userAgentData;
      if (uaData && Array.isArray(uaData.brands)) {
        uaString = uaData.brands.map(item => item.brand + "/" + item.version).join(' ');
        return uaString;
      }
      return navigator.userAgent;
    }

    function isHTMLElement(value) {
      return value instanceof getWindow(value).HTMLElement;
    }
    function isElement(value) {
      return value instanceof getWindow(value).Element;
    }
    function isShadowRoot(node) {
      // Browsers without `ShadowRoot` support.
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }
      const OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }
    function isOverflowElement(element) {
      const {
        overflow,
        overflowX,
        overflowY,
        display
      } = getComputedStyle$1(element);
      return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
    }
    function isTableElement(element) {
      return ['table', 'td', 'th'].includes(getNodeName$1(element));
    }
    function isContainingBlock(element) {
      // TODO: Try to use feature detection here instead.
      const isFirefox = /firefox/i.test(getUAString());
      const css = getComputedStyle$1(element);
      const backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;

      // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
      return css.transform !== 'none' || css.perspective !== 'none' || (backdropFilter ? backdropFilter !== 'none' : false) || isFirefox && css.willChange === 'filter' || isFirefox && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective'].some(value => css.willChange.includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => {
        // Add type check for old browsers.
        const contain = css.contain;
        return contain != null ? contain.includes(value) : false;
      });
    }

    /**
     * Determines whether or not `.getBoundingClientRect()` is affected by visual
     * viewport offsets. In Safari, the `x`/`y` offsets are values relative to the
     * visual viewport, while in other engines, they are values relative to the
     * layout viewport.
     */
    function isClientRectVisualViewportBased() {
      // TODO: Try to use feature detection here instead. Feature detection for
      // this can fail in various ways, making the userAgent check the most
      // reliable:
      // • Always-visible scrollbar or not
      // • Width of <html>

      // Is Safari.
      return /^((?!chrome|android).)*safari/i.test(getUAString());
    }
    function isLastTraversableNode(node) {
      return ['html', 'body', '#document'].includes(getNodeName$1(node));
    }

    const min$2 = Math.min;
    const max$2 = Math.max;
    const round = Math.round;

    function getCssDimensions(element) {
      const css = getComputedStyle$1(element);
      let width = parseFloat(css.width);
      let height = parseFloat(css.height);
      const hasOffset = isHTMLElement(element);
      const offsetWidth = hasOffset ? element.offsetWidth : width;
      const offsetHeight = hasOffset ? element.offsetHeight : height;
      const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
      if (shouldFallback) {
        width = offsetWidth;
        height = offsetHeight;
      }
      return {
        width,
        height,
        fallback: shouldFallback
      };
    }

    function unwrapElement(element) {
      return !isElement(element) ? element.contextElement : element;
    }

    const FALLBACK_SCALE = {
      x: 1,
      y: 1
    };
    function getScale(element) {
      const domElement = unwrapElement(element);
      if (!isHTMLElement(domElement)) {
        return FALLBACK_SCALE;
      }
      const rect = domElement.getBoundingClientRect();
      const {
        width,
        height,
        fallback
      } = getCssDimensions(domElement);
      let x = (fallback ? round(rect.width) : rect.width) / width;
      let y = (fallback ? round(rect.height) : rect.height) / height;

      // 0, NaN, or Infinity should always fallback to 1.

      if (!x || !Number.isFinite(x)) {
        x = 1;
      }
      if (!y || !Number.isFinite(y)) {
        y = 1;
      }
      return {
        x,
        y
      };
    }

    function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
      var _win$visualViewport, _win$visualViewport2;
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      const clientRect = element.getBoundingClientRect();
      const domElement = unwrapElement(element);
      let scale = FALLBACK_SCALE;
      if (includeScale) {
        if (offsetParent) {
          if (isElement(offsetParent)) {
            scale = getScale(offsetParent);
          }
        } else {
          scale = getScale(element);
        }
      }
      const win = domElement ? getWindow(domElement) : window;
      const addVisualOffsets = isClientRectVisualViewportBased() && isFixedStrategy;
      let x = (clientRect.left + (addVisualOffsets ? ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0 : 0)) / scale.x;
      let y = (clientRect.top + (addVisualOffsets ? ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0 : 0)) / scale.y;
      let width = clientRect.width / scale.x;
      let height = clientRect.height / scale.y;
      if (domElement) {
        const win = getWindow(domElement);
        const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
        let currentIFrame = win.frameElement;
        while (currentIFrame && offsetParent && offsetWin !== win) {
          const iframeScale = getScale(currentIFrame);
          const iframeRect = currentIFrame.getBoundingClientRect();
          const css = getComputedStyle(currentIFrame);
          iframeRect.x += (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
          iframeRect.y += (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
          x *= iframeScale.x;
          y *= iframeScale.y;
          width *= iframeScale.x;
          height *= iframeScale.y;
          x += iframeRect.x;
          y += iframeRect.y;
          currentIFrame = getWindow(currentIFrame).frameElement;
        }
      }
      return rectToClientRect({
        width,
        height,
        x,
        y
      });
    }

    function getDocumentElement(node) {
      return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
    }

    function getNodeScroll(element) {
      if (isElement(element)) {
        return {
          scrollLeft: element.scrollLeft,
          scrollTop: element.scrollTop
        };
      }
      return {
        scrollLeft: element.pageXOffset,
        scrollTop: element.pageYOffset
      };
    }

    function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
      let {
        rect,
        offsetParent,
        strategy
      } = _ref;
      const isOffsetParentAnElement = isHTMLElement(offsetParent);
      const documentElement = getDocumentElement(offsetParent);
      if (offsetParent === documentElement) {
        return rect;
      }
      let scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      let scale = {
        x: 1,
        y: 1
      };
      const offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
        if (getNodeName$1(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
          const offsetRect = getBoundingClientRect(offsetParent);
          scale = getScale(offsetParent);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        }
      }
      return {
        width: rect.width * scale.x,
        height: rect.height * scale.y,
        x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
        y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
    }

    // Gets the entire size of the scrollable document area, even extending outside
    // of the `<html>` and `<body>` rect bounds if horizontally scrollable.
    function getDocumentRect(element) {
      const html = getDocumentElement(element);
      const scroll = getNodeScroll(element);
      const body = element.ownerDocument.body;
      const width = max$2(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
      const height = max$2(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
      let x = -scroll.scrollLeft + getWindowScrollBarX(element);
      const y = -scroll.scrollTop;
      if (getComputedStyle$1(body).direction === 'rtl') {
        x += max$2(html.clientWidth, body.clientWidth) - width;
      }
      return {
        width,
        height,
        x,
        y
      };
    }

    function getParentNode(node) {
      if (getNodeName$1(node) === 'html') {
        return node;
      }
      const result =
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot ||
      // DOM Element detected.
      node.parentNode ||
      // ShadowRoot detected.
      isShadowRoot(node) && node.host ||
      // Fallback.
      getDocumentElement(node);
      return isShadowRoot(result) ? result.host : result;
    }

    function getNearestOverflowAncestor(node) {
      const parentNode = getParentNode(node);
      if (isLastTraversableNode(parentNode)) {
        // `getParentNode` will never return a `Document` due to the fallback
        // check, so it's either the <html> or <body> element.
        return parentNode.ownerDocument.body;
      }
      if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
        return parentNode;
      }
      return getNearestOverflowAncestor(parentNode);
    }

    function getOverflowAncestors(node, list) {
      var _node$ownerDocument;
      if (list === void 0) {
        list = [];
      }
      const scrollableAncestor = getNearestOverflowAncestor(node);
      const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
      const win = getWindow(scrollableAncestor);
      if (isBody) {
        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
      }
      return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
    }

    function getViewportRect(element, strategy) {
      const win = getWindow(element);
      const html = getDocumentElement(element);
      const visualViewport = win.visualViewport;
      let width = html.clientWidth;
      let height = html.clientHeight;
      let x = 0;
      let y = 0;
      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        const visualViewportBased = isClientRectVisualViewportBased();
        if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }
      return {
        width,
        height,
        x,
        y
      };
    }

    // Returns the inner client rect, subtracting scrollbars if present.
    function getInnerBoundingClientRect(element, strategy) {
      const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
      const top = clientRect.top + element.clientTop;
      const left = clientRect.left + element.clientLeft;
      const scale = isHTMLElement(element) ? getScale(element) : {
        x: 1,
        y: 1
      };
      const width = element.clientWidth * scale.x;
      const height = element.clientHeight * scale.y;
      const x = left * scale.x;
      const y = top * scale.y;
      return {
        width,
        height,
        x,
        y
      };
    }
    function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
      let rect;
      if (clippingAncestor === 'viewport') {
        rect = getViewportRect(element, strategy);
      } else if (clippingAncestor === 'document') {
        rect = getDocumentRect(getDocumentElement(element));
      } else if (isElement(clippingAncestor)) {
        rect = getInnerBoundingClientRect(clippingAncestor, strategy);
      } else {
        const mutableRect = {
          ...clippingAncestor
        };
        if (isClientRectVisualViewportBased()) {
          var _win$visualViewport, _win$visualViewport2;
          const win = getWindow(element);
          mutableRect.x -= ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0;
          mutableRect.y -= ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0;
        }
        rect = mutableRect;
      }
      return rectToClientRect(rect);
    }
    function hasFixedPositionAncestor(element, stopNode) {
      const parentNode = getParentNode(element);
      if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
        return false;
      }
      return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
    }

    // A "clipping ancestor" is an `overflow` element with the characteristic of
    // clipping (or hiding) child elements. This returns all clipping ancestors
    // of the given element up the tree.
    function getClippingElementAncestors(element, cache) {
      const cachedResult = cache.get(element);
      if (cachedResult) {
        return cachedResult;
      }
      let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName$1(el) !== 'body');
      let currentContainingBlockComputedStyle = null;
      const elementIsFixed = getComputedStyle$1(element).position === 'fixed';
      let currentNode = elementIsFixed ? getParentNode(element) : element;

      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
      while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
        const computedStyle = getComputedStyle$1(currentNode);
        const currentNodeIsContaining = isContainingBlock(currentNode);
        if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
          currentContainingBlockComputedStyle = null;
        }
        const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
        if (shouldDropCurrentNode) {
          // Drop non-containing blocks.
          result = result.filter(ancestor => ancestor !== currentNode);
        } else {
          // Record last containing block for next iteration.
          currentContainingBlockComputedStyle = computedStyle;
        }
        currentNode = getParentNode(currentNode);
      }
      cache.set(element, result);
      return result;
    }

    // Gets the maximum area that the element is visible in due to any number of
    // clipping ancestors.
    function getClippingRect(_ref) {
      let {
        element,
        boundary,
        rootBoundary,
        strategy
      } = _ref;
      const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
      const clippingAncestors = [...elementClippingAncestors, rootBoundary];
      const firstClippingAncestor = clippingAncestors[0];
      const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
        accRect.top = max$2(rect.top, accRect.top);
        accRect.right = min$2(rect.right, accRect.right);
        accRect.bottom = min$2(rect.bottom, accRect.bottom);
        accRect.left = max$2(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
      return {
        width: clippingRect.right - clippingRect.left,
        height: clippingRect.bottom - clippingRect.top,
        x: clippingRect.left,
        y: clippingRect.top
      };
    }

    function getDimensions(element) {
      return getCssDimensions(element);
    }

    function getTrueOffsetParent(element, polyfill) {
      if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
        return null;
      }
      if (polyfill) {
        return polyfill(element);
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      let currentNode = getParentNode(element);
      while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
        if (isContainingBlock(currentNode)) {
          return currentNode;
        } else {
          currentNode = getParentNode(currentNode);
        }
      }
      return null;
    }

    // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.
    function getOffsetParent(element, polyfill) {
      const window = getWindow(element);
      if (!isHTMLElement(element)) {
        return window;
      }
      let offsetParent = getTrueOffsetParent(element, polyfill);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent, polyfill);
      }
      if (offsetParent && (getNodeName$1(offsetParent) === 'html' || getNodeName$1(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
        return window;
      }
      return offsetParent || getContainingBlock(element) || window;
    }

    function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
      const isOffsetParentAnElement = isHTMLElement(offsetParent);
      const documentElement = getDocumentElement(offsetParent);
      const rect = getBoundingClientRect(element, true, strategy === 'fixed', offsetParent);
      let scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      const offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
        if (getNodeName$1(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
          const offsetRect = getBoundingClientRect(offsetParent, true);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    const platform = {
      getClippingRect,
      convertOffsetParentRelativeRectToViewportRelativeRect,
      isElement,
      getDimensions,
      getOffsetParent,
      getDocumentElement,
      getScale,
      async getElementRects(_ref) {
        let {
          reference,
          floating,
          strategy
        } = _ref;
        const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
        const getDimensionsFn = this.getDimensions;
        return {
          reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
          floating: {
            x: 0,
            y: 0,
            ...(await getDimensionsFn(floating))
          }
        };
      },
      getClientRects: element => Array.from(element.getClientRects()),
      isRTL: element => getComputedStyle$1(element).direction === 'rtl'
    };

    /**
     * Automatically updates the position of the floating element when necessary.
     * Should only be called when the floating element is mounted on the DOM or
     * visible on the screen.
     * @returns cleanup function that should be invoked when the floating element is
     * removed from the DOM or hidden from the screen.
     * @see https://floating-ui.com/docs/autoUpdate
     */
    function autoUpdate(reference, floating, update, options) {
      if (options === void 0) {
        options = {};
      }
      const {
        ancestorScroll = true,
        ancestorResize = true,
        elementResize = true,
        animationFrame = false
      } = options;
      const ancestors = ancestorScroll || ancestorResize ? [...(isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : []), ...getOverflowAncestors(floating)] : [];
      ancestors.forEach(ancestor => {
        // ignores Window, checks for [object VisualViewport]
        const isVisualViewport = !isElement(ancestor) && ancestor.toString().includes('V');
        if (ancestorScroll && (animationFrame ? isVisualViewport : true)) {
          ancestor.addEventListener('scroll', update, {
            passive: true
          });
        }
        ancestorResize && ancestor.addEventListener('resize', update);
      });
      let observer = null;
      if (elementResize) {
        observer = new ResizeObserver(() => {
          update();
        });
        isElement(reference) && !animationFrame && observer.observe(reference);
        if (!isElement(reference) && reference.contextElement && !animationFrame) {
          observer.observe(reference.contextElement);
        }
        observer.observe(floating);
      }
      let frameId;
      let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
      if (animationFrame) {
        frameLoop();
      }
      function frameLoop() {
        const nextRefRect = getBoundingClientRect(reference);
        if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
          update();
        }
        prevRefRect = nextRefRect;
        frameId = requestAnimationFrame(frameLoop);
      }
      update();
      return () => {
        var _observer;
        ancestors.forEach(ancestor => {
          ancestorScroll && ancestor.removeEventListener('scroll', update);
          ancestorResize && ancestor.removeEventListener('resize', update);
        });
        (_observer = observer) == null ? void 0 : _observer.disconnect();
        observer = null;
        if (animationFrame) {
          cancelAnimationFrame(frameId);
        }
      };
    }

    /**
     * Computes the `x` and `y` coordinates that will place the floating element
     * next to a reference element when it is given a certain CSS positioning
     * strategy.
     */
    const computePosition = (reference, floating, options) => {
      // This caches the expensive `getClippingElementAncestors` function so that
      // multiple lifecycle resets re-use the same result. It only lives for a
      // single call. If other functions become expensive, we can add them as well.
      const cache = new Map();
      const mergedOptions = {
        platform,
        ...options
      };
      const platformWithCache = {
        ...mergedOptions.platform,
        _c: cache
      };
      return computePosition$1(reference, floating, {
        ...mergedOptions,
        platform: platformWithCache
      });
    };

    //@ts-ignore
    function createFloatingActions(initOptions) {
        let referenceElement;
        let floatingElement;
        const defaultOptions = {
            autoUpdate: true
        };
        let options = initOptions;
        const getOptions = (mixin) => {
            return { ...defaultOptions, ...(initOptions || {}), ...(mixin || {}) };
        };
        const updatePosition = (updateOptions) => {
            if (referenceElement && floatingElement) {
                options = getOptions(updateOptions);
                computePosition(referenceElement, floatingElement, options)
                    .then(v => {
                    Object.assign(floatingElement.style, {
                        position: v.strategy,
                        left: `${v.x}px`,
                        top: `${v.y}px`,
                    });
                    options?.onComputed && options.onComputed(v);
                });
            }
        };
        const referenceAction = node => {
            if ('subscribe' in node) {
                setupVirtualElementObserver(node);
                return {};
            }
            else {
                referenceElement = node;
                updatePosition();
            }
        };
        const contentAction = (node, contentOptions) => {
            let autoUpdateDestroy;
            floatingElement = node;
            options = getOptions(contentOptions);
            setTimeout(() => updatePosition(contentOptions), 0); //tick doesn't work
            updatePosition(contentOptions);
            const destroyAutoUpdate = () => {
                if (autoUpdateDestroy) {
                    autoUpdateDestroy();
                    autoUpdateDestroy = undefined;
                }
            };
            const initAutoUpdate = ({ autoUpdate: autoUpdate$1 } = options || {}) => {
                destroyAutoUpdate();
                if (autoUpdate$1 !== false) {
                    return autoUpdate(referenceElement, floatingElement, () => updatePosition(options), (autoUpdate$1 === true ? {} : autoUpdate$1));
                }
                return;
            };
            autoUpdateDestroy = initAutoUpdate();
            return {
                update(contentOptions) {
                    updatePosition(contentOptions);
                    autoUpdateDestroy = initAutoUpdate(contentOptions);
                },
                destroy() {
                    destroyAutoUpdate();
                }
            };
        };
        const setupVirtualElementObserver = (node) => {
            const unsubscribe = node.subscribe(($node) => {
                if (referenceElement === undefined) {
                    referenceElement = $node;
                    updatePosition();
                }
                else {
                    // Preserve the reference to the virtual element.
                    Object.assign(referenceElement, $node);
                    updatePosition();
                }
            });
            onDestroy(unsubscribe);
        };
        return [
            referenceAction,
            contentAction,
            updatePosition
        ];
    }

    function filter$2({
        loadOptions,
        filterText,
        items,
        multiple,
        value,
        itemId,
        groupBy,
        filterSelectedItems,
        itemFilter,
        convertStringItemsToObjects,
        filterGroupedItems,
        label,
    }) {
        if (items && loadOptions) return items;
        if (!items) return [];

        if (items && items.length > 0 && typeof items[0] !== 'object') {
            items = convertStringItemsToObjects(items);
        }

        let filterResults = items.filter((item) => {
            let matchesFilter = itemFilter(item[label], filterText, item);
            if (matchesFilter && multiple && value?.length) {
                matchesFilter = !value.some((x) => {
                    return filterSelectedItems ? x[itemId] === item[itemId] : false;
                });
            }

            return matchesFilter;
        });

        if (groupBy) {
            filterResults = filterGroupedItems(filterResults);
        }

        return filterResults;
    }

    async function getItems({ dispatch, loadOptions, convertStringItemsToObjects, filterText }) {
        let res = await loadOptions(filterText).catch((err) => {
            console.warn('svelte-select loadOptions error :>> ', err);
            dispatch('error', { type: 'loadOptions', details: err });
        });

        if (res && !res.cancelled) {        
            if (res) {
                if (res && res.length > 0 && typeof res[0] !== 'object') {
                    res = convertStringItemsToObjects(res);
                }
                
                dispatch('loaded', { items: res });
            } else {
                res = [];
            }

            return {
                filteredItems: res,
                loading: false,
                focused: true,
                listOpen: true,
            };
        }
    }

    /* node_modules/svelte-select/ChevronIcon.svelte generated by Svelte v3.58.0 */

    const file$9 = "node_modules/svelte-select/ChevronIcon.svelte";

    function create_fragment$a(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747\n          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0\n          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502\n          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0\n          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z");
    			add_location(path, file$9, 6, 4, 114);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "0 0 20 20");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "class", "svelte-kvy30e");
    			add_location(svg, file$9, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ChevronIcon', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ChevronIcon> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ChevronIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ChevronIcon",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* node_modules/svelte-select/ClearIcon.svelte generated by Svelte v3.58.0 */

    const file$8 = "node_modules/svelte-select/ClearIcon.svelte";

    function create_fragment$9(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124\n    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z");
    			add_location(path, file$8, 8, 4, 141);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "-2 -2 50 50");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "presentation");
    			attr_dev(svg, "class", "svelte-1krt9p1");
    			add_location(svg, file$8, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ClearIcon', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ClearIcon> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ClearIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ClearIcon",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* node_modules/svelte-select/LoadingIcon.svelte generated by Svelte v3.58.0 */

    const file$7 = "node_modules/svelte-select/LoadingIcon.svelte";

    function create_fragment$8(ctx) {
    	let svg;
    	let circle;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "circle_path svelte-13eve6t");
    			attr_dev(circle, "cx", "50");
    			attr_dev(circle, "cy", "50");
    			attr_dev(circle, "r", "20");
    			attr_dev(circle, "fill", "none");
    			attr_dev(circle, "stroke", "currentColor");
    			attr_dev(circle, "stroke-width", "5");
    			attr_dev(circle, "stroke-miterlimit", "10");
    			add_location(circle, file$7, 1, 4, 48);
    			attr_dev(svg, "class", "loading svelte-13eve6t");
    			attr_dev(svg, "viewBox", "25 25 50 50");
    			add_location(svg, file$7, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, circle);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LoadingIcon', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LoadingIcon> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class LoadingIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LoadingIcon",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* node_modules/svelte-select/Select.svelte generated by Svelte v3.58.0 */

    const { Object: Object_1$2 } = globals;
    const file$6 = "node_modules/svelte-select/Select.svelte";
    const get_required_slot_changes = dirty => ({ value: dirty[0] & /*value*/ 8 });
    const get_required_slot_context = ctx => ({ value: /*value*/ ctx[3] });
    const get_input_hidden_slot_changes = dirty => ({ value: dirty[0] & /*value*/ 8 });
    const get_input_hidden_slot_context = ctx => ({ value: /*value*/ ctx[3] });
    const get_chevron_icon_slot_changes = dirty => ({ listOpen: dirty[0] & /*listOpen*/ 64 });
    const get_chevron_icon_slot_context = ctx => ({ listOpen: /*listOpen*/ ctx[6] });
    const get_clear_icon_slot_changes = dirty => ({});
    const get_clear_icon_slot_context = ctx => ({});
    const get_loading_icon_slot_changes = dirty => ({});
    const get_loading_icon_slot_context = ctx => ({});
    const get_selection_slot_changes_1 = dirty => ({ selection: dirty[0] & /*value*/ 8 });
    const get_selection_slot_context_1 = ctx => ({ selection: /*value*/ ctx[3] });

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[125] = list[i];
    	child_ctx[127] = i;
    	return child_ctx;
    }

    const get_multi_clear_icon_slot_changes = dirty => ({});
    const get_multi_clear_icon_slot_context = ctx => ({});
    const get_selection_slot_changes = dirty => ({ selection: dirty[0] & /*value*/ 8 });

    const get_selection_slot_context = ctx => ({
    	selection: /*item*/ ctx[125],
    	index: /*i*/ ctx[127]
    });

    const get_prepend_slot_changes = dirty => ({});
    const get_prepend_slot_context = ctx => ({});
    const get_list_append_slot_changes = dirty => ({});
    const get_list_append_slot_context = ctx => ({});
    const get_empty_slot_changes = dirty => ({});
    const get_empty_slot_context = ctx => ({});

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[125] = list[i];
    	child_ctx[127] = i;
    	return child_ctx;
    }

    const get_item_slot_changes = dirty => ({
    	item: dirty[0] & /*filteredItems*/ 16777216
    });

    const get_item_slot_context = ctx => ({
    	item: /*item*/ ctx[125],
    	index: /*i*/ ctx[127]
    });

    const get_list_slot_changes = dirty => ({
    	filteredItems: dirty[0] & /*filteredItems*/ 16777216
    });

    const get_list_slot_context = ctx => ({ filteredItems: /*filteredItems*/ ctx[24] });
    const get_list_prepend_slot_changes = dirty => ({});
    const get_list_prepend_slot_context = ctx => ({});

    // (682:4) {#if listOpen}
    function create_if_block_8(ctx) {
    	let div;
    	let t0;
    	let current_block_type_index;
    	let if_block1;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*$$slots*/ ctx[50]['list-prepend'] && create_if_block_13(ctx);
    	const if_block_creators = [create_if_block_10, create_if_block_11, create_if_block_12];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$$slots*/ ctx[50].list) return 0;
    		if (/*filteredItems*/ ctx[24].length > 0) return 1;
    		if (!/*hideEmptyState*/ ctx[19]) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	let if_block2 = /*$$slots*/ ctx[50]['list-append'] && create_if_block_9(ctx);

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "svelte-select-list svelte-1un9tlm");
    			toggle_class(div, "prefloat", /*prefloat*/ ctx[28]);
    			add_location(div, file$6, 682, 8, 20859);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			/*div_binding*/ ctx[90](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*floatingContent*/ ctx[49].call(null, div)),
    					listen_dev(div, "scroll", /*handleListScroll*/ ctx[41], false, false, false, false),
    					listen_dev(div, "pointerup", stop_propagation(prevent_default(/*pointerup_handler*/ ctx[85])), false, true, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[50]['list-prepend']) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[1] & /*$$slots*/ 524288) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_13(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				} else {
    					if_block1 = null;
    				}
    			}

    			if (/*$$slots*/ ctx[50]['list-append']) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[1] & /*$$slots*/ 524288) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_9(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*prefloat*/ 268435456) {
    				toggle_class(div, "prefloat", /*prefloat*/ ctx[28]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (if_block2) if_block2.d();
    			/*div_binding*/ ctx[90](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(682:4) {#if listOpen}",
    		ctx
    	});

    	return block;
    }

    // (690:12) {#if $$slots['list-prepend']}
    function create_if_block_13(ctx) {
    	let current;
    	const list_prepend_slot_template = /*#slots*/ ctx[82]["list-prepend"];
    	const list_prepend_slot = create_slot(list_prepend_slot_template, ctx, /*$$scope*/ ctx[81], get_list_prepend_slot_context);

    	const block = {
    		c: function create() {
    			if (list_prepend_slot) list_prepend_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (list_prepend_slot) {
    				list_prepend_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (list_prepend_slot) {
    				if (list_prepend_slot.p && (!current || dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						list_prepend_slot,
    						list_prepend_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(list_prepend_slot_template, /*$$scope*/ ctx[81], dirty, get_list_prepend_slot_changes),
    						get_list_prepend_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list_prepend_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list_prepend_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (list_prepend_slot) list_prepend_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(690:12) {#if $$slots['list-prepend']}",
    		ctx
    	});

    	return block;
    }

    // (717:38) 
    function create_if_block_12(ctx) {
    	let current;
    	const empty_slot_template = /*#slots*/ ctx[82].empty;
    	const empty_slot = create_slot(empty_slot_template, ctx, /*$$scope*/ ctx[81], get_empty_slot_context);
    	const empty_slot_or_fallback = empty_slot || fallback_block_9(ctx);

    	const block = {
    		c: function create() {
    			if (empty_slot_or_fallback) empty_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (empty_slot_or_fallback) {
    				empty_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (empty_slot) {
    				if (empty_slot.p && (!current || dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						empty_slot,
    						empty_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(empty_slot_template, /*$$scope*/ ctx[81], dirty, get_empty_slot_changes),
    						get_empty_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(empty_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(empty_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (empty_slot_or_fallback) empty_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(717:38) ",
    		ctx
    	});

    	return block;
    }

    // (692:47) 
    function create_if_block_11(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*filteredItems*/ ctx[24];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*filteredItems, value, itemId, listDom, scrollToHoverItem, hoverItemIndex, label*/ 1627402376 | dirty[1] & /*handleHover, handleItemClick, isItemActive*/ 28672 | dirty[2] & /*$$scope*/ 524288) {
    				each_value_1 = /*filteredItems*/ ctx[24];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(692:47) ",
    		ctx
    	});

    	return block;
    }

    // (691:12) {#if $$slots.list}
    function create_if_block_10(ctx) {
    	let current;
    	const list_slot_template = /*#slots*/ ctx[82].list;
    	const list_slot = create_slot(list_slot_template, ctx, /*$$scope*/ ctx[81], get_list_slot_context);

    	const block = {
    		c: function create() {
    			if (list_slot) list_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (list_slot) {
    				list_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (list_slot) {
    				if (list_slot.p && (!current || dirty[0] & /*filteredItems*/ 16777216 | dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						list_slot,
    						list_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(list_slot_template, /*$$scope*/ ctx[81], dirty, get_list_slot_changes),
    						get_list_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (list_slot) list_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(691:12) {#if $$slots.list}",
    		ctx
    	});

    	return block;
    }

    // (718:35)                      
    function fallback_block_9(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			div.textContent = "No options";
    			attr_dev(div, "class", "empty svelte-1un9tlm");
    			add_location(div, file$6, 718, 20, 22698);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_9.name,
    		type: "fallback",
    		source: "(718:35)                      ",
    		ctx
    	});

    	return block;
    }

    // (711:63)                                  
    function fallback_block_8(ctx) {
    	let t_value = /*item*/ ctx[125]?.[/*label*/ ctx[12]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*filteredItems, label*/ 16781312 && t_value !== (t_value = /*item*/ ctx[125]?.[/*label*/ ctx[12]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_8.name,
    		type: "fallback",
    		source: "(711:63)                                  ",
    		ctx
    	});

    	return block;
    }

    // (693:16) {#each filteredItems as item, i}
    function create_each_block_1$3(ctx) {
    	let div1;
    	let div0;
    	let activeScroll_action;
    	let hoverScroll_action;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const item_slot_template = /*#slots*/ ctx[82].item;
    	const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[81], get_item_slot_context);
    	const item_slot_or_fallback = item_slot || fallback_block_8(ctx);

    	function mouseover_handler() {
    		return /*mouseover_handler*/ ctx[87](/*i*/ ctx[127]);
    	}

    	function focus_handler() {
    		return /*focus_handler*/ ctx[88](/*i*/ ctx[127]);
    	}

    	function click_handler() {
    		return /*click_handler*/ ctx[89](/*item*/ ctx[125], /*i*/ ctx[127]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element$1("div");
    			div0 = element$1("div");
    			if (item_slot_or_fallback) item_slot_or_fallback.c();
    			t = space();
    			attr_dev(div0, "class", "item svelte-1un9tlm");
    			toggle_class(div0, "list-group-title", /*item*/ ctx[125].groupHeader);
    			toggle_class(div0, "active", /*isItemActive*/ ctx[45](/*item*/ ctx[125], /*value*/ ctx[3], /*itemId*/ ctx[13]));
    			toggle_class(div0, "first", isItemFirst(/*i*/ ctx[127]));
    			toggle_class(div0, "hover", /*hoverItemIndex*/ ctx[7] === /*i*/ ctx[127]);
    			toggle_class(div0, "group-item", /*item*/ ctx[125].groupItem);
    			toggle_class(div0, "not-selectable", /*item*/ ctx[125]?.selectable === false);
    			add_location(div0, file$6, 700, 24, 21726);
    			attr_dev(div1, "class", "list-item svelte-1un9tlm");
    			attr_dev(div1, "tabindex", "-1");
    			add_location(div1, file$6, 693, 20, 21348);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (item_slot_or_fallback) {
    				item_slot_or_fallback.m(div0, null);
    			}

    			append_dev(div1, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(activeScroll_action = /*activeScroll*/ ctx[46].call(null, div0, {
    						scroll: /*isItemActive*/ ctx[45](/*item*/ ctx[125], /*value*/ ctx[3], /*itemId*/ ctx[13]),
    						listDom: /*listDom*/ ctx[30]
    					})),
    					action_destroyer(hoverScroll_action = /*hoverScroll*/ ctx[47].call(null, div0, {
    						scroll: /*scrollToHoverItem*/ ctx[29] === /*i*/ ctx[127],
    						listDom: /*listDom*/ ctx[30]
    					})),
    					listen_dev(div1, "mouseover", mouseover_handler, false, false, false, false),
    					listen_dev(div1, "focus", focus_handler, false, false, false, false),
    					listen_dev(div1, "click", stop_propagation(click_handler), false, false, true, false),
    					listen_dev(div1, "keydown", stop_propagation(prevent_default(/*keydown_handler*/ ctx[86])), false, true, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (item_slot) {
    				if (item_slot.p && (!current || dirty[0] & /*filteredItems*/ 16777216 | dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						item_slot,
    						item_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(item_slot_template, /*$$scope*/ ctx[81], dirty, get_item_slot_changes),
    						get_item_slot_context
    					);
    				}
    			} else {
    				if (item_slot_or_fallback && item_slot_or_fallback.p && (!current || dirty[0] & /*filteredItems, label*/ 16781312)) {
    					item_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1, -1] : dirty);
    				}
    			}

    			if (activeScroll_action && is_function(activeScroll_action.update) && dirty[0] & /*filteredItems, value, itemId, listDom*/ 1090527240) activeScroll_action.update.call(null, {
    				scroll: /*isItemActive*/ ctx[45](/*item*/ ctx[125], /*value*/ ctx[3], /*itemId*/ ctx[13]),
    				listDom: /*listDom*/ ctx[30]
    			});

    			if (hoverScroll_action && is_function(hoverScroll_action.update) && dirty[0] & /*scrollToHoverItem, listDom*/ 1610612736) hoverScroll_action.update.call(null, {
    				scroll: /*scrollToHoverItem*/ ctx[29] === /*i*/ ctx[127],
    				listDom: /*listDom*/ ctx[30]
    			});

    			if (!current || dirty[0] & /*filteredItems*/ 16777216) {
    				toggle_class(div0, "list-group-title", /*item*/ ctx[125].groupHeader);
    			}

    			if (!current || dirty[0] & /*filteredItems, value, itemId*/ 16785416 | dirty[1] & /*isItemActive*/ 16384) {
    				toggle_class(div0, "active", /*isItemActive*/ ctx[45](/*item*/ ctx[125], /*value*/ ctx[3], /*itemId*/ ctx[13]));
    			}

    			if (!current || dirty[0] & /*hoverItemIndex*/ 128) {
    				toggle_class(div0, "hover", /*hoverItemIndex*/ ctx[7] === /*i*/ ctx[127]);
    			}

    			if (!current || dirty[0] & /*filteredItems*/ 16777216) {
    				toggle_class(div0, "group-item", /*item*/ ctx[125].groupItem);
    			}

    			if (!current || dirty[0] & /*filteredItems*/ 16777216) {
    				toggle_class(div0, "not-selectable", /*item*/ ctx[125]?.selectable === false);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(693:16) {#each filteredItems as item, i}",
    		ctx
    	});

    	return block;
    }

    // (722:12) {#if $$slots['list-append']}
    function create_if_block_9(ctx) {
    	let current;
    	const list_append_slot_template = /*#slots*/ ctx[82]["list-append"];
    	const list_append_slot = create_slot(list_append_slot_template, ctx, /*$$scope*/ ctx[81], get_list_append_slot_context);

    	const block = {
    		c: function create() {
    			if (list_append_slot) list_append_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (list_append_slot) {
    				list_append_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (list_append_slot) {
    				if (list_append_slot.p && (!current || dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						list_append_slot,
    						list_append_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(list_append_slot_template, /*$$scope*/ ctx[81], dirty, get_list_append_slot_changes),
    						get_list_append_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list_append_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list_append_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (list_append_slot) list_append_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(722:12) {#if $$slots['list-append']}",
    		ctx
    	});

    	return block;
    }

    // (727:8) {#if focused}
    function create_if_block_7(ctx) {
    	let span0;
    	let t0;
    	let t1;
    	let span1;
    	let t2;

    	const block = {
    		c: function create() {
    			span0 = element$1("span");
    			t0 = text(/*ariaSelection*/ ctx[32]);
    			t1 = space();
    			span1 = element$1("span");
    			t2 = text(/*ariaContext*/ ctx[31]);
    			attr_dev(span0, "id", "aria-selection");
    			attr_dev(span0, "class", "svelte-1un9tlm");
    			add_location(span0, file$6, 727, 12, 23008);
    			attr_dev(span1, "id", "aria-context");
    			attr_dev(span1, "class", "svelte-1un9tlm");
    			add_location(span1, file$6, 728, 12, 23069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			append_dev(span0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*ariaSelection*/ 2) set_data_dev(t0, /*ariaSelection*/ ctx[32]);
    			if (dirty[1] & /*ariaContext*/ 1) set_data_dev(t2, /*ariaContext*/ ctx[31]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(727:8) {#if focused}",
    		ctx
    	});

    	return block;
    }

    // (740:8) {#if hasValue}
    function create_if_block_4$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_5, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*multiple*/ ctx[9]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(740:8) {#if hasValue}",
    		ctx
    	});

    	return block;
    }

    // (766:12) {:else}
    function create_else_block$1(ctx) {
    	let div;
    	let current;
    	const selection_slot_template = /*#slots*/ ctx[82].selection;
    	const selection_slot = create_slot(selection_slot_template, ctx, /*$$scope*/ ctx[81], get_selection_slot_context_1);
    	const selection_slot_or_fallback = selection_slot || fallback_block_7(ctx);

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (selection_slot_or_fallback) selection_slot_or_fallback.c();
    			attr_dev(div, "class", "selected-item svelte-1un9tlm");
    			toggle_class(div, "hide-selected-item", /*hideSelectedItem*/ ctx[35]);
    			add_location(div, file$6, 766, 16, 24542);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (selection_slot_or_fallback) {
    				selection_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (selection_slot) {
    				if (selection_slot.p && (!current || dirty[0] & /*value*/ 8 | dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						selection_slot,
    						selection_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(selection_slot_template, /*$$scope*/ ctx[81], dirty, get_selection_slot_changes_1),
    						get_selection_slot_context_1
    					);
    				}
    			} else {
    				if (selection_slot_or_fallback && selection_slot_or_fallback.p && (!current || dirty[0] & /*value, label*/ 4104)) {
    					selection_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1, -1] : dirty);
    				}
    			}

    			if (!current || dirty[1] & /*hideSelectedItem*/ 16) {
    				toggle_class(div, "hide-selected-item", /*hideSelectedItem*/ ctx[35]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(selection_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(selection_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (selection_slot_or_fallback) selection_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(766:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (741:12) {#if multiple}
    function create_if_block_5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*value*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*activeValue, disabled, multiFullItemClearable, value, label*/ 67116040 | dirty[1] & /*handleMultiItemClear*/ 32 | dirty[2] & /*$$scope*/ 524288) {
    				each_value = /*value*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(741:12) {#if multiple}",
    		ctx
    	});

    	return block;
    }

    // (768:61)                          
    function fallback_block_7(ctx) {
    	let t_value = /*value*/ ctx[3][/*label*/ ctx[12]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*value, label*/ 4104 && t_value !== (t_value = /*value*/ ctx[3][/*label*/ ctx[12]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_7.name,
    		type: "fallback",
    		source: "(768:61)                          ",
    		ctx
    	});

    	return block;
    }

    // (750:78)                                  
    function fallback_block_6(ctx) {
    	let t_value = /*item*/ ctx[125][/*label*/ ctx[12]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*value, label*/ 4104 && t_value !== (t_value = /*item*/ ctx[125][/*label*/ ctx[12]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_6.name,
    		type: "fallback",
    		source: "(750:78)                                  ",
    		ctx
    	});

    	return block;
    }

    // (755:24) {#if !disabled && !multiFullItemClearable && ClearIcon}
    function create_if_block_6(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const multi_clear_icon_slot_template = /*#slots*/ ctx[82]["multi-clear-icon"];
    	const multi_clear_icon_slot = create_slot(multi_clear_icon_slot_template, ctx, /*$$scope*/ ctx[81], get_multi_clear_icon_slot_context);
    	const multi_clear_icon_slot_or_fallback = multi_clear_icon_slot || fallback_block_5(ctx);

    	function pointerup_handler_1() {
    		return /*pointerup_handler_1*/ ctx[91](/*i*/ ctx[127]);
    	}

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (multi_clear_icon_slot_or_fallback) multi_clear_icon_slot_or_fallback.c();
    			attr_dev(div, "class", "multi-item-clear svelte-1un9tlm");
    			add_location(div, file$6, 755, 28, 24066);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (multi_clear_icon_slot_or_fallback) {
    				multi_clear_icon_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "pointerup", stop_propagation(prevent_default(pointerup_handler_1)), false, true, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (multi_clear_icon_slot) {
    				if (multi_clear_icon_slot.p && (!current || dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						multi_clear_icon_slot,
    						multi_clear_icon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(multi_clear_icon_slot_template, /*$$scope*/ ctx[81], dirty, get_multi_clear_icon_slot_changes),
    						get_multi_clear_icon_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multi_clear_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multi_clear_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (multi_clear_icon_slot_or_fallback) multi_clear_icon_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(755:24) {#if !disabled && !multiFullItemClearable && ClearIcon}",
    		ctx
    	});

    	return block;
    }

    // (759:62)                                      
    function fallback_block_5(ctx) {
    	let clearicon;
    	let current;
    	clearicon = new ClearIcon({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(clearicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(clearicon, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(clearicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(clearicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(clearicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_5.name,
    		type: "fallback",
    		source: "(759:62)                                      ",
    		ctx
    	});

    	return block;
    }

    // (742:16) {#each value as item, i}
    function create_each_block$4(ctx) {
    	let div;
    	let span;
    	let t0;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	const selection_slot_template = /*#slots*/ ctx[82].selection;
    	const selection_slot = create_slot(selection_slot_template, ctx, /*$$scope*/ ctx[81], get_selection_slot_context);
    	const selection_slot_or_fallback = selection_slot || fallback_block_6(ctx);
    	let if_block = !/*disabled*/ ctx[11] && !/*multiFullItemClearable*/ ctx[10] && ClearIcon && create_if_block_6(ctx);

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[92](/*i*/ ctx[127]);
    	}

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			span = element$1("span");
    			if (selection_slot_or_fallback) selection_slot_or_fallback.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			attr_dev(span, "class", "multi-item-text svelte-1un9tlm");
    			add_location(span, file$6, 748, 24, 23733);
    			attr_dev(div, "class", "multi-item svelte-1un9tlm");
    			toggle_class(div, "active", /*activeValue*/ ctx[26] === /*i*/ ctx[127]);
    			toggle_class(div, "disabled", /*disabled*/ ctx[11]);
    			add_location(div, file$6, 742, 20, 23386);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);

    			if (selection_slot_or_fallback) {
    				selection_slot_or_fallback.m(span, null);
    			}

    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", prevent_default(click_handler_1), false, true, false, false),
    					listen_dev(div, "keydown", stop_propagation(prevent_default(/*keydown_handler_1*/ ctx[84])), false, true, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (selection_slot) {
    				if (selection_slot.p && (!current || dirty[0] & /*value*/ 8 | dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						selection_slot,
    						selection_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(selection_slot_template, /*$$scope*/ ctx[81], dirty, get_selection_slot_changes),
    						get_selection_slot_context
    					);
    				}
    			} else {
    				if (selection_slot_or_fallback && selection_slot_or_fallback.p && (!current || dirty[0] & /*value, label*/ 4104)) {
    					selection_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1, -1] : dirty);
    				}
    			}

    			if (!/*disabled*/ ctx[11] && !/*multiFullItemClearable*/ ctx[10] && ClearIcon) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*disabled, multiFullItemClearable*/ 3072) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*activeValue*/ 67108864) {
    				toggle_class(div, "active", /*activeValue*/ ctx[26] === /*i*/ ctx[127]);
    			}

    			if (!current || dirty[0] & /*disabled*/ 2048) {
    				toggle_class(div, "disabled", /*disabled*/ ctx[11]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(selection_slot_or_fallback, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(selection_slot_or_fallback, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (selection_slot_or_fallback) selection_slot_or_fallback.d(detaching);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(742:16) {#each value as item, i}",
    		ctx
    	});

    	return block;
    }

    // (789:8) {#if loading}
    function create_if_block_3$1(ctx) {
    	let div;
    	let current;
    	const loading_icon_slot_template = /*#slots*/ ctx[82]["loading-icon"];
    	const loading_icon_slot = create_slot(loading_icon_slot_template, ctx, /*$$scope*/ ctx[81], get_loading_icon_slot_context);
    	const loading_icon_slot_or_fallback = loading_icon_slot || fallback_block_4(ctx);

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (loading_icon_slot_or_fallback) loading_icon_slot_or_fallback.c();
    			attr_dev(div, "class", "icon loading svelte-1un9tlm");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$6, 789, 12, 25231);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (loading_icon_slot_or_fallback) {
    				loading_icon_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (loading_icon_slot) {
    				if (loading_icon_slot.p && (!current || dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						loading_icon_slot,
    						loading_icon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(loading_icon_slot_template, /*$$scope*/ ctx[81], dirty, get_loading_icon_slot_changes),
    						get_loading_icon_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loading_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loading_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (loading_icon_slot_or_fallback) loading_icon_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(789:8) {#if loading}",
    		ctx
    	});

    	return block;
    }

    // (791:42)                      
    function fallback_block_4(ctx) {
    	let loadingicon;
    	let current;
    	loadingicon = new LoadingIcon({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loadingicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loadingicon, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loadingicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loadingicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loadingicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_4.name,
    		type: "fallback",
    		source: "(791:42)                      ",
    		ctx
    	});

    	return block;
    }

    // (797:8) {#if showClear}
    function create_if_block_2$1(ctx) {
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	const clear_icon_slot_template = /*#slots*/ ctx[82]["clear-icon"];
    	const clear_icon_slot = create_slot(clear_icon_slot_template, ctx, /*$$scope*/ ctx[81], get_clear_icon_slot_context);
    	const clear_icon_slot_or_fallback = clear_icon_slot || fallback_block_3(ctx);

    	const block = {
    		c: function create() {
    			button = element$1("button");
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.c();
    			attr_dev(button, "class", "icon clear-select svelte-1un9tlm");
    			add_location(button, file$6, 797, 12, 25450);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (clear_icon_slot_or_fallback) {
    				clear_icon_slot_or_fallback.m(button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "pointerup", stop_propagation(prevent_default(/*handleClear*/ ctx[22])), false, true, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (clear_icon_slot) {
    				if (clear_icon_slot.p && (!current || dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						clear_icon_slot,
    						clear_icon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(clear_icon_slot_template, /*$$scope*/ ctx[81], dirty, get_clear_icon_slot_changes),
    						get_clear_icon_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(clear_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(clear_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (clear_icon_slot_or_fallback) clear_icon_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(797:8) {#if showClear}",
    		ctx
    	});

    	return block;
    }

    // (799:40)                      
    function fallback_block_3(ctx) {
    	let clearicon;
    	let current;
    	clearicon = new ClearIcon({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(clearicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(clearicon, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(clearicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(clearicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(clearicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_3.name,
    		type: "fallback",
    		source: "(799:40)                      ",
    		ctx
    	});

    	return block;
    }

    // (805:8) {#if showChevron}
    function create_if_block_1$1(ctx) {
    	let div;
    	let current;
    	const chevron_icon_slot_template = /*#slots*/ ctx[82]["chevron-icon"];
    	const chevron_icon_slot = create_slot(chevron_icon_slot_template, ctx, /*$$scope*/ ctx[81], get_chevron_icon_slot_context);
    	const chevron_icon_slot_or_fallback = chevron_icon_slot || fallback_block_2(ctx);

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (chevron_icon_slot_or_fallback) chevron_icon_slot_or_fallback.c();
    			attr_dev(div, "class", "icon chevron svelte-1un9tlm");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$6, 805, 12, 25717);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (chevron_icon_slot_or_fallback) {
    				chevron_icon_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (chevron_icon_slot) {
    				if (chevron_icon_slot.p && (!current || dirty[0] & /*listOpen*/ 64 | dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						chevron_icon_slot,
    						chevron_icon_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(chevron_icon_slot_template, /*$$scope*/ ctx[81], dirty, get_chevron_icon_slot_changes),
    						get_chevron_icon_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(chevron_icon_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(chevron_icon_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (chevron_icon_slot_or_fallback) chevron_icon_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(805:8) {#if showChevron}",
    		ctx
    	});

    	return block;
    }

    // (807:53)                      
    function fallback_block_2(ctx) {
    	let chevronicon;
    	let current;
    	chevronicon = new ChevronIcon({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(chevronicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(chevronicon, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(chevronicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(chevronicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(chevronicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_2.name,
    		type: "fallback",
    		source: "(807:53)                      ",
    		ctx
    	});

    	return block;
    }

    // (814:38)          
    function fallback_block_1(ctx) {
    	let input_1;
    	let input_1_value_value;

    	const block = {
    		c: function create() {
    			input_1 = element$1("input");
    			attr_dev(input_1, "name", /*name*/ ctx[8]);
    			attr_dev(input_1, "type", "hidden");

    			input_1.value = input_1_value_value = /*value*/ ctx[3]
    			? JSON.stringify(/*value*/ ctx[3])
    			: null;

    			attr_dev(input_1, "class", "svelte-1un9tlm");
    			add_location(input_1, file$6, 814, 8, 25969);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*name*/ 256) {
    				attr_dev(input_1, "name", /*name*/ ctx[8]);
    			}

    			if (dirty[0] & /*value*/ 8 && input_1_value_value !== (input_1_value_value = /*value*/ ctx[3]
    			? JSON.stringify(/*value*/ ctx[3])
    			: null)) {
    				prop_dev(input_1, "value", input_1_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(814:38)          ",
    		ctx
    	});

    	return block;
    }

    // (818:4) {#if required && (!value || value.length === 0)}
    function create_if_block$4(ctx) {
    	let current;
    	const required_slot_template = /*#slots*/ ctx[82].required;
    	const required_slot = create_slot(required_slot_template, ctx, /*$$scope*/ ctx[81], get_required_slot_context);
    	const required_slot_or_fallback = required_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			if (required_slot_or_fallback) required_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (required_slot_or_fallback) {
    				required_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (required_slot) {
    				if (required_slot.p && (!current || dirty[0] & /*value*/ 8 | dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						required_slot,
    						required_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(required_slot_template, /*$$scope*/ ctx[81], dirty, get_required_slot_changes),
    						get_required_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(required_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(required_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (required_slot_or_fallback) required_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(818:4) {#if required && (!value || value.length === 0)}",
    		ctx
    	});

    	return block;
    }

    // (819:38)              
    function fallback_block(ctx) {
    	let select;

    	const block = {
    		c: function create() {
    			select = element$1("select");
    			attr_dev(select, "class", "required svelte-1un9tlm");
    			select.required = true;
    			attr_dev(select, "tabindex", "-1");
    			attr_dev(select, "aria-hidden", "true");
    			add_location(select, file$6, 819, 12, 26162);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(819:38)              ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div3;
    	let t0;
    	let span;
    	let t1;
    	let div0;
    	let t2;
    	let div1;
    	let t3;
    	let input_1;
    	let input_1_readonly_value;
    	let t4;
    	let div2;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let div3_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*listOpen*/ ctx[6] && create_if_block_8(ctx);
    	let if_block1 = /*focused*/ ctx[2] && create_if_block_7(ctx);
    	const prepend_slot_template = /*#slots*/ ctx[82].prepend;
    	const prepend_slot = create_slot(prepend_slot_template, ctx, /*$$scope*/ ctx[81], get_prepend_slot_context);
    	let if_block2 = /*hasValue*/ ctx[25] && create_if_block_4$1(ctx);

    	let input_1_levels = [
    		{
    			readOnly: input_1_readonly_value = !/*searchable*/ ctx[17]
    		},
    		/*_inputAttributes*/ ctx[27],
    		{ placeholder: /*placeholderText*/ ctx[33] },
    		{ style: /*inputStyles*/ ctx[18] },
    		{ disabled: /*disabled*/ ctx[11] }
    	];

    	let input_data = {};

    	for (let i = 0; i < input_1_levels.length; i += 1) {
    		input_data = assign$3(input_data, input_1_levels[i]);
    	}

    	let if_block3 = /*loading*/ ctx[5] && create_if_block_3$1(ctx);
    	let if_block4 = /*showClear*/ ctx[34] && create_if_block_2$1(ctx);
    	let if_block5 = /*showChevron*/ ctx[20] && create_if_block_1$1(ctx);
    	const input_hidden_slot_template = /*#slots*/ ctx[82]["input-hidden"];
    	const input_hidden_slot = create_slot(input_hidden_slot_template, ctx, /*$$scope*/ ctx[81], get_input_hidden_slot_context);
    	const input_hidden_slot_or_fallback = input_hidden_slot || fallback_block_1(ctx);
    	let if_block6 = /*required*/ ctx[16] && (!/*value*/ ctx[3] || /*value*/ ctx[3].length === 0) && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div3 = element$1("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			span = element$1("span");
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div0 = element$1("div");
    			if (prepend_slot) prepend_slot.c();
    			t2 = space();
    			div1 = element$1("div");
    			if (if_block2) if_block2.c();
    			t3 = space();
    			input_1 = element$1("input");
    			t4 = space();
    			div2 = element$1("div");
    			if (if_block3) if_block3.c();
    			t5 = space();
    			if (if_block4) if_block4.c();
    			t6 = space();
    			if (if_block5) if_block5.c();
    			t7 = space();
    			if (input_hidden_slot_or_fallback) input_hidden_slot_or_fallback.c();
    			t8 = space();
    			if (if_block6) if_block6.c();
    			attr_dev(span, "aria-live", "polite");
    			attr_dev(span, "aria-atomic", "false");
    			attr_dev(span, "aria-relevant", "additions text");
    			attr_dev(span, "class", "a11y-text svelte-1un9tlm");
    			add_location(span, file$6, 725, 4, 22879);
    			attr_dev(div0, "class", "prepend svelte-1un9tlm");
    			add_location(div0, file$6, 734, 4, 23175);
    			set_attributes(input_1, input_data);
    			toggle_class(input_1, "svelte-1un9tlm", true);
    			add_location(input_1, file$6, 774, 8, 24807);
    			attr_dev(div1, "class", "value-container svelte-1un9tlm");
    			add_location(div1, file$6, 738, 4, 23245);
    			attr_dev(div2, "class", "indicators svelte-1un9tlm");
    			add_location(div2, file$6, 787, 4, 25172);
    			attr_dev(div3, "class", div3_class_value = "svelte-select " + /*containerClasses*/ ctx[21] + " svelte-1un9tlm");
    			attr_dev(div3, "style", /*containerStyles*/ ctx[14]);
    			toggle_class(div3, "multi", /*multiple*/ ctx[9]);
    			toggle_class(div3, "disabled", /*disabled*/ ctx[11]);
    			toggle_class(div3, "focused", /*focused*/ ctx[2]);
    			toggle_class(div3, "list-open", /*listOpen*/ ctx[6]);
    			toggle_class(div3, "show-chevron", /*showChevron*/ ctx[20]);
    			toggle_class(div3, "error", /*hasError*/ ctx[15]);
    			add_location(div3, file$6, 668, 0, 20470);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			if (if_block0) if_block0.m(div3, null);
    			append_dev(div3, t0);
    			append_dev(div3, span);
    			if (if_block1) if_block1.m(span, null);
    			append_dev(div3, t1);
    			append_dev(div3, div0);

    			if (prepend_slot) {
    				prepend_slot.m(div0, null);
    			}

    			append_dev(div3, t2);
    			append_dev(div3, div1);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div1, t3);
    			append_dev(div1, input_1);
    			if (input_1.autofocus) input_1.focus();
    			/*input_1_binding*/ ctx[93](input_1);
    			set_input_value(input_1, /*filterText*/ ctx[4]);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			if (if_block3) if_block3.m(div2, null);
    			append_dev(div2, t5);
    			if (if_block4) if_block4.m(div2, null);
    			append_dev(div2, t6);
    			if (if_block5) if_block5.m(div2, null);
    			append_dev(div3, t7);

    			if (input_hidden_slot_or_fallback) {
    				input_hidden_slot_or_fallback.m(div3, null);
    			}

    			append_dev(div3, t8);
    			if (if_block6) if_block6.m(div3, null);
    			/*div3_binding*/ ctx[95](div3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "click", /*handleClickOutside*/ ctx[42], false, false, false, false),
    					listen_dev(window, "keydown", /*handleKeyDown*/ ctx[37], false, false, false, false),
    					listen_dev(input_1, "keydown", /*handleKeyDown*/ ctx[37], false, false, false, false),
    					listen_dev(input_1, "blur", /*handleBlur*/ ctx[39], false, false, false, false),
    					listen_dev(input_1, "focus", /*handleFocus*/ ctx[38], false, false, false, false),
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[94]),
    					listen_dev(div3, "pointerup", prevent_default(/*handleClick*/ ctx[40]), false, true, false, false),
    					listen_dev(div3, "mousedown", prevent_default(/*mousedown_handler*/ ctx[83]), false, true, false, false),
    					action_destroyer(/*floatingRef*/ ctx[48].call(null, div3))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*listOpen*/ ctx[6]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*listOpen*/ 64) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_8(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div3, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*focused*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_7(ctx);
    					if_block1.c();
    					if_block1.m(span, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (prepend_slot) {
    				if (prepend_slot.p && (!current || dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						prepend_slot,
    						prepend_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(prepend_slot_template, /*$$scope*/ ctx[81], dirty, get_prepend_slot_changes),
    						get_prepend_slot_context
    					);
    				}
    			}

    			if (/*hasValue*/ ctx[25]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*hasValue*/ 33554432) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_4$1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div1, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			set_attributes(input_1, input_data = get_spread_update(input_1_levels, [
    				(!current || dirty[0] & /*searchable*/ 131072 && input_1_readonly_value !== (input_1_readonly_value = !/*searchable*/ ctx[17])) && { readOnly: input_1_readonly_value },
    				dirty[0] & /*_inputAttributes*/ 134217728 && /*_inputAttributes*/ ctx[27],
    				(!current || dirty[1] & /*placeholderText*/ 4) && { placeholder: /*placeholderText*/ ctx[33] },
    				(!current || dirty[0] & /*inputStyles*/ 262144) && { style: /*inputStyles*/ ctx[18] },
    				(!current || dirty[0] & /*disabled*/ 2048) && { disabled: /*disabled*/ ctx[11] }
    			]));

    			if (dirty[0] & /*filterText*/ 16 && input_1.value !== /*filterText*/ ctx[4]) {
    				set_input_value(input_1, /*filterText*/ ctx[4]);
    			}

    			toggle_class(input_1, "svelte-1un9tlm", true);

    			if (/*loading*/ ctx[5]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*loading*/ 32) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_3$1(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div2, t5);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*showClear*/ ctx[34]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[1] & /*showClear*/ 8) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_2$1(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div2, t6);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (/*showChevron*/ ctx[20]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);

    					if (dirty[0] & /*showChevron*/ 1048576) {
    						transition_in(if_block5, 1);
    					}
    				} else {
    					if_block5 = create_if_block_1$1(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(div2, null);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}

    			if (input_hidden_slot) {
    				if (input_hidden_slot.p && (!current || dirty[0] & /*value*/ 8 | dirty[2] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						input_hidden_slot,
    						input_hidden_slot_template,
    						ctx,
    						/*$$scope*/ ctx[81],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[81])
    						: get_slot_changes(input_hidden_slot_template, /*$$scope*/ ctx[81], dirty, get_input_hidden_slot_changes),
    						get_input_hidden_slot_context
    					);
    				}
    			} else {
    				if (input_hidden_slot_or_fallback && input_hidden_slot_or_fallback.p && (!current || dirty[0] & /*name, value*/ 264)) {
    					input_hidden_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1, -1] : dirty);
    				}
    			}

    			if (/*required*/ ctx[16] && (!/*value*/ ctx[3] || /*value*/ ctx[3].length === 0)) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);

    					if (dirty[0] & /*required, value*/ 65544) {
    						transition_in(if_block6, 1);
    					}
    				} else {
    					if_block6 = create_if_block$4(ctx);
    					if_block6.c();
    					transition_in(if_block6, 1);
    					if_block6.m(div3, null);
    				}
    			} else if (if_block6) {
    				group_outros();

    				transition_out(if_block6, 1, 1, () => {
    					if_block6 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*containerClasses*/ 2097152 && div3_class_value !== (div3_class_value = "svelte-select " + /*containerClasses*/ ctx[21] + " svelte-1un9tlm")) {
    				attr_dev(div3, "class", div3_class_value);
    			}

    			if (!current || dirty[0] & /*containerStyles*/ 16384) {
    				attr_dev(div3, "style", /*containerStyles*/ ctx[14]);
    			}

    			if (!current || dirty[0] & /*containerClasses, multiple*/ 2097664) {
    				toggle_class(div3, "multi", /*multiple*/ ctx[9]);
    			}

    			if (!current || dirty[0] & /*containerClasses, disabled*/ 2099200) {
    				toggle_class(div3, "disabled", /*disabled*/ ctx[11]);
    			}

    			if (!current || dirty[0] & /*containerClasses, focused*/ 2097156) {
    				toggle_class(div3, "focused", /*focused*/ ctx[2]);
    			}

    			if (!current || dirty[0] & /*containerClasses, listOpen*/ 2097216) {
    				toggle_class(div3, "list-open", /*listOpen*/ ctx[6]);
    			}

    			if (!current || dirty[0] & /*containerClasses, showChevron*/ 3145728) {
    				toggle_class(div3, "show-chevron", /*showChevron*/ ctx[20]);
    			}

    			if (!current || dirty[0] & /*containerClasses, hasError*/ 2129920) {
    				toggle_class(div3, "error", /*hasError*/ ctx[15]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(prepend_slot, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block5);
    			transition_in(input_hidden_slot_or_fallback, local);
    			transition_in(if_block6);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(prepend_slot, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block5);
    			transition_out(input_hidden_slot_or_fallback, local);
    			transition_out(if_block6);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (prepend_slot) prepend_slot.d(detaching);
    			if (if_block2) if_block2.d();
    			/*input_1_binding*/ ctx[93](null);
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (input_hidden_slot_or_fallback) input_hidden_slot_or_fallback.d(detaching);
    			if (if_block6) if_block6.d();
    			/*div3_binding*/ ctx[95](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function convertStringItemsToObjects(_items) {
    	return _items.map((item, index) => {
    		return { index, value: item, label: `${item}` };
    	});
    }

    function isItemFirst(itemIndex) {
    	return itemIndex === 0;
    }

    function isItemSelectable(item) {
    	return item.groupHeader && item.selectable || item.selectable || !item.hasOwnProperty('selectable');
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let hasValue;
    	let hideSelectedItem;
    	let showClear;
    	let placeholderText;
    	let ariaSelection;
    	let ariaContext;
    	let filteredItems;
    	let listDom;
    	let scrollToHoverItem;
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots('Select', slots, [
    		'list-prepend','list','item','empty','list-append','prepend','selection','multi-clear-icon','loading-icon','clear-icon','chevron-icon','input-hidden','required'
    	]);

    	const $$slots = compute_slots(slots);
    	const dispatch = createEventDispatcher();
    	let { justValue = null } = $$props;
    	let { filter = filter$2 } = $$props;
    	let { getItems: getItems$1 = getItems } = $$props;
    	let { id = null } = $$props;
    	let { name = null } = $$props;
    	let { container = undefined } = $$props;
    	let { input = undefined } = $$props;
    	let { multiple = false } = $$props;
    	let { multiFullItemClearable = false } = $$props;
    	let { disabled = false } = $$props;
    	let { focused = false } = $$props;
    	let { value = null } = $$props;
    	let { filterText = '' } = $$props;
    	let { placeholder = 'Please select' } = $$props;
    	let { placeholderAlwaysShow = false } = $$props;
    	let { items = null } = $$props;
    	let { label = 'label' } = $$props;
    	let { itemFilter = (label, filterText, option) => `${label}`.toLowerCase().includes(filterText.toLowerCase()) } = $$props;
    	let { groupBy = undefined } = $$props;
    	let { groupFilter = groups => groups } = $$props;
    	let { groupHeaderSelectable = false } = $$props;
    	let { itemId = 'value' } = $$props;
    	let { loadOptions = undefined } = $$props;
    	let { containerStyles = '' } = $$props;
    	let { hasError = false } = $$props;
    	let { filterSelectedItems = true } = $$props;
    	let { required = false } = $$props;
    	let { closeListOnChange = true } = $$props;

    	let { createGroupHeaderItem = (groupValue, item) => {
    		return { value: groupValue, [label]: groupValue };
    	} } = $$props;

    	const getFilteredItems = () => {
    		return filteredItems;
    	};

    	let { searchable = true } = $$props;
    	let { inputStyles = '' } = $$props;
    	let { clearable = true } = $$props;
    	let { loading = false } = $$props;
    	let { listOpen = false } = $$props;
    	let timeout;

    	let { debounce = (fn, wait = 1) => {
    		clearTimeout(timeout);
    		timeout = setTimeout(fn, wait);
    	} } = $$props;

    	let { debounceWait = 300 } = $$props;
    	let { hideEmptyState = false } = $$props;
    	let { inputAttributes = {} } = $$props;
    	let { listAutoWidth = true } = $$props;
    	let { showChevron = false } = $$props;
    	let { listOffset = 5 } = $$props;
    	let { hoverItemIndex = 0 } = $$props;
    	let { floatingConfig = {} } = $$props;
    	let { class: containerClasses = '' } = $$props;
    	let activeValue;
    	let prev_value;
    	let prev_filterText;
    	let prev_multiple;

    	function setValue() {
    		if (typeof value === 'string') {
    			let item = (items || []).find(item => item[itemId] === value);
    			$$invalidate(3, value = item || { [itemId]: value, label: value });
    		} else if (multiple && Array.isArray(value) && value.length > 0) {
    			$$invalidate(3, value = value.map(item => typeof item === 'string'
    			? { value: item, label: item }
    			: item));
    		}
    	}

    	let _inputAttributes;

    	function assignInputAttributes() {
    		$$invalidate(27, _inputAttributes = Object.assign(
    			{
    				autocapitalize: 'none',
    				autocomplete: 'off',
    				autocorrect: 'off',
    				spellcheck: false,
    				tabindex: 0,
    				type: 'text',
    				'aria-autocomplete': 'list'
    			},
    			inputAttributes
    		));

    		if (id) {
    			$$invalidate(27, _inputAttributes['id'] = id, _inputAttributes);
    		}

    		if (!searchable) {
    			$$invalidate(27, _inputAttributes['readonly'] = true, _inputAttributes);
    		}
    	}

    	function filterGroupedItems(_items) {
    		const groupValues = [];
    		const groups = {};

    		_items.forEach(item => {
    			const groupValue = groupBy(item);

    			if (!groupValues.includes(groupValue)) {
    				groupValues.push(groupValue);
    				groups[groupValue] = [];

    				if (groupValue) {
    					groups[groupValue].push(Object.assign(createGroupHeaderItem(groupValue, item), {
    						id: groupValue,
    						groupHeader: true,
    						selectable: groupHeaderSelectable
    					}));
    				}
    			}

    			groups[groupValue].push(Object.assign({ groupItem: !!groupValue }, item));
    		});

    		const sortedGroupedItems = [];

    		groupFilter(groupValues).forEach(groupValue => {
    			if (groups[groupValue]) sortedGroupedItems.push(...groups[groupValue]);
    		});

    		return sortedGroupedItems;
    	}

    	function dispatchSelectedItem() {
    		if (multiple) {
    			if (JSON.stringify(value) !== JSON.stringify(prev_value)) {
    				if (checkValueForDuplicates()) {
    					dispatch('input', value);
    				}
    			}

    			return;
    		}

    		if (!prev_value || JSON.stringify(value[itemId]) !== JSON.stringify(prev_value[itemId])) {
    			dispatch('input', value);
    		}
    	}

    	function setupMulti() {
    		if (value) {
    			if (Array.isArray(value)) {
    				$$invalidate(3, value = [...value]);
    			} else {
    				$$invalidate(3, value = [value]);
    			}
    		}
    	}

    	function setupSingle() {
    		if (value) $$invalidate(3, value = null);
    	}

    	function setValueIndexAsHoverIndex() {
    		const valueIndex = filteredItems.findIndex(i => {
    			return i[itemId] === value[itemId];
    		});

    		checkHoverSelectable(valueIndex, true);
    	}

    	function dispatchHover(i) {
    		dispatch('hoverItem', i);
    	}

    	function checkHoverSelectable(startingIndex = 0, ignoreGroup) {
    		$$invalidate(7, hoverItemIndex = startingIndex < 0 ? 0 : startingIndex);

    		if (!ignoreGroup && groupBy && filteredItems[hoverItemIndex] && !filteredItems[hoverItemIndex].selectable) {
    			setHoverIndex(1);
    		}
    	}

    	function setupFilterText() {
    		if (!loadOptions && filterText.length === 0) return;

    		if (loadOptions) {
    			debounce(
    				async function () {
    					$$invalidate(5, loading = true);

    					let res = await getItems$1({
    						dispatch,
    						loadOptions,
    						convertStringItemsToObjects,
    						filterText
    					});

    					if (res) {
    						$$invalidate(5, loading = res.loading);

    						$$invalidate(6, listOpen = listOpen
    						? res.listOpen
    						: filterText.length > 0 ? true : false);

    						$$invalidate(2, focused = listOpen && res.focused);

    						$$invalidate(51, items = groupBy
    						? filterGroupedItems(res.filteredItems)
    						: res.filteredItems);
    					} else {
    						$$invalidate(5, loading = false);
    						$$invalidate(2, focused = true);
    						$$invalidate(6, listOpen = true);
    					}
    				},
    				debounceWait
    			);
    		} else {
    			$$invalidate(6, listOpen = true);

    			if (multiple) {
    				$$invalidate(26, activeValue = undefined);
    			}
    		}
    	}

    	function handleFilterEvent(items) {
    		if (listOpen) dispatch('filter', items);
    	}

    	beforeUpdate(async () => {
    		$$invalidate(77, prev_value = value);
    		$$invalidate(78, prev_filterText = filterText);
    		$$invalidate(79, prev_multiple = multiple);
    	});

    	function computeJustValue() {
    		if (multiple) return value ? value.map(item => item[itemId]) : null;
    		return value ? value[itemId] : value;
    	}

    	function checkValueForDuplicates() {
    		let noDuplicates = true;

    		if (value) {
    			const ids = [];
    			const uniqueValues = [];

    			value.forEach(val => {
    				if (!ids.includes(val[itemId])) {
    					ids.push(val[itemId]);
    					uniqueValues.push(val);
    				} else {
    					noDuplicates = false;
    				}
    			});

    			if (!noDuplicates) $$invalidate(3, value = uniqueValues);
    		}

    		return noDuplicates;
    	}

    	function findItem(selection) {
    		let matchTo = selection ? selection[itemId] : value[itemId];
    		return items.find(item => item[itemId] === matchTo);
    	}

    	function updateValueDisplay(items) {
    		if (!items || items.length === 0 || items.some(item => typeof item !== 'object')) return;

    		if (!value || (multiple
    		? value.some(selection => !selection || !selection[itemId])
    		: !value[itemId])) return;

    		if (Array.isArray(value)) {
    			$$invalidate(3, value = value.map(selection => findItem(selection) || selection));
    		} else {
    			$$invalidate(3, value = findItem() || value);
    		}
    	}

    	async function handleMultiItemClear(i) {
    		const itemToRemove = value[i];

    		if (value.length === 1) {
    			$$invalidate(3, value = undefined);
    		} else {
    			$$invalidate(3, value = value.filter(item => {
    				return item !== itemToRemove;
    			}));
    		}

    		dispatch('clear', itemToRemove);
    	}

    	function handleKeyDown(e) {
    		if (!focused) return;
    		e.stopPropagation();

    		switch (e.key) {
    			case 'Escape':
    				e.preventDefault();
    				closeList();
    				break;
    			case 'Enter':
    				e.preventDefault();
    				if (listOpen) {
    					if (filteredItems.length === 0) break;
    					const hoverItem = filteredItems[hoverItemIndex];

    					if (value && !multiple && value[itemId] === hoverItem[itemId]) {
    						closeList();
    						break;
    					} else {
    						handleSelect(filteredItems[hoverItemIndex]);
    					}
    				}
    				break;
    			case 'ArrowDown':
    				e.preventDefault();
    				if (listOpen) {
    					setHoverIndex(1);
    				} else {
    					$$invalidate(6, listOpen = true);
    					$$invalidate(26, activeValue = undefined);
    				}
    				break;
    			case 'ArrowUp':
    				e.preventDefault();
    				if (listOpen) {
    					setHoverIndex(-1);
    				} else {
    					$$invalidate(6, listOpen = true);
    					$$invalidate(26, activeValue = undefined);
    				}
    				break;
    			case 'Tab':
    				if (listOpen && focused) {
    					if (filteredItems.length === 0 || value && value[itemId] === filteredItems[hoverItemIndex][itemId]) return closeList();
    					e.preventDefault();
    					handleSelect(filteredItems[hoverItemIndex]);
    					closeList();
    				}
    				break;
    			case 'Backspace':
    				if (!multiple || filterText.length > 0) return;
    				if (multiple && value && value.length > 0) {
    					handleMultiItemClear(activeValue !== undefined
    					? activeValue
    					: value.length - 1);

    					if (activeValue === 0 || activeValue === undefined) break;
    					$$invalidate(26, activeValue = value.length > activeValue ? activeValue - 1 : undefined);
    				}
    				break;
    			case 'ArrowLeft':
    				if (!value || !multiple || filterText.length > 0) return;
    				if (activeValue === undefined) {
    					$$invalidate(26, activeValue = value.length - 1);
    				} else if (value.length > activeValue && activeValue !== 0) {
    					$$invalidate(26, activeValue -= 1);
    				}
    				break;
    			case 'ArrowRight':
    				if (!value || !multiple || filterText.length > 0 || activeValue === undefined) return;
    				if (activeValue === value.length - 1) {
    					$$invalidate(26, activeValue = undefined);
    				} else if (activeValue < value.length - 1) {
    					$$invalidate(26, activeValue += 1);
    				}
    				break;
    		}
    	}

    	function handleFocus(e) {
    		if (focused && input === document?.activeElement) return;
    		if (e) dispatch('focus', e);
    		input.focus();
    		$$invalidate(2, focused = true);
    	}

    	async function handleBlur(e) {
    		if (isScrolling) return;

    		if (listOpen || focused) {
    			dispatch('blur', e);
    			closeList();
    			$$invalidate(2, focused = false);
    			$$invalidate(26, activeValue = undefined);
    			input.blur();
    		}
    	}

    	function handleClick() {
    		if (disabled) return;
    		$$invalidate(6, listOpen = !listOpen);
    	}

    	function handleClear() {
    		dispatch('clear', value);
    		$$invalidate(3, value = undefined);
    		closeList();
    		handleFocus();
    	}

    	onMount(() => {
    		if (listOpen) $$invalidate(2, focused = true);
    		if (focused && input) input.focus();
    	});

    	function itemSelected(selection) {
    		if (selection) {
    			$$invalidate(4, filterText = '');
    			const item = Object.assign({}, selection);
    			if (item.groupHeader && !item.selectable) return;

    			$$invalidate(3, value = multiple
    			? value ? value.concat([item]) : [item]
    			: $$invalidate(3, value = item));

    			setTimeout(() => {
    				if (closeListOnChange) closeList();
    				$$invalidate(26, activeValue = undefined);
    				dispatch('change', value);
    				dispatch('select', selection);
    			});
    		}
    	}

    	function closeList() {
    		$$invalidate(4, filterText = '');
    		$$invalidate(6, listOpen = false);
    	}

    	let { ariaValues = values => {
    		return `Option ${values}, selected.`;
    	} } = $$props;

    	let { ariaListOpen = (label, count) => {
    		return `You are currently focused on option ${label}. There are ${count} results available.`;
    	} } = $$props;

    	let { ariaFocused = () => {
    		return `Select is focused, type to refine list, press down to open the menu.`;
    	} } = $$props;

    	function handleAriaSelection(_multiple) {
    		let selected = undefined;

    		if (_multiple && value.length > 0) {
    			selected = value.map(v => v[label]).join(', ');
    		} else {
    			selected = value[label];
    		}

    		return ariaValues(selected);
    	}

    	function handleAriaContent() {
    		if (!filteredItems || filteredItems.length === 0) return '';
    		let _item = filteredItems[hoverItemIndex];

    		if (listOpen && _item) {
    			let count = filteredItems ? filteredItems.length : 0;
    			return ariaListOpen(_item[label], count);
    		} else {
    			return ariaFocused();
    		}
    	}

    	let list = null;
    	let isScrollingTimer;

    	function handleListScroll() {
    		clearTimeout(isScrollingTimer);

    		isScrollingTimer = setTimeout(
    			() => {
    				isScrolling = false;
    			},
    			100
    		);
    	}

    	function handleClickOutside(event) {
    		if (!listOpen && !focused && container && !container.contains(event.target) && !list?.contains(event.target)) {
    			handleBlur();
    		}
    	}

    	onDestroy(() => {
    		list?.remove();
    	});

    	let isScrolling = false;

    	function handleSelect(item) {
    		if (!item || item.selectable === false) return;
    		itemSelected(item);
    	}

    	function handleHover(i) {
    		if (isScrolling) return;
    		$$invalidate(7, hoverItemIndex = i);
    	}

    	function handleItemClick(args) {
    		const { item, i } = args;
    		if (item?.selectable === false) return;
    		if (value && !multiple && value[itemId] === item[itemId]) return closeList();

    		if (isItemSelectable(item)) {
    			$$invalidate(7, hoverItemIndex = i);
    			handleSelect(item);
    		}
    	}

    	function setHoverIndex(increment) {
    		let selectableFilteredItems = filteredItems.filter(item => !Object.hasOwn(item, 'selectable') || item.selectable === true);

    		if (selectableFilteredItems.length === 0) {
    			return $$invalidate(7, hoverItemIndex = 0);
    		}

    		if (increment > 0 && hoverItemIndex === filteredItems.length - 1) {
    			$$invalidate(7, hoverItemIndex = 0);
    		} else if (increment < 0 && hoverItemIndex === 0) {
    			$$invalidate(7, hoverItemIndex = filteredItems.length - 1);
    		} else {
    			$$invalidate(7, hoverItemIndex = hoverItemIndex + increment);
    		}

    		const hover = filteredItems[hoverItemIndex];

    		if (hover && hover.selectable === false) {
    			if (increment === 1 || increment === -1) setHoverIndex(increment);
    			return;
    		}
    	}

    	function isItemActive(item, value, itemId) {
    		if (multiple) return;
    		return value && value[itemId] === item[itemId];
    	}

    	const activeScroll = scrollAction;
    	const hoverScroll = scrollAction;

    	function scrollAction(node) {
    		return {
    			update(args) {
    				if (args.scroll) {
    					handleListScroll();
    					node.scrollIntoView({ behavior: 'auto', block: 'nearest' });
    				}
    			}
    		};
    	}

    	function setListWidth() {
    		const { width } = container.getBoundingClientRect();
    		$$invalidate(23, list.style.width = listAutoWidth ? width + 'px' : 'auto', list);
    	}

    	let _floatingConfig = {
    		strategy: 'absolute',
    		placement: 'bottom-start',
    		middleware: [offset(listOffset), flip(), shift()],
    		autoUpdate: false
    	};

    	const [floatingRef, floatingContent, floatingUpdate] = createFloatingActions(_floatingConfig);
    	let prefloat = true;

    	function listMounted(list, listOpen) {
    		if (!list || !listOpen) return $$invalidate(28, prefloat = true);

    		setTimeout(
    			() => {
    				$$invalidate(28, prefloat = false);
    			},
    			0
    		);
    	}

    	const writable_props = [
    		'justValue',
    		'filter',
    		'getItems',
    		'id',
    		'name',
    		'container',
    		'input',
    		'multiple',
    		'multiFullItemClearable',
    		'disabled',
    		'focused',
    		'value',
    		'filterText',
    		'placeholder',
    		'placeholderAlwaysShow',
    		'items',
    		'label',
    		'itemFilter',
    		'groupBy',
    		'groupFilter',
    		'groupHeaderSelectable',
    		'itemId',
    		'loadOptions',
    		'containerStyles',
    		'hasError',
    		'filterSelectedItems',
    		'required',
    		'closeListOnChange',
    		'createGroupHeaderItem',
    		'searchable',
    		'inputStyles',
    		'clearable',
    		'loading',
    		'listOpen',
    		'debounce',
    		'debounceWait',
    		'hideEmptyState',
    		'inputAttributes',
    		'listAutoWidth',
    		'showChevron',
    		'listOffset',
    		'hoverItemIndex',
    		'floatingConfig',
    		'class',
    		'ariaValues',
    		'ariaListOpen',
    		'ariaFocused'
    	];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Select> was created with unknown prop '${key}'`);
    	});

    	function mousedown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	function pointerup_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	const mouseover_handler = i => handleHover(i);
    	const focus_handler = i => handleHover(i);
    	const click_handler = (item, i) => handleItemClick({ item, i });

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			list = $$value;
    			$$invalidate(23, list);
    		});
    	}

    	const pointerup_handler_1 = i => handleMultiItemClear(i);
    	const click_handler_1 = i => multiFullItemClearable ? handleMultiItemClear(i) : {};

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(1, input);
    		});
    	}

    	function input_1_input_handler() {
    		filterText = this.value;
    		$$invalidate(4, filterText);
    	}

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('justValue' in $$props) $$invalidate(52, justValue = $$props.justValue);
    		if ('filter' in $$props) $$invalidate(53, filter = $$props.filter);
    		if ('getItems' in $$props) $$invalidate(54, getItems$1 = $$props.getItems);
    		if ('id' in $$props) $$invalidate(55, id = $$props.id);
    		if ('name' in $$props) $$invalidate(8, name = $$props.name);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(1, input = $$props.input);
    		if ('multiple' in $$props) $$invalidate(9, multiple = $$props.multiple);
    		if ('multiFullItemClearable' in $$props) $$invalidate(10, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('disabled' in $$props) $$invalidate(11, disabled = $$props.disabled);
    		if ('focused' in $$props) $$invalidate(2, focused = $$props.focused);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(4, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(56, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(57, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(51, items = $$props.items);
    		if ('label' in $$props) $$invalidate(12, label = $$props.label);
    		if ('itemFilter' in $$props) $$invalidate(58, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(59, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(60, groupFilter = $$props.groupFilter);
    		if ('groupHeaderSelectable' in $$props) $$invalidate(61, groupHeaderSelectable = $$props.groupHeaderSelectable);
    		if ('itemId' in $$props) $$invalidate(13, itemId = $$props.itemId);
    		if ('loadOptions' in $$props) $$invalidate(62, loadOptions = $$props.loadOptions);
    		if ('containerStyles' in $$props) $$invalidate(14, containerStyles = $$props.containerStyles);
    		if ('hasError' in $$props) $$invalidate(15, hasError = $$props.hasError);
    		if ('filterSelectedItems' in $$props) $$invalidate(63, filterSelectedItems = $$props.filterSelectedItems);
    		if ('required' in $$props) $$invalidate(16, required = $$props.required);
    		if ('closeListOnChange' in $$props) $$invalidate(64, closeListOnChange = $$props.closeListOnChange);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(65, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('searchable' in $$props) $$invalidate(17, searchable = $$props.searchable);
    		if ('inputStyles' in $$props) $$invalidate(18, inputStyles = $$props.inputStyles);
    		if ('clearable' in $$props) $$invalidate(67, clearable = $$props.clearable);
    		if ('loading' in $$props) $$invalidate(5, loading = $$props.loading);
    		if ('listOpen' in $$props) $$invalidate(6, listOpen = $$props.listOpen);
    		if ('debounce' in $$props) $$invalidate(68, debounce = $$props.debounce);
    		if ('debounceWait' in $$props) $$invalidate(69, debounceWait = $$props.debounceWait);
    		if ('hideEmptyState' in $$props) $$invalidate(19, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(70, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(71, listAutoWidth = $$props.listAutoWidth);
    		if ('showChevron' in $$props) $$invalidate(20, showChevron = $$props.showChevron);
    		if ('listOffset' in $$props) $$invalidate(72, listOffset = $$props.listOffset);
    		if ('hoverItemIndex' in $$props) $$invalidate(7, hoverItemIndex = $$props.hoverItemIndex);
    		if ('floatingConfig' in $$props) $$invalidate(73, floatingConfig = $$props.floatingConfig);
    		if ('class' in $$props) $$invalidate(21, containerClasses = $$props.class);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    		if ('$$scope' in $$props) $$invalidate(81, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		beforeUpdate,
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		offset,
    		flip,
    		shift,
    		createFloatingActions,
    		dispatch,
    		_filter: filter$2,
    		_getItems: getItems,
    		ChevronIcon,
    		ClearIcon,
    		LoadingIcon,
    		justValue,
    		filter,
    		getItems: getItems$1,
    		id,
    		name,
    		container,
    		input,
    		multiple,
    		multiFullItemClearable,
    		disabled,
    		focused,
    		value,
    		filterText,
    		placeholder,
    		placeholderAlwaysShow,
    		items,
    		label,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		groupHeaderSelectable,
    		itemId,
    		loadOptions,
    		containerStyles,
    		hasError,
    		filterSelectedItems,
    		required,
    		closeListOnChange,
    		createGroupHeaderItem,
    		getFilteredItems,
    		searchable,
    		inputStyles,
    		clearable,
    		loading,
    		listOpen,
    		timeout,
    		debounce,
    		debounceWait,
    		hideEmptyState,
    		inputAttributes,
    		listAutoWidth,
    		showChevron,
    		listOffset,
    		hoverItemIndex,
    		floatingConfig,
    		containerClasses,
    		activeValue,
    		prev_value,
    		prev_filterText,
    		prev_multiple,
    		setValue,
    		_inputAttributes,
    		assignInputAttributes,
    		convertStringItemsToObjects,
    		filterGroupedItems,
    		dispatchSelectedItem,
    		setupMulti,
    		setupSingle,
    		setValueIndexAsHoverIndex,
    		dispatchHover,
    		checkHoverSelectable,
    		setupFilterText,
    		handleFilterEvent,
    		computeJustValue,
    		checkValueForDuplicates,
    		findItem,
    		updateValueDisplay,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleBlur,
    		handleClick,
    		handleClear,
    		itemSelected,
    		closeList,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		handleAriaSelection,
    		handleAriaContent,
    		list,
    		isScrollingTimer,
    		handleListScroll,
    		handleClickOutside,
    		isScrolling,
    		handleSelect,
    		handleHover,
    		handleItemClick,
    		setHoverIndex,
    		isItemActive,
    		isItemFirst,
    		isItemSelectable,
    		activeScroll,
    		hoverScroll,
    		scrollAction,
    		setListWidth,
    		_floatingConfig,
    		floatingRef,
    		floatingContent,
    		floatingUpdate,
    		prefloat,
    		listMounted,
    		filteredItems,
    		scrollToHoverItem,
    		listDom,
    		ariaContext,
    		ariaSelection,
    		placeholderText,
    		hasValue,
    		showClear,
    		hideSelectedItem
    	});

    	$$self.$inject_state = $$props => {
    		if ('justValue' in $$props) $$invalidate(52, justValue = $$props.justValue);
    		if ('filter' in $$props) $$invalidate(53, filter = $$props.filter);
    		if ('getItems' in $$props) $$invalidate(54, getItems$1 = $$props.getItems);
    		if ('id' in $$props) $$invalidate(55, id = $$props.id);
    		if ('name' in $$props) $$invalidate(8, name = $$props.name);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(1, input = $$props.input);
    		if ('multiple' in $$props) $$invalidate(9, multiple = $$props.multiple);
    		if ('multiFullItemClearable' in $$props) $$invalidate(10, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('disabled' in $$props) $$invalidate(11, disabled = $$props.disabled);
    		if ('focused' in $$props) $$invalidate(2, focused = $$props.focused);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(4, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(56, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(57, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(51, items = $$props.items);
    		if ('label' in $$props) $$invalidate(12, label = $$props.label);
    		if ('itemFilter' in $$props) $$invalidate(58, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(59, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(60, groupFilter = $$props.groupFilter);
    		if ('groupHeaderSelectable' in $$props) $$invalidate(61, groupHeaderSelectable = $$props.groupHeaderSelectable);
    		if ('itemId' in $$props) $$invalidate(13, itemId = $$props.itemId);
    		if ('loadOptions' in $$props) $$invalidate(62, loadOptions = $$props.loadOptions);
    		if ('containerStyles' in $$props) $$invalidate(14, containerStyles = $$props.containerStyles);
    		if ('hasError' in $$props) $$invalidate(15, hasError = $$props.hasError);
    		if ('filterSelectedItems' in $$props) $$invalidate(63, filterSelectedItems = $$props.filterSelectedItems);
    		if ('required' in $$props) $$invalidate(16, required = $$props.required);
    		if ('closeListOnChange' in $$props) $$invalidate(64, closeListOnChange = $$props.closeListOnChange);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(65, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('searchable' in $$props) $$invalidate(17, searchable = $$props.searchable);
    		if ('inputStyles' in $$props) $$invalidate(18, inputStyles = $$props.inputStyles);
    		if ('clearable' in $$props) $$invalidate(67, clearable = $$props.clearable);
    		if ('loading' in $$props) $$invalidate(5, loading = $$props.loading);
    		if ('listOpen' in $$props) $$invalidate(6, listOpen = $$props.listOpen);
    		if ('timeout' in $$props) timeout = $$props.timeout;
    		if ('debounce' in $$props) $$invalidate(68, debounce = $$props.debounce);
    		if ('debounceWait' in $$props) $$invalidate(69, debounceWait = $$props.debounceWait);
    		if ('hideEmptyState' in $$props) $$invalidate(19, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(70, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(71, listAutoWidth = $$props.listAutoWidth);
    		if ('showChevron' in $$props) $$invalidate(20, showChevron = $$props.showChevron);
    		if ('listOffset' in $$props) $$invalidate(72, listOffset = $$props.listOffset);
    		if ('hoverItemIndex' in $$props) $$invalidate(7, hoverItemIndex = $$props.hoverItemIndex);
    		if ('floatingConfig' in $$props) $$invalidate(73, floatingConfig = $$props.floatingConfig);
    		if ('containerClasses' in $$props) $$invalidate(21, containerClasses = $$props.containerClasses);
    		if ('activeValue' in $$props) $$invalidate(26, activeValue = $$props.activeValue);
    		if ('prev_value' in $$props) $$invalidate(77, prev_value = $$props.prev_value);
    		if ('prev_filterText' in $$props) $$invalidate(78, prev_filterText = $$props.prev_filterText);
    		if ('prev_multiple' in $$props) $$invalidate(79, prev_multiple = $$props.prev_multiple);
    		if ('_inputAttributes' in $$props) $$invalidate(27, _inputAttributes = $$props._inputAttributes);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    		if ('list' in $$props) $$invalidate(23, list = $$props.list);
    		if ('isScrollingTimer' in $$props) isScrollingTimer = $$props.isScrollingTimer;
    		if ('isScrolling' in $$props) isScrolling = $$props.isScrolling;
    		if ('_floatingConfig' in $$props) $$invalidate(80, _floatingConfig = $$props._floatingConfig);
    		if ('prefloat' in $$props) $$invalidate(28, prefloat = $$props.prefloat);
    		if ('filteredItems' in $$props) $$invalidate(24, filteredItems = $$props.filteredItems);
    		if ('scrollToHoverItem' in $$props) $$invalidate(29, scrollToHoverItem = $$props.scrollToHoverItem);
    		if ('listDom' in $$props) $$invalidate(30, listDom = $$props.listDom);
    		if ('ariaContext' in $$props) $$invalidate(31, ariaContext = $$props.ariaContext);
    		if ('ariaSelection' in $$props) $$invalidate(32, ariaSelection = $$props.ariaSelection);
    		if ('placeholderText' in $$props) $$invalidate(33, placeholderText = $$props.placeholderText);
    		if ('hasValue' in $$props) $$invalidate(25, hasValue = $$props.hasValue);
    		if ('showClear' in $$props) $$invalidate(34, showClear = $$props.showClear);
    		if ('hideSelectedItem' in $$props) $$invalidate(35, hideSelectedItem = $$props.hideSelectedItem);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*value*/ 8 | $$self.$$.dirty[1] & /*items*/ 1048576) {
    			if ((value)) setValue();
    		}

    		if ($$self.$$.dirty[0] & /*searchable*/ 131072 | $$self.$$.dirty[2] & /*inputAttributes*/ 256) {
    			if (inputAttributes || !searchable) assignInputAttributes();
    		}

    		if ($$self.$$.dirty[0] & /*multiple*/ 512) {
    			if (multiple) setupMulti();
    		}

    		if ($$self.$$.dirty[0] & /*multiple*/ 512 | $$self.$$.dirty[2] & /*prev_multiple*/ 131072) {
    			if (prev_multiple && !multiple) setupSingle();
    		}

    		if ($$self.$$.dirty[0] & /*multiple, value*/ 520) {
    			if (multiple && value && value.length > 1) checkValueForDuplicates();
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 8) {
    			if (value) dispatchSelectedItem();
    		}

    		if ($$self.$$.dirty[0] & /*value, multiple*/ 520 | $$self.$$.dirty[2] & /*prev_value*/ 32768) {
    			if (!value && multiple && prev_value) dispatch('input', value);
    		}

    		if ($$self.$$.dirty[0] & /*focused, input*/ 6) {
    			if (!focused && input) closeList();
    		}

    		if ($$self.$$.dirty[0] & /*filterText*/ 16 | $$self.$$.dirty[2] & /*prev_filterText*/ 65536) {
    			if (filterText !== prev_filterText) setupFilterText();
    		}

    		if ($$self.$$.dirty[0] & /*filterText, multiple, value, itemId, label*/ 12824 | $$self.$$.dirty[1] & /*filter, items, groupBy, itemFilter*/ 407896064 | $$self.$$.dirty[2] & /*loadOptions, filterSelectedItems*/ 3) {
    			$$invalidate(24, filteredItems = filter({
    				loadOptions,
    				filterText,
    				items,
    				multiple,
    				value,
    				itemId,
    				groupBy,
    				label,
    				filterSelectedItems,
    				itemFilter,
    				convertStringItemsToObjects,
    				filterGroupedItems
    			}));
    		}

    		if ($$self.$$.dirty[0] & /*multiple, listOpen, value, filteredItems*/ 16777800) {
    			if (!multiple && listOpen && value && filteredItems) setValueIndexAsHoverIndex();
    		}

    		if ($$self.$$.dirty[0] & /*listOpen, multiple*/ 576) {
    			if (listOpen && multiple) $$invalidate(7, hoverItemIndex = 0);
    		}

    		if ($$self.$$.dirty[0] & /*filterText*/ 16) {
    			if (filterText) $$invalidate(7, hoverItemIndex = 0);
    		}

    		if ($$self.$$.dirty[0] & /*hoverItemIndex*/ 128) {
    			dispatchHover(hoverItemIndex);
    		}

    		if ($$self.$$.dirty[0] & /*multiple, value*/ 520) {
    			$$invalidate(25, hasValue = multiple ? value && value.length > 0 : value);
    		}

    		if ($$self.$$.dirty[0] & /*hasValue, filterText*/ 33554448) {
    			$$invalidate(35, hideSelectedItem = hasValue && filterText.length > 0);
    		}

    		if ($$self.$$.dirty[0] & /*hasValue, disabled, loading*/ 33556512 | $$self.$$.dirty[2] & /*clearable*/ 32) {
    			$$invalidate(34, showClear = hasValue && clearable && !disabled && !loading);
    		}

    		if ($$self.$$.dirty[0] & /*multiple, value*/ 520 | $$self.$$.dirty[1] & /*placeholderAlwaysShow, placeholder*/ 100663296) {
    			$$invalidate(33, placeholderText = placeholderAlwaysShow && multiple
    			? placeholder
    			: multiple && value?.length === 0
    				? placeholder
    				: value ? '' : placeholder);
    		}

    		if ($$self.$$.dirty[0] & /*value, multiple*/ 520) {
    			$$invalidate(32, ariaSelection = value ? handleAriaSelection(multiple) : '');
    		}

    		if ($$self.$$.dirty[0] & /*filteredItems, hoverItemIndex, focused, listOpen*/ 16777412) {
    			$$invalidate(31, ariaContext = handleAriaContent());
    		}

    		if ($$self.$$.dirty[1] & /*items*/ 1048576) {
    			updateValueDisplay(items);
    		}

    		if ($$self.$$.dirty[0] & /*multiple, value, itemId*/ 8712) {
    			$$invalidate(52, justValue = computeJustValue());
    		}

    		if ($$self.$$.dirty[0] & /*multiple, value*/ 520 | $$self.$$.dirty[2] & /*prev_value*/ 32768) {
    			if (!multiple && prev_value && !value) dispatch('input', value);
    		}

    		if ($$self.$$.dirty[0] & /*listOpen, filteredItems, multiple, value*/ 16777800) {
    			if (listOpen && filteredItems && !multiple && !value) checkHoverSelectable();
    		}

    		if ($$self.$$.dirty[0] & /*filteredItems*/ 16777216) {
    			handleFilterEvent(filteredItems);
    		}

    		if ($$self.$$.dirty[0] & /*container*/ 1 | $$self.$$.dirty[2] & /*floatingConfig*/ 2048) {
    			if (container && floatingConfig?.autoUpdate === undefined) {
    				$$invalidate(80, _floatingConfig.autoUpdate = true, _floatingConfig);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*container*/ 1 | $$self.$$.dirty[2] & /*floatingConfig, _floatingConfig*/ 264192) {
    			if (container && floatingConfig) floatingUpdate(Object.assign(_floatingConfig, floatingConfig));
    		}

    		if ($$self.$$.dirty[0] & /*list*/ 8388608) {
    			$$invalidate(30, listDom = !!list);
    		}

    		if ($$self.$$.dirty[0] & /*list, listOpen*/ 8388672) {
    			listMounted(list, listOpen);
    		}

    		if ($$self.$$.dirty[0] & /*listOpen, container, list*/ 8388673) {
    			if (listOpen && container && list) setListWidth();
    		}

    		if ($$self.$$.dirty[0] & /*hoverItemIndex*/ 128) {
    			$$invalidate(29, scrollToHoverItem = hoverItemIndex);
    		}

    		if ($$self.$$.dirty[0] & /*input, listOpen, focused*/ 70) {
    			if (input && listOpen && !focused) handleFocus();
    		}
    	};

    	return [
    		container,
    		input,
    		focused,
    		value,
    		filterText,
    		loading,
    		listOpen,
    		hoverItemIndex,
    		name,
    		multiple,
    		multiFullItemClearable,
    		disabled,
    		label,
    		itemId,
    		containerStyles,
    		hasError,
    		required,
    		searchable,
    		inputStyles,
    		hideEmptyState,
    		showChevron,
    		containerClasses,
    		handleClear,
    		list,
    		filteredItems,
    		hasValue,
    		activeValue,
    		_inputAttributes,
    		prefloat,
    		scrollToHoverItem,
    		listDom,
    		ariaContext,
    		ariaSelection,
    		placeholderText,
    		showClear,
    		hideSelectedItem,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleBlur,
    		handleClick,
    		handleListScroll,
    		handleClickOutside,
    		handleHover,
    		handleItemClick,
    		isItemActive,
    		activeScroll,
    		hoverScroll,
    		floatingRef,
    		floatingContent,
    		$$slots,
    		items,
    		justValue,
    		filter,
    		getItems$1,
    		id,
    		placeholder,
    		placeholderAlwaysShow,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		groupHeaderSelectable,
    		loadOptions,
    		filterSelectedItems,
    		closeListOnChange,
    		createGroupHeaderItem,
    		getFilteredItems,
    		clearable,
    		debounce,
    		debounceWait,
    		inputAttributes,
    		listAutoWidth,
    		listOffset,
    		floatingConfig,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		prev_value,
    		prev_filterText,
    		prev_multiple,
    		_floatingConfig,
    		$$scope,
    		slots,
    		mousedown_handler,
    		keydown_handler_1,
    		pointerup_handler,
    		keydown_handler,
    		mouseover_handler,
    		focus_handler,
    		click_handler,
    		div_binding,
    		pointerup_handler_1,
    		click_handler_1,
    		input_1_binding,
    		input_1_input_handler,
    		div3_binding
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$7,
    			create_fragment$7,
    			safe_not_equal,
    			{
    				justValue: 52,
    				filter: 53,
    				getItems: 54,
    				id: 55,
    				name: 8,
    				container: 0,
    				input: 1,
    				multiple: 9,
    				multiFullItemClearable: 10,
    				disabled: 11,
    				focused: 2,
    				value: 3,
    				filterText: 4,
    				placeholder: 56,
    				placeholderAlwaysShow: 57,
    				items: 51,
    				label: 12,
    				itemFilter: 58,
    				groupBy: 59,
    				groupFilter: 60,
    				groupHeaderSelectable: 61,
    				itemId: 13,
    				loadOptions: 62,
    				containerStyles: 14,
    				hasError: 15,
    				filterSelectedItems: 63,
    				required: 16,
    				closeListOnChange: 64,
    				createGroupHeaderItem: 65,
    				getFilteredItems: 66,
    				searchable: 17,
    				inputStyles: 18,
    				clearable: 67,
    				loading: 5,
    				listOpen: 6,
    				debounce: 68,
    				debounceWait: 69,
    				hideEmptyState: 19,
    				inputAttributes: 70,
    				listAutoWidth: 71,
    				showChevron: 20,
    				listOffset: 72,
    				hoverItemIndex: 7,
    				floatingConfig: 73,
    				class: 21,
    				handleClear: 22,
    				ariaValues: 74,
    				ariaListOpen: 75,
    				ariaFocused: 76
    			},
    			null,
    			[-1, -1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get justValue() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set justValue(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getItems() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getItems(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get container() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiFullItemClearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiFullItemClearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set focused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholderAlwaysShow() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholderAlwaysShow(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupBy() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupBy(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupHeaderSelectable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupHeaderSelectable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemId() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemId(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadOptions() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadOptions(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hasError() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hasError(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterSelectedItems() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterSelectedItems(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get required() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set required(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeListOnChange() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeListOnChange(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createGroupHeaderItem() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createGroupHeaderItem(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getFilteredItems() {
    		return this.$$.ctx[66];
    	}

    	set getFilteredItems(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loading() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loading(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get debounce() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set debounce(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get debounceWait() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set debounceWait(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEmptyState() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEmptyState(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputAttributes() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputAttributes(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listAutoWidth() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listAutoWidth(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showChevron() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showChevron(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOffset() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOffset(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverItemIndex() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverItemIndex(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get floatingConfig() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set floatingConfig(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get handleClear() {
    		return this.$$.ctx[22];
    	}

    	set handleClear(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaValues() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaValues(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaListOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaListOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaFocused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaFocused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/sidebarComponents/JsonEditor.svelte generated by Svelte v3.58.0 */

    const { Object: Object_1$1, console: console_1$4 } = globals;
    const file$5 = "src/components/sidebarComponents/JsonEditor.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i][0];
    	child_ctx[12] = list[i][1];
    	child_ctx[13] = list;
    	child_ctx[14] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[14] = i;
    	return child_ctx;
    }

    // (43:2) {#if mainObject !== null && Object.keys(mainObject).length > 0}
    function create_if_block$3(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t0;
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = Object.entries(/*mainObject*/ ctx[0]);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*index*/ ctx[14];
    	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$3(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			button = element$1("button");
    			button.textContent = "Save";
    			add_location(button, file$5, 66, 4, 2479);
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, t0, anchor);
    			insert_dev(target, button, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*save*/ ctx[3], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Object, mainObject, options, $aiSystemStore, handleStepsChange, Array, isProcess, isAction*/ 23) {
    				each_value = Object.entries(/*mainObject*/ ctx[0]);
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, t0.parentNode, outro_and_destroy_block, create_each_block$3, t0, get_each_context$3);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(43:2) {#if mainObject !== null && Object.keys(mainObject).length > 0}",
    		ctx
    	});

    	return block;
    }

    // (62:66) 
    function create_if_block_4(ctx) {
    	let textarea;
    	let textarea_id_value;
    	let mounted;
    	let dispose;

    	function textarea_input_handler() {
    		/*textarea_input_handler*/ ctx[9].call(textarea, /*key*/ ctx[11]);
    	}

    	const block = {
    		c: function create() {
    			textarea = element$1("textarea");
    			attr_dev(textarea, "id", textarea_id_value = "input-" + /*index*/ ctx[14]);
    			attr_dev(textarea, "rows", "1");
    			add_location(textarea, file$5, 62, 10, 2366);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, textarea, anchor);
    			set_input_value(textarea, /*mainObject*/ ctx[0][/*key*/ ctx[11]]);

    			if (!mounted) {
    				dispose = listen_dev(textarea, "input", textarea_input_handler);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*mainObject*/ 1 && textarea_id_value !== (textarea_id_value = "input-" + /*index*/ ctx[14])) {
    				attr_dev(textarea, "id", textarea_id_value);
    			}

    			if (dirty & /*mainObject, Object*/ 1) {
    				set_input_value(textarea, /*mainObject*/ ctx[0][/*key*/ ctx[11]]);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(textarea);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(62:66) ",
    		ctx
    	});

    	return block;
    }

    // (60:95) 
    function create_if_block_3(ctx) {
    	let input;
    	let input_id_value;
    	let mounted;
    	let dispose;

    	function input_input_handler() {
    		/*input_input_handler*/ ctx[8].call(input, /*key*/ ctx[11]);
    	}

    	const block = {
    		c: function create() {
    			input = element$1("input");
    			attr_dev(input, "id", input_id_value = "input-" + /*index*/ ctx[14]);
    			attr_dev(input, "type", "number");
    			add_location(input, file$5, 60, 10, 2217);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*mainObject*/ ctx[0][/*key*/ ctx[11]]);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", input_input_handler);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*mainObject*/ 1 && input_id_value !== (input_id_value = "input-" + /*index*/ ctx[14])) {
    				attr_dev(input, "id", input_id_value);
    			}

    			if (dirty & /*mainObject, Object*/ 1 && to_number(input.value) !== /*mainObject*/ ctx[0][/*key*/ ctx[11]]) {
    				set_input_value(input, /*mainObject*/ ctx[0][/*key*/ ctx[11]]);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(60:95) ",
    		ctx
    	});

    	return block;
    }

    // (58:96) 
    function create_if_block_2(ctx) {
    	let input;
    	let input_id_value;
    	let mounted;
    	let dispose;

    	function input_change_handler() {
    		/*input_change_handler*/ ctx[7].call(input, /*key*/ ctx[11]);
    	}

    	const block = {
    		c: function create() {
    			input = element$1("input");
    			attr_dev(input, "id", input_id_value = "input-" + /*index*/ ctx[14]);
    			attr_dev(input, "type", "checkbox");
    			add_location(input, file$5, 58, 10, 2035);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			input.checked = /*mainObject*/ ctx[0][/*key*/ ctx[11]];

    			if (!mounted) {
    				dispose = listen_dev(input, "change", input_change_handler);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*mainObject*/ 1 && input_id_value !== (input_id_value = "input-" + /*index*/ ctx[14])) {
    				attr_dev(input, "id", input_id_value);
    			}

    			if (dirty & /*mainObject, Object*/ 1) {
    				input.checked = /*mainObject*/ ctx[0][/*key*/ ctx[11]];
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(58:96) ",
    		ctx
    	});

    	return block;
    }

    // (48:8) {#if key === "steps" && Array.isArray(value) && isProcess(mainObject)}
    function create_if_block_1(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*value*/ ctx[12];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*index*/ ctx[14];
    	validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1$2(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Object, mainObject, options, $aiSystemStore, handleStepsChange*/ 23) {
    				each_value_1 = /*value*/ ctx[12];
    				validate_each_argument(each_value_1);
    				group_outros();
    				validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_1$2, each_1_anchor, get_each_context_1$2);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(48:8) {#if key === \\\"steps\\\" && Array.isArray(value) && isProcess(mainObject)}",
    		ctx
    	});

    	return block;
    }

    // (49:8) {#each value as _step, index (index)}
    function create_each_block_1$2(key_1, ctx) {
    	let first;
    	let select;
    	let current;

    	function change_handler(...args) {
    		return /*change_handler*/ ctx[6](/*index*/ ctx[14], ...args);
    	}

    	select = new Select({
    			props: {
    				id: "steps_" + /*index*/ ctx[14],
    				value: /*options*/ ctx[1][/*index*/ ctx[14]],
    				items: /*$aiSystemStore*/ ctx[2].actions.map(func),
    				placeholder: "Select step..."
    			},
    			$$inline: true
    		});

    	select.$on("change", change_handler);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(select.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const select_changes = {};
    			if (dirty & /*mainObject*/ 1) select_changes.id = "steps_" + /*index*/ ctx[14];
    			if (dirty & /*options, mainObject*/ 3) select_changes.value = /*options*/ ctx[1][/*index*/ ctx[14]];
    			if (dirty & /*$aiSystemStore*/ 4) select_changes.items = /*$aiSystemStore*/ ctx[2].actions.map(func);
    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(49:8) {#each value as _step, index (index)}",
    		ctx
    	});

    	return block;
    }

    // (44:4) {#each Object.entries(mainObject) as [key, value], index (index)}
    function create_each_block$3(key_1, ctx) {
    	let div;
    	let label;
    	let t0_value = /*key*/ ctx[11] + "";
    	let t0;
    	let t1;
    	let label_for_value;
    	let t2;
    	let show_if;
    	let show_if_1;
    	let show_if_2;
    	let show_if_3;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_1, create_if_block_2, create_if_block_3, create_if_block_4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (dirty & /*mainObject*/ 1) show_if = null;
    		if (dirty & /*mainObject*/ 1) show_if_1 = null;
    		if (dirty & /*mainObject*/ 1) show_if_2 = null;
    		if (dirty & /*mainObject*/ 1) show_if_3 = null;
    		if (show_if == null) show_if = !!(/*key*/ ctx[11] === "steps" && Array.isArray(/*value*/ ctx[12]) && isProcess(/*mainObject*/ ctx[0]));
    		if (show_if) return 0;
    		if (show_if_1 == null) show_if_1 = !!(typeof /*value*/ ctx[12] === "boolean" && (isAction(/*mainObject*/ ctx[0]) || isProcess(/*mainObject*/ ctx[0])));
    		if (show_if_1) return 1;
    		if (show_if_2 == null) show_if_2 = !!(typeof /*value*/ ctx[12] === "number" && (isAction(/*mainObject*/ ctx[0]) || isProcess(/*mainObject*/ ctx[0])));
    		if (show_if_2) return 2;
    		if (show_if_3 == null) show_if_3 = !!(isAction(/*mainObject*/ ctx[0]) || isProcess(/*mainObject*/ ctx[0]));
    		if (show_if_3) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx, -1))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element$1("div");
    			label = element$1("label");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(label, "for", label_for_value = "input-" + /*index*/ ctx[14]);
    			add_location(label, file$5, 46, 8, 1455);
    			attr_dev(div, "class", "object-field");
    			add_location(div, file$5, 44, 6, 1411);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(div, t2);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*mainObject*/ 1) && t0_value !== (t0_value = /*key*/ ctx[11] + "")) set_data_dev(t0, t0_value);

    			if (!current || dirty & /*mainObject*/ 1 && label_for_value !== (label_for_value = "input-" + /*index*/ ctx[14])) {
    				attr_dev(label, "for", label_for_value);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(44:4) {#each Object.entries(mainObject) as [key, value], index (index)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div;
    	let show_if = /*mainObject*/ ctx[0] !== null && Object.keys(/*mainObject*/ ctx[0]).length > 0;
    	let current;
    	let if_block = show_if && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "json-editor");
    			add_location(div, file$5, 41, 0, 1243);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*mainObject*/ 1) show_if = /*mainObject*/ ctx[0] !== null && Object.keys(/*mainObject*/ ctx[0]).length > 0;

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*mainObject*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func = action => ({ value: action.name, label: action.name });

    function instance$6($$self, $$props, $$invalidate) {
    	let $websocketStore;
    	let $systemStateStore;
    	let $aiSystemStore;
    	validate_store(websocketStore, 'websocketStore');
    	component_subscribe($$self, websocketStore, $$value => $$invalidate(10, $websocketStore = $$value));
    	validate_store(systemStateStore, 'systemStateStore');
    	component_subscribe($$self, systemStateStore, $$value => $$invalidate(5, $systemStateStore = $$value));
    	validate_store(aiSystemStore, 'aiSystemStore');
    	component_subscribe($$self, aiSystemStore, $$value => $$invalidate(2, $aiSystemStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('JsonEditor', slots, []);
    	let mainObject;
    	let options = [];

    	function save() {
    		if (isAction(mainObject)) {
    			let updateAction = { action: mainObject };
    			console.log("sending: " + JSON.stringify(updateAction));
    			$websocketStore.send(JSON.stringify(updateAction));
    		}
    	}

    	function handleStepsChange(selected, index) {
    		if (isProcess(mainObject)) {
    			$$invalidate(0, mainObject.steps[index] = selected.value, mainObject);

    			$$invalidate(
    				1,
    				options[index] = {
    					value: selected.value,
    					label: selected.value
    				},
    				options
    			);

    			$$invalidate(0, mainObject = Object.assign({}, mainObject)); // trigger reactivity
    		}
    	}

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<JsonEditor> was created with unknown prop '${key}'`);
    	});

    	const change_handler = (index, event) => handleStepsChange(event.detail, index);

    	function input_change_handler(key) {
    		mainObject[key] = this.checked;
    		($$invalidate(0, mainObject), $$invalidate(5, $systemStateStore));
    	}

    	function input_input_handler(key) {
    		mainObject[key] = to_number(this.value);
    		($$invalidate(0, mainObject), $$invalidate(5, $systemStateStore));
    	}

    	function textarea_input_handler(key) {
    		mainObject[key] = this.value;
    		($$invalidate(0, mainObject), $$invalidate(5, $systemStateStore));
    	}

    	$$self.$capture_state = () => ({
    		systemStateStore,
    		aiSystemStore,
    		websocketStore,
    		Select,
    		isProcess,
    		isAction,
    		mainObject,
    		options,
    		save,
    		handleStepsChange,
    		$websocketStore,
    		$systemStateStore,
    		$aiSystemStore
    	});

    	$$self.$inject_state = $$props => {
    		if ('mainObject' in $$props) $$invalidate(0, mainObject = $$props.mainObject);
    		if ('options' in $$props) $$invalidate(1, options = $$props.options);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$systemStateStore, mainObject*/ 33) {
    			{
    				$$invalidate(0, mainObject = $systemStateStore.selectedAction || $systemStateStore.selectedProcess);
    				console.log("mainObject: ", mainObject);

    				if (isProcess(mainObject)) {
    					$$invalidate(1, options = mainObject.steps.map(step => ({ value: step, label: step })));
    				}
    			}
    		}
    	};

    	return [
    		mainObject,
    		options,
    		$aiSystemStore,
    		save,
    		handleStepsChange,
    		$systemStateStore,
    		change_handler,
    		input_change_handler,
    		input_input_handler,
    		textarea_input_handler
    	];
    }

    class JsonEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "JsonEditor",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src/components/sidebarComponents/InteractWithActionsAndProcesses.svelte generated by Svelte v3.58.0 */

    const { console: console_1$3 } = globals;
    const file$4 = "src/components/sidebarComponents/InteractWithActionsAndProcesses.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    // (49:4) {#each actions as action}
    function create_each_block_1$1(ctx) {
    	let option;
    	let t_value = /*action*/ ctx[14].name + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element$1("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*action*/ ctx[14].name;
    			option.value = option.__value;
    			add_location(option, file$4, 49, 6, 1784);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*actions*/ 4 && t_value !== (t_value = /*action*/ ctx[14].name + "")) set_data_dev(t, t_value);

    			if (dirty & /*actions*/ 4 && option_value_value !== (option_value_value = /*action*/ ctx[14].name)) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(49:4) {#each actions as action}",
    		ctx
    	});

    	return block;
    }

    // (57:4) {#each processes as process}
    function create_each_block$2(ctx) {
    	let option;
    	let t_value = /*process*/ ctx[11].name + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element$1("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*process*/ ctx[11].name;
    			option.value = option.__value;
    			add_location(option, file$4, 57, 6, 2073);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*processes*/ 8 && t_value !== (t_value = /*process*/ ctx[11].name + "")) set_data_dev(t, t_value);

    			if (dirty & /*processes*/ 8 && option_value_value !== (option_value_value = /*process*/ ctx[11].name)) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(57:4) {#each processes as process}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let select0;
    	let option0;
    	let t1;
    	let select1;
    	let option1;
    	let t3;
    	let jsoneditor;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*actions*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = /*processes*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	jsoneditor = new JsonEditor({ $$inline: true });

    	const block = {
    		c: function create() {
    			select0 = element$1("select");
    			option0 = element$1("option");
    			option0.textContent = "Select an action";

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t1 = space();
    			select1 = element$1("select");
    			option1 = element$1("option");
    			option1.textContent = "Select a process";

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			create_component(jsoneditor.$$.fragment);
    			option0.__value = "";
    			option0.value = option0.__value;
    			add_location(option0, file$4, 47, 4, 1705);
    			if (/*selectedAction*/ ctx[0] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[6].call(select0));
    			add_location(select0, file$4, 46, 0, 1619);
    			option1.__value = "";
    			option1.value = option1.__value;
    			add_location(option1, file$4, 55, 4, 1991);
    			if (/*selectedProcess*/ ctx[1] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[8].call(select1));
    			add_location(select1, file$4, 54, 2, 1903);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select0, anchor);
    			append_dev(select0, option0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(select0, null);
    				}
    			}

    			select_option(select0, /*selectedAction*/ ctx[0], true);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, select1, anchor);
    			append_dev(select1, option1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(select1, null);
    				}
    			}

    			select_option(select1, /*selectedProcess*/ ctx[1], true);
    			insert_dev(target, t3, anchor);
    			mount_component(jsoneditor, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[6]),
    					listen_dev(select0, "change", /*change_handler*/ ctx[7], false, false, false, false),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[8]),
    					listen_dev(select1, "change", /*change_handler_1*/ ctx[9], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*actions*/ 4) {
    				each_value_1 = /*actions*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*selectedAction, actions*/ 5) {
    				select_option(select0, /*selectedAction*/ ctx[0]);
    			}

    			if (dirty & /*processes*/ 8) {
    				each_value = /*processes*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*selectedProcess, processes*/ 10) {
    				select_option(select1, /*selectedProcess*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(jsoneditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(jsoneditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select0);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(select1);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(jsoneditor, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $systemStateStore;
    	let $aiSystemStore;
    	validate_store(systemStateStore, 'systemStateStore');
    	component_subscribe($$self, systemStateStore, $$value => $$invalidate(10, $systemStateStore = $$value));
    	validate_store(aiSystemStore, 'aiSystemStore');
    	component_subscribe($$self, aiSystemStore, $$value => $$invalidate(5, $aiSystemStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InteractWithActionsAndProcesses', slots, []);
    	let selectedAction = "";
    	let selectedProcess = "";

    	// Subscribe to the graphStore to get the latest values
    	let actions = [];

    	let processes = [];

    	// Function to handle dropdown change events
    	function onDropdownChange(type) {
    		console.log("onDropdownChange called: ", type, " selectedAction: ", selectedAction, " selectedProcess: ", selectedProcess);

    		if (type === "action") {
    			$$invalidate(1, selectedProcess = "");
    		} else {
    			$$invalidate(0, selectedAction = "");
    		}

    		if (selectedAction) {
    			// Set the selected action in the systemStateStore
    			// it should get the action from the aiSystemStore
    			// with the name selectedAction
    			let this_action = $aiSystemStore.actions.find(obj => obj.name === selectedAction);

    			set_store_value(systemStateStore, $systemStateStore.selectedAction = this_action, $systemStateStore);
    			set_store_value(systemStateStore, $systemStateStore.selectedProcess = null, $systemStateStore);
    		}

    		if (selectedProcess) {
    			// Set the selected process in the systemStateStore
    			// it should get the process from the aiSystemStore
    			// with the name selectedProcess
    			let this_process = $aiSystemStore.processes.find(obj => obj.name === selectedProcess);

    			set_store_value(systemStateStore, $systemStateStore.selectedProcess = this_process, $systemStateStore);
    			set_store_value(systemStateStore, $systemStateStore.selectedAction = null, $systemStateStore);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<InteractWithActionsAndProcesses> was created with unknown prop '${key}'`);
    	});

    	function select0_change_handler() {
    		selectedAction = select_value(this);
    		$$invalidate(0, selectedAction);
    		($$invalidate(2, actions), $$invalidate(5, $aiSystemStore));
    	}

    	const change_handler = () => onDropdownChange("action");

    	function select1_change_handler() {
    		selectedProcess = select_value(this);
    		$$invalidate(1, selectedProcess);
    		($$invalidate(3, processes), $$invalidate(5, $aiSystemStore));
    	}

    	const change_handler_1 = () => onDropdownChange("process");

    	$$self.$capture_state = () => ({
    		aiSystemStore,
    		systemStateStore,
    		JsonEditor,
    		selectedAction,
    		selectedProcess,
    		actions,
    		processes,
    		onDropdownChange,
    		$systemStateStore,
    		$aiSystemStore
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedAction' in $$props) $$invalidate(0, selectedAction = $$props.selectedAction);
    		if ('selectedProcess' in $$props) $$invalidate(1, selectedProcess = $$props.selectedProcess);
    		if ('actions' in $$props) $$invalidate(2, actions = $$props.actions);
    		if ('processes' in $$props) $$invalidate(3, processes = $$props.processes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$aiSystemStore*/ 32) {
    			{
    				$$invalidate(2, actions = $aiSystemStore.actions);
    				$$invalidate(3, processes = $aiSystemStore.processes);
    			}
    		}
    	};

    	return [
    		selectedAction,
    		selectedProcess,
    		actions,
    		processes,
    		onDropdownChange,
    		$aiSystemStore,
    		select0_change_handler,
    		change_handler,
    		select1_change_handler,
    		change_handler_1
    	];
    }

    class InteractWithActionsAndProcesses extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InteractWithActionsAndProcesses",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    // Create the store
    const graphStore = writable({
        graph: new graphlib_1$2(),
        lastAction: "none",
        actedOn: null,
        lastActedOn: null,
        name: null,
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    var _listCacheClear = listCacheClear;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    var eq_1 = eq;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq_1(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    var _assocIndexOf = assocIndexOf;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = _assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    var _listCacheDelete = listCacheDelete;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = _assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet = listCacheGet;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return _assocIndexOf(this.__data__, key) > -1;
    }

    var _listCacheHas = listCacheHas;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = _assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    var _listCacheSet = listCacheSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = _listCacheClear;
    ListCache.prototype['delete'] = _listCacheDelete;
    ListCache.prototype.get = _listCacheGet;
    ListCache.prototype.has = _listCacheHas;
    ListCache.prototype.set = _listCacheSet;

    var _ListCache = ListCache;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new _ListCache;
      this.size = 0;
    }

    var _stackClear = stackClear;

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    var _stackDelete = stackDelete;

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    var _stackGet = stackGet;

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    var _stackHas = stackHas;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal = freeGlobal$1;

    /** Detect free variable `self`. */
    var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$1 = _freeGlobal || freeSelf$1 || Function('return this')();

    var _root = root$1;

    /** Built-in value references. */
    var Symbol$1 = _root.Symbol;

    var _Symbol = Symbol$1;

    /** Used for built-in method references. */
    var objectProto$j = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$f = objectProto$j.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$j.toString;

    /** Built-in value references. */
    var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty$f.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    var _getRawTag = getRawTag;

    /** Used for built-in method references. */
    var objectProto$i = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$i.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString$1(value) {
      return nativeObjectToString.call(value);
    }

    var _objectToString = objectToString$1;

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? _getRawTag(value)
        : _objectToString(value);
    }

    var _baseGetTag = baseGetTag;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject$1(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1 = isObject$1;

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject_1(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = _baseGetTag(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    var isFunction_1 = isFunction;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = _root['__core-js_shared__'];

    var _coreJsData = coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    var _isMasked = isMasked;

    /** Used for built-in method references. */
    var funcProto$2 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$2 = funcProto$2.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    var _toSource = toSource;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype,
        objectProto$h = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$e = objectProto$h.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString$1.call(hasOwnProperty$e).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject_1(value) || _isMasked(value)) {
        return false;
      }
      var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
      return pattern.test(_toSource(value));
    }

    var _baseIsNative = baseIsNative;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue$1(object, key) {
      return object == null ? undefined : object[key];
    }

    var _getValue = getValue$1;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = _getValue(object, key);
      return _baseIsNative(value) ? value : undefined;
    }

    var _getNative = getNative;

    /* Built-in method references that are verified to be native. */
    var Map$2 = _getNative(_root, 'Map');

    var _Map = Map$2;

    /* Built-in method references that are verified to be native. */
    var nativeCreate = _getNative(Object, 'create');

    var _nativeCreate = nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
      this.size = 0;
    }

    var _hashClear = hashClear;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    var _hashDelete = hashDelete;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$g = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$g.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (_nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$d.call(data, key) ? data[key] : undefined;
    }

    var _hashGet = hashGet;

    /** Used for built-in method references. */
    var objectProto$f = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$f.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$c.call(data, key);
    }

    var _hashHas = hashHas;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    var _hashSet = hashSet;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = _hashClear;
    Hash.prototype['delete'] = _hashDelete;
    Hash.prototype.get = _hashGet;
    Hash.prototype.has = _hashHas;
    Hash.prototype.set = _hashSet;

    var _Hash = Hash;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new _Hash,
        'map': new (_Map || _ListCache),
        'string': new _Hash
      };
    }

    var _mapCacheClear = mapCacheClear;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    var _isKeyable = isKeyable;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return _isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    var _getMapData = getMapData;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = _getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    var _mapCacheDelete = mapCacheDelete;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return _getMapData(this, key).get(key);
    }

    var _mapCacheGet = mapCacheGet;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return _getMapData(this, key).has(key);
    }

    var _mapCacheHas = mapCacheHas;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = _getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    var _mapCacheSet = mapCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = _mapCacheClear;
    MapCache.prototype['delete'] = _mapCacheDelete;
    MapCache.prototype.get = _mapCacheGet;
    MapCache.prototype.has = _mapCacheHas;
    MapCache.prototype.set = _mapCacheSet;

    var _MapCache = MapCache;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$1 = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof _ListCache) {
        var pairs = data.__data__;
        if (!_Map || (pairs.length < LARGE_ARRAY_SIZE$1 - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new _MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    var _stackSet = stackSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new _ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = _stackClear;
    Stack.prototype['delete'] = _stackDelete;
    Stack.prototype.get = _stackGet;
    Stack.prototype.has = _stackHas;
    Stack.prototype.set = _stackSet;

    var _Stack = Stack;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    var _arrayEach = arrayEach;

    var defineProperty = (function() {
      try {
        var func = _getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var _defineProperty$1 = defineProperty;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && _defineProperty$1) {
        _defineProperty$1(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    var _baseAssignValue = baseAssignValue;

    /** Used for built-in method references. */
    var objectProto$e = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$e.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$b.call(object, key) && eq_1(objValue, value)) ||
          (value === undefined && !(key in object))) {
        _baseAssignValue(object, key, value);
      }
    }

    var _assignValue = assignValue;

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          _baseAssignValue(object, key, newValue);
        } else {
          _assignValue(object, key, newValue);
        }
      }
      return object;
    }

    var _copyObject = copyObject;

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    var _baseTimes = baseTimes;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike$1(value) {
      return value != null && typeof value == 'object';
    }

    var isObjectLike_1 = isObjectLike$1;

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike_1(value) && _baseGetTag(value) == argsTag$3;
    }

    var _baseIsArguments = baseIsArguments;

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$d.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$d.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
      return isObjectLike_1(value) && hasOwnProperty$a.call(value, 'callee') &&
        !propertyIsEnumerable$1.call(value, 'callee');
    };

    var isArguments_1 = isArguments;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    var isArray_1 = isArray;

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    var stubFalse_1 = stubFalse;

    var isBuffer_1 = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? _root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse_1;

    module.exports = isBuffer;
    });

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex = isIndex;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    var isLength_1 = isLength;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        errorTag$2 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$7 = '[object Map]',
        numberTag$3 = '[object Number]',
        objectTag$4 = '[object Object]',
        regexpTag$3 = '[object RegExp]',
        setTag$7 = '[object Set]',
        stringTag$4 = '[object String]',
        weakMapTag$2 = '[object WeakMap]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
    typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
    typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$7] = typedArrayTags[numberTag$3] =
    typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] =
    typedArrayTags[setTag$7] = typedArrayTags[stringTag$4] =
    typedArrayTags[weakMapTag$2] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike_1(value) &&
        isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
    }

    var _baseIsTypedArray = baseIsTypedArray;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    var _baseUnary = baseUnary;

    var _nodeUtil = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && _freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    module.exports = nodeUtil;
    });

    /* Node.js helper references. */
    var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

    var isTypedArray_1 = isTypedArray;

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$c.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray_1(value),
          isArg = !isArr && isArguments_1(value),
          isBuff = !isArr && !isArg && isBuffer_1(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? _baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$9.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               _isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    var _arrayLikeKeys = arrayLikeKeys;

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$b;

      return value === proto;
    }

    var _isPrototype = isPrototype;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    var _overArg = overArg;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = _overArg(Object.keys, Object);

    var _nativeKeys = nativeKeys;

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!_isPrototype(object)) {
        return _nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$8.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeys = baseKeys;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength_1(value.length) && !isFunction_1(value);
    }

    var isArrayLike_1 = isArrayLike;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
    }

    var keys_1 = keys;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && _copyObject(source, keys_1(source), object);
    }

    var _baseAssign = baseAssign;

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    var _nativeKeysIn = nativeKeysIn;

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject_1(object)) {
        return _nativeKeysIn(object);
      }
      var isProto = _isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$7.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeysIn = baseKeysIn;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn$1(object) {
      return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
    }

    var keysIn_1 = keysIn$1;

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && _copyObject(source, keysIn_1(source), object);
    }

    var _baseAssignIn = baseAssignIn;

    var _cloneBuffer = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? _root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
    });

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray$1(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    var _copyArray = copyArray$1;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    var _arrayFilter = arrayFilter;

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    var stubArray_1 = stubArray;

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$8.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return _arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    var _getSymbols = getSymbols;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return _copyObject(source, _getSymbols(source), object);
    }

    var _copySymbols = copySymbols;

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    var _arrayPush = arrayPush;

    /** Built-in value references. */
    var getPrototype = _overArg(Object.getPrototypeOf, Object);

    var _getPrototype = getPrototype;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray_1 : function(object) {
      var result = [];
      while (object) {
        _arrayPush(result, _getSymbols(object));
        object = _getPrototype(object);
      }
      return result;
    };

    var _getSymbolsIn = getSymbolsIn;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return _copyObject(source, _getSymbolsIn(source), object);
    }

    var _copySymbolsIn = copySymbolsIn;

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
    }

    var _baseGetAllKeys = baseGetAllKeys;

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return _baseGetAllKeys(object, keys_1, _getSymbols);
    }

    var _getAllKeys = getAllKeys;

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
    }

    var _getAllKeysIn = getAllKeysIn;

    /* Built-in method references that are verified to be native. */
    var DataView = _getNative(_root, 'DataView');

    var _DataView = DataView;

    /* Built-in method references that are verified to be native. */
    var Promise$2 = _getNative(_root, 'Promise');

    var _Promise = Promise$2;

    /* Built-in method references that are verified to be native. */
    var Set$2 = _getNative(_root, 'Set');

    var _Set = Set$2;

    /* Built-in method references that are verified to be native. */
    var WeakMap = _getNative(_root, 'WeakMap');

    var _WeakMap = WeakMap;

    /** `Object#toString` result references. */
    var mapTag$6 = '[object Map]',
        objectTag$3 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$6 = '[object Set]',
        weakMapTag$1 = '[object WeakMap]';

    var dataViewTag$3 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = _toSource(_DataView),
        mapCtorString = _toSource(_Map),
        promiseCtorString = _toSource(_Promise),
        setCtorString = _toSource(_Set),
        weakMapCtorString = _toSource(_WeakMap);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = _baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
        (_Map && getTag(new _Map) != mapTag$6) ||
        (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
        (_Set && getTag(new _Set) != setTag$6) ||
        (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
      getTag = function(value) {
        var result = _baseGetTag(value),
            Ctor = result == objectTag$3 ? value.constructor : undefined,
            ctorString = Ctor ? _toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$3;
            case mapCtorString: return mapTag$6;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$6;
            case weakMapCtorString: return weakMapTag$1;
          }
        }
        return result;
      };
    }

    var _getTag = getTag;

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$6.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    var _initCloneArray = initCloneArray;

    /** Built-in value references. */
    var Uint8Array$1 = _root.Uint8Array;

    var _Uint8Array = Uint8Array$1;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
      return result;
    }

    var _cloneArrayBuffer = cloneArrayBuffer;

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    var _cloneDataView = cloneDataView;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    var _cloneRegExp = cloneRegExp;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
        symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }

    var _cloneSymbol = cloneSymbol;

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    var _cloneTypedArray = cloneTypedArray;

    /** `Object#toString` result references. */
    var boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        mapTag$5 = '[object Map]',
        numberTag$2 = '[object Number]',
        regexpTag$2 = '[object RegExp]',
        setTag$5 = '[object Set]',
        stringTag$3 = '[object String]',
        symbolTag$4 = '[object Symbol]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$2 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return _cloneArrayBuffer(object);

        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object);

        case dataViewTag$2:
          return _cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return _cloneTypedArray(object, isDeep);

        case mapTag$5:
          return new Ctor;

        case numberTag$2:
        case stringTag$3:
          return new Ctor(object);

        case regexpTag$2:
          return _cloneRegExp(object);

        case setTag$5:
          return new Ctor;

        case symbolTag$4:
          return _cloneSymbol(object);
      }
    }

    var _initCloneByTag = initCloneByTag;

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject_1(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    var _baseCreate = baseCreate;

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !_isPrototype(object))
        ? _baseCreate(_getPrototype(object))
        : {};
    }

    var _initCloneObject = initCloneObject;

    /** `Object#toString` result references. */
    var mapTag$4 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike_1(value) && _getTag(value) == mapTag$4;
    }

    var _baseIsMap = baseIsMap;

    /* Node.js helper references. */
    var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

    var isMap_1 = isMap;

    /** `Object#toString` result references. */
    var setTag$4 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike_1(value) && _getTag(value) == setTag$4;
    }

    var _baseIsSet = baseIsSet;

    /* Node.js helper references. */
    var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

    var isSet_1 = isSet;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG$2 = 4;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag$3 = '[object Map]',
        numberTag$1 = '[object Number]',
        objectTag$2 = '[object Object]',
        regexpTag$1 = '[object RegExp]',
        setTag$3 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$3 = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
    cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
    cloneableTags[boolTag$1] = cloneableTags[dateTag$1] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag$3] =
    cloneableTags[numberTag$1] = cloneableTags[objectTag$2] =
    cloneableTags[regexpTag$1] = cloneableTags[setTag$3] =
    cloneableTags[stringTag$2] = cloneableTags[symbolTag$3] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$1,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$2;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject_1(value)) {
        return value;
      }
      var isArr = isArray_1(value);
      if (isArr) {
        result = _initCloneArray(value);
        if (!isDeep) {
          return _copyArray(value, result);
        }
      } else {
        var tag = _getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer_1(value)) {
          return _cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$2 || tag == argsTag$1 || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : _initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? _copySymbolsIn(value, _baseAssignIn(result, value))
              : _copySymbols(value, _baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = _initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new _Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet_1(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap_1(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? _getAllKeysIn : _getAllKeys)
        : (isFlat ? keysIn : keys_1);

      var props = isArr ? undefined : keysFunc(value);
      _arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var _baseClone = baseClone;

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG$1 = 4;

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone$1(value) {
      return _baseClone(value, CLONE_SYMBOLS_FLAG$1);
    }

    var clone_1 = clone$1;

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    var constant_1 = constant;

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    var _createBaseFor = createBaseFor;

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = _createBaseFor();

    var _baseFor = baseFor;

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && _baseFor(object, iteratee, keys_1);
    }

    var _baseForOwn = baseForOwn;

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike_1(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    var _createBaseEach = createBaseEach;

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = _createBaseEach(_baseForOwn);

    var _baseEach = baseEach;

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity$1(value) {
      return value;
    }

    var identity_1 = identity$1;

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity_1;
    }

    var _castFunction = castFunction;

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray_1(collection) ? _arrayEach : _baseEach;
      return func(collection, _castFunction(iteratee));
    }

    var forEach_1 = forEach;

    var each = forEach_1;

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      _baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    var _baseFilter = baseFilter;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    var _setCacheAdd = setCacheAdd;

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    var _setCacheHas = setCacheHas;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new _MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
    SetCache.prototype.has = _setCacheHas;

    var _SetCache = SetCache;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    var _arraySome = arraySome;

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    var _cacheHas = cacheHas;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new _SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!_arraySome(other, function(othValue, othIndex) {
                if (!_cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    var _equalArrays = equalArrays;

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    var _mapToArray = mapToArray;

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    var _setToArray = setToArray;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        mapTag$2 = '[object Map]',
        numberTag = '[object Number]',
        regexpTag = '[object RegExp]',
        setTag$2 = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag$2 = '[object Symbol]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
        symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq_1(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag$1:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$2:
          var convert = _mapToArray;

        case setTag$2:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = _setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag$2:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    var _equalByTag = equalByTag;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = _getAllKeys(object),
          objLength = objProps.length,
          othProps = _getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$5.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    var _equalObjects = equalObjects;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag$1 = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray_1(object),
          othIsArr = isArray_1(other),
          objTag = objIsArr ? arrayTag : _getTag(object),
          othTag = othIsArr ? arrayTag : _getTag(other);

      objTag = objTag == argsTag ? objectTag$1 : objTag;
      othTag = othTag == argsTag ? objectTag$1 : othTag;

      var objIsObj = objTag == objectTag$1,
          othIsObj = othTag == objectTag$1,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer_1(object)) {
        if (!isBuffer_1(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new _Stack);
        return (objIsArr || isTypedArray_1(object))
          ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$4.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$4.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new _Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new _Stack);
      return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    var _baseIsEqualDeep = baseIsEqualDeep;

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
        return value !== value && other !== other;
      }
      return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    var _baseIsEqual = baseIsEqual;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new _Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    var _baseIsMatch = baseIsMatch;

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject_1(value);
    }

    var _isStrictComparable = isStrictComparable;

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys_1(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, _isStrictComparable(value)];
      }
      return result;
    }

    var _getMatchData = getMatchData;

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    var _matchesStrictComparable = matchesStrictComparable;

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = _getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || _baseIsMatch(object, source, matchData);
      };
    }

    var _baseMatches = baseMatches;

    /** `Object#toString` result references. */
    var symbolTag$1 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$1(value) {
      return typeof value == 'symbol' ||
        (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$1);
    }

    var isSymbol_1 = isSymbol$1;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray_1(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol_1(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    var _isKey = isKey;

    /** Error message constants. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize$1(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || _MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize$1.Cache = _MapCache;

    var memoize_1 = memoize$1;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize_1(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    var _memoizeCapped = memoizeCapped;

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = _memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    var _stringToPath = stringToPath;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    var _arrayMap = arrayMap;

    /** Used as references for various `Number` constants. */
    var INFINITY$3 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = _Symbol ? _Symbol.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray_1(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return _arrayMap(value, baseToString) + '';
      }
      if (isSymbol_1(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
    }

    var _baseToString = baseToString;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$1(value) {
      return value == null ? '' : _baseToString(value);
    }

    var toString_1 = toString$1;

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray_1(value)) {
        return value;
      }
      return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
    }

    var _castPath = castPath;

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol_1(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
    }

    var _toKey = toKey;

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = _castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[_toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    var _baseGet = baseGet;

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : _baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    var get_1 = get;

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    var _baseHasIn = baseHasIn;

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = _castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = _toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength_1(length) && _isIndex(key, length) &&
        (isArray_1(object) || isArguments_1(object));
    }

    var _hasPath = hasPath;

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && _hasPath(object, path, _baseHasIn);
    }

    var hasIn_1 = hasIn;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (_isKey(path) && _isStrictComparable(srcValue)) {
        return _matchesStrictComparable(_toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get_1(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn_1(object, path)
          : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    var _baseMatchesProperty = baseMatchesProperty;

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    var _baseProperty = baseProperty;

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return _baseGet(object, path);
      };
    }

    var _basePropertyDeep = basePropertyDeep;

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
    }

    var property_1 = property;

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity_1;
      }
      if (typeof value == 'object') {
        return isArray_1(value)
          ? _baseMatchesProperty(value[0], value[1])
          : _baseMatches(value);
      }
      return property_1(value);
    }

    var _baseIteratee = baseIteratee;

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter$1(collection, predicate) {
      var func = isArray_1(collection) ? _arrayFilter : _baseFilter;
      return func(collection, _baseIteratee(predicate));
    }

    var filter_1 = filter$1;

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty$3.call(object, key);
    }

    var _baseHas = baseHas;

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && _hasPath(object, path, _baseHas);
    }

    var has_1 = has;

    /** `Object#toString` result references. */
    var mapTag$1 = '[object Map]',
        setTag$1 = '[object Set]';

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike_1(value) &&
          (isArray_1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) {
        return !value.length;
      }
      var tag = _getTag(value);
      if (tag == mapTag$1 || tag == setTag$1) {
        return !value.size;
      }
      if (_isPrototype(value)) {
        return !_baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty$2.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    var isEmpty_1 = isEmpty;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    var isUndefined_1 = isUndefined;

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike_1(collection) ? Array(collection.length) : [];

      _baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    var _baseMap = baseMap;

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray_1(collection) ? _arrayMap : _baseMap;
      return func(collection, _baseIteratee(iteratee));
    }

    var map_1 = map;

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    var _arrayReduce = arrayReduce;

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    var _baseReduce = baseReduce;

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray_1(collection) ? _arrayReduce : _baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, _baseIteratee(iteratee), accumulator, initAccum, _baseEach);
    }

    var reduce_1 = reduce;

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag);
    }

    var isString_1 = isString;

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = _baseProperty('length');

    var _asciiSize = asciiSize;

    /** Used to compose unicode character classes. */
    var rsAstralRange$1 = '\\ud800-\\udfff',
        rsComboMarksRange$1 = '\\u0300-\\u036f',
        reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
        rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
        rsVarRange$1 = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsZWJ$1 = '\\u200d';

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboRange$1 + rsVarRange$1 + ']');

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    var _hasUnicode = hasUnicode;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsAstral = '[' + rsAstralRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    var _unicodeSize = unicodeSize;

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return _hasUnicode(string)
        ? _unicodeSize(string)
        : _asciiSize(string);
    }

    var _stringSize = stringSize;

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike_1(collection)) {
        return isString_1(collection) ? _stringSize(collection) : collection.length;
      }
      var tag = _getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return _baseKeys(collection).length;
    }

    var size_1 = size;

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray_1(object),
          isArrLike = isArr || isBuffer_1(object) || isTypedArray_1(object);

      iteratee = _baseIteratee(iteratee);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject_1(object)) {
          accumulator = isFunction_1(Ctor) ? _baseCreate(_getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? _arrayEach : _baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    var transform_1 = transform;

    /** Built-in value references. */
    var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray_1(value) || isArguments_1(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    var _isFlattenable = isFlattenable;

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = _isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            _arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var _baseFlatten = baseFlatten;

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    var _apply = apply;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$3 = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax$3(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax$3(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return _apply(func, this, otherArgs);
      };
    }

    var _overRest = overRest;

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !_defineProperty$1 ? identity_1 : function(func, string) {
      return _defineProperty$1(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant_1(string),
        'writable': true
      });
    };

    var _baseSetToString = baseSetToString;

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    var _shortOut = shortOut;

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = _shortOut(_baseSetToString);

    var _setToString = setToString;

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return _setToString(_overRest(func, start, identity_1), func + '');
    }

    var _baseRest = baseRest;

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    var _baseFindIndex = baseFindIndex;

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    var _baseIsNaN = baseIsNaN;

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    var _strictIndexOf = strictIndexOf;

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? _strictIndexOf(array, value, fromIndex)
        : _baseFindIndex(array, _baseIsNaN, fromIndex);
    }

    var _baseIndexOf = baseIndexOf;

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && _baseIndexOf(array, value, 0) > -1;
    }

    var _arrayIncludes = arrayIncludes;

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    var _arrayIncludesWith = arrayIncludesWith;

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop$2() {
      // No operation performed.
    }

    var noop_1 = noop$2;

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(_Set && (1 / _setToArray(new _Set([,-0]))[1]) == INFINITY$1) ? noop_1 : function(values) {
      return new _Set(values);
    };

    var _createSet = createSet;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = _arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = _arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : _createSet(array);
        if (set) {
          return _setToArray(set);
        }
        isCommon = false;
        includes = _cacheHas;
        seen = new _SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    var _baseUniq = baseUniq;

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike_1(value) && isArrayLike_1(value);
    }

    var isArrayLikeObject_1 = isArrayLikeObject;

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = _baseRest(function(arrays) {
      return _baseUniq(_baseFlatten(arrays, 1, isArrayLikeObject_1, true));
    });

    var union_1 = union;

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return _arrayMap(props, function(key) {
        return object[key];
      });
    }

    var _baseValues = baseValues;

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : _baseValues(object, keys_1(object));
    }

    var values_1 = values;

    /* global window */

    var lodash$1;

    if (typeof commonjsRequire === "function") {
      try {
        lodash$1 = {
          clone: clone_1,
          constant: constant_1,
          each: each,
          filter: filter_1,
          has:  has_1,
          isArray: isArray_1,
          isEmpty: isEmpty_1,
          isFunction: isFunction_1,
          isUndefined: isUndefined_1,
          keys: keys_1,
          map: map_1,
          reduce: reduce_1,
          size: size_1,
          transform: transform_1,
          union: union_1,
          values: values_1
        };
      } catch (e) {}
    }

    if (!lodash$1) {
      lodash$1 = window._;
    }

    var lodash_1$1 = lodash$1;

    var graph = Graph$8;

    var DEFAULT_EDGE_NAME = "\x00",
        GRAPH_NODE = "\x00",
        EDGE_KEY_DELIM = "\x01";

    // Implementation notes:
    //
    //  * Node id query functions should return string ids for the nodes
    //  * Edge id query functions should return an "edgeObj", edge object, that is
    //    composed of enough information to uniquely identify an edge: {v, w, name}.
    //  * Internally we use an "edgeId", a stringified form of the edgeObj, to
    //    reference edges. This is because we need a performant way to look these
    //    edges up and, object properties, which have string keys, are the closest
    //    we're going to get to a performant hashtable in JavaScript.

    function Graph$8(opts) {
      this._isDirected = lodash_1$1.has(opts, "directed") ? opts.directed : true;
      this._isMultigraph = lodash_1$1.has(opts, "multigraph") ? opts.multigraph : false;
      this._isCompound = lodash_1$1.has(opts, "compound") ? opts.compound : false;

      // Label for the graph itself
      this._label = undefined;

      // Defaults to be set when creating a new node
      this._defaultNodeLabelFn = lodash_1$1.constant(undefined);

      // Defaults to be set when creating a new edge
      this._defaultEdgeLabelFn = lodash_1$1.constant(undefined);

      // v -> label
      this._nodes = {};

      if (this._isCompound) {
        // v -> parent
        this._parent = {};

        // v -> children
        this._children = {};
        this._children[GRAPH_NODE] = {};
      }

      // v -> edgeObj
      this._in = {};

      // u -> v -> Number
      this._preds = {};

      // v -> edgeObj
      this._out = {};

      // v -> w -> Number
      this._sucs = {};

      // e -> edgeObj
      this._edgeObjs = {};

      // e -> label
      this._edgeLabels = {};
    }

    /* Number of nodes in the graph. Should only be changed by the implementation. */
    Graph$8.prototype._nodeCount = 0;

    /* Number of edges in the graph. Should only be changed by the implementation. */
    Graph$8.prototype._edgeCount = 0;


    /* === Graph functions ========= */

    Graph$8.prototype.isDirected = function() {
      return this._isDirected;
    };

    Graph$8.prototype.isMultigraph = function() {
      return this._isMultigraph;
    };

    Graph$8.prototype.isCompound = function() {
      return this._isCompound;
    };

    Graph$8.prototype.setGraph = function(label) {
      this._label = label;
      return this;
    };

    Graph$8.prototype.graph = function() {
      return this._label;
    };


    /* === Node functions ========== */

    Graph$8.prototype.setDefaultNodeLabel = function(newDefault) {
      if (!lodash_1$1.isFunction(newDefault)) {
        newDefault = lodash_1$1.constant(newDefault);
      }
      this._defaultNodeLabelFn = newDefault;
      return this;
    };

    Graph$8.prototype.nodeCount = function() {
      return this._nodeCount;
    };

    Graph$8.prototype.nodes = function() {
      return lodash_1$1.keys(this._nodes);
    };

    Graph$8.prototype.sources = function() {
      var self = this;
      return lodash_1$1.filter(this.nodes(), function(v) {
        return lodash_1$1.isEmpty(self._in[v]);
      });
    };

    Graph$8.prototype.sinks = function() {
      var self = this;
      return lodash_1$1.filter(this.nodes(), function(v) {
        return lodash_1$1.isEmpty(self._out[v]);
      });
    };

    Graph$8.prototype.setNodes = function(vs, value) {
      var args = arguments;
      var self = this;
      lodash_1$1.each(vs, function(v) {
        if (args.length > 1) {
          self.setNode(v, value);
        } else {
          self.setNode(v);
        }
      });
      return this;
    };

    Graph$8.prototype.setNode = function(v, value) {
      if (lodash_1$1.has(this._nodes, v)) {
        if (arguments.length > 1) {
          this._nodes[v] = value;
        }
        return this;
      }

      this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
      if (this._isCompound) {
        this._parent[v] = GRAPH_NODE;
        this._children[v] = {};
        this._children[GRAPH_NODE][v] = true;
      }
      this._in[v] = {};
      this._preds[v] = {};
      this._out[v] = {};
      this._sucs[v] = {};
      ++this._nodeCount;
      return this;
    };

    Graph$8.prototype.node = function(v) {
      return this._nodes[v];
    };

    Graph$8.prototype.hasNode = function(v) {
      return lodash_1$1.has(this._nodes, v);
    };

    Graph$8.prototype.removeNode =  function(v) {
      var self = this;
      if (lodash_1$1.has(this._nodes, v)) {
        var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };
        delete this._nodes[v];
        if (this._isCompound) {
          this._removeFromParentsChildList(v);
          delete this._parent[v];
          lodash_1$1.each(this.children(v), function(child) {
            self.setParent(child);
          });
          delete this._children[v];
        }
        lodash_1$1.each(lodash_1$1.keys(this._in[v]), removeEdge);
        delete this._in[v];
        delete this._preds[v];
        lodash_1$1.each(lodash_1$1.keys(this._out[v]), removeEdge);
        delete this._out[v];
        delete this._sucs[v];
        --this._nodeCount;
      }
      return this;
    };

    Graph$8.prototype.setParent = function(v, parent) {
      if (!this._isCompound) {
        throw new Error("Cannot set parent in a non-compound graph");
      }

      if (lodash_1$1.isUndefined(parent)) {
        parent = GRAPH_NODE;
      } else {
        // Coerce parent to string
        parent += "";
        for (var ancestor = parent;
             !lodash_1$1.isUndefined(ancestor);
             ancestor = this.parent(ancestor)) {
          if (ancestor === v) {
            throw new Error("Setting " + parent+ " as parent of " + v +
                            " would create a cycle");
          }
        }

        this.setNode(parent);
      }

      this.setNode(v);
      this._removeFromParentsChildList(v);
      this._parent[v] = parent;
      this._children[parent][v] = true;
      return this;
    };

    Graph$8.prototype._removeFromParentsChildList = function(v) {
      delete this._children[this._parent[v]][v];
    };

    Graph$8.prototype.parent = function(v) {
      if (this._isCompound) {
        var parent = this._parent[v];
        if (parent !== GRAPH_NODE) {
          return parent;
        }
      }
    };

    Graph$8.prototype.children = function(v) {
      if (lodash_1$1.isUndefined(v)) {
        v = GRAPH_NODE;
      }

      if (this._isCompound) {
        var children = this._children[v];
        if (children) {
          return lodash_1$1.keys(children);
        }
      } else if (v === GRAPH_NODE) {
        return this.nodes();
      } else if (this.hasNode(v)) {
        return [];
      }
    };

    Graph$8.prototype.predecessors = function(v) {
      var predsV = this._preds[v];
      if (predsV) {
        return lodash_1$1.keys(predsV);
      }
    };

    Graph$8.prototype.successors = function(v) {
      var sucsV = this._sucs[v];
      if (sucsV) {
        return lodash_1$1.keys(sucsV);
      }
    };

    Graph$8.prototype.neighbors = function(v) {
      var preds = this.predecessors(v);
      if (preds) {
        return lodash_1$1.union(preds, this.successors(v));
      }
    };

    Graph$8.prototype.isLeaf = function (v) {
      var neighbors;
      if (this.isDirected()) {
        neighbors = this.successors(v);
      } else {
        neighbors = this.neighbors(v);
      }
      return neighbors.length === 0;
    };

    Graph$8.prototype.filterNodes = function(filter) {
      var copy = new this.constructor({
        directed: this._isDirected,
        multigraph: this._isMultigraph,
        compound: this._isCompound
      });

      copy.setGraph(this.graph());

      var self = this;
      lodash_1$1.each(this._nodes, function(value, v) {
        if (filter(v)) {
          copy.setNode(v, value);
        }
      });

      lodash_1$1.each(this._edgeObjs, function(e) {
        if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
          copy.setEdge(e, self.edge(e));
        }
      });

      var parents = {};
      function findParent(v) {
        var parent = self.parent(v);
        if (parent === undefined || copy.hasNode(parent)) {
          parents[v] = parent;
          return parent;
        } else if (parent in parents) {
          return parents[parent];
        } else {
          return findParent(parent);
        }
      }

      if (this._isCompound) {
        lodash_1$1.each(copy.nodes(), function(v) {
          copy.setParent(v, findParent(v));
        });
      }

      return copy;
    };

    /* === Edge functions ========== */

    Graph$8.prototype.setDefaultEdgeLabel = function(newDefault) {
      if (!lodash_1$1.isFunction(newDefault)) {
        newDefault = lodash_1$1.constant(newDefault);
      }
      this._defaultEdgeLabelFn = newDefault;
      return this;
    };

    Graph$8.prototype.edgeCount = function() {
      return this._edgeCount;
    };

    Graph$8.prototype.edges = function() {
      return lodash_1$1.values(this._edgeObjs);
    };

    Graph$8.prototype.setPath = function(vs, value) {
      var self = this,
          args = arguments;
      lodash_1$1.reduce(vs, function(v, w) {
        if (args.length > 1) {
          self.setEdge(v, w, value);
        } else {
          self.setEdge(v, w);
        }
        return w;
      });
      return this;
    };

    /*
     * setEdge(v, w, [value, [name]])
     * setEdge({ v, w, [name] }, [value])
     */
    Graph$8.prototype.setEdge = function() {
      var v, w, name, value,
          valueSpecified = false,
          arg0 = arguments[0];

      if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
        v = arg0.v;
        w = arg0.w;
        name = arg0.name;
        if (arguments.length === 2) {
          value = arguments[1];
          valueSpecified = true;
        }
      } else {
        v = arg0;
        w = arguments[1];
        name = arguments[3];
        if (arguments.length > 2) {
          value = arguments[2];
          valueSpecified = true;
        }
      }

      v = "" + v;
      w = "" + w;
      if (!lodash_1$1.isUndefined(name)) {
        name = "" + name;
      }

      var e = edgeArgsToId(this._isDirected, v, w, name);
      if (lodash_1$1.has(this._edgeLabels, e)) {
        if (valueSpecified) {
          this._edgeLabels[e] = value;
        }
        return this;
      }

      if (!lodash_1$1.isUndefined(name) && !this._isMultigraph) {
        throw new Error("Cannot set a named edge when isMultigraph = false");
      }

      // It didn't exist, so we need to create it.
      // First ensure the nodes exist.
      this.setNode(v);
      this.setNode(w);

      this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);

      var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
      // Ensure we add undirected edges in a consistent way.
      v = edgeObj.v;
      w = edgeObj.w;

      Object.freeze(edgeObj);
      this._edgeObjs[e] = edgeObj;
      incrementOrInitEntry(this._preds[w], v);
      incrementOrInitEntry(this._sucs[v], w);
      this._in[w][e] = edgeObj;
      this._out[v][e] = edgeObj;
      this._edgeCount++;
      return this;
    };

    Graph$8.prototype.edge = function(v, w, name) {
      var e = (arguments.length === 1
                ? edgeObjToId(this._isDirected, arguments[0])
                : edgeArgsToId(this._isDirected, v, w, name));
      return this._edgeLabels[e];
    };

    Graph$8.prototype.hasEdge = function(v, w, name) {
      var e = (arguments.length === 1
                ? edgeObjToId(this._isDirected, arguments[0])
                : edgeArgsToId(this._isDirected, v, w, name));
      return lodash_1$1.has(this._edgeLabels, e);
    };

    Graph$8.prototype.removeEdge = function(v, w, name) {
      var e = (arguments.length === 1
                ? edgeObjToId(this._isDirected, arguments[0])
                : edgeArgsToId(this._isDirected, v, w, name)),
          edge = this._edgeObjs[e];
      if (edge) {
        v = edge.v;
        w = edge.w;
        delete this._edgeLabels[e];
        delete this._edgeObjs[e];
        decrementOrRemoveEntry(this._preds[w], v);
        decrementOrRemoveEntry(this._sucs[v], w);
        delete this._in[w][e];
        delete this._out[v][e];
        this._edgeCount--;
      }
      return this;
    };

    Graph$8.prototype.inEdges = function(v, u) {
      var inV = this._in[v];
      if (inV) {
        var edges = lodash_1$1.values(inV);
        if (!u) {
          return edges;
        }
        return lodash_1$1.filter(edges, function(edge) { return edge.v === u; });
      }
    };

    Graph$8.prototype.outEdges = function(v, w) {
      var outV = this._out[v];
      if (outV) {
        var edges = lodash_1$1.values(outV);
        if (!w) {
          return edges;
        }
        return lodash_1$1.filter(edges, function(edge) { return edge.w === w; });
      }
    };

    Graph$8.prototype.nodeEdges = function(v, w) {
      var inEdges = this.inEdges(v, w);
      if (inEdges) {
        return inEdges.concat(this.outEdges(v, w));
      }
    };

    function incrementOrInitEntry(map, k) {
      if (map[k]) {
        map[k]++;
      } else {
        map[k] = 1;
      }
    }

    function decrementOrRemoveEntry(map, k) {
      if (!--map[k]) { delete map[k]; }
    }

    function edgeArgsToId(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +
                 (lodash_1$1.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
    }

    function edgeArgsToObj(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      var edgeObj =  { v: v, w: w };
      if (name) {
        edgeObj.name = name;
      }
      return edgeObj;
    }

    function edgeObjToId(isDirected, edgeObj) {
      return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
    }

    var version$2 = '2.1.7';

    // Includes only the "core" of graphlib
    var lib = {
      Graph: graph,
      version: version$2
    };

    var json = {
      write: write,
      read: read
    };

    function write(g) {
      var json = {
        options: {
          directed: g.isDirected(),
          multigraph: g.isMultigraph(),
          compound: g.isCompound()
        },
        nodes: writeNodes(g),
        edges: writeEdges(g)
      };
      if (!lodash_1$1.isUndefined(g.graph())) {
        json.value = lodash_1$1.clone(g.graph());
      }
      return json;
    }

    function writeNodes(g) {
      return lodash_1$1.map(g.nodes(), function(v) {
        var nodeValue = g.node(v),
            parent = g.parent(v),
            node = { v: v };
        if (!lodash_1$1.isUndefined(nodeValue)) {
          node.value = nodeValue;
        }
        if (!lodash_1$1.isUndefined(parent)) {
          node.parent = parent;
        }
        return node;
      });
    }

    function writeEdges(g) {
      return lodash_1$1.map(g.edges(), function(e) {
        var edgeValue = g.edge(e),
            edge = { v: e.v, w: e.w };
        if (!lodash_1$1.isUndefined(e.name)) {
          edge.name = e.name;
        }
        if (!lodash_1$1.isUndefined(edgeValue)) {
          edge.value = edgeValue;
        }
        return edge;
      });
    }

    function read(json) {
      var g = new graph(json.options).setGraph(json.value);
      lodash_1$1.each(json.nodes, function(entry) {
        g.setNode(entry.v, entry.value);
        if (entry.parent) {
          g.setParent(entry.v, entry.parent);
        }
      });
      lodash_1$1.each(json.edges, function(entry) {
        g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
      });
      return g;
    }
    json.write;
    json.read;

    var components_1 = components;

    function components(g) {
      var visited = {},
          cmpts = [],
          cmpt;

      function dfs(v) {
        if (lodash_1$1.has(visited, v)) return;
        visited[v] = true;
        cmpt.push(v);
        lodash_1$1.each(g.successors(v), dfs);
        lodash_1$1.each(g.predecessors(v), dfs);
      }

      lodash_1$1.each(g.nodes(), function(v) {
        cmpt = [];
        dfs(v);
        if (cmpt.length) {
          cmpts.push(cmpt);
        }
      });

      return cmpts;
    }

    var priorityQueue = PriorityQueue;

    /**
     * A min-priority queue data structure. This algorithm is derived from Cormen,
     * et al., "Introduction to Algorithms". The basic idea of a min-priority
     * queue is that you can efficiently (in O(1) time) get the smallest key in
     * the queue. Adding and removing elements takes O(log n) time. A key can
     * have its priority decreased in O(log n) time.
     */
    function PriorityQueue() {
      this._arr = [];
      this._keyIndices = {};
    }

    /**
     * Returns the number of elements in the queue. Takes `O(1)` time.
     */
    PriorityQueue.prototype.size = function() {
      return this._arr.length;
    };

    /**
     * Returns the keys that are in the queue. Takes `O(n)` time.
     */
    PriorityQueue.prototype.keys = function() {
      return this._arr.map(function(x) { return x.key; });
    };

    /**
     * Returns `true` if **key** is in the queue and `false` if not.
     */
    PriorityQueue.prototype.has = function(key) {
      return lodash_1$1.has(this._keyIndices, key);
    };

    /**
     * Returns the priority for **key**. If **key** is not present in the queue
     * then this function returns `undefined`. Takes `O(1)` time.
     *
     * @param {Object} key
     */
    PriorityQueue.prototype.priority = function(key) {
      var index = this._keyIndices[key];
      if (index !== undefined) {
        return this._arr[index].priority;
      }
    };

    /**
     * Returns the key for the minimum element in this queue. If the queue is
     * empty this function throws an Error. Takes `O(1)` time.
     */
    PriorityQueue.prototype.min = function() {
      if (this.size() === 0) {
        throw new Error("Queue underflow");
      }
      return this._arr[0].key;
    };

    /**
     * Inserts a new key into the priority queue. If the key already exists in
     * the queue this function returns `false`; otherwise it will return `true`.
     * Takes `O(n)` time.
     *
     * @param {Object} key the key to add
     * @param {Number} priority the initial priority for the key
     */
    PriorityQueue.prototype.add = function(key, priority) {
      var keyIndices = this._keyIndices;
      key = String(key);
      if (!lodash_1$1.has(keyIndices, key)) {
        var arr = this._arr;
        var index = arr.length;
        keyIndices[key] = index;
        arr.push({key: key, priority: priority});
        this._decrease(index);
        return true;
      }
      return false;
    };

    /**
     * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
     */
    PriorityQueue.prototype.removeMin = function() {
      this._swap(0, this._arr.length - 1);
      var min = this._arr.pop();
      delete this._keyIndices[min.key];
      this._heapify(0);
      return min.key;
    };

    /**
     * Decreases the priority for **key** to **priority**. If the new priority is
     * greater than the previous priority, this function will throw an Error.
     *
     * @param {Object} key the key for which to raise priority
     * @param {Number} priority the new priority for the key
     */
    PriorityQueue.prototype.decrease = function(key, priority) {
      var index = this._keyIndices[key];
      if (priority > this._arr[index].priority) {
        throw new Error("New priority is greater than current priority. " +
            "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
      }
      this._arr[index].priority = priority;
      this._decrease(index);
    };

    PriorityQueue.prototype._heapify = function(i) {
      var arr = this._arr;
      var l = 2 * i,
          r = l + 1,
          largest = i;
      if (l < arr.length) {
        largest = arr[l].priority < arr[largest].priority ? l : largest;
        if (r < arr.length) {
          largest = arr[r].priority < arr[largest].priority ? r : largest;
        }
        if (largest !== i) {
          this._swap(i, largest);
          this._heapify(largest);
        }
      }
    };

    PriorityQueue.prototype._decrease = function(index) {
      var arr = this._arr;
      var priority = arr[index].priority;
      var parent;
      while (index !== 0) {
        parent = index >> 1;
        if (arr[parent].priority < priority) {
          break;
        }
        this._swap(index, parent);
        index = parent;
      }
    };

    PriorityQueue.prototype._swap = function(i, j) {
      var arr = this._arr;
      var keyIndices = this._keyIndices;
      var origArrI = arr[i];
      var origArrJ = arr[j];
      arr[i] = origArrJ;
      arr[j] = origArrI;
      keyIndices[origArrJ.key] = i;
      keyIndices[origArrI.key] = j;
    };

    var dijkstra_1 = dijkstra;

    var DEFAULT_WEIGHT_FUNC$1 = lodash_1$1.constant(1);

    function dijkstra(g, source, weightFn, edgeFn) {
      return runDijkstra(g, String(source),
                         weightFn || DEFAULT_WEIGHT_FUNC$1,
                         edgeFn || function(v) { return g.outEdges(v); });
    }

    function runDijkstra(g, source, weightFn, edgeFn) {
      var results = {},
          pq = new priorityQueue(),
          v, vEntry;

      var updateNeighbors = function(edge) {
        var w = edge.v !== v ? edge.v : edge.w,
            wEntry = results[w],
            weight = weightFn(edge),
            distance = vEntry.distance + weight;

        if (weight < 0) {
          throw new Error("dijkstra does not allow negative edge weights. " +
                          "Bad edge: " + edge + " Weight: " + weight);
        }

        if (distance < wEntry.distance) {
          wEntry.distance = distance;
          wEntry.predecessor = v;
          pq.decrease(w, distance);
        }
      };

      g.nodes().forEach(function(v) {
        var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
        results[v] = { distance: distance };
        pq.add(v, distance);
      });

      while (pq.size() > 0) {
        v = pq.removeMin();
        vEntry = results[v];
        if (vEntry.distance === Number.POSITIVE_INFINITY) {
          break;
        }

        edgeFn(v).forEach(updateNeighbors);
      }

      return results;
    }

    var dijkstraAll_1 = dijkstraAll;

    function dijkstraAll(g, weightFunc, edgeFunc) {
      return lodash_1$1.transform(g.nodes(), function(acc, v) {
        acc[v] = dijkstra_1(g, v, weightFunc, edgeFunc);
      }, {});
    }

    var tarjan_1 = tarjan;

    function tarjan(g) {
      var index = 0,
          stack = [],
          visited = {}, // node id -> { onStack, lowlink, index }
          results = [];

      function dfs(v) {
        var entry = visited[v] = {
          onStack: true,
          lowlink: index,
          index: index++
        };
        stack.push(v);

        g.successors(v).forEach(function(w) {
          if (!lodash_1$1.has(visited, w)) {
            dfs(w);
            entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
          } else if (visited[w].onStack) {
            entry.lowlink = Math.min(entry.lowlink, visited[w].index);
          }
        });

        if (entry.lowlink === entry.index) {
          var cmpt = [],
              w;
          do {
            w = stack.pop();
            visited[w].onStack = false;
            cmpt.push(w);
          } while (v !== w);
          results.push(cmpt);
        }
      }

      g.nodes().forEach(function(v) {
        if (!lodash_1$1.has(visited, v)) {
          dfs(v);
        }
      });

      return results;
    }

    var findCycles_1 = findCycles;

    function findCycles(g) {
      return lodash_1$1.filter(tarjan_1(g), function(cmpt) {
        return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
      });
    }

    var floydWarshall_1 = floydWarshall;

    var DEFAULT_WEIGHT_FUNC = lodash_1$1.constant(1);

    function floydWarshall(g, weightFn, edgeFn) {
      return runFloydWarshall(g,
                              weightFn || DEFAULT_WEIGHT_FUNC,
                              edgeFn || function(v) { return g.outEdges(v); });
    }

    function runFloydWarshall(g, weightFn, edgeFn) {
      var results = {},
          nodes = g.nodes();

      nodes.forEach(function(v) {
        results[v] = {};
        results[v][v] = { distance: 0 };
        nodes.forEach(function(w) {
          if (v !== w) {
            results[v][w] = { distance: Number.POSITIVE_INFINITY };
          }
        });
        edgeFn(v).forEach(function(edge) {
          var w = edge.v === v ? edge.w : edge.v,
              d = weightFn(edge);
          results[v][w] = { distance: d, predecessor: v };
        });
      });

      nodes.forEach(function(k) {
        var rowK = results[k];
        nodes.forEach(function(i) {
          var rowI = results[i];
          nodes.forEach(function(j) {
            var ik = rowI[k];
            var kj = rowK[j];
            var ij = rowI[j];
            var altDistance = ik.distance + kj.distance;
            if (altDistance < ij.distance) {
              ij.distance = altDistance;
              ij.predecessor = kj.predecessor;
            }
          });
        });
      });

      return results;
    }

    var topsort_1 = topsort;
    topsort.CycleException = CycleException;

    function topsort(g) {
      var visited = {},
          stack = {},
          results = [];

      function visit(node) {
        if (lodash_1$1.has(stack, node)) {
          throw new CycleException();
        }

        if (!lodash_1$1.has(visited, node)) {
          stack[node] = true;
          visited[node] = true;
          lodash_1$1.each(g.predecessors(node), visit);
          delete stack[node];
          results.push(node);
        }
      }

      lodash_1$1.each(g.sinks(), visit);

      if (lodash_1$1.size(visited) !== g.nodeCount()) {
        throw new CycleException();
      }

      return results;
    }

    function CycleException() {}
    CycleException.prototype = new Error(); // must be an instance of Error to pass testing

    var isAcyclic_1 = isAcyclic;

    function isAcyclic(g) {
      try {
        topsort_1(g);
      } catch (e) {
        if (e instanceof topsort_1.CycleException) {
          return false;
        }
        throw e;
      }
      return true;
    }

    var dfs_1 = dfs$1;

    /*
     * A helper that preforms a pre- or post-order traversal on the input graph
     * and returns the nodes in the order they were visited. If the graph is
     * undirected then this algorithm will navigate using neighbors. If the graph
     * is directed then this algorithm will navigate using successors.
     *
     * Order must be one of "pre" or "post".
     */
    function dfs$1(g, vs, order) {
      if (!lodash_1$1.isArray(vs)) {
        vs = [vs];
      }

      var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);

      var acc = [],
          visited = {};
      lodash_1$1.each(vs, function(v) {
        if (!g.hasNode(v)) {
          throw new Error("Graph does not have node: " + v);
        }

        doDfs(g, v, order === "post", visited, navigation, acc);
      });
      return acc;
    }

    function doDfs(g, v, postorder, visited, navigation, acc) {
      if (!lodash_1$1.has(visited, v)) {
        visited[v] = true;

        if (!postorder) { acc.push(v); }
        lodash_1$1.each(navigation(v), function(w) {
          doDfs(g, w, postorder, visited, navigation, acc);
        });
        if (postorder) { acc.push(v); }
      }
    }

    var postorder_1 = postorder$2;

    function postorder$2(g, vs) {
      return dfs_1(g, vs, "post");
    }

    var preorder_1 = preorder$1;

    function preorder$1(g, vs) {
      return dfs_1(g, vs, "pre");
    }

    var prim_1 = prim;

    function prim(g, weightFunc) {
      var result = new graph(),
          parents = {},
          pq = new priorityQueue(),
          v;

      function updateNeighbors(edge) {
        var w = edge.v === v ? edge.w : edge.v,
            pri = pq.priority(w);
        if (pri !== undefined) {
          var edgeWeight = weightFunc(edge);
          if (edgeWeight < pri) {
            parents[w] = v;
            pq.decrease(w, edgeWeight);
          }
        }
      }

      if (g.nodeCount() === 0) {
        return result;
      }

      lodash_1$1.each(g.nodes(), function(v) {
        pq.add(v, Number.POSITIVE_INFINITY);
        result.setNode(v);
      });

      // Start from an arbitrary node
      pq.decrease(g.nodes()[0], 0);

      var init = false;
      while (pq.size() > 0) {
        v = pq.removeMin();
        if (lodash_1$1.has(parents, v)) {
          result.setEdge(v, parents[v]);
        } else if (init) {
          throw new Error("Input graph is not connected: " + g);
        } else {
          init = true;
        }

        g.nodeEdges(v).forEach(updateNeighbors);
      }

      return result;
    }

    var alg = {
      components: components_1,
      dijkstra: dijkstra_1,
      dijkstraAll: dijkstraAll_1,
      findCycles: findCycles_1,
      floydWarshall: floydWarshall_1,
      isAcyclic: isAcyclic_1,
      postorder: postorder_1,
      preorder: preorder_1,
      prim: prim_1,
      tarjan: tarjan_1,
      topsort: topsort_1
    };
    alg.components;
    alg.dijkstra;
    alg.dijkstraAll;
    alg.findCycles;
    alg.floydWarshall;
    alg.isAcyclic;
    alg.postorder;
    alg.preorder;
    alg.prim;
    alg.tarjan;
    alg.topsort;

    /**
     * Copyright (c) 2014, Chris Pettitt
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice, this
     * list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     * this list of conditions and the following disclaimer in the documentation
     * and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its contributors
     * may be used to endorse or promote products derived from this software without
     * specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */



    var graphlib$1 = {
      Graph: lib.Graph,
      json: json,
      alg: alg,
      version: lib.version
    };
    var graphlib_1$1 = graphlib$1.Graph;
    var graphlib_2 = graphlib$1.json;
    graphlib$1.alg;
    graphlib$1.version;

    // Define the getter and setter
    function getGraphState() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, _reject) => {
                graphStore.subscribe((graphState) => {
                    resolve(graphState);
                });
            });
        });
    }
    function getAiSystemState() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, _reject) => {
                aiSystemStore.subscribe((aiSystemState) => {
                    resolve(aiSystemState);
                });
            });
        });
    }
    // get the name of the action by using the id
    function getNodeName(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new Promise((resolve, _reject) => {
                aiSystemStore.subscribe((aiSystemState) => {
                    resolve(aiSystemState);
                });
            });
            const action = yield res.actions.find(action => {
                return getId(action) == id;
            });
            if (action) {
                console.log("action name: " + action.name);
                return action.name;
            }
        });
    }
    function getId(actionOrProcess) {
        return actionOrProcess._id.$oid;
    }
    function setGraphState(graphState) {
        graphStore.set(graphState);
    }
    function addNode(node_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const graphState = yield getGraphState();
            graphState.graph.setNode(node_id);
            graphState.lastAction = "addNode";
            const node_name = yield getNodeName(node_id);
            if (node_name) {
                graphState.name = node_name;
                graphState.actedOn = [node_id, node_name];
            }
            else {
                graphState.actedOn = [node_id, ""];
            }
            setGraphState(graphState);
        });
    }
    // function for converting a process to a graph
    function processToGraph(process) {
        return __awaiter(this, void 0, void 0, function* () {
            yield resetGraph();
            yield new Promise((resolve, _reject) => {
                aiSystemStore.subscribe((ai_system_state) => {
                    resolve(ai_system_state);
                });
            });
            // verify that all of the steps have corresponding actions
            const graph = process.graph;
            const nodes = graph.nodes();
            // for each of the node ids stored in nodes, get the name of the action
            //loop through the nodes
            for (let i = 0; i < nodes.length; i++) {
                const name = yield getNodeName(nodes[i]);
                if (name) {
                    yield addNode(nodes[i]);
                }
            }
            const my_edges = graph.edges();
            //loop through the edges
            for (let i = 0; i < my_edges.length; i++) {
                yield addEdge(my_edges[i]);
            }
            // create a map from label to id
            // let label_to_id = new Map();
            // loop through the actions and make sure that they are all in the ai_system_state
            // for (let i = 0; i < nodes.length; i++) {
            //   let action_id = nodes[i];
            // check if the action is in the ai_system_state
            // for (let j = 0; j < ai_system_state.actions.length; j++) {
            //   let ai_system_action_id = ai_system_state.actions[j];
            //   if (ai_system_action.name == action) {
            //     // create a node
            //     let this_id = await getUniqueId();
            //     let node : Node= {
            //       id: this_id,
            //       type: "action",
            //       label: ai_system_action.name,
            //       data: ai_system_action,
            //     };
            // Get the name of the action by looking up the id within the system_state actions and set the l
            //loop through the nodes
            // if (i == 0) {
            //   // is the root node
            //   await addNode(node, true);
            // } else {
            //   await addNode(node,false);
            // }
            //   }
            // }
            // loop through the actions and create edges
            // for (let i = 0; i < actions.length - 1; i++) {
            // let edge = {
            //   id : await getUniqueId(),
            //   source: label_to_id.get(actions[i]),
            //   target: label_to_id.get(actions[i + 1]),
            //   label: "next",
            //   data: null,
            // };
            // await addEdge(edge);
            // }
        });
    }
    function addEdge(edge) {
        return __awaiter(this, void 0, void 0, function* () {
            const graphState = yield getGraphState();
            graphState.graph.setEdge(edge);
            graphState.lastAction = "addEdge";
            graphState.actedOn = edge;
            setGraphState(graphState);
        });
    }
    function removeNode$1(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = yield getNodeName(id);
            const graphState = yield getGraphState();
            graphState.graph.removeNode(id);
            graphState.lastAction = "removeNode";
            if (name) {
                graphState.actedOn = [id, name];
            }
            else {
                graphState.actedOn = [id, "unknown"];
            }
            setGraphState(graphState);
        });
    }
    function removeSelectedNode() {
        return __awaiter(this, void 0, void 0, function* () {
            const graphState = yield getGraphState();
            if (Array.isArray(graphState.actedOn)) {
                const selected = graphState.actedOn[0];
                yield removeNode$1(selected);
            }
        });
    }
    function removeSelectedEdge() {
        return __awaiter(this, void 0, void 0, function* () {
            const graphState = yield getGraphState();
            if (!Array.isArray(graphState.actedOn) &&
                graphState.lastAction == "selectEdge") {
                const selected = graphState.actedOn;
                if (selected != null) {
                    yield removeEdge(selected.v, selected.w);
                }
            }
            else {
                console.log("not removing edge, doesn't meet criteria");
            }
        });
    }
    function removeEdge(sourceId, targetId) {
        return __awaiter(this, void 0, void 0, function* () {
            const graphState = yield getGraphState();
            // find the id of the edge to remove
            console.log("removing edge:", sourceId, targetId, " from graph");
            const edge = graphState.actedOn;
            // graphState.graph.removeEdge(edge);
            graphState.lastAction = "removeEdge";
            graphState.actedOn = edge;
            graphState.name = null;
            setGraphState(graphState);
        });
    }
    function selectNode(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const ai_system_state = yield getAiSystemState();
            const actions = ai_system_state.actions;
            let specific_action;
            const res = actions.find(action => {
                return getId(action) == id;
            });
            if (res) {
                specific_action = res;
                systemStateStore.update((system_state) => {
                    // Return a new SystemState object with the updated selectedAction property
                    return Object.assign(Object.assign({}, system_state), { selectedAction: specific_action, currentlySelected: "action" });
                });
                const graphState = yield getGraphState();
                graphState.lastAction = "selectNode";
                graphState.lastActedOn = graphState.actedOn;
                graphState.actedOn = [id, specific_action.name];
                graphState.name = specific_action.name;
                setGraphState(graphState);
            }
        });
    }
    function selectEdge(source, target) {
        return __awaiter(this, void 0, void 0, function* () {
            const graphState = yield getGraphState();
            graphState.lastAction = "selectEdge";
            graphState.actedOn = { v: source, w: target };
            graphState.name = null;
            setGraphState(graphState);
        });
    }
    function resetLastAction() {
        return __awaiter(this, void 0, void 0, function* () {
            const graphState = yield getGraphState();
            graphState.lastAction = "none";
            graphState.actedOn = null;
            setGraphState(graphState);
        });
    }
    // reset the graphState to a new empty graph
    function resetGraph() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("resetting graph");
            const graphState = yield getGraphState();
            graphState.graph = new graphlib_1$1();
            graphState.lastAction = "resetGraph";
            graphState.actedOn = null;
            graphState.name = null;
            setGraphState(graphState);
        });
    }

    /* src/components/sidebarComponents/CreateProcess.svelte generated by Svelte v3.58.0 */

    const { console: console_1$2 } = globals;
    const file$3 = "src/components/sidebarComponents/CreateProcess.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (76:4) {#each actions as action (action._id)}
    function create_each_block_1(key_1, ctx) {
    	let li;
    	let button;
    	let t0_value = /*action*/ ctx[9].name + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*action*/ ctx[9]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			li = element$1("li");
    			button = element$1("button");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(button, "type", "button");
    			toggle_class(button, "selected", /*isSelected*/ ctx[5](/*action*/ ctx[9]));
    			add_location(button, file$3, 77, 8, 3249);
    			add_location(li, file$3, 76, 6, 3236);
    			this.first = li;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			append_dev(button, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*actions*/ 1 && t0_value !== (t0_value = /*action*/ ctx[9].name + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*isSelected, actions*/ 33) {
    				toggle_class(button, "selected", /*isSelected*/ ctx[5](/*action*/ ctx[9]));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(76:4) {#each actions as action (action._id)}",
    		ctx
    	});

    	return block;
    }

    // (86:2) {#each selectedActions as action (action._id)}
    function create_each_block$1(key_1, ctx) {
    	let p;
    	let t_value = /*action*/ ctx[9].name + "";
    	let t;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			p = element$1("p");
    			t = text(t_value);
    			add_location(p, file$3, 86, 4, 3521);
    			this.first = p;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*selectedActions*/ 2 && t_value !== (t_value = /*action*/ ctx[9].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(86:2) {#each selectedActions as action (action._id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let ul;
    	let each_blocks_1 = [];
    	let each0_lookup = new Map();
    	let t0;
    	let div;
    	let h3;
    	let t2;
    	let each_blocks = [];
    	let each1_lookup = new Map();
    	let t3;
    	let button0;
    	let t5;
    	let button1;
    	let t7;
    	let button2;
    	let t9;
    	let button3;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*actions*/ ctx[0];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*action*/ ctx[9]._id;
    	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each0_lookup.set(key, each_blocks_1[i] = create_each_block_1(key, child_ctx));
    	}

    	let each_value = /*selectedActions*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key_1 = ctx => /*action*/ ctx[9]._id;
    	validate_each_keys(ctx, each_value, get_each_context$1, get_key_1);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$1(ctx, each_value, i);
    		let key = get_key_1(child_ctx);
    		each1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			ul = element$1("ul");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space();
    			div = element$1("div");
    			h3 = element$1("h3");
    			h3.textContent = "Nodes to add:";
    			t2 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			button0 = element$1("button");
    			button0.textContent = "Add Node(s)";
    			t5 = space();
    			button1 = element$1("button");
    			button1.textContent = "Remove Node(s)";
    			t7 = space();
    			button2 = element$1("button");
    			button2.textContent = "Add Edge";
    			t9 = space();
    			button3 = element$1("button");
    			button3.textContent = "Remove Edge";
    			add_location(ul, file$3, 74, 2, 3182);
    			add_location(h3, file$3, 83, 4, 3436);
    			attr_dev(div, "class", "section-header");
    			add_location(div, file$3, 82, 2, 3403);
    			attr_dev(button0, "class", "add-button");
    			add_location(button0, file$3, 88, 2, 3554);
    			attr_dev(button1, "class", "remove-button");
    			add_location(button1, file$3, 89, 2, 3629);
    			attr_dev(button2, "class", "add-edge-button");
    			add_location(button2, file$3, 90, 2, 3715);
    			attr_dev(button3, "class", "remove-button");
    			add_location(button3, file$3, 91, 2, 3791);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(ul, null);
    				}
    			}

    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			insert_dev(target, t2, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, t3, anchor);
    			insert_dev(target, button0, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, button1, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, button2, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, button3, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*localAddNodes*/ ctx[2], false, false, false, false),
    					listen_dev(button1, "click", removeSelectedNode, false, false, false, false),
    					listen_dev(button2, "click", /*localAddEdge*/ ctx[3], false, false, false, false),
    					listen_dev(button3, "click", removeSelectedEdge, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*isSelected, actions, toggleSelect*/ 49) {
    				each_value_1 = /*actions*/ ctx[0];
    				validate_each_argument(each_value_1);
    				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
    				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_1, each0_lookup, ul, destroy_block, create_each_block_1, null, get_each_context_1);
    			}

    			if (dirty & /*selectedActions*/ 2) {
    				each_value = /*selectedActions*/ ctx[1];
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$1, get_key_1);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, t3.parentNode, destroy_block, create_each_block$1, t3, get_each_context$1);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].d();
    			}

    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(button0);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(button1);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(button2);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(button3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CreateProcess', slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let actions = [];
    	let selectedActions = [];
    	let createdProcess = null;

    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		aiSystemStore.subscribe(value => {
    			$$invalidate(0, actions = value.actions);

    			// loop through the actions and print their values:
    			for (let i = 0; i < actions.length; i++) {
    				console.log("Action " + i + ": " + JSON.stringify(actions[i]));
    			}
    		});
    	}));

    	function localAddNodes() {
    		// for each of the selected actions, add a node to the graph
    		selectedActions.forEach(action => {
    			console.log("local");
    			addNode(action._id.$oid);
    		});

    		// clear out the selected actions
    		$$invalidate(1, selectedActions = []);
    	}

    	function localAddEdge() {
    		// get the lastActedOn and actedOn from the graphStore
    		let lastActedOn = null;

    		let actedOn = null;

    		graphStore.subscribe(value => {
    			lastActedOn = value.lastActedOn;
    			actedOn = value.actedOn;
    		});

    		// check that lastActedOn and actedOn are not null and are arrays
    		if (lastActedOn !== null && actedOn !== null && Array.isArray(lastActedOn) && Array.isArray(actedOn)) {
    			// add an edge between the lastActedOn and actedOn
    			let edge = { v: lastActedOn[0], w: actedOn[0] };

    			addEdge(edge);
    		} else {
    			console.log("lastActedOn or actedOn is null or not an array");
    		}
    	}

    	function toggleSelect(action) {
    		console.log("toggleSelect called on action: ", action);
    		const index = selectedActions.findIndex(a => a._id.$oid === action._id.$oid);

    		if (index !== -1) {
    			// action is currently selected, remove it
    			$$invalidate(1, selectedActions = selectedActions.filter(a => a._id.$oid !== action._id.$oid));
    		} else {
    			// action is not currently selected, add it
    			$$invalidate(1, selectedActions = [...selectedActions, action]);
    		}

    		console.log("selectedActions after toggleSelect:", selectedActions);
    	}

    	function isSelected(action) {
    		console.log("isSelected called on action: ", action);
    		let is_selected = selectedActions.some(a => a._id.$oid === action._id.$oid);
    		console.log("selectedActions during isSelected:", selectedActions);
    		console.log("isSelected returning: ", is_selected);
    		return is_selected;
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<CreateProcess> was created with unknown prop '${key}'`);
    	});

    	const click_handler = action => toggleSelect(action);

    	$$self.$capture_state = () => ({
    		__awaiter,
    		onMount,
    		aiSystemStore,
    		addEdge,
    		addNode,
    		removeSelectedEdge,
    		removeSelectedNode,
    		graphStore,
    		actions,
    		selectedActions,
    		createdProcess,
    		localAddNodes,
    		localAddEdge,
    		toggleSelect,
    		isSelected
    	});

    	$$self.$inject_state = $$props => {
    		if ('__awaiter' in $$props) __awaiter = $$props.__awaiter;
    		if ('actions' in $$props) $$invalidate(0, actions = $$props.actions);
    		if ('selectedActions' in $$props) $$invalidate(1, selectedActions = $$props.selectedActions);
    		if ('createdProcess' in $$props) createdProcess = $$props.createdProcess;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		actions,
    		selectedActions,
    		localAddNodes,
    		localAddEdge,
    		toggleSelect,
    		isSelected,
    		click_handler
    	];
    }

    class CreateProcess extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CreateProcess",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    function cubicInOut(t) {
        return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
    }

    function blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const f = style.filter === 'none' ? '' : style.filter;
        const od = target_opacity * (1 - opacity);
        const [value, unit] = split_css_unit(amount);
        return {
            delay,
            duration,
            easing,
            css: (_t, u) => `opacity: ${target_opacity - (od * u)}; filter: ${f} blur(${u * value}${unit});`
        };
    }
    function fade(node, { delay = 0, duration = 400, easing = identity$2 } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }

    /* src/components/Sidebar.svelte generated by Svelte v3.58.0 */
    const file$2 = "src/components/Sidebar.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (41:6) {#if section.open}
    function create_if_block$2(ctx) {
    	let div;
    	let switch_instance;
    	let div_intro;
    	let div_outro;
    	let current;
    	var switch_value = /*section*/ ctx[4].component;

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    	}

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "section-content");
    			add_location(div, file$2, 41, 8, 1450);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (switch_instance) mount_component(switch_instance, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*sections*/ 1 && switch_value !== (switch_value = /*section*/ ctx[4].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);

    			add_render_callback(() => {
    				if (!current) return;
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fade, { duration: 700 });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, blur, { duration: 700, amount: 5 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(41:6) {#if section.open}",
    		ctx
    	});

    	return block;
    }

    // (28:2) {#each sections as section (section.header)}
    function create_each_block(key_1, ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*section*/ ctx[4].header + "";
    	let t0;
    	let t1;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;

    	function keydown_handler(...args) {
    		return /*keydown_handler*/ ctx[2](/*section*/ ctx[4], ...args);
    	}

    	function click_handler() {
    		return /*click_handler*/ ctx[3](/*section*/ ctx[4]);
    	}

    	let if_block = /*section*/ ctx[4].open && create_if_block$2(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div1 = element$1("div");
    			div0 = element$1("div");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			attr_dev(div0, "class", "section-header");
    			add_location(div0, file$2, 29, 6, 1156);
    			attr_dev(div1, "class", "section");
    			add_location(div1, file$2, 28, 4, 1128);
    			this.first = div1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div1, t1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "keydown", keydown_handler, false, false, false, false),
    					listen_dev(div0, "click", click_handler, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*sections*/ 1) && t0_value !== (t0_value = /*section*/ ctx[4].header + "")) set_data_dev(t0, t0_value);

    			if (/*section*/ ctx[4].open) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*sections*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(28:2) {#each sections as section (section.header)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*sections*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*section*/ ctx[4].header;
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element$1("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "sidebar");
    			add_location(div, file$2, 26, 0, 1055);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*sections, toggleSection*/ 3) {
    				each_value = /*sections*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sidebar', slots, []);

    	let sections = [
    		{
    			header: "Set API Key",
    			component: SetOpenaiKey,
    			open: true
    		},
    		{
    			header: "Edit Actions and Processes",
    			component: InteractWithActionsAndProcesses,
    			open: false
    		},
    		{
    			header: "Create Action",
    			component: AddNodeButton,
    			open: false
    		},
    		{
    			header: "Create Process",
    			component: CreateProcess,
    			open: false
    		}
    	];

    	function toggleSection(clickedSection) {
    		$$invalidate(0, sections = sections.map(section => {
    			if (section === clickedSection) {
    				return { ...section, open: !section.open }; // just invert the `open` property of the clicked section
    			} else {
    				return section; // don't modify other sections
    			}
    		}));
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	const keydown_handler = (section, event) => {
    		if (event.key === "Enter") {
    			toggleSection(section);
    		}
    	};

    	const click_handler = section => toggleSection(section);

    	$$self.$capture_state = () => ({
    		AddNodeButton,
    		SetOpenaiKey,
    		InteractWithActionsAndProcesses,
    		CreateProcess,
    		blur,
    		fade,
    		sections,
    		toggleSection
    	});

    	$$self.$inject_state = $$props => {
    		if ('sections' in $$props) $$invalidate(0, sections = $$props.sections);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [sections, toggleSection, keydown_handler, click_handler];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/components/RightSidebar.svelte generated by Svelte v3.58.0 */

    const file$1 = "src/components/RightSidebar.svelte";

    // (53:6) {:else}
    function create_else_block(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element$1("button");
    			button.textContent = "Expand";
    			attr_dev(button, "class", "expandTab");
    			add_location(button, file$1, 53, 6, 1211);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*toggleSidebar*/ ctx[1], false, false, false, false),
    					listen_dev(button, "keydown", /*toggleSidebar*/ ctx[1], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(53:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (48:4) {#if isExpanded}
    function create_if_block$1(ctx) {
    	let button;
    	let t1;
    	let div;
    	let p;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element$1("button");
    			button.textContent = "Shrink";
    			t1 = space();
    			div = element$1("div");
    			p = element$1("p");
    			p.textContent = "Some content...";
    			attr_dev(button, "class", "expandTab");
    			add_location(button, file$1, 48, 6, 1027);
    			add_location(p, file$1, 50, 6, 1155);
    			attr_dev(div, "class", "content");
    			add_location(div, file$1, 49, 6, 1127);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, p);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*toggleSidebar*/ ctx[1], false, false, false, false),
    					listen_dev(button, "keydown", /*toggleSidebar*/ ctx[1], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(48:4) {#if isExpanded}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div;
    	let div_class_value;

    	function select_block_type(ctx, dirty) {
    		if (/*isExpanded*/ ctx[0]) return create_if_block$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if_block.c();

    			attr_dev(div, "class", div_class_value = /*isExpanded*/ ctx[0]
    			? "right_sidebar"
    			: "right_sidebar collapsed");

    			add_location(div, file$1, 46, 2, 929);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}

    			if (dirty & /*isExpanded*/ 1 && div_class_value !== (div_class_value = /*isExpanded*/ ctx[0]
    			? "right_sidebar"
    			: "right_sidebar collapsed")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RightSidebar', slots, []);
    	let isExpanded = true;

    	function toggleSidebar(event) {
    		if (event.type === "click" || ["Enter", " "].includes(event.key)) {
    			$$invalidate(0, isExpanded = !isExpanded);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RightSidebar> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ isExpanded, toggleSidebar });

    	$$self.$inject_state = $$props => {
    		if ('isExpanded' in $$props) $$invalidate(0, isExpanded = $$props.isExpanded);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isExpanded, toggleSidebar];
    }

    class RightSidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RightSidebar",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used as references for various `Number` constants. */
    var NAN$1 = 0 / 0;

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /** Used to match leading and trailing whitespace. */
    var reTrim$1 = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary$1 = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal$1 = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt$1 = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto$2.toString;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$2 = Math.max,
        nativeMin = Math.min;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now$1 = function() {
      return root.Date.now();
    };

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber$1(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax$2(toNumber$1(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now$1();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now$1());
      }

      function debounced() {
        var time = now$1(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber$1(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN$1;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim$1, '');
      var isBinary = reIsBinary$1.test(value);
      return (isBinary || reIsOctal$1.test(value))
        ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex$1.test(value) ? NAN$1 : +value);
    }

    var lodash_debounce = debounce;

    var heap$1 = createCommonjsModule(function (module, exports) {
    // Generated by CoffeeScript 1.8.0
    (function() {
      var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

      floor = Math.floor, min = Math.min;


      /*
      Default comparison function to be used
       */

      defaultCmp = function(x, y) {
        if (x < y) {
          return -1;
        }
        if (x > y) {
          return 1;
        }
        return 0;
      };


      /*
      Insert item x in list a, and keep it sorted assuming a is sorted.
      
      If x is already in a, insert it to the right of the rightmost x.
      
      Optional args lo (default 0) and hi (default a.length) bound the slice
      of a to be searched.
       */

      insort = function(a, x, lo, hi, cmp) {
        var mid;
        if (lo == null) {
          lo = 0;
        }
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (lo < 0) {
          throw new Error('lo must be non-negative');
        }
        if (hi == null) {
          hi = a.length;
        }
        while (lo < hi) {
          mid = floor((lo + hi) / 2);
          if (cmp(x, a[mid]) < 0) {
            hi = mid;
          } else {
            lo = mid + 1;
          }
        }
        return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
      };


      /*
      Push item onto heap, maintaining the heap invariant.
       */

      heappush = function(array, item, cmp) {
        if (cmp == null) {
          cmp = defaultCmp;
        }
        array.push(item);
        return _siftdown(array, 0, array.length - 1, cmp);
      };


      /*
      Pop the smallest item off the heap, maintaining the heap invariant.
       */

      heappop = function(array, cmp) {
        var lastelt, returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        lastelt = array.pop();
        if (array.length) {
          returnitem = array[0];
          array[0] = lastelt;
          _siftup(array, 0, cmp);
        } else {
          returnitem = lastelt;
        }
        return returnitem;
      };


      /*
      Pop and return the current smallest value, and add the new item.
      
      This is more efficient than heappop() followed by heappush(), and can be
      more appropriate when using a fixed size heap. Note that the value
      returned may be larger than item! That constrains reasonable use of
      this routine unless written as part of a conditional replacement:
          if item > array[0]
            item = heapreplace(array, item)
       */

      heapreplace = function(array, item, cmp) {
        var returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        returnitem = array[0];
        array[0] = item;
        _siftup(array, 0, cmp);
        return returnitem;
      };


      /*
      Fast version of a heappush followed by a heappop.
       */

      heappushpop = function(array, item, cmp) {
        var _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (array.length && cmp(array[0], item) < 0) {
          _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
          _siftup(array, 0, cmp);
        }
        return item;
      };


      /*
      Transform list into a heap, in-place, in O(array.length) time.
       */

      heapify = function(array, cmp) {
        var i, _i, _len, _ref1, _results, _results1;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        _ref1 = (function() {
          _results1 = [];
          for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this).reverse();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          i = _ref1[_i];
          _results.push(_siftup(array, i, cmp));
        }
        return _results;
      };


      /*
      Update the position of the given item in the heap.
      This function should be called every time the item is being modified.
       */

      updateItem = function(array, item, cmp) {
        var pos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        pos = array.indexOf(item);
        if (pos === -1) {
          return;
        }
        _siftdown(array, 0, pos, cmp);
        return _siftup(array, pos, cmp);
      };


      /*
      Find the n largest elements in a dataset.
       */

      nlargest = function(array, n, cmp) {
        var elem, result, _i, _len, _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        result = array.slice(0, n);
        if (!result.length) {
          return result;
        }
        heapify(result, cmp);
        _ref = array.slice(n);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          heappushpop(result, elem, cmp);
        }
        return result.sort(cmp).reverse();
      };


      /*
      Find the n smallest elements in a dataset.
       */

      nsmallest = function(array, n, cmp) {
        var elem, los, result, _i, _j, _len, _ref, _ref1, _results;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (n * 10 <= array.length) {
          result = array.slice(0, n).sort(cmp);
          if (!result.length) {
            return result;
          }
          los = result[result.length - 1];
          _ref = array.slice(n);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elem = _ref[_i];
            if (cmp(elem, los) < 0) {
              insort(result, elem, 0, null, cmp);
              result.pop();
              los = result[result.length - 1];
            }
          }
          return result;
        }
        heapify(array, cmp);
        _results = [];
        for (_j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? ++_j : --_j) {
          _results.push(heappop(array, cmp));
        }
        return _results;
      };

      _siftdown = function(array, startpos, pos, cmp) {
        var newitem, parent, parentpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        newitem = array[pos];
        while (pos > startpos) {
          parentpos = (pos - 1) >> 1;
          parent = array[parentpos];
          if (cmp(newitem, parent) < 0) {
            array[pos] = parent;
            pos = parentpos;
            continue;
          }
          break;
        }
        return array[pos] = newitem;
      };

      _siftup = function(array, pos, cmp) {
        var childpos, endpos, newitem, rightpos, startpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        endpos = array.length;
        startpos = pos;
        newitem = array[pos];
        childpos = 2 * pos + 1;
        while (childpos < endpos) {
          rightpos = childpos + 1;
          if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
            childpos = rightpos;
          }
          array[pos] = array[childpos];
          pos = childpos;
          childpos = 2 * pos + 1;
        }
        array[pos] = newitem;
        return _siftdown(array, startpos, pos, cmp);
      };

      Heap = (function() {
        Heap.push = heappush;

        Heap.pop = heappop;

        Heap.replace = heapreplace;

        Heap.pushpop = heappushpop;

        Heap.heapify = heapify;

        Heap.updateItem = updateItem;

        Heap.nlargest = nlargest;

        Heap.nsmallest = nsmallest;

        function Heap(cmp) {
          this.cmp = cmp != null ? cmp : defaultCmp;
          this.nodes = [];
        }

        Heap.prototype.push = function(x) {
          return heappush(this.nodes, x, this.cmp);
        };

        Heap.prototype.pop = function() {
          return heappop(this.nodes, this.cmp);
        };

        Heap.prototype.peek = function() {
          return this.nodes[0];
        };

        Heap.prototype.contains = function(x) {
          return this.nodes.indexOf(x) !== -1;
        };

        Heap.prototype.replace = function(x) {
          return heapreplace(this.nodes, x, this.cmp);
        };

        Heap.prototype.pushpop = function(x) {
          return heappushpop(this.nodes, x, this.cmp);
        };

        Heap.prototype.heapify = function() {
          return heapify(this.nodes, this.cmp);
        };

        Heap.prototype.updateItem = function(x) {
          return updateItem(this.nodes, x, this.cmp);
        };

        Heap.prototype.clear = function() {
          return this.nodes = [];
        };

        Heap.prototype.empty = function() {
          return this.nodes.length === 0;
        };

        Heap.prototype.size = function() {
          return this.nodes.length;
        };

        Heap.prototype.clone = function() {
          var heap;
          heap = new Heap();
          heap.nodes = this.nodes.slice(0);
          return heap;
        };

        Heap.prototype.toArray = function() {
          return this.nodes.slice(0);
        };

        Heap.prototype.insert = Heap.prototype.push;

        Heap.prototype.top = Heap.prototype.peek;

        Heap.prototype.front = Heap.prototype.peek;

        Heap.prototype.has = Heap.prototype.contains;

        Heap.prototype.copy = Heap.prototype.clone;

        return Heap;

      })();

      (function(root, factory) {
        {
          return module.exports = factory();
        }
      })(this, function() {
        return Heap;
      });

    }).call(commonjsGlobal);
    });

    var heap = heap$1;

    function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var util$3 = _interopDefault$1(lodash_debounce);
    var Heap = _interopDefault$1(heap);

    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    var window$1 = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

    var navigator$1 = window$1 ? window$1.navigator : null;
    window$1 ? window$1.document : null;

    var typeofstr = _typeof('');

    var typeofobj = _typeof({});

    var typeoffn = _typeof(function () {});

    var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);

    var instanceStr = function instanceStr(obj) {
      return obj && obj.instanceString && fn(obj.instanceString) ? obj.instanceString() : null;
    };

    var string = function string(obj) {
      return obj != null && _typeof(obj) == typeofstr;
    };
    var fn = function fn(obj) {
      return obj != null && _typeof(obj) === typeoffn;
    };
    var array = function array(obj) {
      return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
    };
    var plainObject = function plainObject(obj) {
      return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
    };
    var object = function object(obj) {
      return obj != null && _typeof(obj) === typeofobj;
    };
    var number = function number(obj) {
      return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
    };
    var integer = function integer(obj) {
      return number(obj) && Math.floor(obj) === obj;
    };
    var htmlElement = function htmlElement(obj) {
      if ('undefined' === typeofhtmlele) {
        return undefined;
      } else {
        return null != obj && obj instanceof HTMLElement;
      }
    };
    var elementOrCollection = function elementOrCollection(obj) {
      return element(obj) || collection(obj);
    };
    var element = function element(obj) {
      return instanceStr(obj) === 'collection' && obj._private.single;
    };
    var collection = function collection(obj) {
      return instanceStr(obj) === 'collection' && !obj._private.single;
    };
    var core = function core(obj) {
      return instanceStr(obj) === 'core';
    };
    var stylesheet = function stylesheet(obj) {
      return instanceStr(obj) === 'stylesheet';
    };
    var event = function event(obj) {
      return instanceStr(obj) === 'event';
    };
    var emptyString = function emptyString(obj) {
      if (obj === undefined || obj === null) {
        // null is empty
        return true;
      } else if (obj === '' || obj.match(/^\s+$/)) {
        return true; // empty string is empty
      }

      return false; // otherwise, we don't know what we've got
    };
    var domElement = function domElement(obj) {
      if (typeof HTMLElement === 'undefined') {
        return false; // we're not in a browser so it doesn't matter
      } else {
        return obj instanceof HTMLElement;
      }
    };
    var boundingBox = function boundingBox(obj) {
      return plainObject(obj) && number(obj.x1) && number(obj.x2) && number(obj.y1) && number(obj.y2);
    };
    var promise = function promise(obj) {
      return object(obj) && fn(obj.then);
    };
    var ms = function ms() {
      return navigator$1 && navigator$1.userAgent.match(/msie|trident|edge/i);
    }; // probably a better way to detect this...

    var memoize = function memoize(fn, keyFn) {
      if (!keyFn) {
        keyFn = function keyFn() {
          if (arguments.length === 1) {
            return arguments[0];
          } else if (arguments.length === 0) {
            return 'undefined';
          }

          var args = [];

          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }

          return args.join('$');
        };
      }

      var memoizedFn = function memoizedFn() {
        var self = this;
        var args = arguments;
        var ret;
        var k = keyFn.apply(self, args);
        var cache = memoizedFn.cache;

        if (!(ret = cache[k])) {
          ret = cache[k] = fn.apply(self, args);
        }

        return ret;
      };

      memoizedFn.cache = {};
      return memoizedFn;
    };

    var camel2dash = memoize(function (str) {
      return str.replace(/([A-Z])/g, function (v) {
        return '-' + v.toLowerCase();
      });
    });
    var dash2camel = memoize(function (str) {
      return str.replace(/(-\w)/g, function (v) {
        return v[1].toUpperCase();
      });
    });
    var prependCamel = memoize(function (prefix, str) {
      return prefix + str[0].toUpperCase() + str.substring(1);
    }, function (prefix, str) {
      return prefix + '$' + str;
    });
    var capitalize = function capitalize(str) {
      if (emptyString(str)) {
        return str;
      }

      return str.charAt(0).toUpperCase() + str.substring(1);
    };

    var number$1 = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';
    var rgba = 'rgb[a]?\\((' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)(?:\\s*,\\s*(' + number$1 + '))?\\)';
    var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
    var hsla = 'hsl[a]?\\((' + number$1 + ')\\s*,\\s*(' + number$1 + '[%])\\s*,\\s*(' + number$1 + '[%])(?:\\s*,\\s*(' + number$1 + '))?\\)';
    var hslaNoBackRefs = 'hsl[a]?\\((?:' + number$1 + ')\\s*,\\s*(?:' + number$1 + '[%])\\s*,\\s*(?:' + number$1 + '[%])(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
    var hex3 = '\\#[0-9a-fA-F]{3}';
    var hex6 = '\\#[0-9a-fA-F]{6}';

    var ascending = function ascending(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    var descending = function descending(a, b) {
      return -1 * ascending(a, b);
    };

    var extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
      var args = arguments;

      for (var i = 1; i < args.length; i++) {
        var obj = args[i];

        if (obj == null) {
          continue;
        }

        var keys = Object.keys(obj);

        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          tgt[k] = obj[k];
        }
      }

      return tgt;
    };

    var hex2tuple = function hex2tuple(hex) {
      if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
        return;
      }

      var shortHex = hex.length === 4;
      var r, g, b;
      var base = 16;

      if (shortHex) {
        r = parseInt(hex[1] + hex[1], base);
        g = parseInt(hex[2] + hex[2], base);
        b = parseInt(hex[3] + hex[3], base);
      } else {
        r = parseInt(hex[1] + hex[2], base);
        g = parseInt(hex[3] + hex[4], base);
        b = parseInt(hex[5] + hex[6], base);
      }

      return [r, g, b];
    }; // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)

    var hsl2tuple = function hsl2tuple(hsl) {
      var ret;
      var h, s, l, a, r, g, b;

      function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      }

      var m = new RegExp('^' + hsla + '$').exec(hsl);

      if (m) {
        // get hue
        h = parseInt(m[1]);

        if (h < 0) {
          h = (360 - -1 * h % 360) % 360;
        } else if (h > 360) {
          h = h % 360;
        }

        h /= 360; // normalise on [0, 1]

        s = parseFloat(m[2]);

        if (s < 0 || s > 100) {
          return;
        } // saturation is [0, 100]


        s = s / 100; // normalise on [0, 1]

        l = parseFloat(m[3]);

        if (l < 0 || l > 100) {
          return;
        } // lightness is [0, 100]


        l = l / 100; // normalise on [0, 1]

        a = m[4];

        if (a !== undefined) {
          a = parseFloat(a);

          if (a < 0 || a > 1) {
            return;
          } // alpha is [0, 1]

        } // now, convert to rgb
        // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript


        if (s === 0) {
          r = g = b = Math.round(l * 255); // achromatic
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
          g = Math.round(255 * hue2rgb(p, q, h));
          b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
        }

        ret = [r, g, b, a];
      }

      return ret;
    }; // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)

    var rgb2tuple = function rgb2tuple(rgb) {
      var ret;
      var m = new RegExp('^' + rgba + '$').exec(rgb);

      if (m) {
        ret = [];
        var isPct = [];

        for (var i = 1; i <= 3; i++) {
          var channel = m[i];

          if (channel[channel.length - 1] === '%') {
            isPct[i] = true;
          }

          channel = parseFloat(channel);

          if (isPct[i]) {
            channel = channel / 100 * 255; // normalise to [0, 255]
          }

          if (channel < 0 || channel > 255) {
            return;
          } // invalid channel value


          ret.push(Math.floor(channel));
        }

        var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
        var allArePct = isPct[1] && isPct[2] && isPct[3];

        if (atLeastOneIsPct && !allArePct) {
          return;
        } // must all be percent values if one is


        var alpha = m[4];

        if (alpha !== undefined) {
          alpha = parseFloat(alpha);

          if (alpha < 0 || alpha > 1) {
            return;
          } // invalid alpha value


          ret.push(alpha);
        }
      }

      return ret;
    };
    var colorname2tuple = function colorname2tuple(color) {
      return colors[color.toLowerCase()];
    };
    var color2tuple = function color2tuple(color) {
      return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
    };
    var colors = {
      // special colour names
      transparent: [0, 0, 0, 0],
      // NB alpha === 0
      // regular colours
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      grey: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50]
    };

    var setMap = function setMap(options) {
      var obj = options.map;
      var keys = options.keys;
      var l = keys.length;

      for (var i = 0; i < l; i++) {
        var key = keys[i];

        if (plainObject(key)) {
          throw Error('Tried to set map with object key');
        }

        if (i < keys.length - 1) {
          // extend the map if necessary
          if (obj[key] == null) {
            obj[key] = {};
          }

          obj = obj[key];
        } else {
          // set the value
          obj[key] = options.value;
        }
      }
    }; // gets the value in a map even if it's not built in places

    var getMap = function getMap(options) {
      var obj = options.map;
      var keys = options.keys;
      var l = keys.length;

      for (var i = 0; i < l; i++) {
        var key = keys[i];

        if (plainObject(key)) {
          throw Error('Tried to get map with object key');
        }

        obj = obj[key];

        if (obj == null) {
          return obj;
        }
      }

      return obj;
    }; // deletes the entry in the map

    var performance = window$1 ? window$1.performance : null;
    var pnow = performance && performance.now ? function () {
      return performance.now();
    } : function () {
      return Date.now();
    };

    var raf = function () {
      if (window$1) {
        if (window$1.requestAnimationFrame) {
          return function (fn) {
            window$1.requestAnimationFrame(fn);
          };
        } else if (window$1.mozRequestAnimationFrame) {
          return function (fn) {
            window$1.mozRequestAnimationFrame(fn);
          };
        } else if (window$1.webkitRequestAnimationFrame) {
          return function (fn) {
            window$1.webkitRequestAnimationFrame(fn);
          };
        } else if (window$1.msRequestAnimationFrame) {
          return function (fn) {
            window$1.msRequestAnimationFrame(fn);
          };
        }
      }

      return function (fn) {
        if (fn) {
          setTimeout(function () {
            fn(pnow());
          }, 1000 / 60);
        }
      };
    }();

    var requestAnimationFrame$1 = function requestAnimationFrame(fn) {
      return raf(fn);
    };
    var performanceNow = pnow;

    var hashIterableInts = function hashIterableInts(iterator) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5381;
      // djb2/string-hash
      var hash = seed;
      var entry;

      for (;;) {
        entry = iterator.next();

        if (entry.done) {
          break;
        }

        hash = hash * 33 ^ entry.value;
      }

      return hash >>> 0;
    };
    var hashInt = function hashInt(num) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5381;
      // djb2/string-hash
      return (seed * 33 ^ num) >>> 0;
    };
    var hashIntsArray = function hashIntsArray(ints, seed) {
      var entry = {
        value: 0,
        done: false
      };
      var i = 0;
      var length = ints.length;
      var iterator = {
        next: function next() {
          if (i < length) {
            entry.value = ints[i++];
          } else {
            entry.done = true;
          }

          return entry;
        }
      };
      return hashIterableInts(iterator, seed);
    };
    var hashString = function hashString(str, seed) {
      var entry = {
        value: 0,
        done: false
      };
      var i = 0;
      var length = str.length;
      var iterator = {
        next: function next() {
          if (i < length) {
            entry.value = str.charCodeAt(i++);
          } else {
            entry.done = true;
          }

          return entry;
        }
      };
      return hashIterableInts(iterator, seed);
    };
    var hashStrings = function hashStrings() {
      return hashStringsArray(arguments);
    };
    var hashStringsArray = function hashStringsArray(strs) {
      var hash;

      for (var i = 0; i < strs.length; i++) {
        var str = strs[i];

        if (i === 0) {
          hash = hashString(str);
        } else {
          hash = hashString(str, hash);
        }
      }

      return hash;
    };

    /*global console */
    var warningsEnabled = true;
    var warnSupported = console.warn != null; // eslint-disable-line no-console

    var traceSupported = console.trace != null; // eslint-disable-line no-console

    var MAX_INT = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var trueify = function trueify() {
      return true;
    };
    var falsify = function falsify() {
      return false;
    };
    var zeroify = function zeroify() {
      return 0;
    };
    var noop = function noop() {};
    var error = function error(msg) {
      throw new Error(msg);
    };
    var warnings = function warnings(enabled) {
      if (enabled !== undefined) {
        warningsEnabled = !!enabled;
      } else {
        return warningsEnabled;
      }
    };
    var warn = function warn(msg) {
      /* eslint-disable no-console */
      if (!warnings()) {
        return;
      }

      if (warnSupported) {
        console.warn(msg);
      } else {
        console.log(msg);

        if (traceSupported) {
          console.trace();
        }
      }
    };
    /* eslint-enable */

    var clone = function clone(obj) {
      return extend({}, obj);
    }; // gets a shallow copy of the argument

    var copy = function copy(obj) {
      if (obj == null) {
        return obj;
      }

      if (array(obj)) {
        return obj.slice();
      } else if (plainObject(obj)) {
        return clone(obj);
      } else {
        return obj;
      }
    };
    var copyArray = function copyArray(arr) {
      return arr.slice();
    };
    var uuid = function uuid(a, b
    /* placeholders */
    ) {
      for ( // loop :)
      b = a = ''; // b - result , a - numeric letiable
      a++ < 36; //
      b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
      ? //  return a random number or 4
      (a ^ 15 // if "a" is not 15
      ? // genetate a random number from 0 to 15
      8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
      : 4 //  otherwise 4
      ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
      ) {
      }

      return b;
    };
    var _staticEmptyObject = {};
    var staticEmptyObject = function staticEmptyObject() {
      return _staticEmptyObject;
    };
    var defaults$1 = function defaults(_defaults) {
      var keys = Object.keys(_defaults);
      return function (opts) {
        var filledOpts = {};

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var optVal = opts == null ? undefined : opts[key];
          filledOpts[key] = optVal === undefined ? _defaults[key] : optVal;
        }

        return filledOpts;
      };
    };
    var removeFromArray = function removeFromArray(arr, ele, manyCopies) {
      for (var i = arr.length; i >= 0; i--) {
        if (arr[i] === ele) {
          arr.splice(i, 1);

          if (!manyCopies) {
            break;
          }
        }
      }
    };
    var clearArray = function clearArray(arr) {
      arr.splice(0, arr.length);
    };
    var push = function push(arr, otherArr) {
      for (var i = 0; i < otherArr.length; i++) {
        var el = otherArr[i];
        arr.push(el);
      }
    };
    var getPrefixedProperty = function getPrefixedProperty(obj, propName, prefix) {
      if (prefix) {
        propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
      }

      return obj[propName];
    };
    var setPrefixedProperty = function setPrefixedProperty(obj, propName, prefix, value) {
      if (prefix) {
        propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
      }

      obj[propName] = value;
    };

    /* global Map */
    var ObjectMap =
    /*#__PURE__*/
    function () {
      function ObjectMap() {
        _classCallCheck(this, ObjectMap);

        this._obj = {};
      }

      _createClass(ObjectMap, [{
        key: "set",
        value: function set(key, val) {
          this._obj[key] = val;
          return this;
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          this._obj[key] = undefined;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          this._obj = {};
        }
      }, {
        key: "has",
        value: function has(key) {
          return this._obj[key] !== undefined;
        }
      }, {
        key: "get",
        value: function get(key) {
          return this._obj[key];
        }
      }]);

      return ObjectMap;
    }();

    var Map$1 = typeof Map !== 'undefined' ? Map : ObjectMap;

    /* global Set */
    var undef = "undefined";

    var ObjectSet =
    /*#__PURE__*/
    function () {
      function ObjectSet(arrayOrObjectSet) {
        _classCallCheck(this, ObjectSet);

        this._obj = Object.create(null);
        this.size = 0;

        if (arrayOrObjectSet != null) {
          var arr;

          if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
            arr = arrayOrObjectSet.toArray();
          } else {
            arr = arrayOrObjectSet;
          }

          for (var i = 0; i < arr.length; i++) {
            this.add(arr[i]);
          }
        }
      }

      _createClass(ObjectSet, [{
        key: "instanceString",
        value: function instanceString() {
          return 'set';
        }
      }, {
        key: "add",
        value: function add(val) {
          var o = this._obj;

          if (o[val] !== 1) {
            o[val] = 1;
            this.size++;
          }
        }
      }, {
        key: "delete",
        value: function _delete(val) {
          var o = this._obj;

          if (o[val] === 1) {
            o[val] = 0;
            this.size--;
          }
        }
      }, {
        key: "clear",
        value: function clear() {
          this._obj = Object.create(null);
        }
      }, {
        key: "has",
        value: function has(val) {
          return this._obj[val] === 1;
        }
      }, {
        key: "toArray",
        value: function toArray() {
          var _this = this;

          return Object.keys(this._obj).filter(function (key) {
            return _this.has(key);
          });
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          return this.toArray().forEach(callback, thisArg);
        }
      }]);

      return ObjectSet;
    }();

    var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;

    var Element = function Element(cy, params, restore) {
      restore = restore === undefined || restore ? true : false;

      if (cy === undefined || params === undefined || !core(cy)) {
        error('An element must have a core reference and parameters set');
        return;
      }

      var group = params.group; // try to automatically infer the group if unspecified

      if (group == null) {
        if (params.data && params.data.source != null && params.data.target != null) {
          group = 'edges';
        } else {
          group = 'nodes';
        }
      } // validate group


      if (group !== 'nodes' && group !== 'edges') {
        error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
        return;
      } // make the element array-like, just like a collection


      this.length = 1;
      this[0] = this; // NOTE: when something is added here, add also to ele.json()

      var _p = this._private = {
        cy: cy,
        single: true,
        // indicates this is an element
        data: params.data || {},
        // data object
        position: params.position || {
          x: 0,
          y: 0
        },
        // (x, y) position pair
        autoWidth: undefined,
        // width and height of nodes calculated by the renderer when set to special 'auto' value
        autoHeight: undefined,
        autoPadding: undefined,
        compoundBoundsClean: false,
        // whether the compound dimensions need to be recalculated the next time dimensions are read
        listeners: [],
        // array of bound listeners
        group: group,
        // string; 'nodes' or 'edges'
        style: {},
        // properties as set by the style
        rstyle: {},
        // properties for style sent from the renderer to the core
        styleCxts: [],
        // applied style contexts from the styler
        styleKeys: {},
        // per-group keys of style property values
        removed: true,
        // whether it's inside the vis; true if removed (set true here since we call restore)
        selected: params.selected ? true : false,
        // whether it's selected
        selectable: params.selectable === undefined ? true : params.selectable ? true : false,
        // whether it's selectable
        locked: params.locked ? true : false,
        // whether the element is locked (cannot be moved)
        grabbed: false,
        // whether the element is grabbed by the mouse; renderer sets this privately
        grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,
        // whether the element can be grabbed
        active: false,
        // whether the element is active from user interaction
        classes: new Set$1(),
        // map ( className => true )
        animation: {
          // object for currently-running animations
          current: [],
          queue: []
        },
        rscratch: {},
        // object in which the renderer can store information
        scratch: params.scratch || {},
        // scratch objects
        edges: [],
        // array of connected edges
        children: [],
        // array of children
        parent: null,
        // parent ref
        traversalCache: {},
        // cache of output of traversal functions
        backgrounding: false,
        // whether background images are loading
        bbCache: null,
        // cache of the current bounding box
        bbCacheShift: {
          x: 0,
          y: 0
        },
        // shift applied to cached bb to be applied on next get
        bodyBounds: null,
        // bounds cache of element body, w/o overlay
        overlayBounds: null,
        // bounds cache of element body, including overlay
        labelBounds: {
          // bounds cache of labels
          all: null,
          source: null,
          target: null,
          main: null
        }
      };

      if (_p.position.x == null) {
        _p.position.x = 0;
      }

      if (_p.position.y == null) {
        _p.position.y = 0;
      } // renderedPosition overrides if specified


      if (params.renderedPosition) {
        var rpos = params.renderedPosition;
        var pan = cy.pan();
        var zoom = cy.zoom();
        _p.position = {
          x: (rpos.x - pan.x) / zoom,
          y: (rpos.y - pan.y) / zoom
        };
      }

      var classes = [];

      if (array(params.classes)) {
        classes = params.classes;
      } else if (string(params.classes)) {
        classes = params.classes.split(/\s+/);
      }

      for (var i = 0, l = classes.length; i < l; i++) {
        var cls = classes[i];

        if (!cls || cls === '') {
          continue;
        }

        _p.classes.add(cls);
      }

      this.createEmitter();
      var bypass = params.style || params.css;

      if (bypass) {
        warn('Setting a `style` bypass at element creation is deprecated');
        this.style(bypass);
      }

      if (restore === undefined || restore) {
        this.restore();
      }
    };

    var defineSearch = function defineSearch(params) {
      params = {
        bfs: params.bfs || !params.dfs,
        dfs: params.dfs || !params.bfs
      }; // from pseudocode on wikipedia

      return function searchFn(roots, fn$1, directed) {
        var options;

        if (plainObject(roots) && !elementOrCollection(roots)) {
          options = roots;
          roots = options.roots || options.root;
          fn$1 = options.visit;
          directed = options.directed;
        }

        directed = arguments.length === 2 && !fn(fn$1) ? fn$1 : directed;
        fn$1 = fn(fn$1) ? fn$1 : function () {};
        var cy = this._private.cy;
        var v = roots = string(roots) ? this.filter(roots) : roots;
        var Q = [];
        var connectedNodes = [];
        var connectedBy = {};
        var id2depth = {};
        var V = {};
        var j = 0;
        var found;

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges; // enqueue v


        for (var i = 0; i < v.length; i++) {
          var vi = v[i];
          var viId = vi.id();

          if (vi.isNode()) {
            Q.unshift(vi);

            if (params.bfs) {
              V[viId] = true;
              connectedNodes.push(vi);
            }

            id2depth[viId] = 0;
          }
        }

        var _loop2 = function _loop2() {
          var v = params.bfs ? Q.shift() : Q.pop();
          var vId = v.id();

          if (params.dfs) {
            if (V[vId]) {
              return "continue";
            }

            V[vId] = true;
            connectedNodes.push(v);
          }

          var depth = id2depth[vId];
          var prevEdge = connectedBy[vId];
          var src = prevEdge != null ? prevEdge.source() : null;
          var tgt = prevEdge != null ? prevEdge.target() : null;
          var prevNode = prevEdge == null ? undefined : v.same(src) ? tgt[0] : src[0];
          var ret = void 0;
          ret = fn$1(v, prevEdge, prevNode, j++, depth);

          if (ret === true) {
            found = v;
            return "break";
          }

          if (ret === false) {
            return "break";
          }

          var vwEdges = v.connectedEdges().filter(function (e) {
            return (!directed || e.source().same(v)) && edges.has(e);
          });

          for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
            var e = vwEdges[_i2];
            var w = e.connectedNodes().filter(function (n) {
              return !n.same(v) && nodes.has(n);
            });
            var wId = w.id();

            if (w.length !== 0 && !V[wId]) {
              w = w[0];
              Q.push(w);

              if (params.bfs) {
                V[wId] = true;
                connectedNodes.push(w);
              }

              connectedBy[wId] = e;
              id2depth[wId] = id2depth[vId] + 1;
            }
          }
        };

        _loop: while (Q.length !== 0) {
          var _ret = _loop2();

          switch (_ret) {
            case "continue":
              continue;

            case "break":
              break _loop;
          }
        }

        var connectedEles = cy.collection();

        for (var _i = 0; _i < connectedNodes.length; _i++) {
          var node = connectedNodes[_i];
          var edge = connectedBy[node.id()];

          if (edge != null) {
            connectedEles.merge(edge);
          }

          connectedEles.merge(node);
        }

        return {
          path: cy.collection(connectedEles),
          found: cy.collection(found)
        };
      };
    }; // search, spanning trees, etc


    var elesfn = {
      breadthFirstSearch: defineSearch({
        bfs: true
      }),
      depthFirstSearch: defineSearch({
        dfs: true
      })
    }; // nice, short mathemathical alias

    elesfn.bfs = elesfn.breadthFirstSearch;
    elesfn.dfs = elesfn.depthFirstSearch;

    var dijkstraDefaults = defaults$1({
      root: null,
      weight: function weight(edge) {
        return 1;
      },
      directed: false
    });
    var elesfn$1 = {
      dijkstra: function dijkstra(options) {
        if (!plainObject(options)) {
          var args = arguments;
          options = {
            root: args[0],
            weight: args[1],
            directed: args[2]
          };
        }

        var _dijkstraDefaults = dijkstraDefaults(options),
            root = _dijkstraDefaults.root,
            weight = _dijkstraDefaults.weight,
            directed = _dijkstraDefaults.directed;

        var eles = this;
        var weightFn = weight;
        var source = string(root) ? this.filter(root)[0] : root[0];
        var dist = {};
        var prev = {};
        var knownDist = {};

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        edges.unmergeBy(function (ele) {
          return ele.isLoop();
        });

        var getDist = function getDist(node) {
          return dist[node.id()];
        };

        var setDist = function setDist(node, d) {
          dist[node.id()] = d;
          Q.updateItem(node);
        };

        var Q = new Heap(function (a, b) {
          return getDist(a) - getDist(b);
        });

        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          dist[node.id()] = node.same(source) ? 0 : Infinity;
          Q.push(node);
        }

        var distBetween = function distBetween(u, v) {
          var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
          var smallestDistance = Infinity;
          var smallestEdge;

          for (var _i = 0; _i < uvs.length; _i++) {
            var edge = uvs[_i];

            var _weight = weightFn(edge);

            if (_weight < smallestDistance || !smallestEdge) {
              smallestDistance = _weight;
              smallestEdge = edge;
            }
          }

          return {
            edge: smallestEdge,
            dist: smallestDistance
          };
        };

        while (Q.size() > 0) {
          var u = Q.pop();
          var smalletsDist = getDist(u);
          var uid = u.id();
          knownDist[uid] = smalletsDist;

          if (smalletsDist === Infinity) {
            continue;
          }

          var neighbors = u.neighborhood().intersect(nodes);

          for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
            var v = neighbors[_i2];
            var vid = v.id();
            var vDist = distBetween(u, v);
            var alt = smalletsDist + vDist.dist;

            if (alt < getDist(v)) {
              setDist(v, alt);
              prev[vid] = {
                node: u,
                edge: vDist.edge
              };
            }
          } // for

        } // while


        return {
          distanceTo: function distanceTo(node) {
            var target = string(node) ? nodes.filter(node)[0] : node[0];
            return knownDist[target.id()];
          },
          pathTo: function pathTo(node) {
            var target = string(node) ? nodes.filter(node)[0] : node[0];
            var S = [];
            var u = target;
            var uid = u.id();

            if (target.length > 0) {
              S.unshift(target);

              while (prev[uid]) {
                var p = prev[uid];
                S.unshift(p.edge);
                S.unshift(p.node);
                u = p.node;
                uid = u.id();
              }
            }

            return eles.spawn(S);
          }
        };
      }
    };

    var elesfn$2 = {
      // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
      // implemented from pseudocode from wikipedia
      kruskal: function kruskal(weightFn) {
        weightFn = weightFn || function (edge) {
          return 1;
        };

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        var numNodes = nodes.length;
        var forest = new Array(numNodes);
        var A = nodes; // assumes byGroup() creates new collections that can be safely mutated

        var findSetIndex = function findSetIndex(ele) {
          for (var i = 0; i < forest.length; i++) {
            var eles = forest[i];

            if (eles.has(ele)) {
              return i;
            }
          }
        }; // start with one forest per node


        for (var i = 0; i < numNodes; i++) {
          forest[i] = this.spawn(nodes[i]);
        }

        var S = edges.sort(function (a, b) {
          return weightFn(a) - weightFn(b);
        });

        for (var _i = 0; _i < S.length; _i++) {
          var edge = S[_i];
          var u = edge.source()[0];
          var v = edge.target()[0];
          var setUIndex = findSetIndex(u);
          var setVIndex = findSetIndex(v);
          var setU = forest[setUIndex];
          var setV = forest[setVIndex];

          if (setUIndex !== setVIndex) {
            A.merge(edge); // combine forests for u and v

            setU.merge(setV);
            forest.splice(setVIndex, 1);
          }
        }

        return A;
      }
    };

    var aStarDefaults = defaults$1({
      root: null,
      goal: null,
      weight: function weight(edge) {
        return 1;
      },
      heuristic: function heuristic(edge) {
        return 0;
      },
      directed: false
    });
    var elesfn$3 = {
      // Implemented from pseudocode from wikipedia
      aStar: function aStar(options) {
        var cy = this.cy();

        var _aStarDefaults = aStarDefaults(options),
            root = _aStarDefaults.root,
            goal = _aStarDefaults.goal,
            heuristic = _aStarDefaults.heuristic,
            directed = _aStarDefaults.directed,
            weight = _aStarDefaults.weight;

        root = cy.collection(root)[0];
        goal = cy.collection(goal)[0];
        var sid = root.id();
        var tid = goal.id();
        var gScore = {};
        var fScore = {};
        var closedSetIds = {};
        var openSet = new Heap(function (a, b) {
          return fScore[a.id()] - fScore[b.id()];
        });
        var openSetIds = new Set$1();
        var cameFrom = {};
        var cameFromEdge = {};

        var addToOpenSet = function addToOpenSet(ele, id) {
          openSet.push(ele);
          openSetIds.add(id);
        };

        var cMin, cMinId;

        var popFromOpenSet = function popFromOpenSet() {
          cMin = openSet.pop();
          cMinId = cMin.id();
          openSetIds.delete(cMinId);
        };

        var isInOpenSet = function isInOpenSet(id) {
          return openSetIds.has(id);
        };

        addToOpenSet(root, sid);
        gScore[sid] = 0;
        fScore[sid] = heuristic(root); // Counter

        var steps = 0; // Main loop

        while (openSet.size() > 0) {
          popFromOpenSet();
          steps++; // If we've found our goal, then we are done

          if (cMinId === tid) {
            var path = [];
            var pathNode = goal;
            var pathNodeId = tid;
            var pathEdge = cameFromEdge[pathNodeId];

            for (;;) {
              path.unshift(pathNode);

              if (pathEdge != null) {
                path.unshift(pathEdge);
              }

              pathNode = cameFrom[pathNodeId];

              if (pathNode == null) {
                break;
              }

              pathNodeId = pathNode.id();
              pathEdge = cameFromEdge[pathNodeId];
            }

            return {
              found: true,
              distance: gScore[cMinId],
              path: this.spawn(path),
              steps: steps
            };
          } // Add cMin to processed nodes


          closedSetIds[cMinId] = true; // Update scores for neighbors of cMin
          // Take into account if graph is directed or not

          var vwEdges = cMin._private.edges;

          for (var i = 0; i < vwEdges.length; i++) {
            var e = vwEdges[i]; // edge must be in set of calling eles

            if (!this.hasElementWithId(e.id())) {
              continue;
            } // cMin must be the source of edge if directed


            if (directed && e.data('source') !== cMinId) {
              continue;
            }

            var wSrc = e.source();
            var wTgt = e.target();
            var w = wSrc.id() !== cMinId ? wSrc : wTgt;
            var wid = w.id(); // node must be in set of calling eles

            if (!this.hasElementWithId(wid)) {
              continue;
            } // if node is in closedSet, ignore it


            if (closedSetIds[wid]) {
              continue;
            } // New tentative score for node w


            var tempScore = gScore[cMinId] + weight(e); // Update gScore for node w if:
            //   w not present in openSet
            // OR
            //   tentative gScore is less than previous value
            // w not in openSet

            if (!isInOpenSet(wid)) {
              gScore[wid] = tempScore;
              fScore[wid] = tempScore + heuristic(w);
              addToOpenSet(w, wid);
              cameFrom[wid] = cMin;
              cameFromEdge[wid] = e;
              continue;
            } // w already in openSet, but with greater gScore


            if (tempScore < gScore[wid]) {
              gScore[wid] = tempScore;
              fScore[wid] = tempScore + heuristic(w);
              cameFrom[wid] = cMin;
            }
          } // End of neighbors update

        } // End of main loop
        // If we've reached here, then we've not reached our goal


        return {
          found: false,
          distance: undefined,
          path: undefined,
          steps: steps
        };
      }
    }; // elesfn

    var floydWarshallDefaults = defaults$1({
      weight: function weight(edge) {
        return 1;
      },
      directed: false
    });
    var elesfn$4 = {
      // Implemented from pseudocode from wikipedia
      floydWarshall: function floydWarshall(options) {
        var cy = this.cy();

        var _floydWarshallDefault = floydWarshallDefaults(options),
            weight = _floydWarshallDefault.weight,
            directed = _floydWarshallDefault.directed;

        var weightFn = weight;

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        var N = nodes.length;
        var Nsq = N * N;

        var indexOf = function indexOf(node) {
          return nodes.indexOf(node);
        };

        var atIndex = function atIndex(i) {
          return nodes[i];
        }; // Initialize distance matrix


        var dist = new Array(Nsq);

        for (var n = 0; n < Nsq; n++) {
          var j = n % N;
          var i = (n - j) / N;

          if (i === j) {
            dist[n] = 0;
          } else {
            dist[n] = Infinity;
          }
        } // Initialize matrix used for path reconstruction
        // Initialize distance matrix


        var next = new Array(Nsq);
        var edgeNext = new Array(Nsq); // Process edges

        for (var _i = 0; _i < edges.length; _i++) {
          var edge = edges[_i];
          var src = edge.source()[0];
          var tgt = edge.target()[0];

          if (src === tgt) {
            continue;
          } // exclude loops


          var s = indexOf(src);
          var t = indexOf(tgt);
          var st = s * N + t; // source to target index

          var _weight = weightFn(edge); // Check if already process another edge between same 2 nodes


          if (dist[st] > _weight) {
            dist[st] = _weight;
            next[st] = t;
            edgeNext[st] = edge;
          } // If undirected graph, process 'reversed' edge


          if (!directed) {
            var ts = t * N + s; // target to source index

            if (!directed && dist[ts] > _weight) {
              dist[ts] = _weight;
              next[ts] = s;
              edgeNext[ts] = edge;
            }
          }
        } // Main loop


        for (var k = 0; k < N; k++) {
          for (var _i2 = 0; _i2 < N; _i2++) {
            var ik = _i2 * N + k;

            for (var _j = 0; _j < N; _j++) {
              var ij = _i2 * N + _j;
              var kj = k * N + _j;

              if (dist[ik] + dist[kj] < dist[ij]) {
                dist[ij] = dist[ik] + dist[kj];
                next[ij] = next[ik];
              }
            }
          }
        }

        var getArgEle = function getArgEle(ele) {
          return (string(ele) ? cy.filter(ele) : ele)[0];
        };

        var indexOfArgEle = function indexOfArgEle(ele) {
          return indexOf(getArgEle(ele));
        };

        var res = {
          distance: function distance(from, to) {
            var i = indexOfArgEle(from);
            var j = indexOfArgEle(to);
            return dist[i * N + j];
          },
          path: function path(from, to) {
            var i = indexOfArgEle(from);
            var j = indexOfArgEle(to);
            var fromNode = atIndex(i);

            if (i === j) {
              return fromNode.collection();
            }

            if (next[i * N + j] == null) {
              return cy.collection();
            }

            var path = cy.collection();
            var prev = i;
            var edge;
            path.merge(fromNode);

            while (i !== j) {
              prev = i;
              i = next[i * N + j];
              edge = edgeNext[prev * N + i];
              path.merge(edge);
              path.merge(atIndex(i));
            }

            return path;
          }
        };
        return res;
      } // floydWarshall

    }; // elesfn

    var bellmanFordDefaults = defaults$1({
      weight: function weight(edge) {
        return 1;
      },
      directed: false,
      root: null
    });
    var elesfn$5 = {
      // Implemented from pseudocode from wikipedia
      bellmanFord: function bellmanFord(options) {
        var _this = this;

        var _bellmanFordDefaults = bellmanFordDefaults(options),
            weight = _bellmanFordDefaults.weight,
            directed = _bellmanFordDefaults.directed,
            root = _bellmanFordDefaults.root;

        var weightFn = weight;
        var eles = this;
        var cy = this.cy();

        var _this$byGroup = this.byGroup(),
            edges = _this$byGroup.edges,
            nodes = _this$byGroup.nodes;

        var numNodes = nodes.length;
        var infoMap = new Map$1();
        var hasNegativeWeightCycle = false;
        var negativeWeightCycles = [];
        root = cy.collection(root)[0]; // in case selector passed

        edges.unmergeBy(function (edge) {
          return edge.isLoop();
        });
        var numEdges = edges.length;

        var getInfo = function getInfo(node) {
          var obj = infoMap.get(node.id());

          if (!obj) {
            obj = {};
            infoMap.set(node.id(), obj);
          }

          return obj;
        };

        var getNodeFromTo = function getNodeFromTo(to) {
          return (string(to) ? cy.$(to) : to)[0];
        };

        var distanceTo = function distanceTo(to) {
          return getInfo(getNodeFromTo(to)).dist;
        };

        var pathTo = function pathTo(to) {
          var thisStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : root;
          var end = getNodeFromTo(to);
          var path = [];
          var node = end;

          for (;;) {
            if (node == null) {
              return _this.spawn();
            }

            var _getInfo = getInfo(node),
                edge = _getInfo.edge,
                pred = _getInfo.pred;

            path.unshift(node[0]);

            if (node.same(thisStart) && path.length > 0) {
              break;
            }

            if (edge != null) {
              path.unshift(edge);
            }

            node = pred;
          }

          return eles.spawn(path);
        }; // Initializations { dist, pred, edge }


        for (var i = 0; i < numNodes; i++) {
          var node = nodes[i];
          var info = getInfo(node);

          if (node.same(root)) {
            info.dist = 0;
          } else {
            info.dist = Infinity;
          }

          info.pred = null;
          info.edge = null;
        } // Edges relaxation


        var replacedEdge = false;

        var checkForEdgeReplacement = function checkForEdgeReplacement(node1, node2, edge, info1, info2, weight) {
          var dist = info1.dist + weight;

          if (dist < info2.dist && !edge.same(info1.edge)) {
            info2.dist = dist;
            info2.pred = node1;
            info2.edge = edge;
            replacedEdge = true;
          }
        };

        for (var _i = 1; _i < numNodes; _i++) {
          replacedEdge = false;

          for (var e = 0; e < numEdges; e++) {
            var edge = edges[e];
            var src = edge.source();
            var tgt = edge.target();

            var _weight = weightFn(edge);

            var srcInfo = getInfo(src);
            var tgtInfo = getInfo(tgt);
            checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight); // If undirected graph, we need to take into account the 'reverse' edge

            if (!directed) {
              checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
            }
          }

          if (!replacedEdge) {
            break;
          }
        }

        if (replacedEdge) {
          // Check for negative weight cycles
          for (var _e = 0; _e < numEdges; _e++) {
            var _edge = edges[_e];

            var _src = _edge.source();

            var _tgt = _edge.target();

            var _weight2 = weightFn(_edge);

            var srcDist = getInfo(_src).dist;
            var tgtDist = getInfo(_tgt).dist;

            if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
              warn('Graph contains a negative weight cycle for Bellman-Ford');
              hasNegativeWeightCycle = true;
              break;
            }
          }
        }

        return {
          distanceTo: distanceTo,
          pathTo: pathTo,
          hasNegativeWeightCycle: hasNegativeWeightCycle,
          negativeWeightCycles: negativeWeightCycles
        };
      } // bellmanFord

    }; // elesfn

    var sqrt2 = Math.sqrt(2); // Function which colapses 2 (meta) nodes into one
    // Updates the remaining edge lists
    // Receives as a paramater the edge which causes the collapse

    var collapse = function collapse(edgeIndex, nodeMap, remainingEdges) {
      if (remainingEdges.length === 0) {
        error("Karger-Stein must be run on a connected (sub)graph");
      }

      var edgeInfo = remainingEdges[edgeIndex];
      var sourceIn = edgeInfo[1];
      var targetIn = edgeInfo[2];
      var partition1 = nodeMap[sourceIn];
      var partition2 = nodeMap[targetIn];
      var newEdges = remainingEdges; // re-use array
      // Delete all edges between partition1 and partition2

      for (var i = newEdges.length - 1; i >= 0; i--) {
        var edge = newEdges[i];
        var src = edge[1];
        var tgt = edge[2];

        if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
          newEdges.splice(i, 1);
        }
      } // All edges pointing to partition2 should now point to partition1


      for (var _i = 0; _i < newEdges.length; _i++) {
        var _edge = newEdges[_i];

        if (_edge[1] === partition2) {
          // Check source
          newEdges[_i] = _edge.slice(); // copy

          newEdges[_i][1] = partition1;
        } else if (_edge[2] === partition2) {
          // Check target
          newEdges[_i] = _edge.slice(); // copy

          newEdges[_i][2] = partition1;
        }
      } // Move all nodes from partition2 to partition1


      for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
        if (nodeMap[_i2] === partition2) {
          nodeMap[_i2] = partition1;
        }
      }

      return newEdges;
    }; // Contracts a graph until we reach a certain number of meta nodes


    var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
      while (size > sizeLimit) {
        // Choose an edge randomly
        var edgeIndex = Math.floor(Math.random() * remainingEdges.length); // Collapse graph based on edge

        remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
        size--;
      }

      return remainingEdges;
    };

    var elesfn$6 = {
      // Computes the minimum cut of an undirected graph
      // Returns the correct answer with high probability
      kargerStein: function kargerStein() {
        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        edges.unmergeBy(function (edge) {
          return edge.isLoop();
        });
        var numNodes = nodes.length;
        var numEdges = edges.length;
        var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
        var stopSize = Math.floor(numNodes / sqrt2);

        if (numNodes < 2) {
          error('At least 2 nodes are required for Karger-Stein algorithm');
          return undefined;
        } // Now store edge destination as indexes
        // Format for each edge (edge index, source node index, target node index)


        var edgeIndexes = [];

        for (var i = 0; i < numEdges; i++) {
          var e = edges[i];
          edgeIndexes.push([i, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);
        } // We will store the best cut found here


        var minCutSize = Infinity;
        var minCutEdgeIndexes = [];
        var minCutNodeMap = new Array(numNodes); // Initial meta node partition

        var metaNodeMap = new Array(numNodes);
        var metaNodeMap2 = new Array(numNodes);

        var copyNodesMap = function copyNodesMap(from, to) {
          for (var _i3 = 0; _i3 < numNodes; _i3++) {
            to[_i3] = from[_i3];
          }
        }; // Main loop


        for (var iter = 0; iter <= numIter; iter++) {
          // Reset meta node partition
          for (var _i4 = 0; _i4 < numNodes; _i4++) {
            metaNodeMap[_i4] = _i4;
          } // Contract until stop point (stopSize nodes)


          var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
          var edgesState2 = edgesState.slice(); // copy
          // Create a copy of the colapsed nodes state

          copyNodesMap(metaNodeMap, metaNodeMap2); // Run 2 iterations starting in the stop state

          var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
          var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2); // Is any of the 2 results the best cut so far?

          if (res1.length <= res2.length && res1.length < minCutSize) {
            minCutSize = res1.length;
            minCutEdgeIndexes = res1;
            copyNodesMap(metaNodeMap, minCutNodeMap);
          } else if (res2.length <= res1.length && res2.length < minCutSize) {
            minCutSize = res2.length;
            minCutEdgeIndexes = res2;
            copyNodesMap(metaNodeMap2, minCutNodeMap);
          }
        } // end of main loop
        // Construct result


        var cut = this.spawn(minCutEdgeIndexes.map(function (e) {
          return edges[e[0]];
        }));
        var partition1 = this.spawn();
        var partition2 = this.spawn(); // traverse metaNodeMap for best cut

        var witnessNodePartition = minCutNodeMap[0];

        for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
          var partitionId = minCutNodeMap[_i5];
          var node = nodes[_i5];

          if (partitionId === witnessNodePartition) {
            partition1.merge(node);
          } else {
            partition2.merge(node);
          }
        }

        var ret = {
          cut: cut,
          partition1: partition1,
          partition2: partition2
        };
        return ret;
      }
    }; // elesfn
    var copyPosition = function copyPosition(p) {
      return {
        x: p.x,
        y: p.y
      };
    };
    var modelToRenderedPosition = function modelToRenderedPosition(p, zoom, pan) {
      return {
        x: p.x * zoom + pan.x,
        y: p.y * zoom + pan.y
      };
    };
    var renderedToModelPosition = function renderedToModelPosition(p, zoom, pan) {
      return {
        x: (p.x - pan.x) / zoom,
        y: (p.y - pan.y) / zoom
      };
    };
    var array2point = function array2point(arr) {
      return {
        x: arr[0],
        y: arr[1]
      };
    };
    var min$1 = function min(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var min = Infinity;

      for (var i = begin; i < end; i++) {
        var val = arr[i];

        if (isFinite(val)) {
          min = Math.min(val, min);
        }
      }

      return min;
    };
    var max$1 = function max(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var max = -Infinity;

      for (var i = begin; i < end; i++) {
        var val = arr[i];

        if (isFinite(val)) {
          max = Math.max(val, max);
        }
      }

      return max;
    };
    var mean = function mean(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var total = 0;
      var n = 0;

      for (var i = begin; i < end; i++) {
        var val = arr[i];

        if (isFinite(val)) {
          total += val;
          n++;
        }
      }

      return total / n;
    };
    var median = function median(arr) {
      var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
      var copy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var includeHoles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

      if (copy) {
        arr = arr.slice(begin, end);
      } else {
        if (end < arr.length) {
          arr.splice(end, arr.length - end);
        }

        if (begin > 0) {
          arr.splice(0, begin);
        }
      } // all non finite (e.g. Infinity, NaN) elements must be -Infinity so they go to the start


      var off = 0; // offset from non-finite values

      for (var i = arr.length - 1; i >= 0; i--) {
        var v = arr[i];

        if (includeHoles) {
          if (!isFinite(v)) {
            arr[i] = -Infinity;
            off++;
          }
        } else {
          // just remove it if we don't want to consider holes
          arr.splice(i, 1);
        }
      }

      if (sort) {
        arr.sort(function (a, b) {
          return a - b;
        }); // requires copy = true if you don't want to change the orig
      }

      var len = arr.length;
      var mid = Math.floor(len / 2);

      if (len % 2 !== 0) {
        return arr[mid + 1 + off];
      } else {
        return (arr[mid - 1 + off] + arr[mid + off]) / 2;
      }
    };
    var deg2rad = function deg2rad(deg) {
      return Math.PI * deg / 180;
    };
    var getAngleFromDisp = function getAngleFromDisp(dispX, dispY) {
      return Math.atan2(dispY, dispX) - Math.PI / 2;
    };
    var log2 = Math.log2 || function (n) {
      return Math.log(n) / Math.log(2);
    };
    var signum = function signum(x) {
      if (x > 0) {
        return 1;
      } else if (x < 0) {
        return -1;
      } else {
        return 0;
      }
    };
    var dist = function dist(p1, p2) {
      return Math.sqrt(sqdist(p1, p2));
    };
    var sqdist = function sqdist(p1, p2) {
      var dx = p2.x - p1.x;
      var dy = p2.y - p1.y;
      return dx * dx + dy * dy;
    };
    var inPlaceSumNormalize = function inPlaceSumNormalize(v) {
      var length = v.length; // First, get sum of all elements

      var total = 0;

      for (var i = 0; i < length; i++) {
        total += v[i];
      } // Now, divide each by the sum of all elements


      for (var _i = 0; _i < length; _i++) {
        v[_i] = v[_i] / total;
      }

      return v;
    };

    var qbezierAt = function qbezierAt(p0, p1, p2, t) {
      return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
    };
    var qbezierPtAt = function qbezierPtAt(p0, p1, p2, t) {
      return {
        x: qbezierAt(p0.x, p1.x, p2.x, t),
        y: qbezierAt(p0.y, p1.y, p2.y, t)
      };
    };
    var lineAt = function lineAt(p0, p1, t, d) {
      var vec = {
        x: p1.x - p0.x,
        y: p1.y - p0.y
      };
      var vecDist = dist(p0, p1);
      var normVec = {
        x: vec.x / vecDist,
        y: vec.y / vecDist
      };
      t = t == null ? 0 : t;
      d = d != null ? d : t * vecDist;
      return {
        x: p0.x + normVec.x * d,
        y: p0.y + normVec.y * d
      };
    };
    var bound = function bound(min, val, max) {
      return Math.max(min, Math.min(max, val));
    }; // makes a full bb (x1, y1, x2, y2, w, h) from implicit params

    var makeBoundingBox = function makeBoundingBox(bb) {
      if (bb == null) {
        return {
          x1: Infinity,
          y1: Infinity,
          x2: -Infinity,
          y2: -Infinity,
          w: 0,
          h: 0
        };
      } else if (bb.x1 != null && bb.y1 != null) {
        if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
          return {
            x1: bb.x1,
            y1: bb.y1,
            x2: bb.x2,
            y2: bb.y2,
            w: bb.x2 - bb.x1,
            h: bb.y2 - bb.y1
          };
        } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
          return {
            x1: bb.x1,
            y1: bb.y1,
            x2: bb.x1 + bb.w,
            y2: bb.y1 + bb.h,
            w: bb.w,
            h: bb.h
          };
        }
      }
    };
    var copyBoundingBox = function copyBoundingBox(bb) {
      return {
        x1: bb.x1,
        x2: bb.x2,
        w: bb.w,
        y1: bb.y1,
        y2: bb.y2,
        h: bb.h
      };
    };
    var clearBoundingBox = function clearBoundingBox(bb) {
      bb.x1 = Infinity;
      bb.y1 = Infinity;
      bb.x2 = -Infinity;
      bb.y2 = -Infinity;
      bb.w = 0;
      bb.h = 0;
    };
    var updateBoundingBox = function updateBoundingBox(bb1, bb2) {
      // update bb1 with bb2 bounds
      bb1.x1 = Math.min(bb1.x1, bb2.x1);
      bb1.x2 = Math.max(bb1.x2, bb2.x2);
      bb1.w = bb1.x2 - bb1.x1;
      bb1.y1 = Math.min(bb1.y1, bb2.y1);
      bb1.y2 = Math.max(bb1.y2, bb2.y2);
      bb1.h = bb1.y2 - bb1.y1;
    };
    var expandBoundingBoxByPoint = function expandBoundingBoxByPoint(bb, x, y) {
      bb.x1 = Math.min(bb.x1, x);
      bb.x2 = Math.max(bb.x2, x);
      bb.w = bb.x2 - bb.x1;
      bb.y1 = Math.min(bb.y1, y);
      bb.y2 = Math.max(bb.y2, y);
      bb.h = bb.y2 - bb.y1;
    };
    var expandBoundingBox = function expandBoundingBox(bb) {
      var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      bb.x1 -= padding;
      bb.x2 += padding;
      bb.y1 -= padding;
      bb.y2 += padding;
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
      return bb;
    };

    var assignBoundingBox = function assignBoundingBox(bb1, bb2) {
      bb1.x1 = bb2.x1;
      bb1.y1 = bb2.y1;
      bb1.x2 = bb2.x2;
      bb1.y2 = bb2.y2;
      bb1.w = bb1.x2 - bb1.x1;
      bb1.h = bb1.y2 - bb1.y1;
    };
    var assignShiftToBoundingBox = function assignShiftToBoundingBox(bb, delta) {
      bb.x1 += delta.x;
      bb.x2 += delta.x;
      bb.y1 += delta.y;
      bb.y2 += delta.y;
    };
    var boundingBoxesIntersect = function boundingBoxesIntersect(bb1, bb2) {
      // case: one bb to right of other
      if (bb1.x1 > bb2.x2) {
        return false;
      }

      if (bb2.x1 > bb1.x2) {
        return false;
      } // case: one bb to left of other


      if (bb1.x2 < bb2.x1) {
        return false;
      }

      if (bb2.x2 < bb1.x1) {
        return false;
      } // case: one bb above other


      if (bb1.y2 < bb2.y1) {
        return false;
      }

      if (bb2.y2 < bb1.y1) {
        return false;
      } // case: one bb below other


      if (bb1.y1 > bb2.y2) {
        return false;
      }

      if (bb2.y1 > bb1.y2) {
        return false;
      } // otherwise, must have some overlap


      return true;
    };
    var inBoundingBox = function inBoundingBox(bb, x, y) {
      return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
    };
    var pointInBoundingBox = function pointInBoundingBox(bb, pt) {
      return inBoundingBox(bb, pt.x, pt.y);
    };
    var boundingBoxInBoundingBox = function boundingBoxInBoundingBox(bb1, bb2) {
      return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
    };
    var roundRectangleIntersectLine = function roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding) {
      var cornerRadius = getRoundRectangleRadius(width, height);
      var halfWidth = width / 2;
      var halfHeight = height / 2; // Check intersections with straight line segments

      var straightLineIntersections; // Top segment, left to right

      {
        var topStartX = nodeX - halfWidth + cornerRadius - padding;
        var topStartY = nodeY - halfHeight - padding;
        var topEndX = nodeX + halfWidth - cornerRadius + padding;
        var topEndY = topStartY;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Right segment, top to bottom

      {
        var rightStartX = nodeX + halfWidth + padding;
        var rightStartY = nodeY - halfHeight + cornerRadius - padding;
        var rightEndX = rightStartX;
        var rightEndY = nodeY + halfHeight - cornerRadius + padding;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Bottom segment, left to right

      {
        var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
        var bottomStartY = nodeY + halfHeight + padding;
        var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
        var bottomEndY = bottomStartY;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Left segment, top to bottom

      {
        var leftStartX = nodeX - halfWidth - padding;
        var leftStartY = nodeY - halfHeight + cornerRadius - padding;
        var leftEndX = leftStartX;
        var leftEndY = nodeY + halfHeight - cornerRadius + padding;
        straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

        if (straightLineIntersections.length > 0) {
          return straightLineIntersections;
        }
      } // Check intersections with arc segments

      var arcIntersections; // Top Left

      {
        var topLeftCenterX = nodeX - halfWidth + cornerRadius;
        var topLeftCenterY = nodeY - halfHeight + cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      } // Top Right

      {
        var topRightCenterX = nodeX + halfWidth - cornerRadius;
        var topRightCenterY = nodeY - halfHeight + cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      } // Bottom Right

      {
        var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
        var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      } // Bottom Left

      {
        var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
        var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
        arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

        if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
          return [arcIntersections[0], arcIntersections[1]];
        }
      }
      return []; // if nothing
    };
    var inLineVicinity = function inLineVicinity(x, y, lx1, ly1, lx2, ly2, tolerance) {
      var t = tolerance;
      var x1 = Math.min(lx1, lx2);
      var x2 = Math.max(lx1, lx2);
      var y1 = Math.min(ly1, ly2);
      var y2 = Math.max(ly1, ly2);
      return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
    };
    var inBezierVicinity = function inBezierVicinity(x, y, x1, y1, x2, y2, x3, y3, tolerance) {
      var bb = {
        x1: Math.min(x1, x3, x2) - tolerance,
        x2: Math.max(x1, x3, x2) + tolerance,
        y1: Math.min(y1, y3, y2) - tolerance,
        y2: Math.max(y1, y3, y2) + tolerance
      }; // if outside the rough bounding box for the bezier, then it can't be a hit

      if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
        // console.log('bezier out of rough bb')
        return false;
      } else {
        // console.log('do more expensive check');
        return true;
      }
    };
    var solveQuadratic = function solveQuadratic(a, b, c, val) {
      c -= val;
      var r = b * b - 4 * a * c;

      if (r < 0) {
        return [];
      }

      var sqrtR = Math.sqrt(r);
      var denom = 2 * a;
      var root1 = (-b + sqrtR) / denom;
      var root2 = (-b - sqrtR) / denom;
      return [root1, root2];
    };
    var solveCubic = function solveCubic(a, b, c, d, result) {
      // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
      // r is the real component, i is the imaginary component
      // An implementation of the Cardano method from the year 1545
      // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots
      b /= a;
      c /= a;
      d /= a;
      var discriminant, q, r, dum1, s, t, term1, r13;
      q = (3.0 * c - b * b) / 9.0;
      r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
      r /= 54.0;
      discriminant = q * q * q + r * r;
      result[1] = 0;
      term1 = b / 3.0;

      if (discriminant > 0) {
        s = r + Math.sqrt(discriminant);
        s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
        t = r - Math.sqrt(discriminant);
        t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
        result[0] = -term1 + s + t;
        term1 += (s + t) / 2.0;
        result[4] = result[2] = -term1;
        term1 = Math.sqrt(3.0) * (-t + s) / 2;
        result[3] = term1;
        result[5] = -term1;
        return;
      }

      result[5] = result[3] = 0;

      if (discriminant === 0) {
        r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
        result[0] = -term1 + 2.0 * r13;
        result[4] = result[2] = -(r13 + term1);
        return;
      }

      q = -q;
      dum1 = q * q * q;
      dum1 = Math.acos(r / Math.sqrt(dum1));
      r13 = 2.0 * Math.sqrt(q);
      result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
      result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
      result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);
      return;
    };
    var sqdistToQuadraticBezier = function sqdistToQuadraticBezier(x, y, x1, y1, x2, y2, x3, y3) {
      // Find minimum distance by using the minimum of the distance
      // function between the given point and the curve
      // This gives the coefficients of the resulting cubic equation
      // whose roots tell us where a possible minimum is
      // (Coefficients are divided by 4)
      var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;
      var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;
      var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;
      var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y; // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

      var roots = []; // Use the cubic solving algorithm

      solveCubic(a, b, c, d, roots);
      var zeroThreshold = 0.0000001;
      var params = [];

      for (var index = 0; index < 6; index += 2) {
        if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
          params.push(roots[index]);
        }
      }

      params.push(1.0);
      params.push(0.0);
      var minDistanceSquared = -1;
      var curX, curY, distSquared;

      for (var i = 0; i < params.length; i++) {
        curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;
        curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;
        distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2); // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));

        if (minDistanceSquared >= 0) {
          if (distSquared < minDistanceSquared) {
            minDistanceSquared = distSquared;
          }
        } else {
          minDistanceSquared = distSquared;
        }
      }

      return minDistanceSquared;
    };
    var sqdistToFiniteLine = function sqdistToFiniteLine(x, y, x1, y1, x2, y2) {
      var offset = [x - x1, y - y1];
      var line = [x2 - x1, y2 - y1];
      var lineSq = line[0] * line[0] + line[1] * line[1];
      var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
      var dotProduct = offset[0] * line[0] + offset[1] * line[1];
      var adjSq = dotProduct * dotProduct / lineSq;

      if (dotProduct < 0) {
        return hypSq;
      }

      if (adjSq > lineSq) {
        return (x - x2) * (x - x2) + (y - y2) * (y - y2);
      }

      return hypSq - adjSq;
    };
    var pointInsidePolygonPoints = function pointInsidePolygonPoints(x, y, points) {
      var x1, y1, x2, y2;
      var y3; // Intersect with vertical line through (x, y)

      var up = 0; // let down = 0;

      for (var i = 0; i < points.length / 2; i++) {
        x1 = points[i * 2];
        y1 = points[i * 2 + 1];

        if (i + 1 < points.length / 2) {
          x2 = points[(i + 1) * 2];
          y2 = points[(i + 1) * 2 + 1];
        } else {
          x2 = points[(i + 1 - points.length / 2) * 2];
          y2 = points[(i + 1 - points.length / 2) * 2 + 1];
        }

        if (x1 == x && x2 == x) ; else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {
          y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

          if (y3 > y) {
            up++;
          } // if( y3 < y ){
          // down++;
          // }

        } else {
          continue;
        }
      }

      if (up % 2 === 0) {
        return false;
      } else {
        return true;
      }
    };
    var pointInsidePolygon = function pointInsidePolygon(x, y, basePoints, centerX, centerY, width, height, direction, padding) {
      var transformedPoints = new Array(basePoints.length); // Gives negative angle

      var angle;

      if (direction[0] != null) {
        angle = Math.atan(direction[1] / direction[0]);

        if (direction[0] < 0) {
          angle = angle + Math.PI / 2;
        } else {
          angle = -angle - Math.PI / 2;
        }
      } else {
        angle = direction;
      }

      var cos = Math.cos(-angle);
      var sin = Math.sin(-angle); //    console.log("base: " + basePoints);

      for (var i = 0; i < transformedPoints.length / 2; i++) {
        transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);
        transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);
        transformedPoints[i * 2] += centerX;
        transformedPoints[i * 2 + 1] += centerY;
      }

      var points;

      if (padding > 0) {
        var expandedLineSet = expandPolygon(transformedPoints, -padding);
        points = joinLines(expandedLineSet);
      } else {
        points = transformedPoints;
      }

      return pointInsidePolygonPoints(x, y, points);
    };
    var joinLines = function joinLines(lineSet) {
      var vertices = new Array(lineSet.length / 2);
      var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
      var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

      for (var i = 0; i < lineSet.length / 4; i++) {
        currentLineStartX = lineSet[i * 4];
        currentLineStartY = lineSet[i * 4 + 1];
        currentLineEndX = lineSet[i * 4 + 2];
        currentLineEndY = lineSet[i * 4 + 3];

        if (i < lineSet.length / 4 - 1) {
          nextLineStartX = lineSet[(i + 1) * 4];
          nextLineStartY = lineSet[(i + 1) * 4 + 1];
          nextLineEndX = lineSet[(i + 1) * 4 + 2];
          nextLineEndY = lineSet[(i + 1) * 4 + 3];
        } else {
          nextLineStartX = lineSet[0];
          nextLineStartY = lineSet[1];
          nextLineEndX = lineSet[2];
          nextLineEndY = lineSet[3];
        }

        var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
        vertices[i * 2] = intersection[0];
        vertices[i * 2 + 1] = intersection[1];
      }

      return vertices;
    };
    var expandPolygon = function expandPolygon(points, pad) {
      var expandedLineSet = new Array(points.length * 2);
      var currentPointX, currentPointY, nextPointX, nextPointY;

      for (var i = 0; i < points.length / 2; i++) {
        currentPointX = points[i * 2];
        currentPointY = points[i * 2 + 1];

        if (i < points.length / 2 - 1) {
          nextPointX = points[(i + 1) * 2];
          nextPointY = points[(i + 1) * 2 + 1];
        } else {
          nextPointX = points[0];
          nextPointY = points[1];
        } // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]
        // Assume CCW polygon winding


        var offsetX = nextPointY - currentPointY;
        var offsetY = -(nextPointX - currentPointX); // Normalize

        var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
        var normalizedOffsetX = offsetX / offsetLength;
        var normalizedOffsetY = offsetY / offsetLength;
        expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
        expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
        expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
        expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
      }

      return expandedLineSet;
    };
    var intersectLineEllipse = function intersectLineEllipse(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {
      var dispX = centerX - x;
      var dispY = centerY - y;
      dispX /= ellipseWradius;
      dispY /= ellipseHradius;
      var len = Math.sqrt(dispX * dispX + dispY * dispY);
      var newLength = len - 1;

      if (newLength < 0) {
        return [];
      }

      var lenProportion = newLength / len;
      return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
    };
    var checkInEllipse = function checkInEllipse(x, y, width, height, centerX, centerY, padding) {
      x -= centerX;
      y -= centerY;
      x /= width / 2 + padding;
      y /= height / 2 + padding;
      return x * x + y * y <= 1;
    }; // Returns intersections of increasing distance from line's start point

    var intersectLineCircle = function intersectLineCircle(x1, y1, x2, y2, centerX, centerY, radius) {
      // Calculate d, direction vector of line
      var d = [x2 - x1, y2 - y1]; // Direction vector of line

      var f = [x1 - centerX, y1 - centerY];
      var a = d[0] * d[0] + d[1] * d[1];
      var b = 2 * (f[0] * d[0] + f[1] * d[1]);
      var c = f[0] * f[0] + f[1] * f[1] - radius * radius;
      var discriminant = b * b - 4 * a * c;

      if (discriminant < 0) {
        return [];
      }

      var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
      var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
      var tMin = Math.min(t1, t2);
      var tMax = Math.max(t1, t2);
      var inRangeParams = [];

      if (tMin >= 0 && tMin <= 1) {
        inRangeParams.push(tMin);
      }

      if (tMax >= 0 && tMax <= 1) {
        inRangeParams.push(tMax);
      }

      if (inRangeParams.length === 0) {
        return [];
      }

      var nearIntersectionX = inRangeParams[0] * d[0] + x1;
      var nearIntersectionY = inRangeParams[0] * d[1] + y1;

      if (inRangeParams.length > 1) {
        if (inRangeParams[0] == inRangeParams[1]) {
          return [nearIntersectionX, nearIntersectionY];
        } else {
          var farIntersectionX = inRangeParams[1] * d[0] + x1;
          var farIntersectionY = inRangeParams[1] * d[1] + y1;
          return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
        }
      } else {
        return [nearIntersectionX, nearIntersectionY];
      }
    };
    var midOfThree = function midOfThree(a, b, c) {
      if (b <= a && a <= c || c <= a && a <= b) {
        return a;
      } else if (a <= b && b <= c || c <= b && b <= a) {
        return b;
      } else {
        return c;
      }
    }; // (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)

    var finiteLinesIntersect = function finiteLinesIntersect(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
      var dx13 = x1 - x3;
      var dx21 = x2 - x1;
      var dx43 = x4 - x3;
      var dy13 = y1 - y3;
      var dy21 = y2 - y1;
      var dy43 = y4 - y3;
      var ua_t = dx43 * dy13 - dy43 * dx13;
      var ub_t = dx21 * dy13 - dy21 * dx13;
      var u_b = dy43 * dx21 - dx43 * dy21;

      if (u_b !== 0) {
        var ua = ua_t / u_b;
        var ub = ub_t / u_b;
        var flptThreshold = 0.001;

        var _min = 0 - flptThreshold;

        var _max = 1 + flptThreshold;

        if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
          return [x1 + ua * dx21, y1 + ua * dy21];
        } else {
          if (!infiniteLines) {
            return [];
          } else {
            return [x1 + ua * dx21, y1 + ua * dy21];
          }
        }
      } else {
        if (ua_t === 0 || ub_t === 0) {
          // Parallel, coincident lines. Check if overlap
          // Check endpoint of second line
          if (midOfThree(x1, x2, x4) === x4) {
            return [x4, y4];
          } // Check start point of second line


          if (midOfThree(x1, x2, x3) === x3) {
            return [x3, y3];
          } // Endpoint of first line


          if (midOfThree(x3, x4, x2) === x2) {
            return [x2, y2];
          }

          return [];
        } else {
          // Parallel, non-coincident
          return [];
        }
      }
    }; // math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
    // intersect a node polygon (pts transformed)
    //
    // math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
    // intersect the points (no transform)

    var polygonIntersectLine = function polygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
      var intersections = [];
      var intersection;
      var transformedPoints = new Array(basePoints.length);
      var doTransform = true;

      if (width == null) {
        doTransform = false;
      }

      var points;

      if (doTransform) {
        for (var i = 0; i < transformedPoints.length / 2; i++) {
          transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
          transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
        }

        if (padding > 0) {
          var expandedLineSet = expandPolygon(transformedPoints, -padding);
          points = joinLines(expandedLineSet);
        } else {
          points = transformedPoints;
        }
      } else {
        points = basePoints;
      }

      var currentX, currentY, nextX, nextY;

      for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
        currentX = points[_i2 * 2];
        currentY = points[_i2 * 2 + 1];

        if (_i2 < points.length / 2 - 1) {
          nextX = points[(_i2 + 1) * 2];
          nextY = points[(_i2 + 1) * 2 + 1];
        } else {
          nextX = points[0];
          nextY = points[1];
        }

        intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);

        if (intersection.length !== 0) {
          intersections.push(intersection[0], intersection[1]);
        }
      }

      return intersections;
    };
    var shortenIntersection = function shortenIntersection(intersection, offset, amount) {
      var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
      var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
      var lenRatio = (length - amount) / length;

      if (lenRatio < 0) {
        lenRatio = 0.00001;
      }

      return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
    };
    var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare(sides, rotationRadians) {
      var points = generateUnitNgonPoints(sides, rotationRadians);
      points = fitPolygonToSquare(points);
      return points;
    };
    var fitPolygonToSquare = function fitPolygonToSquare(points) {
      var x, y;
      var sides = points.length / 2;
      var minX = Infinity,
          minY = Infinity,
          maxX = -Infinity,
          maxY = -Infinity;

      for (var i = 0; i < sides; i++) {
        x = points[2 * i];
        y = points[2 * i + 1];
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
        minY = Math.min(minY, y);
        maxY = Math.max(maxY, y);
      } // stretch factors


      var sx = 2 / (maxX - minX);
      var sy = 2 / (maxY - minY);

      for (var _i3 = 0; _i3 < sides; _i3++) {
        x = points[2 * _i3] = points[2 * _i3] * sx;
        y = points[2 * _i3 + 1] = points[2 * _i3 + 1] * sy;
        minX = Math.min(minX, x);
        maxX = Math.max(maxX, x);
        minY = Math.min(minY, y);
        maxY = Math.max(maxY, y);
      }

      if (minY < -1) {
        for (var _i4 = 0; _i4 < sides; _i4++) {
          y = points[2 * _i4 + 1] = points[2 * _i4 + 1] + (-1 - minY);
        }
      }

      return points;
    };
    var generateUnitNgonPoints = function generateUnitNgonPoints(sides, rotationRadians) {
      var increment = 1.0 / sides * 2 * Math.PI;
      var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
      startAngle += rotationRadians;
      var points = new Array(sides * 2);
      var currentAngle;

      for (var i = 0; i < sides; i++) {
        currentAngle = i * increment + startAngle;
        points[2 * i] = Math.cos(currentAngle); // x

        points[2 * i + 1] = Math.sin(-currentAngle); // y
      }

      return points;
    }; // Set the default radius, unless half of width or height is smaller than default

    var getRoundRectangleRadius = function getRoundRectangleRadius(width, height) {
      return Math.min(width / 4, height / 4, 8);
    };
    var getCutRectangleCornerLength = function getCutRectangleCornerLength() {
      return 8;
    };
    var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff(p0, p1, p2) {
      return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
    }; // get curve width, height, and control point position offsets as a percentage of node height / width

    var getBarrelCurveConstants = function getBarrelCurveConstants(width, height) {
      return {
        heightOffset: Math.min(15, 0.05 * height),
        widthOffset: Math.min(100, 0.25 * width),
        ctrlPtOffsetPct: 0.05
      };
    };

    var pageRankDefaults = defaults$1({
      dampingFactor: 0.8,
      precision: 0.000001,
      iterations: 200,
      weight: function weight(edge) {
        return 1;
      }
    });
    var elesfn$7 = {
      pageRank: function pageRank(options) {
        var _pageRankDefaults = pageRankDefaults(options),
            dampingFactor = _pageRankDefaults.dampingFactor,
            precision = _pageRankDefaults.precision,
            iterations = _pageRankDefaults.iterations,
            weight = _pageRankDefaults.weight;

        var cy = this._private.cy;

        var _this$byGroup = this.byGroup(),
            nodes = _this$byGroup.nodes,
            edges = _this$byGroup.edges;

        var numNodes = nodes.length;
        var numNodesSqd = numNodes * numNodes;
        var numEdges = edges.length; // Construct transposed adjacency matrix
        // First lets have a zeroed matrix of the right size
        // We'll also keep track of the sum of each column

        var matrix = new Array(numNodesSqd);
        var columnSum = new Array(numNodes);
        var additionalProb = (1 - dampingFactor) / numNodes; // Create null matrix

        for (var i = 0; i < numNodes; i++) {
          for (var j = 0; j < numNodes; j++) {
            var n = i * numNodes + j;
            matrix[n] = 0;
          }

          columnSum[i] = 0;
        } // Now, process edges


        for (var _i = 0; _i < numEdges; _i++) {
          var edge = edges[_i];
          var srcId = edge.data('source');
          var tgtId = edge.data('target'); // Don't include loops in the matrix

          if (srcId === tgtId) {
            continue;
          }

          var s = nodes.indexOfId(srcId);
          var t = nodes.indexOfId(tgtId);
          var w = weight(edge);

          var _n = t * numNodes + s; // Update matrix


          matrix[_n] += w; // Update column sum

          columnSum[s] += w;
        } // Add additional probability based on damping factor
        // Also, take into account columns that have sum = 0


        var p = 1.0 / numNodes + additionalProb; // Shorthand
        // Traverse matrix, column by column

        for (var _j = 0; _j < numNodes; _j++) {
          if (columnSum[_j] === 0) {
            // No 'links' out from node jth, assume equal probability for each possible node
            for (var _i2 = 0; _i2 < numNodes; _i2++) {
              var _n2 = _i2 * numNodes + _j;

              matrix[_n2] = p;
            }
          } else {
            // Node jth has outgoing link, compute normalized probabilities
            for (var _i3 = 0; _i3 < numNodes; _i3++) {
              var _n3 = _i3 * numNodes + _j;

              matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
            }
          }
        } // Compute dominant eigenvector using power method


        var eigenvector = new Array(numNodes);
        var temp = new Array(numNodes);
        var previous; // Start with a vector of all 1's
        // Also, initialize a null vector which will be used as shorthand

        for (var _i4 = 0; _i4 < numNodes; _i4++) {
          eigenvector[_i4] = 1;
        }

        for (var iter = 0; iter < iterations; iter++) {
          // Temp array with all 0's
          for (var _i5 = 0; _i5 < numNodes; _i5++) {
            temp[_i5] = 0;
          } // Multiply matrix with previous result


          for (var _i6 = 0; _i6 < numNodes; _i6++) {
            for (var _j2 = 0; _j2 < numNodes; _j2++) {
              var _n4 = _i6 * numNodes + _j2;

              temp[_i6] += matrix[_n4] * eigenvector[_j2];
            }
          }

          inPlaceSumNormalize(temp);
          previous = eigenvector;
          eigenvector = temp;
          temp = previous;
          var diff = 0; // Compute difference (squared module) of both vectors

          for (var _i7 = 0; _i7 < numNodes; _i7++) {
            var delta = previous[_i7] - eigenvector[_i7];
            diff += delta * delta;
          } // If difference is less than the desired threshold, stop iterating


          if (diff < precision) {
            break;
          }
        } // Construct result


        var res = {
          rank: function rank(node) {
            node = cy.collection(node)[0];
            return eigenvector[nodes.indexOf(node)];
          }
        };
        return res;
      } // pageRank

    }; // elesfn

    var defaults$1$1 = defaults$1({
      root: null,
      weight: function weight(edge) {
        return 1;
      },
      directed: false,
      alpha: 0
    });
    var elesfn$8 = {
      degreeCentralityNormalized: function degreeCentralityNormalized(options) {
        options = defaults$1$1(options);
        var cy = this.cy();
        var nodes = this.nodes();
        var numNodes = nodes.length;

        if (!options.directed) {
          var degrees = {};
          var maxDegree = 0;

          for (var i = 0; i < numNodes; i++) {
            var node = nodes[i]; // add current node to the current options object and call degreeCentrality

            options.root = node;
            var currDegree = this.degreeCentrality(options);

            if (maxDegree < currDegree.degree) {
              maxDegree = currDegree.degree;
            }

            degrees[node.id()] = currDegree.degree;
          }

          return {
            degree: function degree(node) {
              if (maxDegree === 0) {
                return 0;
              }

              if (string(node)) {
                // from is a selector string
                node = cy.filter(node);
              }

              return degrees[node.id()] / maxDegree;
            }
          };
        } else {
          var indegrees = {};
          var outdegrees = {};
          var maxIndegree = 0;
          var maxOutdegree = 0;

          for (var _i = 0; _i < numNodes; _i++) {
            var _node = nodes[_i];

            var id = _node.id(); // add current node to the current options object and call degreeCentrality


            options.root = _node;

            var _currDegree = this.degreeCentrality(options);

            if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;
            if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;
            indegrees[id] = _currDegree.indegree;
            outdegrees[id] = _currDegree.outdegree;
          }

          return {
            indegree: function indegree(node) {
              if (maxIndegree == 0) {
                return 0;
              }

              if (string(node)) {
                // from is a selector string
                node = cy.filter(node);
              }

              return indegrees[node.id()] / maxIndegree;
            },
            outdegree: function outdegree(node) {
              if (maxOutdegree === 0) {
                return 0;
              }

              if (string(node)) {
                // from is a selector string
                node = cy.filter(node);
              }

              return outdegrees[node.id()] / maxOutdegree;
            }
          };
        }
      },
      // degreeCentralityNormalized
      // Implemented from the algorithm in Opsahl's paper
      // "Node centrality in weighted networks: Generalizing degree and shortest paths"
      // check the heading 2 "Degree"
      degreeCentrality: function degreeCentrality(options) {
        options = defaults$1$1(options);
        var cy = this.cy();
        var callingEles = this;
        var _options = options,
            root = _options.root,
            weight = _options.weight,
            directed = _options.directed,
            alpha = _options.alpha;
        root = cy.collection(root)[0];

        if (!directed) {
          var connEdges = root.connectedEdges().intersection(callingEles);
          var k = connEdges.length;
          var s = 0; // Now, sum edge weights

          for (var i = 0; i < connEdges.length; i++) {
            s += weight(connEdges[i]);
          }

          return {
            degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
          };
        } else {
          var edges = root.connectedEdges();
          var incoming = edges.filter(function (edge) {
            return edge.target().same(root) && callingEles.has(edge);
          });
          var outgoing = edges.filter(function (edge) {
            return edge.source().same(root) && callingEles.has(edge);
          });
          var k_in = incoming.length;
          var k_out = outgoing.length;
          var s_in = 0;
          var s_out = 0; // Now, sum incoming edge weights

          for (var _i2 = 0; _i2 < incoming.length; _i2++) {
            s_in += weight(incoming[_i2]);
          } // Now, sum outgoing edge weights


          for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
            s_out += weight(outgoing[_i3]);
          }

          return {
            indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
            outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
          };
        }
      } // degreeCentrality

    }; // elesfn
    // nice, short mathemathical alias

    elesfn$8.dc = elesfn$8.degreeCentrality;
    elesfn$8.dcn = elesfn$8.degreeCentralityNormalised = elesfn$8.degreeCentralityNormalized;

    var defaults$2 = defaults$1({
      harmonic: true,
      weight: function weight() {
        return 1;
      },
      directed: false,
      root: null
    });
    var elesfn$9 = {
      closenessCentralityNormalized: function closenessCentralityNormalized(options) {
        var _defaults = defaults$2(options),
            harmonic = _defaults.harmonic,
            weight = _defaults.weight,
            directed = _defaults.directed;

        var cy = this.cy();
        var closenesses = {};
        var maxCloseness = 0;
        var nodes = this.nodes();
        var fw = this.floydWarshall({
          weight: weight,
          directed: directed
        }); // Compute closeness for every node and find the maximum closeness

        for (var i = 0; i < nodes.length; i++) {
          var currCloseness = 0;
          var node_i = nodes[i];

          for (var j = 0; j < nodes.length; j++) {
            if (i !== j) {
              var d = fw.distance(node_i, nodes[j]);

              if (harmonic) {
                currCloseness += 1 / d;
              } else {
                currCloseness += d;
              }
            }
          }

          if (!harmonic) {
            currCloseness = 1 / currCloseness;
          }

          if (maxCloseness < currCloseness) {
            maxCloseness = currCloseness;
          }

          closenesses[node_i.id()] = currCloseness;
        }

        return {
          closeness: function closeness(node) {
            if (maxCloseness == 0) {
              return 0;
            }

            if (string(node)) {
              // from is a selector string
              node = cy.filter(node)[0].id();
            } else {
              // from is a node
              node = node.id();
            }

            return closenesses[node] / maxCloseness;
          }
        };
      },
      // Implemented from pseudocode from wikipedia
      closenessCentrality: function closenessCentrality(options) {
        var _defaults2 = defaults$2(options),
            root = _defaults2.root,
            weight = _defaults2.weight,
            directed = _defaults2.directed,
            harmonic = _defaults2.harmonic;

        root = this.filter(root)[0]; // we need distance from this node to every other node

        var dijkstra = this.dijkstra({
          root: root,
          weight: weight,
          directed: directed
        });
        var totalDistance = 0;
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          var n = nodes[i];

          if (!n.same(root)) {
            var d = dijkstra.distanceTo(n);

            if (harmonic) {
              totalDistance += 1 / d;
            } else {
              totalDistance += d;
            }
          }
        }

        return harmonic ? totalDistance : 1 / totalDistance;
      } // closenessCentrality

    }; // elesfn
    // nice, short mathemathical alias

    elesfn$9.cc = elesfn$9.closenessCentrality;
    elesfn$9.ccn = elesfn$9.closenessCentralityNormalised = elesfn$9.closenessCentralityNormalized;

    var defaults$3 = defaults$1({
      weight: null,
      directed: false
    });
    var elesfn$a = {
      // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
      betweennessCentrality: function betweennessCentrality(options) {
        var _defaults = defaults$3(options),
            directed = _defaults.directed,
            weight = _defaults.weight;

        var weighted = weight != null;
        var cy = this.cy(); // starting

        var V = this.nodes();
        var A = {};
        var _C = {};
        var max = 0;
        var C = {
          set: function set(key, val) {
            _C[key] = val;

            if (val > max) {
              max = val;
            }
          },
          get: function get(key) {
            return _C[key];
          }
        }; // A contains the neighborhoods of every node

        for (var i = 0; i < V.length; i++) {
          var v = V[i];
          var vid = v.id();

          if (directed) {
            A[vid] = v.outgoers().nodes(); // get outgoers of every node
          } else {
            A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
          }

          C.set(vid, 0);
        }

        var _loop = function _loop(s) {
          var sid = V[s].id();
          var S = []; // stack

          var P = {};
          var g = {};
          var d = {};
          var Q = new Heap(function (a, b) {
            return d[a] - d[b];
          }); // queue
          // init dictionaries

          for (var _i = 0; _i < V.length; _i++) {
            var _vid = V[_i].id();

            P[_vid] = [];
            g[_vid] = 0;
            d[_vid] = Infinity;
          }

          g[sid] = 1; // sigma

          d[sid] = 0; // distance to s

          Q.push(sid);

          while (!Q.empty()) {
            var _v = Q.pop();

            S.push(_v);

            if (weighted) {
              for (var j = 0; j < A[_v].length; j++) {
                var w = A[_v][j];
                var vEle = cy.getElementById(_v);
                var edge = void 0;

                if (vEle.edgesTo(w).length > 0) {
                  edge = vEle.edgesTo(w)[0];
                } else {
                  edge = w.edgesTo(vEle)[0];
                }

                var edgeWeight = weight(edge);
                w = w.id();

                if (d[w] > d[_v] + edgeWeight) {
                  d[w] = d[_v] + edgeWeight;

                  if (Q.nodes.indexOf(w) < 0) {
                    //if w is not in Q
                    Q.push(w);
                  } else {
                    // update position if w is in Q
                    Q.updateItem(w);
                  }

                  g[w] = 0;
                  P[w] = [];
                }

                if (d[w] == d[_v] + edgeWeight) {
                  g[w] = g[w] + g[_v];
                  P[w].push(_v);
                }
              }
            } else {
              for (var _j = 0; _j < A[_v].length; _j++) {
                var _w = A[_v][_j].id();

                if (d[_w] == Infinity) {
                  Q.push(_w);
                  d[_w] = d[_v] + 1;
                }

                if (d[_w] == d[_v] + 1) {
                  g[_w] = g[_w] + g[_v];

                  P[_w].push(_v);
                }
              }
            }
          }

          var e = {};

          for (var _i2 = 0; _i2 < V.length; _i2++) {
            e[V[_i2].id()] = 0;
          }

          while (S.length > 0) {
            var _w2 = S.pop();

            for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {
              var _v2 = P[_w2][_j2];
              e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);

              if (_w2 != V[s].id()) {
                C.set(_w2, C.get(_w2) + e[_w2]);
              }
            }
          }
        };

        for (var s = 0; s < V.length; s++) {
          _loop(s);
        }

        var ret = {
          betweenness: function betweenness(node) {
            var id = cy.collection(node).id();
            return C.get(id);
          },
          betweennessNormalized: function betweennessNormalized(node) {
            if (max == 0) {
              return 0;
            }

            var id = cy.collection(node).id();
            return C.get(id) / max;
          }
        }; // alias

        ret.betweennessNormalised = ret.betweennessNormalized;
        return ret;
      } // betweennessCentrality

    }; // elesfn
    // nice, short mathemathical alias

    elesfn$a.bc = elesfn$a.betweennessCentrality;

    // Implemented by Zoe Xi @zoexi for GSOC 2016
    /* eslint-disable no-unused-vars */

    var defaults$4 = defaults$1({
      expandFactor: 2,
      // affects time of computation and cluster granularity to some extent: M * M
      inflateFactor: 2,
      // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
      multFactor: 1,
      // optional self loops for each node. Use a neutral value to improve cluster computations.
      maxIterations: 20,
      // maximum number of iterations of the MCL algorithm in a single run
      attributes: [// attributes/features used to group nodes, ie. similarity values between nodes
      function (edge) {
        return 1;
      }]
    });
    /* eslint-enable */

    var setOptions = function setOptions(options) {
      return defaults$4(options);
    };
    /* eslint-enable */


    var getSimilarity = function getSimilarity(edge, attributes) {
      var total = 0;

      for (var i = 0; i < attributes.length; i++) {
        total += attributes[i](edge);
      }

      return total;
    };

    var addLoops = function addLoops(M, n, val) {
      for (var i = 0; i < n; i++) {
        M[i * n + i] = val;
      }
    };

    var normalize$1 = function normalize(M, n) {
      var sum;

      for (var col = 0; col < n; col++) {
        sum = 0;

        for (var row = 0; row < n; row++) {
          sum += M[row * n + col];
        }

        for (var _row = 0; _row < n; _row++) {
          M[_row * n + col] = M[_row * n + col] / sum;
        }
      }
    }; // TODO: blocked matrix multiplication?


    var mmult = function mmult(A, B, n) {
      var C = new Array(n * n);

      for (var i = 0; i < n; i++) {
        for (var j = 0; j < n; j++) {
          C[i * n + j] = 0;
        }

        for (var k = 0; k < n; k++) {
          for (var _j = 0; _j < n; _j++) {
            C[i * n + _j] += A[i * n + k] * B[k * n + _j];
          }
        }
      }

      return C;
    };

    var expand = function expand(M, n, expandFactor
    /** power **/
    ) {
      var _M = M.slice(0);

      for (var p = 1; p < expandFactor; p++) {
        M = mmult(M, _M, n);
      }

      return M;
    };

    var inflate = function inflate(M, n, inflateFactor
    /** r **/
    ) {
      var _M = new Array(n * n); // M(i,j) ^ inflatePower


      for (var i = 0; i < n * n; i++) {
        _M[i] = Math.pow(M[i], inflateFactor);
      }

      normalize$1(_M, n);
      return _M;
    };

    var hasConverged = function hasConverged(M, _M, n2, roundFactor) {
      // Check that both matrices have the same elements (i,j)
      for (var i = 0; i < n2; i++) {
        var v1 = Math.round(M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor); // truncate to 'roundFactor' decimal places

        var v2 = Math.round(_M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);

        if (v1 !== v2) {
          return false;
        }
      }

      return true;
    };

    var assign = function assign(M, n, nodes, cy) {
      var clusters = [];

      for (var i = 0; i < n; i++) {
        var cluster = [];

        for (var j = 0; j < n; j++) {
          // Row-wise attractors and elements that they attract belong in same cluster
          if (Math.round(M[i * n + j] * 1000) / 1000 > 0) {
            cluster.push(nodes[j]);
          }
        }

        if (cluster.length !== 0) {
          clusters.push(cy.collection(cluster));
        }
      }

      return clusters;
    };

    var isDuplicate = function isDuplicate(c1, c2) {
      for (var i = 0; i < c1.length; i++) {
        if (!c2[i] || c1[i].id() !== c2[i].id()) {
          return false;
        }
      }

      return true;
    };

    var removeDuplicates = function removeDuplicates(clusters) {
      for (var i = 0; i < clusters.length; i++) {
        for (var j = 0; j < clusters.length; j++) {
          if (i != j && isDuplicate(clusters[i], clusters[j])) {
            clusters.splice(j, 1);
          }
        }
      }

      return clusters;
    };

    var markovClustering = function markovClustering(options) {
      var nodes = this.nodes();
      var edges = this.edges();
      var cy = this.cy(); // Set parameters of algorithm:

      var opts = setOptions(options); // Map each node to its position in node array

      var id2position = {};

      for (var i = 0; i < nodes.length; i++) {
        id2position[nodes[i].id()] = i;
      } // Generate stochastic matrix M from input graph G (should be symmetric/undirected)


      var n = nodes.length,
          n2 = n * n;

      var M = new Array(n2),
          _M;

      for (var _i = 0; _i < n2; _i++) {
        M[_i] = 0;
      }

      for (var e = 0; e < edges.length; e++) {
        var edge = edges[e];
        var _i2 = id2position[edge.source().id()];
        var j = id2position[edge.target().id()];
        var sim = getSimilarity(edge, opts.attributes);
        M[_i2 * n + j] += sim; // G should be symmetric and undirected

        M[j * n + _i2] += sim;
      } // Begin Markov cluster algorithm
      // Step 1: Add self loops to each node, ie. add multFactor to matrix diagonal


      addLoops(M, n, opts.multFactor); // Step 2: M = normalize( M );

      normalize$1(M, n);
      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        isStillMoving = false; // Step 3:

        _M = expand(M, n, opts.expandFactor); // Step 4:

        M = inflate(_M, n, opts.inflateFactor); // Step 5: check to see if ~steady state has been reached

        if (!hasConverged(M, _M, n2, 4)) {
          isStillMoving = true;
        }

        iterations++;
      } // Build clusters from matrix


      var clusters = assign(M, n, nodes, cy); // Remove duplicate clusters due to symmetry of graph and M matrix

      clusters = removeDuplicates(clusters);
      return clusters;
    };

    var markovClustering$1 = {
      markovClustering: markovClustering,
      mcl: markovClustering
    };

    // Common distance metrics for clustering algorithms

    var identity = function identity(x) {
      return x;
    };

    var absDiff = function absDiff(p, q) {
      return Math.abs(q - p);
    };

    var addAbsDiff = function addAbsDiff(total, p, q) {
      return total + absDiff(p, q);
    };

    var addSquaredDiff = function addSquaredDiff(total, p, q) {
      return total + Math.pow(q - p, 2);
    };

    var sqrt = function sqrt(x) {
      return Math.sqrt(x);
    };

    var maxAbsDiff = function maxAbsDiff(currentMax, p, q) {
      return Math.max(currentMax, absDiff(p, q));
    };

    var getDistance = function getDistance(length, getP, getQ, init, visit) {
      var post = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : identity;
      var ret = init;
      var p, q;

      for (var dim = 0; dim < length; dim++) {
        p = getP(dim);
        q = getQ(dim);
        ret = visit(ret, p, q);
      }

      return post(ret);
    };

    var distances = {
      euclidean: function euclidean(length, getP, getQ) {
        if (length >= 2) {
          return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
        } else {
          // for single attr case, more efficient to avoid sqrt
          return getDistance(length, getP, getQ, 0, addAbsDiff);
        }
      },
      squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
        return getDistance(length, getP, getQ, 0, addSquaredDiff);
      },
      manhattan: function manhattan(length, getP, getQ) {
        return getDistance(length, getP, getQ, 0, addAbsDiff);
      },
      max: function max(length, getP, getQ) {
        return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
      }
    }; // in case the user accidentally doesn't use camel case

    distances['squared-euclidean'] = distances['squaredEuclidean'];
    distances['squaredeuclidean'] = distances['squaredEuclidean'];
    function clusteringDistance (method, length, getP, getQ, nodeP, nodeQ) {
      var impl;

      if (fn(method)) {
        impl = method;
      } else {
        impl = distances[method] || distances.euclidean;
      }

      if (length === 0 && fn(method)) {
        return impl(nodeP, nodeQ);
      } else {
        return impl(length, getP, getQ, nodeP, nodeQ);
      }
    }

    var defaults$5 = defaults$1({
      k: 2,
      m: 2,
      sensitivityThreshold: 0.0001,
      distance: 'euclidean',
      maxIterations: 10,
      attributes: [],
      testMode: false,
      testCentroids: null
    });

    var setOptions$1 = function setOptions(options) {
      return defaults$5(options);
    };
    /* eslint-enable */


    var getDist = function getDist(type, node, centroid, attributes, mode) {
      var noNodeP = mode !== 'kMedoids';
      var getP = noNodeP ? function (i) {
        return centroid[i];
      } : function (i) {
        return attributes[i](centroid);
      };

      var getQ = function getQ(i) {
        return attributes[i](node);
      };

      var nodeP = centroid;
      var nodeQ = node;
      return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);
    };

    var randomCentroids = function randomCentroids(nodes, k, attributes) {
      var ndim = attributes.length;
      var min = new Array(ndim);
      var max = new Array(ndim);
      var centroids = new Array(k);
      var centroid = null; // Find min, max values for each attribute dimension

      for (var i = 0; i < ndim; i++) {
        min[i] = nodes.min(attributes[i]).value;
        max[i] = nodes.max(attributes[i]).value;
      } // Build k centroids, each represented as an n-dim feature vector


      for (var c = 0; c < k; c++) {
        centroid = [];

        for (var _i = 0; _i < ndim; _i++) {
          centroid[_i] = Math.random() * (max[_i] - min[_i]) + min[_i]; // random initial value
        }

        centroids[c] = centroid;
      }

      return centroids;
    };

    var classify = function classify(node, centroids, distance, attributes, type) {
      var min = Infinity;
      var index = 0;

      for (var i = 0; i < centroids.length; i++) {
        var dist = getDist(distance, node, centroids[i], attributes, type);

        if (dist < min) {
          min = dist;
          index = i;
        }
      }

      return index;
    };

    var buildCluster = function buildCluster(centroid, nodes, assignment) {
      var cluster = [];
      var node = null;

      for (var n = 0; n < nodes.length; n++) {
        node = nodes[n];

        if (assignment[node.id()] === centroid) {
          //console.log("Node " + node.id() + " is associated with medoid #: " + m);
          cluster.push(node);
        }
      }

      return cluster;
    };

    var haveValuesConverged = function haveValuesConverged(v1, v2, sensitivityThreshold) {
      return Math.abs(v2 - v1) <= sensitivityThreshold;
    };

    var haveMatricesConverged = function haveMatricesConverged(v1, v2, sensitivityThreshold) {
      for (var i = 0; i < v1.length; i++) {
        for (var j = 0; j < v1[i].length; j++) {
          var diff = Math.abs(v1[i][j] - v2[i][j]);

          if (diff > sensitivityThreshold) {
            return false;
          }
        }
      }

      return true;
    };

    var seenBefore = function seenBefore(node, medoids, n) {
      for (var i = 0; i < n; i++) {
        if (node === medoids[i]) return true;
      }

      return false;
    };

    var randomMedoids = function randomMedoids(nodes, k) {
      var medoids = new Array(k); // For small data sets, the probability of medoid conflict is greater,
      // so we need to check to see if we've already seen or chose this node before.

      if (nodes.length < 50) {
        // Randomly select k medoids from the n nodes
        for (var i = 0; i < k; i++) {
          var node = nodes[Math.floor(Math.random() * nodes.length)]; // If we've already chosen this node to be a medoid, don't choose it again (for small data sets).
          // Instead choose a different random node.

          while (seenBefore(node, medoids, i)) {
            node = nodes[Math.floor(Math.random() * nodes.length)];
          }

          medoids[i] = node;
        }
      } else {
        // Relatively large data set, so pretty safe to not check and just select random nodes
        for (var _i2 = 0; _i2 < k; _i2++) {
          medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];
        }
      }

      return medoids;
    };

    var findCost = function findCost(potentialNewMedoid, cluster, attributes) {
      var cost = 0;

      for (var n = 0; n < cluster.length; n++) {
        cost += getDist('manhattan', cluster[n], potentialNewMedoid, attributes, 'kMedoids');
      }

      return cost;
    };

    var kMeans = function kMeans(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var node = null; // Set parameters of algorithm: # of clusters, distance metric, etc.

      var opts = setOptions$1(options); // Begin k-means algorithm

      var clusters = new Array(opts.k);
      var assignment = {};
      var centroids; // Step 1: Initialize centroid positions

      if (opts.testMode) {
        if (typeof opts.testCentroids === 'number') {
          // TODO: implement a seeded random number generator.
          opts.testCentroids;
          centroids = randomCentroids(nodes, opts.k, opts.attributes);
        } else if (_typeof(opts.testCentroids) === 'object') {
          centroids = opts.testCentroids;
        } else {
          centroids = randomCentroids(nodes, opts.k, opts.attributes);
        }
      } else {
        centroids = randomCentroids(nodes, opts.k, opts.attributes);
      }

      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        // Step 2: Assign nodes to the nearest centroid
        for (var n = 0; n < nodes.length; n++) {
          node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

          assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, 'kMeans');
        } // Step 3: For each of the k clusters, update its centroid


        isStillMoving = false;

        for (var c = 0; c < opts.k; c++) {
          // Get all nodes that belong to this cluster
          var cluster = buildCluster(c, nodes, assignment);

          if (cluster.length === 0) {
            // If cluster is empty, break out early & move to next cluster
            continue;
          } // Update centroids by calculating avg of all nodes within the cluster.


          var ndim = opts.attributes.length;
          var centroid = centroids[c]; // [ dim_1, dim_2, dim_3, ... , dim_n ]

          var newCentroid = new Array(ndim);
          var sum = new Array(ndim);

          for (var d = 0; d < ndim; d++) {
            sum[d] = 0.0;

            for (var i = 0; i < cluster.length; i++) {
              node = cluster[i];
              sum[d] += opts.attributes[d](node);
            }

            newCentroid[d] = sum[d] / cluster.length; // Check to see if algorithm has converged, i.e. when centroids no longer change

            if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {
              isStillMoving = true;
            }
          }

          centroids[c] = newCentroid;
          clusters[c] = cy.collection(cluster);
        }

        iterations++;
      }

      return clusters;
    };

    var kMedoids = function kMedoids(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var node = null;
      var opts = setOptions$1(options); // Begin k-medoids algorithm

      var clusters = new Array(opts.k);
      var medoids;
      var assignment = {};
      var curCost;
      var minCosts = new Array(opts.k); // minimum cost configuration for each cluster
      // Step 1: Initialize k medoids

      if (opts.testMode) {
        if (typeof opts.testCentroids === 'number') ; else if (_typeof(opts.testCentroids) === 'object') {
          medoids = opts.testCentroids;
        } else {
          medoids = randomMedoids(nodes, opts.k);
        }
      } else {
        medoids = randomMedoids(nodes, opts.k);
      }

      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        // Step 2: Assign nodes to the nearest medoid
        for (var n = 0; n < nodes.length; n++) {
          node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

          assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, 'kMedoids');
        }

        isStillMoving = false; // Step 3: For each medoid m, and for each node assciated with mediod m,
        // select the node with the lowest configuration cost as new medoid.

        for (var m = 0; m < medoids.length; m++) {
          // Get all nodes that belong to this medoid
          var cluster = buildCluster(m, nodes, assignment);

          if (cluster.length === 0) {
            // If cluster is empty, break out early & move to next cluster
            continue;
          }

          minCosts[m] = findCost(medoids[m], cluster, opts.attributes); // original cost
          // Select different medoid if its configuration has the lowest cost

          for (var _n = 0; _n < cluster.length; _n++) {
            curCost = findCost(cluster[_n], cluster, opts.attributes);

            if (curCost < minCosts[m]) {
              minCosts[m] = curCost;
              medoids[m] = cluster[_n];
              isStillMoving = true;
            }
          }

          clusters[m] = cy.collection(cluster);
        }

        iterations++;
      }

      return clusters;
    };

    var updateCentroids = function updateCentroids(centroids, nodes, U, weight, opts) {
      var numerator, denominator;

      for (var n = 0; n < nodes.length; n++) {
        for (var c = 0; c < centroids.length; c++) {
          weight[n][c] = Math.pow(U[n][c], opts.m);
        }
      }

      for (var _c = 0; _c < centroids.length; _c++) {
        for (var dim = 0; dim < opts.attributes.length; dim++) {
          numerator = 0;
          denominator = 0;

          for (var _n2 = 0; _n2 < nodes.length; _n2++) {
            numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);
            denominator += weight[_n2][_c];
          }

          centroids[_c][dim] = numerator / denominator;
        }
      }
    };

    var updateMembership = function updateMembership(U, _U, centroids, nodes, opts) {
      // Save previous step
      for (var i = 0; i < U.length; i++) {
        _U[i] = U[i].slice();
      }

      var sum, numerator, denominator;
      var pow = 2 / (opts.m - 1);

      for (var c = 0; c < centroids.length; c++) {
        for (var n = 0; n < nodes.length; n++) {
          sum = 0;

          for (var k = 0; k < centroids.length; k++) {
            // against all other centroids
            numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, 'cmeans');
            denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, 'cmeans');
            sum += Math.pow(numerator / denominator, pow);
          }

          U[n][c] = 1 / sum;
        }
      }
    };

    var assign$1 = function assign(nodes, U, opts, cy) {
      var clusters = new Array(opts.k);

      for (var c = 0; c < clusters.length; c++) {
        clusters[c] = [];
      }

      var max;
      var index;

      for (var n = 0; n < U.length; n++) {
        // for each node (U is N x C matrix)
        max = -Infinity;
        index = -1; // Determine which cluster the node is most likely to belong in

        for (var _c2 = 0; _c2 < U[0].length; _c2++) {
          if (U[n][_c2] > max) {
            max = U[n][_c2];
            index = _c2;
          }
        }

        clusters[index].push(nodes[n]);
      } // Turn every array into a collection of nodes


      for (var _c3 = 0; _c3 < clusters.length; _c3++) {
        clusters[_c3] = cy.collection(clusters[_c3]);
      }

      return clusters;
    };

    var fuzzyCMeans = function fuzzyCMeans(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var opts = setOptions$1(options); // Begin fuzzy c-means algorithm

      var clusters;
      var centroids;
      var U;

      var _U;

      var weight; // Step 1: Initialize letiables.

      _U = new Array(nodes.length);

      for (var i = 0; i < nodes.length; i++) {
        // N x C matrix
        _U[i] = new Array(opts.k);
      }

      U = new Array(nodes.length);

      for (var _i3 = 0; _i3 < nodes.length; _i3++) {
        // N x C matrix
        U[_i3] = new Array(opts.k);
      }

      for (var _i4 = 0; _i4 < nodes.length; _i4++) {
        var total = 0;

        for (var j = 0; j < opts.k; j++) {
          U[_i4][j] = Math.random();
          total += U[_i4][j];
        }

        for (var _j = 0; _j < opts.k; _j++) {
          U[_i4][_j] = U[_i4][_j] / total;
        }
      }

      centroids = new Array(opts.k);

      for (var _i5 = 0; _i5 < opts.k; _i5++) {
        centroids[_i5] = new Array(opts.attributes.length);
      }

      weight = new Array(nodes.length);

      for (var _i6 = 0; _i6 < nodes.length; _i6++) {
        // N x C matrix
        weight[_i6] = new Array(opts.k);
      } // end init FCM


      var isStillMoving = true;
      var iterations = 0;

      while (isStillMoving && iterations < opts.maxIterations) {
        isStillMoving = false; // Step 2: Calculate the centroids for each step.

        updateCentroids(centroids, nodes, U, weight, opts); // Step 3: Update the partition matrix U.

        updateMembership(U, _U, centroids, nodes, opts); // Step 4: Check for convergence.

        if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {
          isStillMoving = true;
        }

        iterations++;
      } // Assign nodes to clusters with highest probability.


      clusters = assign$1(nodes, U, opts, cy);
      return {
        clusters: clusters,
        degreeOfMembership: U
      };
    };

    var kClustering = {
      kMeans: kMeans,
      kMedoids: kMedoids,
      fuzzyCMeans: fuzzyCMeans,
      fcm: fuzzyCMeans
    };

    // Implemented by Zoe Xi @zoexi for GSOC 2016
    var defaults$6 = defaults$1({
      distance: 'euclidean',
      // distance metric to compare nodes
      linkage: 'min',
      // linkage criterion : how to determine the distance between clusters of nodes
      mode: 'threshold',
      // mode:'threshold' => clusters must be threshold distance apart
      threshold: Infinity,
      // the distance threshold
      // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
      addDendrogram: false,
      // whether to add the dendrogram to the graph for viz
      dendrogramDepth: 0,
      // depth at which dendrogram branches are merged into the returned clusters
      attributes: [] // array of attr functions

    });
    var linkageAliases = {
      'single': 'min',
      'complete': 'max'
    };

    var setOptions$2 = function setOptions(options) {
      var opts = defaults$6(options);
      var preferredAlias = linkageAliases[opts.linkage];

      if (preferredAlias != null) {
        opts.linkage = preferredAlias;
      }

      return opts;
    };

    var mergeClosest = function mergeClosest(clusters, index, dists, mins, opts) {
      // Find two closest clusters from cached mins
      var minKey = 0;
      var min = Infinity;
      var dist;
      var attrs = opts.attributes;

      var getDist = function getDist(n1, n2) {
        return clusteringDistance(opts.distance, attrs.length, function (i) {
          return attrs[i](n1);
        }, function (i) {
          return attrs[i](n2);
        }, n1, n2);
      };

      for (var i = 0; i < clusters.length; i++) {
        var key = clusters[i].key;
        var _dist = dists[key][mins[key]];

        if (_dist < min) {
          minKey = key;
          min = _dist;
        }
      }

      if (opts.mode === 'threshold' && min >= opts.threshold || opts.mode === 'dendrogram' && clusters.length === 1) {
        return false;
      }

      var c1 = index[minKey];
      var c2 = index[mins[minKey]];
      var merged; // Merge two closest clusters

      if (opts.mode === 'dendrogram') {
        merged = {
          left: c1,
          right: c2,
          key: c1.key
        };
      } else {
        merged = {
          value: c1.value.concat(c2.value),
          key: c1.key
        };
      }

      clusters[c1.index] = merged;
      clusters.splice(c2.index, 1);
      index[c1.key] = merged; // Update distances with new merged cluster

      for (var _i = 0; _i < clusters.length; _i++) {
        var cur = clusters[_i];

        if (c1.key === cur.key) {
          dist = Infinity;
        } else if (opts.linkage === 'min') {
          dist = dists[c1.key][cur.key];

          if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
            dist = dists[c2.key][cur.key];
          }
        } else if (opts.linkage === 'max') {
          dist = dists[c1.key][cur.key];

          if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
            dist = dists[c2.key][cur.key];
          }
        } else if (opts.linkage === 'mean') {
          dist = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
        } else {
          if (opts.mode === 'dendrogram') dist = getDist(cur.value, c1.value);else dist = getDist(cur.value[0], c1.value[0]);
        }

        dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist; // distance matrix is symmetric
      } // Update cached mins


      for (var _i2 = 0; _i2 < clusters.length; _i2++) {
        var key1 = clusters[_i2].key;

        if (mins[key1] === c1.key || mins[key1] === c2.key) {
          var _min = key1;

          for (var j = 0; j < clusters.length; j++) {
            var key2 = clusters[j].key;

            if (dists[key1][key2] < dists[key1][_min]) {
              _min = key2;
            }
          }

          mins[key1] = _min;
        }

        clusters[_i2].index = _i2;
      } // Clean up meta data used for clustering


      c1.key = c2.key = c1.index = c2.index = null;
      return true;
    };

    var getAllChildren = function getAllChildren(root, arr, cy) {
      if (!root) return;

      if (root.value) {
        arr.push(root.value);
      } else {
        if (root.left) getAllChildren(root.left, arr);
        if (root.right) getAllChildren(root.right, arr);
      }
    };

    var buildDendrogram = function buildDendrogram(root, cy) {
      if (!root) return '';

      if (root.left && root.right) {
        var leftStr = buildDendrogram(root.left, cy);
        var rightStr = buildDendrogram(root.right, cy);
        var node = cy.add({
          group: 'nodes',
          data: {
            id: leftStr + ',' + rightStr
          }
        });
        cy.add({
          group: 'edges',
          data: {
            source: leftStr,
            target: node.id()
          }
        });
        cy.add({
          group: 'edges',
          data: {
            source: rightStr,
            target: node.id()
          }
        });
        return node.id();
      } else if (root.value) {
        return root.value.id();
      }
    };

    var buildClustersFromTree = function buildClustersFromTree(root, k, cy) {
      if (!root) return [];
      var left = [],
          right = [],
          leaves = [];

      if (k === 0) {
        // don't cut tree, simply return all nodes as 1 single cluster
        if (root.left) getAllChildren(root.left, left);
        if (root.right) getAllChildren(root.right, right);
        leaves = left.concat(right);
        return [cy.collection(leaves)];
      } else if (k === 1) {
        // cut at root
        if (root.value) {
          // leaf node
          return [cy.collection(root.value)];
        } else {
          if (root.left) getAllChildren(root.left, left);
          if (root.right) getAllChildren(root.right, right);
          return [cy.collection(left), cy.collection(right)];
        }
      } else {
        if (root.value) {
          return [cy.collection(root.value)];
        } else {
          if (root.left) left = buildClustersFromTree(root.left, k - 1, cy);
          if (root.right) right = buildClustersFromTree(root.right, k - 1, cy);
          return left.concat(right);
        }
      }
    };
    /* eslint-enable */


    var hierarchicalClustering = function hierarchicalClustering(options) {
      var cy = this.cy();
      var nodes = this.nodes(); // Set parameters of algorithm: linkage type, distance metric, etc.

      var opts = setOptions$2(options);
      var attrs = opts.attributes;

      var getDist = function getDist(n1, n2) {
        return clusteringDistance(opts.distance, attrs.length, function (i) {
          return attrs[i](n1);
        }, function (i) {
          return attrs[i](n2);
        }, n1, n2);
      }; // Begin hierarchical algorithm


      var clusters = [];
      var dists = []; // distances between each pair of clusters

      var mins = []; // closest cluster for each cluster

      var index = []; // hash of all clusters by key
      // In agglomerative (bottom-up) clustering, each node starts as its own cluster

      for (var n = 0; n < nodes.length; n++) {
        var cluster = {
          value: opts.mode === 'dendrogram' ? nodes[n] : [nodes[n]],
          key: n,
          index: n
        };
        clusters[n] = cluster;
        index[n] = cluster;
        dists[n] = [];
        mins[n] = 0;
      } // Calculate the distance between each pair of clusters


      for (var i = 0; i < clusters.length; i++) {
        for (var j = 0; j <= i; j++) {
          var dist = void 0;

          if (opts.mode === 'dendrogram') {
            // modes store cluster values differently
            dist = i === j ? Infinity : getDist(clusters[i].value, clusters[j].value);
          } else {
            dist = i === j ? Infinity : getDist(clusters[i].value[0], clusters[j].value[0]);
          }

          dists[i][j] = dist;
          dists[j][i] = dist;

          if (dist < dists[i][mins[i]]) {
            mins[i] = j; // Cache mins: closest cluster to cluster i is cluster j
          }
        }
      } // Find the closest pair of clusters and merge them into a single cluster.
      // Update distances between new cluster and each of the old clusters, and loop until threshold reached.


      var merged = mergeClosest(clusters, index, dists, mins, opts);

      while (merged) {
        merged = mergeClosest(clusters, index, dists, mins, opts);
      }

      var retClusters; // Dendrogram mode builds the hierarchy and adds intermediary nodes + edges
      // in addition to returning the clusters.

      if (opts.mode === 'dendrogram') {
        retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
        if (opts.addDendrogram) buildDendrogram(clusters[0], cy);
      } else {
        // Regular mode simply returns the clusters
        retClusters = new Array(clusters.length);
        clusters.forEach(function (cluster, i) {
          // Clean up meta data used for clustering
          cluster.key = cluster.index = null;
          retClusters[i] = cy.collection(cluster.value);
        });
      }

      return retClusters;
    };

    var hierarchicalClustering$1 = {
      hierarchicalClustering: hierarchicalClustering,
      hca: hierarchicalClustering
    };

    // Implemented by Zoe Xi @zoexi for GSOC 2016
    var defaults$7 = defaults$1({
      distance: 'euclidean',
      // distance metric to compare attributes between two nodes
      preference: 'median',
      // suitability of a data point to serve as an exemplar
      damping: 0.8,
      // damping factor between [0.5, 1)
      maxIterations: 1000,
      // max number of iterations to run
      minIterations: 100,
      // min number of iterations to run in order for clustering to stop
      attributes: [// functions to quantify the similarity between any two points
        // e.g. node => node.data('weight')
      ]
    });

    var setOptions$3 = function setOptions(options) {
      var dmp = options.damping;
      var pref = options.preference;

      if (!(0.5 <= dmp && dmp < 1)) {
        error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
      }

      var validPrefs = ['median', 'mean', 'min', 'max'];

      if (!(validPrefs.some(function (v) {
        return v === pref;
      }) || number(pref))) {
        error("Preference must be one of [".concat(validPrefs.map(function (p) {
          return "'".concat(p, "'");
        }).join(', '), "] or a number.  Got: ").concat(pref));
      }

      return defaults$7(options);
    };
    /* eslint-enable */


    var getSimilarity$1 = function getSimilarity(type, n1, n2, attributes) {
      var attr = function attr(n, i) {
        return attributes[i](n);
      }; // nb negative because similarity should have an inverse relationship to distance


      return -clusteringDistance(type, attributes.length, function (i) {
        return attr(n1, i);
      }, function (i) {
        return attr(n2, i);
      }, n1, n2);
    };

    var getPreference = function getPreference(S, preference) {
      // larger preference = greater # of clusters
      var p = null;

      if (preference === 'median') {
        p = median(S);
      } else if (preference === 'mean') {
        p = mean(S);
      } else if (preference === 'min') {
        p = min$1(S);
      } else if (preference === 'max') {
        p = max$1(S);
      } else {
        // Custom preference number, as set by user
        p = preference;
      }

      return p;
    };

    var findExemplars = function findExemplars(n, R, A) {
      var indices = [];

      for (var i = 0; i < n; i++) {
        if (R[i * n + i] + A[i * n + i] > 0) {
          indices.push(i);
        }
      }

      return indices;
    };

    var assignClusters = function assignClusters(n, S, exemplars) {
      var clusters = [];

      for (var i = 0; i < n; i++) {
        var index = -1;
        var max = -Infinity;

        for (var ei = 0; ei < exemplars.length; ei++) {
          var e = exemplars[ei];

          if (S[i * n + e] > max) {
            index = e;
            max = S[i * n + e];
          }
        }

        if (index > 0) {
          clusters.push(index);
        }
      }

      for (var _ei = 0; _ei < exemplars.length; _ei++) {
        clusters[exemplars[_ei]] = exemplars[_ei];
      }

      return clusters;
    };

    var assign$2 = function assign(n, S, exemplars) {
      var clusters = assignClusters(n, S, exemplars);

      for (var ei = 0; ei < exemplars.length; ei++) {
        var ii = [];

        for (var c = 0; c < clusters.length; c++) {
          if (clusters[c] === exemplars[ei]) {
            ii.push(c);
          }
        }

        var maxI = -1;
        var maxSum = -Infinity;

        for (var i = 0; i < ii.length; i++) {
          var sum = 0;

          for (var j = 0; j < ii.length; j++) {
            sum += S[ii[j] * n + ii[i]];
          }

          if (sum > maxSum) {
            maxI = i;
            maxSum = sum;
          }
        }

        exemplars[ei] = ii[maxI];
      }

      clusters = assignClusters(n, S, exemplars);
      return clusters;
    };

    var affinityPropagation = function affinityPropagation(options) {
      var cy = this.cy();
      var nodes = this.nodes();
      var opts = setOptions$3(options); // Map each node to its position in node array

      var id2position = {};

      for (var i = 0; i < nodes.length; i++) {
        id2position[nodes[i].id()] = i;
      } // Begin affinity propagation algorithm


      var n; // number of data points

      var n2; // size of matrices

      var S; // similarity matrix (1D array)

      var p; // preference/suitability of a data point to serve as an exemplar

      var R; // responsibility matrix (1D array)

      var A; // availability matrix (1D array)

      n = nodes.length;
      n2 = n * n; // Initialize and build S similarity matrix

      S = new Array(n2);

      for (var _i = 0; _i < n2; _i++) {
        S[_i] = -Infinity; // for cases where two data points shouldn't be linked together
      }

      for (var _i2 = 0; _i2 < n; _i2++) {
        for (var j = 0; j < n; j++) {
          if (_i2 !== j) {
            S[_i2 * n + j] = getSimilarity$1(opts.distance, nodes[_i2], nodes[j], opts.attributes);
          }
        }
      } // Place preferences on the diagonal of S


      p = getPreference(S, opts.preference);

      for (var _i3 = 0; _i3 < n; _i3++) {
        S[_i3 * n + _i3] = p;
      } // Initialize R responsibility matrix


      R = new Array(n2);

      for (var _i4 = 0; _i4 < n2; _i4++) {
        R[_i4] = 0.0;
      } // Initialize A availability matrix


      A = new Array(n2);

      for (var _i5 = 0; _i5 < n2; _i5++) {
        A[_i5] = 0.0;
      }

      var old = new Array(n);
      var Rp = new Array(n);
      var se = new Array(n);

      for (var _i6 = 0; _i6 < n; _i6++) {
        old[_i6] = 0.0;
        Rp[_i6] = 0.0;
        se[_i6] = 0;
      }

      var e = new Array(n * opts.minIterations);

      for (var _i7 = 0; _i7 < e.length; _i7++) {
        e[_i7] = 0;
      }

      var iter;

      for (iter = 0; iter < opts.maxIterations; iter++) {
        // main algorithmic loop
        // Update R responsibility matrix
        for (var _i8 = 0; _i8 < n; _i8++) {
          var max = -Infinity,
              max2 = -Infinity,
              maxI = -1,
              AS = 0.0;

          for (var _j = 0; _j < n; _j++) {
            old[_j] = R[_i8 * n + _j];
            AS = A[_i8 * n + _j] + S[_i8 * n + _j];

            if (AS >= max) {
              max2 = max;
              max = AS;
              maxI = _j;
            } else if (AS > max2) {
              max2 = AS;
            }
          }

          for (var _j2 = 0; _j2 < n; _j2++) {
            R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max) + opts.damping * old[_j2];
          }

          R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max2) + opts.damping * old[maxI];
        } // Update A availability matrix


        for (var _i9 = 0; _i9 < n; _i9++) {
          var sum = 0;

          for (var _j3 = 0; _j3 < n; _j3++) {
            old[_j3] = A[_j3 * n + _i9];
            Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);
            sum += Rp[_j3];
          }

          sum -= Rp[_i9];
          Rp[_i9] = R[_i9 * n + _i9];
          sum += Rp[_i9];

          for (var _j4 = 0; _j4 < n; _j4++) {
            A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
          }

          A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
        } // Check for convergence


        var K = 0;

        for (var _i10 = 0; _i10 < n; _i10++) {
          var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;
          e[iter % opts.minIterations * n + _i10] = E;
          K += E;
        }

        if (K > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
          var _sum = 0;

          for (var _i11 = 0; _i11 < n; _i11++) {
            se[_i11] = 0;

            for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
              se[_i11] += e[_j5 * n + _i11];
            }

            if (se[_i11] === 0 || se[_i11] === opts.minIterations) {
              _sum++;
            }
          }

          if (_sum === n) {
            // then we have convergence
            break;
          }
        }
      } // Identify exemplars (cluster centers)


      var exemplarsIndices = findExemplars(n, R, A); // Assign nodes to clusters

      var clusterIndices = assign$2(n, S, exemplarsIndices);
      var clusters = {};

      for (var c = 0; c < exemplarsIndices.length; c++) {
        clusters[exemplarsIndices[c]] = [];
      }

      for (var _i12 = 0; _i12 < nodes.length; _i12++) {
        var pos = id2position[nodes[_i12].id()];

        var clusterIndex = clusterIndices[pos];

        if (clusterIndex != null) {
          // the node may have not been assigned a cluster if no valid attributes were specified
          clusters[clusterIndex].push(nodes[_i12]);
        }
      }

      var retClusters = new Array(exemplarsIndices.length);

      for (var _c = 0; _c < exemplarsIndices.length; _c++) {
        retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);
      }

      return retClusters;
    };

    var affinityPropagation$1 = {
      affinityPropagation: affinityPropagation,
      ap: affinityPropagation
    };

    var elesfn$b = {};
    [elesfn, elesfn$1, elesfn$2, elesfn$3, elesfn$4, elesfn$5, elesfn$6, elesfn$7, elesfn$8, elesfn$9, elesfn$a, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1].forEach(function (props) {
      extend(elesfn$b, props);
    });

    /*!
    Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
    Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
    Licensed under The MIT License (http://opensource.org/licenses/MIT)
    */

    /*  promise states [Promises/A+ 2.1]  */
    var STATE_PENDING = 0;
    /*  [Promises/A+ 2.1.1]  */

    var STATE_FULFILLED = 1;
    /*  [Promises/A+ 2.1.2]  */

    var STATE_REJECTED = 2;
    /*  [Promises/A+ 2.1.3]  */

    /*  promise object constructor  */

    var api = function api(executor) {
      /*  optionally support non-constructor/plain-function call  */
      if (!(this instanceof api)) return new api(executor);
      /*  initialize object  */

      this.id = 'Thenable/1.0.7';
      this.state = STATE_PENDING;
      /*  initial state  */

      this.fulfillValue = undefined;
      /*  initial value  */

      /*  [Promises/A+ 1.3, 2.1.2.2]  */

      this.rejectReason = undefined;
      /*  initial reason */

      /*  [Promises/A+ 1.5, 2.1.3.2]  */

      this.onFulfilled = [];
      /*  initial handlers  */

      this.onRejected = [];
      /*  initial handlers  */

      /*  provide optional information-hiding proxy  */

      this.proxy = {
        then: this.then.bind(this)
      };
      /*  support optional executor function  */

      if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
    };
    /*  promise API methods  */


    api.prototype = {
      /*  promise resolving methods  */
      fulfill: function fulfill(value) {
        return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
      },
      reject: function reject(value) {
        return deliver(this, STATE_REJECTED, 'rejectReason', value);
      },

      /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
      then: function then(onFulfilled, onRejected) {
        var curr = this;
        var next = new api();
        /*  [Promises/A+ 2.2.7]  */

        curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill'));
        /*  [Promises/A+ 2.2.2/2.2.6]  */

        curr.onRejected.push(resolver(onRejected, next, 'reject'));
        /*  [Promises/A+ 2.2.3/2.2.6]  */

        execute(curr);
        return next.proxy;
        /*  [Promises/A+ 2.2.7, 3.3]  */
      }
    };
    /*  deliver an action  */

    var deliver = function deliver(curr, state, name, value) {
      if (curr.state === STATE_PENDING) {
        curr.state = state;
        /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */

        curr[name] = value;
        /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */

        execute(curr);
      }

      return curr;
    };
    /*  execute all handlers  */


    var execute = function execute(curr) {
      if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
    };
    /*  execute particular set of handlers  */


    var execute_handlers = function execute_handlers(curr, name, value) {
      /* global setImmediate: true */

      /* global setTimeout: true */

      /*  short-circuit processing  */
      if (curr[name].length === 0) return;
      /*  iterate over all handlers, exactly once  */

      var handlers = curr[name];
      curr[name] = [];
      /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */

      var func = function func() {
        for (var i = 0; i < handlers.length; i++) {
          handlers[i](value);
        }
        /*  [Promises/A+ 2.2.5]  */

      };
      /*  execute procedure asynchronously  */

      /*  [Promises/A+ 2.2.4, 3.1]  */


      if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
    };
    /*  generate a resolver function  */


    var resolver = function resolver(cb, next, method) {
      return function (value) {
        if (typeof cb !== 'function')
          /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
          next[method].call(next, value);
          /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
        else {
            var result;

            try {
              result = cb(value);
            }
            /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
            catch (e) {
              next.reject(e);
              /*  [Promises/A+ 2.2.7.2]  */

              return;
            }

            resolve(next, result);
            /*  [Promises/A+ 2.2.7.1]  */
          }
      };
    };
    /*  "Promise Resolution Procedure"  */

    /*  [Promises/A+ 2.3]  */


    var resolve = function resolve(promise, x) {
      /*  sanity check arguments  */

      /*  [Promises/A+ 2.3.1]  */
      if (promise === x || promise.proxy === x) {
        promise.reject(new TypeError('cannot resolve promise with itself'));
        return;
      }
      /*  surgically check for a "then" method
        (mainly to just call the "getter" of "then" only once)  */


      var then;

      if (_typeof(x) === 'object' && x !== null || typeof x === 'function') {
        try {
          then = x.then;
        }
        /*  [Promises/A+ 2.3.3.1, 3.5]  */
        catch (e) {
          promise.reject(e);
          /*  [Promises/A+ 2.3.3.2]  */

          return;
        }
      }
      /*  handle own Thenables    [Promises/A+ 2.3.2]
        and similar "thenables" [Promises/A+ 2.3.3]  */


      if (typeof then === 'function') {
        var resolved = false;

        try {
          /*  call retrieved "then" method */

          /*  [Promises/A+ 2.3.3.3]  */
          then.call(x,
          /*  resolvePromise  */

          /*  [Promises/A+ 2.3.3.3.1]  */
          function (y) {
            if (resolved) return;
            resolved = true;
            /*  [Promises/A+ 2.3.3.3.3]  */

            if (y === x)
              /*  [Promises/A+ 3.6]  */
              promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
          },
          /*  rejectPromise  */

          /*  [Promises/A+ 2.3.3.3.2]  */
          function (r) {
            if (resolved) return;
            resolved = true;
            /*  [Promises/A+ 2.3.3.3.3]  */

            promise.reject(r);
          });
        } catch (e) {
          if (!resolved)
            /*  [Promises/A+ 2.3.3.3.3]  */
            promise.reject(e);
          /*  [Promises/A+ 2.3.3.3.4]  */
        }

        return;
      }
      /*  handle other values  */


      promise.fulfill(x);
      /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
    }; // so we always have Promise.all()


    api.all = function (ps) {
      return new api(function (resolveAll, rejectAll) {
        var vals = new Array(ps.length);
        var doneCount = 0;

        var fulfill = function fulfill(i, val) {
          vals[i] = val;
          doneCount++;

          if (doneCount === ps.length) {
            resolveAll(vals);
          }
        };

        for (var i = 0; i < ps.length; i++) {
          (function (i) {
            var p = ps[i];
            var isPromise = p != null && p.then != null;

            if (isPromise) {
              p.then(function (val) {
                fulfill(i, val);
              }, function (err) {
                rejectAll(err);
              });
            } else {
              var val = p;
              fulfill(i, val);
            }
          })(i);
        }
      });
    };

    api.resolve = function (val) {
      return new api(function (resolve, reject) {
        resolve(val);
      });
    };

    api.reject = function (val) {
      return new api(function (resolve, reject) {
        reject(val);
      });
    };

    var Promise$1 = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

    var Animation = function Animation(target, opts, opts2) {
      var isCore = core(target);
      var isEle = !isCore;

      var _p = this._private = extend({
        duration: 1000
      }, opts, opts2);

      _p.target = target;
      _p.style = _p.style || _p.css;
      _p.started = false;
      _p.playing = false;
      _p.hooked = false;
      _p.applying = false;
      _p.progress = 0;
      _p.completes = [];
      _p.frames = [];

      if (_p.complete && fn(_p.complete)) {
        _p.completes.push(_p.complete);
      }

      if (isEle) {
        var pos = target.position();
        _p.startPosition = _p.startPosition || {
          x: pos.x,
          y: pos.y
        };
        _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
      }

      if (isCore) {
        var pan = target.pan();
        _p.startPan = {
          x: pan.x,
          y: pan.y
        };
        _p.startZoom = target.zoom();
      } // for future timeline/animations impl


      this.length = 1;
      this[0] = this;
    };

    var anifn = Animation.prototype;
    extend(anifn, {
      instanceString: function instanceString() {
        return 'animation';
      },
      hook: function hook() {
        var _p = this._private;

        if (!_p.hooked) {
          // add to target's animation queue
          var q;
          var tAni = _p.target._private.animation;

          if (_p.queue) {
            q = tAni.queue;
          } else {
            q = tAni.current;
          }

          q.push(this); // add to the animation loop pool

          if (elementOrCollection(_p.target)) {
            _p.target.cy().addToAnimationPool(_p.target);
          }

          _p.hooked = true;
        }

        return this;
      },
      play: function play() {
        var _p = this._private; // autorewind

        if (_p.progress === 1) {
          _p.progress = 0;
        }

        _p.playing = true;
        _p.started = false; // needs to be started by animation loop

        _p.stopped = false;
        this.hook(); // the animation loop will start the animation...

        return this;
      },
      playing: function playing() {
        return this._private.playing;
      },
      apply: function apply() {
        var _p = this._private;
        _p.applying = true;
        _p.started = false; // needs to be started by animation loop

        _p.stopped = false;
        this.hook(); // the animation loop will apply the animation at this progress

        return this;
      },
      applying: function applying() {
        return this._private.applying;
      },
      pause: function pause() {
        var _p = this._private;
        _p.playing = false;
        _p.started = false;
        return this;
      },
      stop: function stop() {
        var _p = this._private;
        _p.playing = false;
        _p.started = false;
        _p.stopped = true; // to be removed from animation queues

        return this;
      },
      rewind: function rewind() {
        return this.progress(0);
      },
      fastforward: function fastforward() {
        return this.progress(1);
      },
      time: function time(t) {
        var _p = this._private;

        if (t === undefined) {
          return _p.progress * _p.duration;
        } else {
          return this.progress(t / _p.duration);
        }
      },
      progress: function progress(p) {
        var _p = this._private;
        var wasPlaying = _p.playing;

        if (p === undefined) {
          return _p.progress;
        } else {
          if (wasPlaying) {
            this.pause();
          }

          _p.progress = p;
          _p.started = false;

          if (wasPlaying) {
            this.play();
          }
        }

        return this;
      },
      completed: function completed() {
        return this._private.progress === 1;
      },
      reverse: function reverse() {
        var _p = this._private;
        var wasPlaying = _p.playing;

        if (wasPlaying) {
          this.pause();
        }

        _p.progress = 1 - _p.progress;
        _p.started = false;

        var swap = function swap(a, b) {
          var _pa = _p[a];

          if (_pa == null) {
            return;
          }

          _p[a] = _p[b];
          _p[b] = _pa;
        };

        swap('zoom', 'startZoom');
        swap('pan', 'startPan');
        swap('position', 'startPosition'); // swap styles

        if (_p.style) {
          for (var i = 0; i < _p.style.length; i++) {
            var prop = _p.style[i];
            var name = prop.name;
            var startStyleProp = _p.startStyle[name];
            _p.startStyle[name] = prop;
            _p.style[i] = startStyleProp;
          }
        }

        if (wasPlaying) {
          this.play();
        }

        return this;
      },
      promise: function promise(type) {
        var _p = this._private;
        var arr;

        switch (type) {
          case 'frame':
            arr = _p.frames;
            break;

          default:
          case 'complete':
          case 'completed':
            arr = _p.completes;
        }

        return new Promise$1(function (resolve, reject) {
          arr.push(function () {
            resolve();
          });
        });
      }
    });
    anifn.complete = anifn.completed;
    anifn.run = anifn.play;
    anifn.running = anifn.playing;

    var define = {
      animated: function animated() {
        return function animatedImpl() {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return false;
          }

          var ele = all[0];

          if (ele) {
            return ele._private.animation.current.length > 0;
          }
        };
      },
      // animated
      clearQueue: function clearQueue() {
        return function clearQueueImpl() {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          for (var i = 0; i < all.length; i++) {
            var ele = all[i];
            ele._private.animation.queue = [];
          }

          return this;
        };
      },
      // clearQueue
      delay: function delay() {
        return function delayImpl(time, complete) {
          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          return this.animate({
            delay: time,
            duration: time,
            complete: complete
          });
        };
      },
      // delay
      delayAnimation: function delayAnimation() {
        return function delayAnimationImpl(time, complete) {
          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          return this.animation({
            delay: time,
            duration: time,
            complete: complete
          });
        };
      },
      // delay
      animation: function animation() {
        return function animationImpl(properties, params) {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;
          var isCore = !selfIsArrayLike;
          var isEles = !isCore;

          if (!cy.styleEnabled()) {
            return this;
          }

          var style = cy.style();
          properties = extend({}, properties, params);
          var propertiesEmpty = Object.keys(properties).length === 0;

          if (propertiesEmpty) {
            return new Animation(all[0], properties); // nothing to animate
          }

          if (properties.duration === undefined) {
            properties.duration = 400;
          }

          switch (properties.duration) {
            case 'slow':
              properties.duration = 600;
              break;

            case 'fast':
              properties.duration = 200;
              break;
          }

          if (isEles) {
            properties.style = style.getPropsList(properties.style || properties.css);
            properties.css = undefined;
          }

          if (isEles && properties.renderedPosition != null) {
            var rpos = properties.renderedPosition;
            var pan = cy.pan();
            var zoom = cy.zoom();
            properties.position = renderedToModelPosition(rpos, zoom, pan);
          } // override pan w/ panBy if set


          if (isCore && properties.panBy != null) {
            var panBy = properties.panBy;
            var cyPan = cy.pan();
            properties.pan = {
              x: cyPan.x + panBy.x,
              y: cyPan.y + panBy.y
            };
          } // override pan w/ center if set


          var center = properties.center || properties.centre;

          if (isCore && center != null) {
            var centerPan = cy.getCenterPan(center.eles, properties.zoom);

            if (centerPan != null) {
              properties.pan = centerPan;
            }
          } // override pan & zoom w/ fit if set


          if (isCore && properties.fit != null) {
            var fit = properties.fit;
            var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);

            if (fitVp != null) {
              properties.pan = fitVp.pan;
              properties.zoom = fitVp.zoom;
            }
          } // override zoom (& potentially pan) w/ zoom obj if set


          if (isCore && plainObject(properties.zoom)) {
            var vp = cy.getZoomedViewport(properties.zoom);

            if (vp != null) {
              if (vp.zoomed) {
                properties.zoom = vp.zoom;
              }

              if (vp.panned) {
                properties.pan = vp.pan;
              }
            }
          }

          return new Animation(all[0], properties);
        };
      },
      // animate
      animate: function animate() {
        return function animateImpl(properties, params) {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          if (params) {
            properties = extend({}, properties, params);
          } // manually hook and run the animation


          for (var i = 0; i < all.length; i++) {
            var ele = all[i];
            var queue = ele.animated() && (properties.queue === undefined || properties.queue);
            var ani = ele.animation(properties, queue ? {
              queue: true
            } : undefined);
            ani.play();
          }

          return this; // chaining
        };
      },
      // animate
      stop: function stop() {
        return function stopImpl(clearQueue, jumpToEnd) {
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var cy = this._private.cy || this;

          if (!cy.styleEnabled()) {
            return this;
          }

          for (var i = 0; i < all.length; i++) {
            var ele = all[i];
            var _p = ele._private;
            var anis = _p.animation.current;

            for (var j = 0; j < anis.length; j++) {
              var ani = anis[j];
              var ani_p = ani._private;

              if (jumpToEnd) {
                // next iteration of the animation loop, the animation
                // will go straight to the end and be removed
                ani_p.duration = 0;
              }
            } // clear the queue of future animations


            if (clearQueue) {
              _p.animation.queue = [];
            }

            if (!jumpToEnd) {
              _p.animation.current = [];
            }
          } // we have to notify (the animation loop doesn't do it for us on `stop`)


          cy.notify('draw');
          return this;
        };
      } // stop

    }; // define

    var define$1 = {
      // access data field
      data: function data(params) {
        var defaults = {
          field: 'data',
          bindingEvent: 'data',
          allowBinding: false,
          allowSetting: false,
          allowGetting: false,
          settingEvent: 'data',
          settingTriggersEvent: false,
          triggerFnName: 'trigger',
          immutableKeys: {},
          // key => true if immutable
          updateStyle: false,
          beforeGet: function beforeGet(self) {},
          beforeSet: function beforeSet(self, obj) {},
          onSet: function onSet(self) {},
          canSet: function canSet(self) {
            return true;
          }
        };
        params = extend({}, defaults, params);
        return function dataImpl(name, value) {
          var p = params;
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

          var single = selfIsArrayLike ? self[0] : self; // .data('foo', ...)

          if (string(name)) {
            // set or get property
            // .data('foo')
            if (p.allowGetting && value === undefined) {
              // get
              var ret;

              if (single) {
                p.beforeGet(single);
                ret = single._private[p.field][name];
              }

              return ret; // .data('foo', 'bar')
            } else if (p.allowSetting && value !== undefined) {
              // set
              var valid = !p.immutableKeys[name];

              if (valid) {
                var change = _defineProperty({}, name, value);

                p.beforeSet(self, change);

                for (var i = 0, l = all.length; i < l; i++) {
                  var ele = all[i];

                  if (p.canSet(ele)) {
                    ele._private[p.field][name] = value;
                  }
                } // update mappers if asked


                if (p.updateStyle) {
                  self.updateStyle();
                } // call onSet callback


                p.onSet(self);

                if (p.settingTriggersEvent) {
                  self[p.triggerFnName](p.settingEvent);
                }
              }
            } // .data({ 'foo': 'bar' })

          } else if (p.allowSetting && plainObject(name)) {
            // extend
            var obj = name;
            var k, v;
            var keys = Object.keys(obj);
            p.beforeSet(self, obj);

            for (var _i = 0; _i < keys.length; _i++) {
              k = keys[_i];
              v = obj[k];

              var _valid = !p.immutableKeys[k];

              if (_valid) {
                for (var j = 0; j < all.length; j++) {
                  var _ele = all[j];

                  if (p.canSet(_ele)) {
                    _ele._private[p.field][k] = v;
                  }
                }
              }
            } // update mappers if asked


            if (p.updateStyle) {
              self.updateStyle();
            } // call onSet callback


            p.onSet(self);

            if (p.settingTriggersEvent) {
              self[p.triggerFnName](p.settingEvent);
            } // .data(function(){ ... })

          } else if (p.allowBinding && fn(name)) {
            // bind to event
            var fn$1 = name;
            self.on(p.bindingEvent, fn$1); // .data()
          } else if (p.allowGetting && name === undefined) {
            // get whole object
            var _ret;

            if (single) {
              p.beforeGet(single);
              _ret = single._private[p.field];
            }

            return _ret;
          }

          return self; // maintain chainability
        }; // function
      },
      // data
      // remove data field
      removeData: function removeData(params) {
        var defaults = {
          field: 'data',
          event: 'data',
          triggerFnName: 'trigger',
          triggerEvent: false,
          immutableKeys: {} // key => true if immutable

        };
        params = extend({}, defaults, params);
        return function removeDataImpl(names) {
          var p = params;
          var self = this;
          var selfIsArrayLike = self.length !== undefined;
          var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
          // .removeData('foo bar')

          if (string(names)) {
            // then get the list of keys, and delete them
            var keys = names.split(/\s+/);
            var l = keys.length;

            for (var i = 0; i < l; i++) {
              // delete each non-empty key
              var key = keys[i];

              if (emptyString(key)) {
                continue;
              }

              var valid = !p.immutableKeys[key]; // not valid if immutable

              if (valid) {
                for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
                  all[i_a]._private[p.field][key] = undefined;
                }
              }
            }

            if (p.triggerEvent) {
              self[p.triggerFnName](p.event);
            } // .removeData()

          } else if (names === undefined) {
            // then delete all keys
            for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
              var _privateFields = all[_i_a]._private[p.field];

              var _keys = Object.keys(_privateFields);

              for (var _i2 = 0; _i2 < _keys.length; _i2++) {
                var _key = _keys[_i2];
                var validKeyToDelete = !p.immutableKeys[_key];

                if (validKeyToDelete) {
                  _privateFields[_key] = undefined;
                }
              }
            }

            if (p.triggerEvent) {
              self[p.triggerFnName](p.event);
            }
          }

          return self; // maintain chaining
        }; // function
      } // removeData

    }; // define

    var define$2 = {
      eventAliasesOn: function eventAliasesOn(proto) {
        var p = proto;
        p.addListener = p.listen = p.bind = p.on;
        p.unlisten = p.unbind = p.off = p.removeListener;
        p.trigger = p.emit; // this is just a wrapper alias of .on()

        p.pon = p.promiseOn = function (events, selector) {
          var self = this;
          var args = Array.prototype.slice.call(arguments, 0);
          return new Promise$1(function (resolve, reject) {
            var callback = function callback(e) {
              self.off.apply(self, offArgs);
              resolve(e);
            };

            var onArgs = args.concat([callback]);
            var offArgs = onArgs.concat([]);
            self.on.apply(self, onArgs);
          });
        };
      }
    }; // define

    // use this module to cherry pick functions into your prototype
    var define$3 = {};
    [define, define$1, define$2].forEach(function (m) {
      extend(define$3, m);
    });

    var elesfn$c = {
      animate: define$3.animate(),
      animation: define$3.animation(),
      animated: define$3.animated(),
      clearQueue: define$3.clearQueue(),
      delay: define$3.delay(),
      delayAnimation: define$3.delayAnimation(),
      stop: define$3.stop()
    };

    var elesfn$d = {
      classes: function classes(_classes) {
        var self = this;

        if (_classes === undefined) {
          var ret = [];

          self[0]._private.classes.forEach(function (cls) {
            return ret.push(cls);
          });

          return ret;
        } else if (!array(_classes)) {
          // extract classes from string
          _classes = (_classes || '').match(/\S+/g) || [];
        }

        var changed = [];
        var classesSet = new Set$1(_classes); // check and update each ele

        for (var j = 0; j < self.length; j++) {
          var ele = self[j];
          var _p = ele._private;
          var eleClasses = _p.classes;
          var changedEle = false; // check if ele has all of the passed classes

          for (var i = 0; i < _classes.length; i++) {
            var cls = _classes[i];
            var eleHasClass = eleClasses.has(cls);

            if (!eleHasClass) {
              changedEle = true;
              break;
            }
          } // check if ele has classes outside of those passed


          if (!changedEle) {
            changedEle = eleClasses.size !== _classes.length;
          }

          if (changedEle) {
            _p.classes = classesSet;
            changed.push(ele);
          }
        } // trigger update style on those eles that had class changes


        if (changed.length > 0) {
          this.spawn(changed).updateStyle().emit('class');
        }

        return self;
      },
      addClass: function addClass(classes) {
        return this.toggleClass(classes, true);
      },
      hasClass: function hasClass(className) {
        var ele = this[0];
        return ele != null && ele._private.classes.has(className);
      },
      toggleClass: function toggleClass(classes, toggle) {
        if (!array(classes)) {
          // extract classes from string
          classes = classes.match(/\S+/g) || [];
        }

        var self = this;
        var toggleUndefd = toggle === undefined;
        var changed = []; // eles who had classes changed

        for (var i = 0, il = self.length; i < il; i++) {
          var ele = self[i];
          var eleClasses = ele._private.classes;
          var changedEle = false;

          for (var j = 0; j < classes.length; j++) {
            var cls = classes[j];
            var hasClass = eleClasses.has(cls);
            var changedNow = false;

            if (toggle || toggleUndefd && !hasClass) {
              eleClasses.add(cls);
              changedNow = true;
            } else if (!toggle || toggleUndefd && hasClass) {
              eleClasses.delete(cls);
              changedNow = true;
            }

            if (!changedEle && changedNow) {
              changed.push(ele);
              changedEle = true;
            }
          } // for j classes

        } // for i eles
        // trigger update style on those eles that had class changes


        if (changed.length > 0) {
          this.spawn(changed).updateStyle().emit('class');
        }

        return self;
      },
      removeClass: function removeClass(classes) {
        return this.toggleClass(classes, false);
      },
      flashClass: function flashClass(classes, duration) {
        var self = this;

        if (duration == null) {
          duration = 250;
        } else if (duration === 0) {
          return self; // nothing to do really
        }

        self.addClass(classes);
        setTimeout(function () {
          self.removeClass(classes);
        }, duration);
        return self;
      }
    };
    elesfn$d.className = elesfn$d.classNames = elesfn$d.classes;

    var tokens = {
      metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]',
      // chars we need to escape in let names, etc
      comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=',
      // binary comparison op (used in data selectors)
      boolOp: '\\?|\\!|\\^',
      // boolean (unary) operators (used in data selectors)
      string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'",
      // string literals (used in data selectors) -- doublequotes | singlequotes
      number: number$1,
      // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
      meta: 'degree|indegree|outdegree',
      // allowed metadata fields (i.e. allowed functions to use from Collection)
      separator: '\\s*,\\s*',
      // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
      descendant: '\\s+',
      child: '\\s+>\\s+',
      subject: '\\$',
      group: 'node|edge|\\*',
      directedEdge: '\\s+->\\s+',
      undirectedEdge: '\\s+<->\\s+'
    };
    tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name

    tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number

    tokens.className = tokens.variable; // a class name (follows variable conventions)

    tokens.id = tokens.variable; // an element id (follows variable conventions)

    (function () {
      var ops, op, i; // add @ variants to comparatorOp

      ops = tokens.comparatorOp.split('|');

      for (i = 0; i < ops.length; i++) {
        op = ops[i];
        tokens.comparatorOp += '|@' + op;
      } // add ! variants to comparatorOp


      ops = tokens.comparatorOp.split('|');

      for (i = 0; i < ops.length; i++) {
        op = ops[i];

        if (op.indexOf('!') >= 0) {
          continue;
        } // skip ops that explicitly contain !


        if (op === '=') {
          continue;
        } // skip = b/c != is explicitly defined


        tokens.comparatorOp += '|\\!' + op;
      }
    })();

    /**
     * Make a new query object
     *
     * @prop type {Type} The type enum (int) of the query
     * @prop checks List of checks to make against an ele to test for a match
     */
    var newQuery = function newQuery() {
      return {
        checks: []
      };
    };

    /**
     * A check type enum-like object.  Uses integer values for fast match() lookup.
     * The ordering does not matter as long as the ints are unique.
     */
    var Type = {
      /** E.g. node */
      GROUP: 0,

      /** A collection of elements */
      COLLECTION: 1,

      /** A filter(ele) function */
      FILTER: 2,

      /** E.g. [foo > 1] */
      DATA_COMPARE: 3,

      /** E.g. [foo] */
      DATA_EXIST: 4,

      /** E.g. [?foo] */
      DATA_BOOL: 5,

      /** E.g. [[degree > 2]] */
      META_COMPARE: 6,

      /** E.g. :selected */
      STATE: 7,

      /** E.g. #foo */
      ID: 8,

      /** E.g. .foo */
      CLASS: 9,

      /** E.g. #foo <-> #bar */
      UNDIRECTED_EDGE: 10,

      /** E.g. #foo -> #bar */
      DIRECTED_EDGE: 11,

      /** E.g. $#foo -> #bar */
      NODE_SOURCE: 12,

      /** E.g. #foo -> $#bar */
      NODE_TARGET: 13,

      /** E.g. $#foo <-> #bar */
      NODE_NEIGHBOR: 14,

      /** E.g. #foo > #bar */
      CHILD: 15,

      /** E.g. #foo #bar */
      DESCENDANT: 16,

      /** E.g. $#foo > #bar */
      PARENT: 17,

      /** E.g. $#foo #bar */
      ANCESTOR: 18,

      /** E.g. #foo > $bar > #baz */
      COMPOUND_SPLIT: 19,

      /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
      TRUE: 20
    };

    var stateSelectors = [{
      selector: ':selected',
      matches: function matches(ele) {
        return ele.selected();
      }
    }, {
      selector: ':unselected',
      matches: function matches(ele) {
        return !ele.selected();
      }
    }, {
      selector: ':selectable',
      matches: function matches(ele) {
        return ele.selectable();
      }
    }, {
      selector: ':unselectable',
      matches: function matches(ele) {
        return !ele.selectable();
      }
    }, {
      selector: ':locked',
      matches: function matches(ele) {
        return ele.locked();
      }
    }, {
      selector: ':unlocked',
      matches: function matches(ele) {
        return !ele.locked();
      }
    }, {
      selector: ':visible',
      matches: function matches(ele) {
        return ele.visible();
      }
    }, {
      selector: ':hidden',
      matches: function matches(ele) {
        return !ele.visible();
      }
    }, {
      selector: ':transparent',
      matches: function matches(ele) {
        return ele.transparent();
      }
    }, {
      selector: ':grabbed',
      matches: function matches(ele) {
        return ele.grabbed();
      }
    }, {
      selector: ':free',
      matches: function matches(ele) {
        return !ele.grabbed();
      }
    }, {
      selector: ':removed',
      matches: function matches(ele) {
        return ele.removed();
      }
    }, {
      selector: ':inside',
      matches: function matches(ele) {
        return !ele.removed();
      }
    }, {
      selector: ':grabbable',
      matches: function matches(ele) {
        return ele.grabbable();
      }
    }, {
      selector: ':ungrabbable',
      matches: function matches(ele) {
        return !ele.grabbable();
      }
    }, {
      selector: ':animated',
      matches: function matches(ele) {
        return ele.animated();
      }
    }, {
      selector: ':unanimated',
      matches: function matches(ele) {
        return !ele.animated();
      }
    }, {
      selector: ':parent',
      matches: function matches(ele) {
        return ele.isParent();
      }
    }, {
      selector: ':childless',
      matches: function matches(ele) {
        return ele.isChildless();
      }
    }, {
      selector: ':child',
      matches: function matches(ele) {
        return ele.isChild();
      }
    }, {
      selector: ':orphan',
      matches: function matches(ele) {
        return ele.isOrphan();
      }
    }, {
      selector: ':nonorphan',
      matches: function matches(ele) {
        return ele.isChild();
      }
    }, {
      selector: ':compound',
      matches: function matches(ele) {
        if (ele.isNode()) {
          return ele.isParent();
        } else {
          return ele.source().isParent() || ele.target().isParent();
        }
      }
    }, {
      selector: ':loop',
      matches: function matches(ele) {
        return ele.isLoop();
      }
    }, {
      selector: ':simple',
      matches: function matches(ele) {
        return ele.isSimple();
      }
    }, {
      selector: ':active',
      matches: function matches(ele) {
        return ele.active();
      }
    }, {
      selector: ':inactive',
      matches: function matches(ele) {
        return !ele.active();
      }
    }, {
      selector: ':backgrounding',
      matches: function matches(ele) {
        return ele.backgrounding();
      }
    }, {
      selector: ':nonbackgrounding',
      matches: function matches(ele) {
        return !ele.backgrounding();
      }
    }].sort(function (a, b) {
      // n.b. selectors that are starting substrings of others must have the longer ones first
      return descending(a.selector, b.selector);
    });

    var lookup = function () {
      var selToFn = {};
      var s;

      for (var i = 0; i < stateSelectors.length; i++) {
        s = stateSelectors[i];
        selToFn[s.selector] = s.matches;
      }

      return selToFn;
    }();

    var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
      return lookup[sel](ele);
    };
    var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
      return s.selector;
    }).join('|') + ')';

    // so that values get compared properly in Selector.filter()

    var cleanMetaChars = function cleanMetaChars(str) {
      return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
        return $1;
      });
    };

    var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
      selector[selector.length - 1] = replacementQuery;
    }; // NOTE: add new expression syntax here to have it recognised by the parser;
    // - a query contains all adjacent (i.e. no separator in between) expressions;
    // - the current query is stored in selector[i]
    // - you need to check the query objects in match() for it actually filter properly, but that's pretty straight forward


    var exprs = [{
      name: 'group',
      // just used for identifying when debugging
      query: true,
      regex: '(' + tokens.group + ')',
      populate: function populate(selector, query, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            group = _ref2[0];

        query.checks.push({
          type: Type.GROUP,
          value: group === '*' ? group : group + 's'
        });
      }
    }, {
      name: 'state',
      query: true,
      regex: stateSelectorRegex,
      populate: function populate(selector, query, _ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
            state = _ref4[0];

        query.checks.push({
          type: Type.STATE,
          value: state
        });
      }
    }, {
      name: 'id',
      query: true,
      regex: '\\#(' + tokens.id + ')',
      populate: function populate(selector, query, _ref5) {
        var _ref6 = _slicedToArray(_ref5, 1),
            id = _ref6[0];

        query.checks.push({
          type: Type.ID,
          value: cleanMetaChars(id)
        });
      }
    }, {
      name: 'className',
      query: true,
      regex: '\\.(' + tokens.className + ')',
      populate: function populate(selector, query, _ref7) {
        var _ref8 = _slicedToArray(_ref7, 1),
            className = _ref8[0];

        query.checks.push({
          type: Type.CLASS,
          value: cleanMetaChars(className)
        });
      }
    }, {
      name: 'dataExists',
      query: true,
      regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
      populate: function populate(selector, query, _ref9) {
        var _ref10 = _slicedToArray(_ref9, 1),
            variable = _ref10[0];

        query.checks.push({
          type: Type.DATA_EXIST,
          field: cleanMetaChars(variable)
        });
      }
    }, {
      name: 'dataCompare',
      query: true,
      regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
      populate: function populate(selector, query, _ref11) {
        var _ref12 = _slicedToArray(_ref11, 3),
            variable = _ref12[0],
            comparatorOp = _ref12[1],
            value = _ref12[2];

        var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

        if (valueIsString) {
          value = value.substring(1, value.length - 1);
        } else {
          value = parseFloat(value);
        }

        query.checks.push({
          type: Type.DATA_COMPARE,
          field: cleanMetaChars(variable),
          operator: comparatorOp,
          value: value
        });
      }
    }, {
      name: 'dataBool',
      query: true,
      regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
      populate: function populate(selector, query, _ref13) {
        var _ref14 = _slicedToArray(_ref13, 2),
            boolOp = _ref14[0],
            variable = _ref14[1];

        query.checks.push({
          type: Type.DATA_BOOL,
          field: cleanMetaChars(variable),
          operator: boolOp
        });
      }
    }, {
      name: 'metaCompare',
      query: true,
      regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
      populate: function populate(selector, query, _ref15) {
        var _ref16 = _slicedToArray(_ref15, 3),
            meta = _ref16[0],
            comparatorOp = _ref16[1],
            number = _ref16[2];

        query.checks.push({
          type: Type.META_COMPARE,
          field: cleanMetaChars(meta),
          operator: comparatorOp,
          value: parseFloat(number)
        });
      }
    }, {
      name: 'nextQuery',
      separator: true,
      regex: tokens.separator,
      populate: function populate(selector, query) {
        var currentSubject = selector.currentSubject;
        var edgeCount = selector.edgeCount;
        var compoundCount = selector.compoundCount;
        var lastQ = selector[selector.length - 1];

        if (currentSubject != null) {
          lastQ.subject = currentSubject;
          selector.currentSubject = null;
        }

        lastQ.edgeCount = edgeCount;
        lastQ.compoundCount = compoundCount;
        selector.edgeCount = 0;
        selector.compoundCount = 0; // go on to next query

        var nextQuery = selector[selector.length++] = newQuery();
        return nextQuery; // this is the new query to be filled by the following exprs
      }
    }, {
      name: 'directedEdge',
      separator: true,
      regex: tokens.directedEdge,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // undirected edge
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();
          edgeQuery.checks.push({
            type: Type.DIRECTED_EDGE,
            source: source,
            target: target
          }); // the query in the selector should be the edge rather than the source

          replaceLastQuery(selector, query, edgeQuery);
          selector.edgeCount++; // we're now populating the target query with expressions that follow

          return target;
        } else {
          // source/target
          var srcTgtQ = newQuery();
          var _source = query;

          var _target = newQuery();

          srcTgtQ.checks.push({
            type: Type.NODE_SOURCE,
            source: _source,
            target: _target
          }); // the query in the selector should be the neighbourhood rather than the node

          replaceLastQuery(selector, query, srcTgtQ);
          selector.edgeCount++;
          return _target; // now populating the target with the following expressions
        }
      }
    }, {
      name: 'undirectedEdge',
      separator: true,
      regex: tokens.undirectedEdge,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // undirected edge
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();
          edgeQuery.checks.push({
            type: Type.UNDIRECTED_EDGE,
            nodes: [source, target]
          }); // the query in the selector should be the edge rather than the source

          replaceLastQuery(selector, query, edgeQuery);
          selector.edgeCount++; // we're now populating the target query with expressions that follow

          return target;
        } else {
          // neighbourhood
          var nhoodQ = newQuery();
          var node = query;
          var neighbor = newQuery();
          nhoodQ.checks.push({
            type: Type.NODE_NEIGHBOR,
            node: node,
            neighbor: neighbor
          }); // the query in the selector should be the neighbourhood rather than the node

          replaceLastQuery(selector, query, nhoodQ);
          return neighbor; // now populating the neighbor with following expressions
        }
      }
    }, {
      name: 'child',
      separator: true,
      regex: tokens.child,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // default: child query
          var parentChildQuery = newQuery();
          var child = newQuery();
          var parent = selector[selector.length - 1];
          parentChildQuery.checks.push({
            type: Type.CHILD,
            parent: parent,
            child: child
          }); // the query in the selector should be the '>' itself

          replaceLastQuery(selector, query, parentChildQuery);
          selector.compoundCount++; // we're now populating the child query with expressions that follow

          return child;
        } else if (selector.currentSubject === query) {
          // compound split query
          var compound = newQuery();
          var left = selector[selector.length - 1];
          var right = newQuery();
          var subject = newQuery();

          var _child = newQuery();

          var _parent = newQuery(); // set up the root compound q


          compound.checks.push({
            type: Type.COMPOUND_SPLIT,
            left: left,
            right: right,
            subject: subject
          }); // populate the subject and replace the q at the old spot (within left) with TRUE

          subject.checks = query.checks; // take the checks from the left

          query.checks = [{
            type: Type.TRUE
          }]; // checks under left refs the subject implicitly
          // set up the right q

          _parent.checks.push({
            type: Type.TRUE
          }); // parent implicitly refs the subject


          right.checks.push({
            type: Type.PARENT,
            // type is swapped on right side queries
            parent: _parent,
            child: _child // empty for now

          });
          replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

          selector.currentSubject = subject;
          selector.compoundCount++;
          return _child; // now populating the right side's child
        } else {
          // parent query
          // info for parent query
          var _parent2 = newQuery();

          var _child2 = newQuery();

          var pcQChecks = [{
            type: Type.PARENT,
            parent: _parent2,
            child: _child2
          }]; // the parent-child query takes the place of the query previously being populated

          _parent2.checks = query.checks; // the previous query contains the checks for the parent

          query.checks = pcQChecks; // pc query takes over

          selector.compoundCount++;
          return _child2; // we're now populating the child
        }
      }
    }, {
      name: 'descendant',
      separator: true,
      regex: tokens.descendant,
      populate: function populate(selector, query) {
        if (selector.currentSubject == null) {
          // default: descendant query
          var ancChQuery = newQuery();
          var descendant = newQuery();
          var ancestor = selector[selector.length - 1];
          ancChQuery.checks.push({
            type: Type.DESCENDANT,
            ancestor: ancestor,
            descendant: descendant
          }); // the query in the selector should be the '>' itself

          replaceLastQuery(selector, query, ancChQuery);
          selector.compoundCount++; // we're now populating the descendant query with expressions that follow

          return descendant;
        } else if (selector.currentSubject === query) {
          // compound split query
          var compound = newQuery();
          var left = selector[selector.length - 1];
          var right = newQuery();
          var subject = newQuery();

          var _descendant = newQuery();

          var _ancestor = newQuery(); // set up the root compound q


          compound.checks.push({
            type: Type.COMPOUND_SPLIT,
            left: left,
            right: right,
            subject: subject
          }); // populate the subject and replace the q at the old spot (within left) with TRUE

          subject.checks = query.checks; // take the checks from the left

          query.checks = [{
            type: Type.TRUE
          }]; // checks under left refs the subject implicitly
          // set up the right q

          _ancestor.checks.push({
            type: Type.TRUE
          }); // ancestor implicitly refs the subject


          right.checks.push({
            type: Type.ANCESTOR,
            // type is swapped on right side queries
            ancestor: _ancestor,
            descendant: _descendant // empty for now

          });
          replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

          selector.currentSubject = subject;
          selector.compoundCount++;
          return _descendant; // now populating the right side's descendant
        } else {
          // ancestor query
          // info for parent query
          var _ancestor2 = newQuery();

          var _descendant2 = newQuery();

          var adQChecks = [{
            type: Type.ANCESTOR,
            ancestor: _ancestor2,
            descendant: _descendant2
          }]; // the parent-child query takes the place of the query previously being populated

          _ancestor2.checks = query.checks; // the previous query contains the checks for the parent

          query.checks = adQChecks; // pc query takes over

          selector.compoundCount++;
          return _descendant2; // we're now populating the child
        }
      }
    }, {
      name: 'subject',
      modifier: true,
      regex: tokens.subject,
      populate: function populate(selector, query) {
        if (selector.currentSubject != null && selector.currentSubject !== query) {
          warn('Redefinition of subject in selector `' + selector.toString() + '`');
          return false;
        }

        selector.currentSubject = query;
        var topQ = selector[selector.length - 1];
        var topChk = topQ.checks[0];
        var topType = topChk == null ? null : topChk.type;

        if (topType === Type.DIRECTED_EDGE) {
          // directed edge with subject on the target
          // change to target node check
          topChk.type = Type.NODE_TARGET;
        } else if (topType === Type.UNDIRECTED_EDGE) {
          // undirected edge with subject on the second node
          // change to neighbor check
          topChk.type = Type.NODE_NEIGHBOR;
          topChk.node = topChk.nodes[1]; // second node is subject

          topChk.neighbor = topChk.nodes[0]; // clean up unused fields for new type

          topChk.nodes = null;
        }
      }
    }];
    exprs.forEach(function (e) {
      return e.regexObj = new RegExp('^' + e.regex);
    });

    /**
     * Of all the expressions, find the first match in the remaining text.
     * @param {string} remaining The remaining text to parse
     * @returns The matched expression and the newly remaining text `{ expr, match, name, remaining }`
     */

    var consumeExpr = function consumeExpr(remaining) {
      var expr;
      var match;
      var name;

      for (var j = 0; j < exprs.length; j++) {
        var e = exprs[j];
        var n = e.name;
        var m = remaining.match(e.regexObj);

        if (m != null) {
          match = m;
          expr = e;
          name = n;
          var consumed = m[0];
          remaining = remaining.substring(consumed.length);
          break; // we've consumed one expr, so we can return now
        }
      }

      return {
        expr: expr,
        match: match,
        name: name,
        remaining: remaining
      };
    };
    /**
     * Consume all the leading whitespace
     * @param {string} remaining The text to consume
     * @returns The text with the leading whitespace removed
     */


    var consumeWhitespace = function consumeWhitespace(remaining) {
      var match = remaining.match(/^\s+/);

      if (match) {
        var consumed = match[0];
        remaining = remaining.substring(consumed.length);
      }

      return remaining;
    };
    /**
     * Parse the string and store the parsed representation in the Selector.
     * @param {string} selector The selector string
     * @returns `true` if the selector was successfully parsed, `false` otherwise
     */


    var parse = function parse(selector) {
      var self = this;
      var remaining = self.inputText = selector;
      var currentQuery = self[0] = newQuery();
      self.length = 1;
      remaining = consumeWhitespace(remaining); // get rid of leading whitespace

      for (;;) {
        var exprInfo = consumeExpr(remaining);

        if (exprInfo.expr == null) {
          warn('The selector `' + selector + '`is invalid');
          return false;
        } else {
          var args = exprInfo.match.slice(1); // let the token populate the selector object in currentQuery

          var ret = exprInfo.expr.populate(self, currentQuery, args);

          if (ret === false) {
            return false; // exit if population failed
          } else if (ret != null) {
            currentQuery = ret; // change the current query to be filled if the expr specifies
          }
        }

        remaining = exprInfo.remaining; // we're done when there's nothing left to parse

        if (remaining.match(/^\s*$/)) {
          break;
        }
      }

      var lastQ = self[self.length - 1];

      if (self.currentSubject != null) {
        lastQ.subject = self.currentSubject;
      }

      lastQ.edgeCount = self.edgeCount;
      lastQ.compoundCount = self.compoundCount;

      for (var i = 0; i < self.length; i++) {
        var q = self[i]; // in future, this could potentially be allowed if there were operator precedence and detection of invalid combinations

        if (q.compoundCount > 0 && q.edgeCount > 0) {
          warn('The selector `' + selector + '` is invalid because it uses both a compound selector and an edge selector');
          return false;
        }

        if (q.edgeCount > 1) {
          warn('The selector `' + selector + '` is invalid because it uses multiple edge selectors');
          return false;
        } else if (q.edgeCount === 1) {
          warn('The selector `' + selector + '` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.');
        }
      }

      return true; // success
    };
    /**
     * Get the selector represented as a string.  This value uses default formatting,
     * so things like spacing may differ from the input text passed to the constructor.
     * @returns {string} The selector string
     */


    var toString = function toString() {
      if (this.toStringCache != null) {
        return this.toStringCache;
      }

      var clean = function clean(obj) {
        if (obj == null) {
          return '';
        } else {
          return obj;
        }
      };

      var cleanVal = function cleanVal(val) {
        if (string(val)) {
          return '"' + val + '"';
        } else {
          return clean(val);
        }
      };

      var space = function space(val) {
        return ' ' + val + ' ';
      };

      var checkToString = function checkToString(check, subject) {
        var type = check.type,
            value = check.value;

        switch (type) {
          case Type.GROUP:
            {
              var group = clean(value);
              return group.substring(0, group.length - 1);
            }

          case Type.DATA_COMPARE:
            {
              var field = check.field,
                  operator = check.operator;
              return '[' + field + space(clean(operator)) + cleanVal(value) + ']';
            }

          case Type.DATA_BOOL:
            {
              var _operator = check.operator,
                  _field = check.field;
              return '[' + clean(_operator) + _field + ']';
            }

          case Type.DATA_EXIST:
            {
              var _field2 = check.field;
              return '[' + _field2 + ']';
            }

          case Type.META_COMPARE:
            {
              var _operator2 = check.operator,
                  _field3 = check.field;
              return '[[' + _field3 + space(clean(_operator2)) + cleanVal(value) + ']]';
            }

          case Type.STATE:
            {
              return value;
            }

          case Type.ID:
            {
              return '#' + value;
            }

          case Type.CLASS:
            {
              return '.' + value;
            }

          case Type.PARENT:
          case Type.CHILD:
            {
              return queryToString(check.parent, subject) + space('>') + queryToString(check.child, subject);
            }

          case Type.ANCESTOR:
          case Type.DESCENDANT:
            {
              return queryToString(check.ancestor, subject) + ' ' + queryToString(check.descendant, subject);
            }

          case Type.COMPOUND_SPLIT:
            {
              var lhs = queryToString(check.left, subject);
              var sub = queryToString(check.subject, subject);
              var rhs = queryToString(check.right, subject);
              return lhs + (lhs.length > 0 ? ' ' : '') + sub + rhs;
            }

          case Type.TRUE:
            {
              return '';
            }
        }
      };

      var queryToString = function queryToString(query, subject) {
        return query.checks.reduce(function (str, chk, i) {
          return str + (subject === query && i === 0 ? '$' : '') + checkToString(chk, subject);
        }, '');
      };

      var str = '';

      for (var i = 0; i < this.length; i++) {
        var query = this[i];
        str += queryToString(query, query.subject);

        if (this.length > 1 && i < this.length - 1) {
          str += ', ';
        }
      }

      this.toStringCache = str;
      return str;
    };
    var parse$1 = {
      parse: parse,
      toString: toString
    };

    var valCmp = function valCmp(fieldVal, operator, value) {
      var matches;
      var isFieldStr = string(fieldVal);
      var isFieldNum = number(fieldVal);
      var isValStr = string(value);
      var fieldStr, valStr;
      var caseInsensitive = false;
      var notExpr = false;
      var isIneqCmp = false;

      if (operator.indexOf('!') >= 0) {
        operator = operator.replace('!', '');
        notExpr = true;
      }

      if (operator.indexOf('@') >= 0) {
        operator = operator.replace('@', '');
        caseInsensitive = true;
      }

      if (isFieldStr || isValStr || caseInsensitive) {
        fieldStr = !isFieldStr && !isFieldNum ? '' : '' + fieldVal;
        valStr = '' + value;
      } // if we're doing a case insensitive comparison, then we're using a STRING comparison
      // even if we're comparing numbers


      if (caseInsensitive) {
        fieldVal = fieldStr = fieldStr.toLowerCase();
        value = valStr = valStr.toLowerCase();
      }

      switch (operator) {
        case '*=':
          matches = fieldStr.indexOf(valStr) >= 0;
          break;

        case '$=':
          matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
          break;

        case '^=':
          matches = fieldStr.indexOf(valStr) === 0;
          break;

        case '=':
          matches = fieldVal === value;
          break;

        case '>':
          isIneqCmp = true;
          matches = fieldVal > value;
          break;

        case '>=':
          isIneqCmp = true;
          matches = fieldVal >= value;
          break;

        case '<':
          isIneqCmp = true;
          matches = fieldVal < value;
          break;

        case '<=':
          isIneqCmp = true;
          matches = fieldVal <= value;
          break;

        default:
          matches = false;
          break;
      } // apply the not op, but null vals for inequalities should always stay non-matching


      if (notExpr && (fieldVal != null || !isIneqCmp)) {
        matches = !matches;
      }

      return matches;
    };
    var boolCmp = function boolCmp(fieldVal, operator) {
      switch (operator) {
        case '?':
          return fieldVal ? true : false;

        case '!':
          return fieldVal ? false : true;

        case '^':
          return fieldVal === undefined;
      }
    };
    var existCmp = function existCmp(fieldVal) {
      return fieldVal !== undefined;
    };
    var data = function data(ele, field) {
      return ele.data(field);
    };
    var meta = function meta(ele, field) {
      return ele[field]();
    };

    /** A lookup of `match(check, ele)` functions by `Type` int */

    var match = [];
    /**
     * Returns whether the query matches for the element
     * @param query The `{ type, value, ... }` query object
     * @param ele The element to compare against
    */

    var matches = function matches(query, ele) {
      return query.checks.every(function (chk) {
        return match[chk.type](chk, ele);
      });
    };

    match[Type.GROUP] = function (check, ele) {
      var group = check.value;
      return group === '*' || group === ele.group();
    };

    match[Type.STATE] = function (check, ele) {
      var stateSelector = check.value;
      return stateSelectorMatches(stateSelector, ele);
    };

    match[Type.ID] = function (check, ele) {
      var id = check.value;
      return ele.id() === id;
    };

    match[Type.CLASS] = function (check, ele) {
      var cls = check.value;
      return ele.hasClass(cls);
    };

    match[Type.META_COMPARE] = function (check, ele) {
      var field = check.field,
          operator = check.operator,
          value = check.value;
      return valCmp(meta(ele, field), operator, value);
    };

    match[Type.DATA_COMPARE] = function (check, ele) {
      var field = check.field,
          operator = check.operator,
          value = check.value;
      return valCmp(data(ele, field), operator, value);
    };

    match[Type.DATA_BOOL] = function (check, ele) {
      var field = check.field,
          operator = check.operator;
      return boolCmp(data(ele, field), operator);
    };

    match[Type.DATA_EXIST] = function (check, ele) {
      var field = check.field;
          check.operator;
      return existCmp(data(ele, field));
    };

    match[Type.UNDIRECTED_EDGE] = function (check, ele) {
      var qA = check.nodes[0];
      var qB = check.nodes[1];
      var src = ele.source();
      var tgt = ele.target();
      return matches(qA, src) && matches(qB, tgt) || matches(qB, src) && matches(qA, tgt);
    };

    match[Type.NODE_NEIGHBOR] = function (check, ele) {
      return matches(check.node, ele) && ele.neighborhood().some(function (n) {
        return n.isNode() && matches(check.neighbor, n);
      });
    };

    match[Type.DIRECTED_EDGE] = function (check, ele) {
      return matches(check.source, ele.source()) && matches(check.target, ele.target());
    };

    match[Type.NODE_SOURCE] = function (check, ele) {
      return matches(check.source, ele) && ele.outgoers().some(function (n) {
        return n.isNode() && matches(check.target, n);
      });
    };

    match[Type.NODE_TARGET] = function (check, ele) {
      return matches(check.target, ele) && ele.incomers().some(function (n) {
        return n.isNode() && matches(check.source, n);
      });
    };

    match[Type.CHILD] = function (check, ele) {
      return matches(check.child, ele) && matches(check.parent, ele.parent());
    };

    match[Type.PARENT] = function (check, ele) {
      return matches(check.parent, ele) && ele.children().some(function (c) {
        return matches(check.child, c);
      });
    };

    match[Type.DESCENDANT] = function (check, ele) {
      return matches(check.descendant, ele) && ele.ancestors().some(function (a) {
        return matches(check.ancestor, a);
      });
    };

    match[Type.ANCESTOR] = function (check, ele) {
      return matches(check.ancestor, ele) && ele.descendants().some(function (d) {
        return matches(check.descendant, d);
      });
    };

    match[Type.COMPOUND_SPLIT] = function (check, ele) {
      return matches(check.subject, ele) && matches(check.left, ele) && matches(check.right, ele);
    };

    match[Type.TRUE] = function () {
      return true;
    };

    match[Type.COLLECTION] = function (check, ele) {
      var collection = check.value;
      return collection.has(ele);
    };

    match[Type.FILTER] = function (check, ele) {
      var filter = check.value;
      return filter(ele);
    };

    var filter = function filter(collection) {
      var self = this; // for 1 id #foo queries, just get the element

      if (self.length === 1 && self[0].checks.length === 1 && self[0].checks[0].type === Type.ID) {
        return collection.getElementById(self[0].checks[0].value).collection();
      }

      var selectorFunction = function selectorFunction(element) {
        for (var j = 0; j < self.length; j++) {
          var query = self[j];

          if (matches(query, element)) {
            return true;
          }
        }

        return false;
      };

      if (self.text() == null) {
        selectorFunction = function selectorFunction() {
          return true;
        };
      }

      return collection.filter(selectorFunction);
    }; // filter
    // does selector match a single element?


    var matches$1 = function matches$1(ele) {
      var self = this;

      for (var j = 0; j < self.length; j++) {
        var query = self[j];

        if (matches(query, ele)) {
          return true;
        }
      }

      return false;
    }; // matches


    var matching = {
      matches: matches$1,
      filter: filter
    };

    var Selector = function Selector(selector) {
      this.inputText = selector;
      this.currentSubject = null;
      this.compoundCount = 0;
      this.edgeCount = 0;
      this.length = 0;

      if (selector == null || string(selector) && selector.match(/^\s*$/)) ; else if (elementOrCollection(selector)) {
        this.addQuery({
          checks: [{
            type: Type.COLLECTION,
            value: selector.collection()
          }]
        });
      } else if (fn(selector)) {
        this.addQuery({
          checks: [{
            type: Type.FILTER,
            value: selector
          }]
        });
      } else if (string(selector)) {
        if (!this.parse(selector)) {
          this.invalid = true;
        }
      } else {
        error('A selector must be created from a string; found ');
      }
    };

    var selfn = Selector.prototype;
    [parse$1, matching].forEach(function (p) {
      return extend(selfn, p);
    });

    selfn.text = function () {
      return this.inputText;
    };

    selfn.size = function () {
      return this.length;
    };

    selfn.eq = function (i) {
      return this[i];
    };

    selfn.sameText = function (otherSel) {
      return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
    };

    selfn.addQuery = function (q) {
      this[this.length++] = q;
    };

    selfn.selector = selfn.toString;

    var elesfn$e = {
      allAre: function allAre(selector) {
        var selObj = new Selector(selector);
        return this.every(function (ele) {
          return selObj.matches(ele);
        });
      },
      is: function is(selector) {
        var selObj = new Selector(selector);
        return this.some(function (ele) {
          return selObj.matches(ele);
        });
      },
      some: function some(fn, thisArg) {
        for (var i = 0; i < this.length; i++) {
          var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

          if (ret) {
            return true;
          }
        }

        return false;
      },
      every: function every(fn, thisArg) {
        for (var i = 0; i < this.length; i++) {
          var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

          if (!ret) {
            return false;
          }
        }

        return true;
      },
      same: function same(collection) {
        // cheap collection ref check
        if (this === collection) {
          return true;
        }

        collection = this.cy().collection(collection);
        var thisLength = this.length;
        var collectionLength = collection.length; // cheap length check

        if (thisLength !== collectionLength) {
          return false;
        } // cheap element ref check


        if (thisLength === 1) {
          return this[0] === collection[0];
        }

        return this.every(function (ele) {
          return collection.hasElementWithId(ele.id());
        });
      },
      anySame: function anySame(collection) {
        collection = this.cy().collection(collection);
        return this.some(function (ele) {
          return collection.hasElementWithId(ele.id());
        });
      },
      allAreNeighbors: function allAreNeighbors(collection) {
        collection = this.cy().collection(collection);
        var nhood = this.neighborhood();
        return collection.every(function (ele) {
          return nhood.hasElementWithId(ele.id());
        });
      },
      contains: function contains(collection) {
        collection = this.cy().collection(collection);
        var self = this;
        return collection.every(function (ele) {
          return self.hasElementWithId(ele.id());
        });
      }
    };
    elesfn$e.allAreNeighbours = elesfn$e.allAreNeighbors;
    elesfn$e.has = elesfn$e.contains;
    elesfn$e.equal = elesfn$e.equals = elesfn$e.same;

    var cache = function cache(fn, name) {
      return function traversalCache(arg1, arg2, arg3, arg4) {
        var selectorOrEles = arg1;
        var eles = this;
        var key;

        if (selectorOrEles == null) {
          key = '';
        } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
          key = selectorOrEles.id();
        }

        if (eles.length === 1 && key) {
          var _p = eles[0]._private;
          var tch = _p.traversalCache = _p.traversalCache || {};
          var ch = tch[name] = tch[name] || [];
          var hash = hashString(key);
          var cacheHit = ch[hash];

          if (cacheHit) {
            return cacheHit;
          } else {
            return ch[hash] = fn.call(eles, arg1, arg2, arg3, arg4);
          }
        } else {
          return fn.call(eles, arg1, arg2, arg3, arg4);
        }
      };
    };

    var elesfn$f = {
      parent: function parent(selector) {
        var parents = []; // optimisation for single ele call

        if (this.length === 1) {
          var parent = this[0]._private.parent;

          if (parent) {
            return parent;
          }
        }

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var _parent = ele._private.parent;

          if (_parent) {
            parents.push(_parent);
          }
        }

        return this.spawn(parents, {
          unique: true
        }).filter(selector);
      },
      parents: function parents(selector) {
        var parents = [];
        var eles = this.parent();

        while (eles.nonempty()) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            parents.push(ele);
          }

          eles = eles.parent();
        }

        return this.spawn(parents, {
          unique: true
        }).filter(selector);
      },
      commonAncestors: function commonAncestors(selector) {
        var ancestors;

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var parents = ele.parents();
          ancestors = ancestors || parents;
          ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
        }

        return ancestors.filter(selector);
      },
      orphans: function orphans(selector) {
        return this.stdFilter(function (ele) {
          return ele.isOrphan();
        }).filter(selector);
      },
      nonorphans: function nonorphans(selector) {
        return this.stdFilter(function (ele) {
          return ele.isChild();
        }).filter(selector);
      },
      children: cache(function (selector) {
        var children = [];

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var eleChildren = ele._private.children;

          for (var j = 0; j < eleChildren.length; j++) {
            children.push(eleChildren[j]);
          }
        }

        return this.spawn(children, {
          unique: true
        }).filter(selector);
      }, 'children'),
      siblings: function siblings(selector) {
        return this.parent().children().not(this).filter(selector);
      },
      isParent: function isParent() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.children.length !== 0;
        }
      },
      isChildless: function isChildless() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.children.length === 0;
        }
      },
      isChild: function isChild() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.parent != null;
        }
      },
      isOrphan: function isOrphan() {
        var ele = this[0];

        if (ele) {
          return ele.isNode() && ele._private.parent == null;
        }
      },
      descendants: function descendants(selector) {
        var elements = [];

        function add(eles) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            elements.push(ele);

            if (ele.children().nonempty()) {
              add(ele.children());
            }
          }
        }

        add(this.children());
        return this.spawn(elements, {
          unique: true
        }).filter(selector);
      }
    };

    function forEachCompound(eles, fn, includeSelf, recursiveStep) {
      var q = [];
      var did = new Set$1();
      var cy = eles.cy();
      var hasCompounds = cy.hasCompoundNodes();

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (includeSelf) {
          q.push(ele);
        } else if (hasCompounds) {
          recursiveStep(q, did, ele);
        }
      }

      while (q.length > 0) {
        var _ele = q.shift();

        fn(_ele);
        did.add(_ele.id());

        if (hasCompounds) {
          recursiveStep(q, did, _ele);
        }
      }

      return eles;
    }

    function addChildren(q, did, ele) {
      if (ele.isParent()) {
        var children = ele._private.children;

        for (var i = 0; i < children.length; i++) {
          var child = children[i];

          if (!did.has(child.id())) {
            q.push(child);
          }
        }
      }
    } // very efficient version of eles.add( eles.descendants() ).forEach()
    // for internal use


    elesfn$f.forEachDown = function (fn) {
      var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return forEachCompound(this, fn, includeSelf, addChildren);
    };

    function addParent(q, did, ele) {
      if (ele.isChild()) {
        var parent = ele._private.parent;

        if (!did.has(parent.id())) {
          q.push(parent);
        }
      }
    }

    elesfn$f.forEachUp = function (fn) {
      var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return forEachCompound(this, fn, includeSelf, addParent);
    };

    function addParentAndChildren(q, did, ele) {
      addParent(q, did, ele);
      addChildren(q, did, ele);
    }

    elesfn$f.forEachUpAndDown = function (fn) {
      var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return forEachCompound(this, fn, includeSelf, addParentAndChildren);
    }; // aliases


    elesfn$f.ancestors = elesfn$f.parents;

    var fn$1, elesfn$g;
    fn$1 = elesfn$g = {
      data: define$3.data({
        field: 'data',
        bindingEvent: 'data',
        allowBinding: true,
        allowSetting: true,
        settingEvent: 'data',
        settingTriggersEvent: true,
        triggerFnName: 'trigger',
        allowGetting: true,
        immutableKeys: {
          'id': true,
          'source': true,
          'target': true,
          'parent': true
        },
        updateStyle: true
      }),
      removeData: define$3.removeData({
        field: 'data',
        event: 'data',
        triggerFnName: 'trigger',
        triggerEvent: true,
        immutableKeys: {
          'id': true,
          'source': true,
          'target': true,
          'parent': true
        },
        updateStyle: true
      }),
      scratch: define$3.data({
        field: 'scratch',
        bindingEvent: 'scratch',
        allowBinding: true,
        allowSetting: true,
        settingEvent: 'scratch',
        settingTriggersEvent: true,
        triggerFnName: 'trigger',
        allowGetting: true,
        updateStyle: true
      }),
      removeScratch: define$3.removeData({
        field: 'scratch',
        event: 'scratch',
        triggerFnName: 'trigger',
        triggerEvent: true,
        updateStyle: true
      }),
      rscratch: define$3.data({
        field: 'rscratch',
        allowBinding: false,
        allowSetting: true,
        settingTriggersEvent: false,
        allowGetting: true
      }),
      removeRscratch: define$3.removeData({
        field: 'rscratch',
        triggerEvent: false
      }),
      id: function id() {
        var ele = this[0];

        if (ele) {
          return ele._private.data.id;
        }
      }
    }; // aliases

    fn$1.attr = fn$1.data;
    fn$1.removeAttr = fn$1.removeData;
    var data$1 = elesfn$g;

    var elesfn$h = {};

    function defineDegreeFunction(callback) {
      return function (includeLoops) {
        var self = this;

        if (includeLoops === undefined) {
          includeLoops = true;
        }

        if (self.length === 0) {
          return;
        }

        if (self.isNode() && !self.removed()) {
          var degree = 0;
          var node = self[0];
          var connectedEdges = node._private.edges;

          for (var i = 0; i < connectedEdges.length; i++) {
            var edge = connectedEdges[i];

            if (!includeLoops && edge.isLoop()) {
              continue;
            }

            degree += callback(node, edge);
          }

          return degree;
        } else {
          return;
        }
      };
    }

    extend(elesfn$h, {
      degree: defineDegreeFunction(function (node, edge) {
        if (edge.source().same(edge.target())) {
          return 2;
        } else {
          return 1;
        }
      }),
      indegree: defineDegreeFunction(function (node, edge) {
        if (edge.target().same(node)) {
          return 1;
        } else {
          return 0;
        }
      }),
      outdegree: defineDegreeFunction(function (node, edge) {
        if (edge.source().same(node)) {
          return 1;
        } else {
          return 0;
        }
      })
    });

    function defineDegreeBoundsFunction(degreeFn, callback) {
      return function (includeLoops) {
        var ret;
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          var ele = nodes[i];
          var degree = ele[degreeFn](includeLoops);

          if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
            ret = degree;
          }
        }

        return ret;
      };
    }

    extend(elesfn$h, {
      minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
        return degree < min;
      }),
      maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
        return degree > max;
      }),
      minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
        return degree < min;
      }),
      maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
        return degree > max;
      }),
      minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
        return degree < min;
      }),
      maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
        return degree > max;
      })
    });
    extend(elesfn$h, {
      totalDegree: function totalDegree(includeLoops) {
        var total = 0;
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          total += nodes[i].degree(includeLoops);
        }

        return total;
      }
    });

    var fn$2, elesfn$i;

    var beforePositionSet = function beforePositionSet(eles, newPos, silent) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (!ele.locked()) {
          var oldPos = ele._private.position;
          var delta = {
            x: newPos.x != null ? newPos.x - oldPos.x : 0,
            y: newPos.y != null ? newPos.y - oldPos.y : 0
          };

          if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
            ele.children().shift(delta, silent);
          }

          ele.shiftCachedBoundingBox(delta);
        }
      }
    };

    var positionDef = {
      field: 'position',
      bindingEvent: 'position',
      allowBinding: true,
      allowSetting: true,
      settingEvent: 'position',
      settingTriggersEvent: true,
      triggerFnName: 'emitAndNotify',
      allowGetting: true,
      validKeys: ['x', 'y'],
      beforeGet: function beforeGet(ele) {
        ele.updateCompoundBounds();
      },
      beforeSet: function beforeSet(eles, newPos) {
        beforePositionSet(eles, newPos, false);
      },
      onSet: function onSet(eles) {
        eles.dirtyCompoundBoundsCache();
      },
      canSet: function canSet(ele) {
        return !ele.locked();
      }
    };
    fn$2 = elesfn$i = {
      position: define$3.data(positionDef),
      // position but no notification to renderer
      silentPosition: define$3.data(extend({}, positionDef, {
        allowBinding: false,
        allowSetting: true,
        settingTriggersEvent: false,
        allowGetting: false,
        beforeSet: function beforeSet(eles, newPos) {
          beforePositionSet(eles, newPos, true);
        }
      })),
      positions: function positions(pos, silent) {
        if (plainObject(pos)) {
          if (silent) {
            this.silentPosition(pos);
          } else {
            this.position(pos);
          }
        } else if (fn(pos)) {
          var _fn = pos;
          var cy = this.cy();
          cy.startBatch();

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];

            var _pos = void 0;

            if (_pos = _fn(ele, i)) {
              if (silent) {
                ele.silentPosition(_pos);
              } else {
                ele.position(_pos);
              }
            }
          }

          cy.endBatch();
        }

        return this; // chaining
      },
      silentPositions: function silentPositions(pos) {
        return this.positions(pos, true);
      },
      shift: function shift(dim, val, silent) {
        var delta;

        if (plainObject(dim)) {
          delta = {
            x: number(dim.x) ? dim.x : 0,
            y: number(dim.y) ? dim.y : 0
          };
          silent = val;
        } else if (string(dim) && number(val)) {
          delta = {
            x: 0,
            y: 0
          };
          delta[dim] = val;
        }

        if (delta != null) {
          var cy = this.cy();
          cy.startBatch();

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            var pos = ele.position();
            var newPos = {
              x: pos.x + delta.x,
              y: pos.y + delta.y
            };

            if (silent) {
              ele.silentPosition(newPos);
            } else {
              ele.position(newPos);
            }
          }

          cy.endBatch();
        }

        return this;
      },
      silentShift: function silentShift(dim, val) {
        if (plainObject(dim)) {
          this.shift(dim, true);
        } else if (string(dim) && number(val)) {
          this.shift(dim, val, true);
        }

        return this;
      },
      // get/set the rendered (i.e. on screen) positon of the element
      renderedPosition: function renderedPosition(dim, val) {
        var ele = this[0];
        var cy = this.cy();
        var zoom = cy.zoom();
        var pan = cy.pan();
        var rpos = plainObject(dim) ? dim : undefined;
        var setting = rpos !== undefined || val !== undefined && string(dim);

        if (ele && ele.isNode()) {
          // must have an element and must be a node to return position
          if (setting) {
            for (var i = 0; i < this.length; i++) {
              var _ele = this[i];

              if (val !== undefined) {
                // set one dimension
                _ele.position(dim, (val - pan[dim]) / zoom);
              } else if (rpos !== undefined) {
                // set whole position
                _ele.position(renderedToModelPosition(rpos, zoom, pan));
              }
            }
          } else {
            // getting
            var pos = ele.position();
            rpos = modelToRenderedPosition(pos, zoom, pan);

            if (dim === undefined) {
              // then return the whole rendered position
              return rpos;
            } else {
              // then return the specified dimension
              return rpos[dim];
            }
          }
        } else if (!setting) {
          return undefined; // for empty collection case
        }

        return this; // chaining
      },
      // get/set the position relative to the parent
      relativePosition: function relativePosition(dim, val) {
        var ele = this[0];
        var cy = this.cy();
        var ppos = plainObject(dim) ? dim : undefined;
        var setting = ppos !== undefined || val !== undefined && string(dim);
        var hasCompoundNodes = cy.hasCompoundNodes();

        if (ele && ele.isNode()) {
          // must have an element and must be a node to return position
          if (setting) {
            for (var i = 0; i < this.length; i++) {
              var _ele2 = this[i];
              var parent = hasCompoundNodes ? _ele2.parent() : null;
              var hasParent = parent && parent.length > 0;
              var relativeToParent = hasParent;

              if (hasParent) {
                parent = parent[0];
              }

              var origin = relativeToParent ? parent.position() : {
                x: 0,
                y: 0
              };

              if (val !== undefined) {
                // set one dimension
                _ele2.position(dim, val + origin[dim]);
              } else if (ppos !== undefined) {
                // set whole position
                _ele2.position({
                  x: ppos.x + origin.x,
                  y: ppos.y + origin.y
                });
              }
            }
          } else {
            // getting
            var pos = ele.position();

            var _parent = hasCompoundNodes ? ele.parent() : null;

            var _hasParent = _parent && _parent.length > 0;

            var _relativeToParent = _hasParent;

            if (_hasParent) {
              _parent = _parent[0];
            }

            var _origin = _relativeToParent ? _parent.position() : {
              x: 0,
              y: 0
            };

            ppos = {
              x: pos.x - _origin.x,
              y: pos.y - _origin.y
            };

            if (dim === undefined) {
              // then return the whole rendered position
              return ppos;
            } else {
              // then return the specified dimension
              return ppos[dim];
            }
          }
        } else if (!setting) {
          return undefined; // for empty collection case
        }

        return this; // chaining
      }
    }; // aliases

    fn$2.modelPosition = fn$2.point = fn$2.position;
    fn$2.modelPositions = fn$2.points = fn$2.positions;
    fn$2.renderedPoint = fn$2.renderedPosition;
    fn$2.relativePoint = fn$2.relativePosition;
    var position$1 = elesfn$i;

    var fn$3, elesfn$j;
    fn$3 = elesfn$j = {};

    elesfn$j.renderedBoundingBox = function (options) {
      var bb = this.boundingBox(options);
      var cy = this.cy();
      var zoom = cy.zoom();
      var pan = cy.pan();
      var x1 = bb.x1 * zoom + pan.x;
      var x2 = bb.x2 * zoom + pan.x;
      var y1 = bb.y1 * zoom + pan.y;
      var y2 = bb.y2 * zoom + pan.y;
      return {
        x1: x1,
        x2: x2,
        y1: y1,
        y2: y2,
        w: x2 - x1,
        h: y2 - y1
      };
    };

    elesfn$j.dirtyCompoundBoundsCache = function () {
      var cy = this.cy();

      if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
        return this;
      }

      this.forEachUp(function (ele) {
        if (ele.isParent()) {
          var _p = ele._private;
          _p.compoundBoundsClean = false;
          _p.bbCache = null;
          ele.emitAndNotify('bounds');
        }
      });
      return this;
    };

    elesfn$j.updateCompoundBounds = function () {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cy = this.cy(); // not possible to do on non-compound graphs or with the style disabled

      if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
        return this;
      } // save cycles when batching -- but bounds will be stale (or not exist yet)


      if (!force && cy.batching()) {
        return this;
      }

      function update(parent) {
        if (!parent.isParent()) {
          return;
        }

        var _p = parent._private;
        var children = parent.children();
        var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';
        var min = {
          width: {
            val: parent.pstyle('min-width').pfValue,
            left: parent.pstyle('min-width-bias-left'),
            right: parent.pstyle('min-width-bias-right')
          },
          height: {
            val: parent.pstyle('min-height').pfValue,
            top: parent.pstyle('min-height-bias-top'),
            bottom: parent.pstyle('min-height-bias-bottom')
          }
        };

        var takesUpSpace = function takesUpSpace(ele) {
          return ele.pstyle('display').value === 'element';
        };

        var bb = children.filter(takesUpSpace).boundingBox({
          includeLabels: includeLabels,
          includeOverlays: false,
          // updating the compound bounds happens outside of the regular
          // cache cycle (i.e. before fired events)
          useCache: false
        });
        var pos = _p.position; // if children take up zero area then keep position and fall back on stylesheet w/h

        if (bb.w === 0 || bb.h === 0) {
          bb = {
            w: parent.pstyle('width').pfValue,
            h: parent.pstyle('height').pfValue
          };
          bb.x1 = pos.x - bb.w / 2;
          bb.x2 = pos.x + bb.w / 2;
          bb.y1 = pos.y - bb.h / 2;
          bb.y2 = pos.y + bb.h / 2;
        }

        function computeBiasValues(propDiff, propBias, propBiasComplement) {
          var biasDiff = 0;
          var biasComplementDiff = 0;
          var biasTotal = propBias + propBiasComplement;

          if (propDiff > 0 && biasTotal > 0) {
            biasDiff = propBias / biasTotal * propDiff;
            biasComplementDiff = propBiasComplement / biasTotal * propDiff;
          }

          return {
            biasDiff: biasDiff,
            biasComplementDiff: biasComplementDiff
          };
        }

        function computePaddingValues(width, height, paddingObject, relativeTo) {
          // Assuming percentage is number from 0 to 1
          if (paddingObject.units === '%') {
            switch (relativeTo) {
              case 'width':
                return width > 0 ? paddingObject.pfValue * width : 0;

              case 'height':
                return height > 0 ? paddingObject.pfValue * height : 0;

              case 'average':
                return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;

              case 'min':
                return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;

              case 'max':
                return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;

              default:
                return 0;
            }
          } else if (paddingObject.units === 'px') {
            return paddingObject.pfValue;
          } else {
            return 0;
          }
        }

        var leftVal = min.width.left.value;

        if (min.width.left.units === 'px' && min.width.val > 0) {
          leftVal = leftVal * 100 / min.width.val;
        }

        var rightVal = min.width.right.value;

        if (min.width.right.units === 'px' && min.width.val > 0) {
          rightVal = rightVal * 100 / min.width.val;
        }

        var topVal = min.height.top.value;

        if (min.height.top.units === 'px' && min.height.val > 0) {
          topVal = topVal * 100 / min.height.val;
        }

        var bottomVal = min.height.bottom.value;

        if (min.height.bottom.units === 'px' && min.height.val > 0) {
          bottomVal = bottomVal * 100 / min.height.val;
        }

        var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);
        var diffLeft = widthBiasDiffs.biasDiff;
        var diffRight = widthBiasDiffs.biasComplementDiff;
        var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);
        var diffTop = heightBiasDiffs.biasDiff;
        var diffBottom = heightBiasDiffs.biasComplementDiff;
        _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);
        _p.autoWidth = Math.max(bb.w, min.width.val);
        pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
        _p.autoHeight = Math.max(bb.h, min.height.val);
        pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
      }

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var _p = ele._private;

        if (!_p.compoundBoundsClean) {
          update(ele);

          if (!cy.batching()) {
            _p.compoundBoundsClean = true;
          }
        }
      }

      return this;
    };

    var noninf = function noninf(x) {
      if (x === Infinity || x === -Infinity) {
        return 0;
      }

      return x;
    };

    var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
      // don't update with zero area boxes
      if (x2 - x1 === 0 || y2 - y1 === 0) {
        return;
      } // don't update with null dim


      if (x1 == null || y1 == null || x2 == null || y2 == null) {
        return;
      }

      b.x1 = x1 < b.x1 ? x1 : b.x1;
      b.x2 = x2 > b.x2 ? x2 : b.x2;
      b.y1 = y1 < b.y1 ? y1 : b.y1;
      b.y2 = y2 > b.y2 ? y2 : b.y2;
      b.w = b.x2 - b.x1;
      b.h = b.y2 - b.y1;
    };

    var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
      if (b2 == null) {
        return b;
      }

      return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
    };

    var prefixedProperty = function prefixedProperty(obj, field, prefix) {
      return getPrefixedProperty(obj, field, prefix);
    };

    var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
      if (ele.cy().headless()) {
        return;
      }

      var _p = ele._private;
      var rstyle = _p.rstyle;
      var halfArW = rstyle.arrowWidth / 2;
      var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
      var x;
      var y;

      if (arrowType !== 'none') {
        if (prefix === 'source') {
          x = rstyle.srcX;
          y = rstyle.srcY;
        } else if (prefix === 'target') {
          x = rstyle.tgtX;
          y = rstyle.tgtY;
        } else {
          x = rstyle.midX;
          y = rstyle.midY;
        } // always store the individual arrow bounds


        var bbs = _p.arrowBounds = _p.arrowBounds || {};
        var bb = bbs[prefix] = bbs[prefix] || {};
        bb.x1 = x - halfArW;
        bb.y1 = y - halfArW;
        bb.x2 = x + halfArW;
        bb.y2 = y + halfArW;
        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;
        expandBoundingBox(bb, 1);
        updateBounds(bounds, bb.x1, bb.y1, bb.x2, bb.y2);
      }
    };

    var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
      if (ele.cy().headless()) {
        return;
      }

      var prefixDash;

      if (prefix) {
        prefixDash = prefix + '-';
      } else {
        prefixDash = '';
      }

      var _p = ele._private;
      var rstyle = _p.rstyle;
      var label = ele.pstyle(prefixDash + 'label').strValue;

      if (label) {
        var halign = ele.pstyle('text-halign');
        var valign = ele.pstyle('text-valign');
        var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
        var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
        var labelX = prefixedProperty(rstyle, 'labelX', prefix);
        var labelY = prefixedProperty(rstyle, 'labelY', prefix);
        var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
        var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
        var isEdge = ele.isEdge();
        var rotation = ele.pstyle(prefixDash + 'text-rotation');
        var outlineWidth = ele.pstyle('text-outline-width').pfValue;
        var borderWidth = ele.pstyle('text-border-width').pfValue;
        var halfBorderWidth = borderWidth / 2;
        var padding = ele.pstyle('text-background-padding').pfValue;
        var lh = labelHeight;
        var lw = labelWidth;
        var lw_2 = lw / 2;
        var lh_2 = lh / 2;
        var lx1, lx2, ly1, ly2;

        if (isEdge) {
          lx1 = labelX - lw_2;
          lx2 = labelX + lw_2;
          ly1 = labelY - lh_2;
          ly2 = labelY + lh_2;
        } else {
          switch (halign.value) {
            case 'left':
              lx1 = labelX - lw;
              lx2 = labelX;
              break;

            case 'center':
              lx1 = labelX - lw_2;
              lx2 = labelX + lw_2;
              break;

            case 'right':
              lx1 = labelX;
              lx2 = labelX + lw;
              break;
          }

          switch (valign.value) {
            case 'top':
              ly1 = labelY - lh;
              ly2 = labelY;
              break;

            case 'center':
              ly1 = labelY - lh_2;
              ly2 = labelY + lh_2;
              break;

            case 'bottom':
              ly1 = labelY;
              ly2 = labelY + lh;
              break;
          }
        } // shift by margin and expand by outline and border


        lx1 += marginX - Math.max(outlineWidth, halfBorderWidth) - padding;
        lx2 += marginX + Math.max(outlineWidth, halfBorderWidth) + padding;
        ly1 += marginY - Math.max(outlineWidth, halfBorderWidth) - padding;
        ly2 += marginY + Math.max(outlineWidth, halfBorderWidth) + padding; // always store the unrotated label bounds separately

        var bbPrefix = prefix || 'main';
        var bbs = _p.labelBounds;
        var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
        bb.x1 = lx1;
        bb.y1 = ly1;
        bb.x2 = lx2;
        bb.y2 = ly2;
        bb.w = lx2 - lx1;
        bb.h = ly2 - ly1;
        expandBoundingBox(bb, 1); // expand to work around browser dimension inaccuracies

        var isAutorotate = isEdge && rotation.strValue === 'autorotate';
        var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;

        if (isAutorotate || isPfValue) {
          var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
          var cos = Math.cos(theta);
          var sin = Math.sin(theta); // rotation point (default value for center-center)

          var xo = (lx1 + lx2) / 2;
          var yo = (ly1 + ly2) / 2;

          if (!isEdge) {
            switch (halign.value) {
              case 'left':
                xo = lx2;
                break;

              case 'right':
                xo = lx1;
                break;
            }

            switch (valign.value) {
              case 'top':
                yo = ly2;
                break;

              case 'bottom':
                yo = ly1;
                break;
            }
          }

          var rotate = function rotate(x, y) {
            x = x - xo;
            y = y - yo;
            return {
              x: x * cos - y * sin + xo,
              y: x * sin + y * cos + yo
            };
          };

          var px1y1 = rotate(lx1, ly1);
          var px1y2 = rotate(lx1, ly2);
          var px2y1 = rotate(lx2, ly1);
          var px2y2 = rotate(lx2, ly2);
          lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
          lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
          ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
          ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
        }

        updateBounds(bounds, lx1, ly1, lx2, ly2);
        updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
      }

      return bounds;
    }; // get the bounding box of the elements (in raw model position)


    var boundingBoxImpl = function boundingBoxImpl(ele, options) {
      var cy = ele._private.cy;
      var styleEnabled = cy.styleEnabled();
      var headless = cy.headless();
      var bounds = makeBoundingBox();
      var _p = ele._private;
      var display = styleEnabled ? ele.pstyle('display').value : 'element';
      var isNode = ele.isNode();
      var isEdge = ele.isEdge();
      var ex1, ex2, ey1, ey2; // extrema of body / lines

      var x, y; // node pos

      var displayed = display !== 'none';
      var rstyle = _p.rstyle;
      var manualExpansion = isNode && styleEnabled ? ele.pstyle('bounds-expansion').pfValue : 0;

      if (displayed) {
        var overlayOpacity = 0;
        var overlayPadding = 0;

        if (styleEnabled && options.includeOverlays) {
          overlayOpacity = ele.pstyle('overlay-opacity').value;

          if (overlayOpacity !== 0) {
            overlayPadding = ele.pstyle('overlay-padding').value;
          }
        }

        var w = 0;
        var wHalf = 0;

        if (styleEnabled) {
          w = ele.pstyle('width').pfValue;
          wHalf = w / 2;
        }

        if (isNode && options.includeNodes) {
          var pos = ele.position();
          x = pos.x;
          y = pos.y;

          var _w = ele.outerWidth();

          var halfW = _w / 2;
          var h = ele.outerHeight();
          var halfH = h / 2; // handle node dimensions
          /////////////////////////

          ex1 = x - halfW;
          ex2 = x + halfW;
          ey1 = y - halfH;
          ey2 = y + halfH;
          updateBounds(bounds, ex1, ey1, ex2, ey2);
        } else if (isEdge && options.includeEdges) {
          // handle edge dimensions (rough box estimate)
          //////////////////////////////////////////////
          if (styleEnabled && !headless) {
            ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
            ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
            ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
            ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY); // take into account edge width

            ex1 -= wHalf;
            ex2 += wHalf;
            ey1 -= wHalf;
            ey2 += wHalf;
            updateBounds(bounds, ex1, ey1, ex2, ey2);
          } // precise haystacks
          ////////////////////


          if (styleEnabled && !headless && ele.pstyle('curve-style').strValue === 'haystack') {
            var hpts = rstyle.haystackPts || [];
            ex1 = hpts[0].x;
            ey1 = hpts[0].y;
            ex2 = hpts[1].x;
            ey2 = hpts[1].y;

            if (ex1 > ex2) {
              var temp = ex1;
              ex1 = ex2;
              ex2 = temp;
            }

            if (ey1 > ey2) {
              var _temp = ey1;
              ey1 = ey2;
              ey2 = _temp;
            }

            updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf); // handle points along edge
            ///////////////////////////
          } else {
            var pts = rstyle.bezierPts || rstyle.linePts || [];

            for (var j = 0; j < pts.length; j++) {
              var pt = pts[j];
              ex1 = pt.x - wHalf;
              ex2 = pt.x + wHalf;
              ey1 = pt.y - wHalf;
              ey2 = pt.y + wHalf;
              updateBounds(bounds, ex1, ey1, ex2, ey2);
            } // fallback on source and target positions
            //////////////////////////////////////////


            if (pts.length === 0) {
              var n1 = ele.source();
              var n1pos = n1.position();
              var n2 = ele.target();
              var n2pos = n2.position();
              ex1 = n1pos.x;
              ex2 = n2pos.x;
              ey1 = n1pos.y;
              ey2 = n2pos.y;

              if (ex1 > ex2) {
                var _temp2 = ex1;
                ex1 = ex2;
                ex2 = _temp2;
              }

              if (ey1 > ey2) {
                var _temp3 = ey1;
                ey1 = ey2;
                ey2 = _temp3;
              } // take into account edge width


              ex1 -= wHalf;
              ex2 += wHalf;
              ey1 -= wHalf;
              ey2 += wHalf;
              updateBounds(bounds, ex1, ey1, ex2, ey2);
            }
          }
        } // edges
        // handle edge arrow size
        /////////////////////////


        if (styleEnabled && options.includeEdges && isEdge) {
          updateBoundsFromArrow(bounds, ele, 'mid-source');
          updateBoundsFromArrow(bounds, ele, 'mid-target');
          updateBoundsFromArrow(bounds, ele, 'source');
          updateBoundsFromArrow(bounds, ele, 'target');
        } // ghost
        ////////


        if (styleEnabled) {
          var ghost = ele.pstyle('ghost').value === 'yes';

          if (ghost) {
            var gx = ele.pstyle('ghost-offset-x').pfValue;
            var gy = ele.pstyle('ghost-offset-y').pfValue;
            updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
          }
        } // always store the body bounds separately from the labels


        var bbBody = _p.bodyBounds = _p.bodyBounds || {};
        assignBoundingBox(bbBody, bounds);
        expandBoundingBox(bbBody, manualExpansion);
        expandBoundingBox(bbBody, 1); // expand to work around browser dimension inaccuracies
        // overlay
        //////////

        if (styleEnabled) {
          ex1 = bounds.x1;
          ex2 = bounds.x2;
          ey1 = bounds.y1;
          ey2 = bounds.y2;
          updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
        } // always store the body bounds separately from the labels


        var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
        assignBoundingBox(bbOverlay, bounds);
        expandBoundingBox(bbOverlay, manualExpansion);
        expandBoundingBox(bbOverlay, 1); // expand to work around browser dimension inaccuracies
        // handle label dimensions
        //////////////////////////

        var bbLabels = _p.labelBounds = _p.labelBounds || {};

        if (bbLabels.all != null) {
          clearBoundingBox(bbLabels.all);
        } else {
          bbLabels.all = makeBoundingBox();
        }

        if (styleEnabled && options.includeLabels) {
          updateBoundsFromLabel(bounds, ele, null);

          if (isEdge) {
            updateBoundsFromLabel(bounds, ele, 'source');
            updateBoundsFromLabel(bounds, ele, 'target');
          }
        } // style enabled for labels

      } // if displayed


      bounds.x1 = noninf(bounds.x1);
      bounds.y1 = noninf(bounds.y1);
      bounds.x2 = noninf(bounds.x2);
      bounds.y2 = noninf(bounds.y2);
      bounds.w = noninf(bounds.x2 - bounds.x1);
      bounds.h = noninf(bounds.y2 - bounds.y1);

      if (bounds.w > 0 && bounds.h > 0 && displayed) {
        expandBoundingBox(bounds, manualExpansion); // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides

        expandBoundingBox(bounds, 1);
      }

      return bounds;
    };

    var getKey = function getKey(opts) {
      var i = 0;

      var tf = function tf(val) {
        return (val ? 1 : 0) << i++;
      };

      var key = 0;
      key += tf(opts.incudeNodes);
      key += tf(opts.includeEdges);
      key += tf(opts.includeLabels);
      key += tf(opts.includeOverlays);
      return key;
    };

    var getBoundingBoxPosKey = function getBoundingBoxPosKey(ele) {
      if (ele.isEdge()) {
        var p1 = ele.source().position();
        var p2 = ele.target().position();

        var r = function r(x) {
          return Math.round(x);
        };

        return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);
      } else {
        return 0;
      }
    };

    var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
      var _p = ele._private;
      var bb;
      var key = opts == null ? defBbOptsKey : getKey(opts);
      var usingDefOpts = key === defBbOptsKey;
      var currPosKey = getBoundingBoxPosKey(ele);
      var isPosKeySame = _p.bbCachePosKey === currPosKey;
      var useCache = opts.useCache && isPosKeySame;
      var needRecalc = !useCache || _p.bbCache == null;

      if (needRecalc) {
        if (!isPosKeySame) {
          ele.recalculateRenderedStyle();
        }

        bb = boundingBoxImpl(ele, defBbOpts);
        _p.bbCache = bb;
        _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
        _p.bbCachePosKey = currPosKey;
      } else {
        bb = _p.bbCache;
      }

      if (!needRecalc && (_p.bbCacheShift.x !== 0 || _p.bbCacheShift.y !== 0)) {
        var shift = assignShiftToBoundingBox;
        var delta = _p.bbCacheShift;

        var safeShift = function safeShift(bb, delta) {
          if (bb != null) {
            shift(bb, delta);
          }
        };

        shift(bb, delta);
        var bodyBounds = _p.bodyBounds,
            overlayBounds = _p.overlayBounds,
            labelBounds = _p.labelBounds,
            arrowBounds = _p.arrowBounds;
        safeShift(bodyBounds, delta);
        safeShift(overlayBounds, delta);

        if (arrowBounds != null) {
          safeShift(arrowBounds.source, delta);
          safeShift(arrowBounds.target, delta);
          safeShift(arrowBounds['mid-source'], delta);
          safeShift(arrowBounds['mid-target'], delta);
        }

        if (labelBounds != null) {
          safeShift(labelBounds.main, delta);
          safeShift(labelBounds.all, delta);
          safeShift(labelBounds.source, delta);
          safeShift(labelBounds.target, delta);
        }
      } // always reset the shift, because we either applied the shift or cleared it by doing a fresh recalc


      _p.bbCacheShift.x = _p.bbCacheShift.y = 0; // not using def opts => need to build up bb from combination of sub bbs

      if (!usingDefOpts) {
        var isNode = ele.isNode();
        bb = makeBoundingBox();

        if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {
          if (opts.includeOverlays) {
            updateBoundsFromBox(bb, _p.overlayBounds);
          } else {
            updateBoundsFromBox(bb, _p.bodyBounds);
          }
        }

        if (opts.includeLabels) {
          updateBoundsFromBox(bb, _p.labelBounds.all);
        }

        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;
      }

      return bb;
    };

    var defBbOpts = {
      includeNodes: true,
      includeEdges: true,
      includeLabels: true,
      includeOverlays: true,
      useCache: true
    };
    var defBbOptsKey = getKey(defBbOpts);
    var filledBbOpts = defaults$1(defBbOpts);

    elesfn$j.boundingBox = function (options) {
      // the main usecase is ele.boundingBox() for a single element with no/def options
      // specified s.t. the cache is used, so check for this case to make it faster by
      // avoiding the overhead of the rest of the function
      if (this.length === 1 && this[0]._private.bbCache != null && (options === undefined || options.useCache === undefined || options.useCache === true)) {
        if (options === undefined) {
          options = defBbOpts;
        } else {
          options = filledBbOpts(options);
        }

        return cachedBoundingBoxImpl(this[0], options);
      }

      var bounds = makeBoundingBox();
      options = options || defBbOpts;
      var opts = filledBbOpts(options);
      var eles = this;
      var cy = eles.cy();
      var styleEnabled = cy.styleEnabled();

      if (styleEnabled) {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var _p = ele._private;
          var currPosKey = getBoundingBoxPosKey(ele);
          var isPosKeySame = _p.bbCachePosKey === currPosKey;
          var useCache = opts.useCache && isPosKeySame;
          ele.recalculateRenderedStyle(useCache);
        }
      }

      this.updateCompoundBounds();

      for (var _i = 0; _i < eles.length; _i++) {
        var _ele = eles[_i];
        updateBoundsFromBox(bounds, cachedBoundingBoxImpl(_ele, opts));
      }

      bounds.x1 = noninf(bounds.x1);
      bounds.y1 = noninf(bounds.y1);
      bounds.x2 = noninf(bounds.x2);
      bounds.y2 = noninf(bounds.y2);
      bounds.w = noninf(bounds.x2 - bounds.x1);
      bounds.h = noninf(bounds.y2 - bounds.y1);
      return bounds;
    };

    elesfn$j.dirtyBoundingBoxCache = function () {
      for (var i = 0; i < this.length; i++) {
        var _p = this[i]._private;
        _p.bbCache = null;
        _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
        _p.bbCachePosKey = null;
      }

      this.emitAndNotify('bounds');
      return this;
    };

    elesfn$j.shiftCachedBoundingBox = function (delta) {
      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var _p = ele._private;
        var bb = _p.bbCache;

        if (bb != null) {
          _p.bbCacheShift.x += delta.x;
          _p.bbCacheShift.y += delta.y;
        }
      }

      this.emitAndNotify('bounds');
      return this;
    }; // private helper to get bounding box for custom node positions
    // - good for perf in certain cases but currently requires dirtying the rendered style
    // - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
    // - try to use for only things like discrete layouts where the node position would change anyway


    elesfn$j.boundingBoxAt = function (fn) {
      var nodes = this.nodes();
      var cy = this.cy();
      var hasCompoundNodes = cy.hasCompoundNodes();

      if (hasCompoundNodes) {
        nodes = nodes.filter(function (node) {
          return !node.isParent();
        });
      }

      if (plainObject(fn)) {
        var obj = fn;

        fn = function fn() {
          return obj;
        };
      }

      var storeOldPos = function storeOldPos(node, i) {
        return node._private.bbAtOldPos = fn(node, i);
      };

      var getOldPos = function getOldPos(node) {
        return node._private.bbAtOldPos;
      };

      cy.startBatch();
      nodes.forEach(storeOldPos).silentPositions(fn);

      if (hasCompoundNodes) {
        this.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
      }

      var bb = copyBoundingBox(this.boundingBox({
        useCache: false
      }));
      nodes.silentPositions(getOldPos);
      cy.endBatch();
      return bb;
    };

    fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
    fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
    var bounds = elesfn$j;

    var fn$4, elesfn$k;
    fn$4 = elesfn$k = {};

    var defineDimFns = function defineDimFns(opts) {
      opts.uppercaseName = capitalize(opts.name);
      opts.autoName = 'auto' + opts.uppercaseName;
      opts.labelName = 'label' + opts.uppercaseName;
      opts.outerName = 'outer' + opts.uppercaseName;
      opts.uppercaseOuterName = capitalize(opts.outerName);

      fn$4[opts.name] = function dimImpl() {
        var ele = this[0];
        var _p = ele._private;
        var cy = _p.cy;
        var styleEnabled = cy._private.styleEnabled;

        if (ele) {
          if (styleEnabled) {
            if (ele.isParent()) {
              ele.updateCompoundBounds();
              return _p[opts.autoName] || 0;
            }

            var d = ele.pstyle(opts.name);

            switch (d.strValue) {
              case 'label':
                ele.recalculateRenderedStyle();
                return _p.rstyle[opts.labelName] || 0;

              default:
                return d.pfValue;
            }
          } else {
            return 1;
          }
        }
      };

      fn$4['outer' + opts.uppercaseName] = function outerDimImpl() {
        var ele = this[0];
        var _p = ele._private;
        var cy = _p.cy;
        var styleEnabled = cy._private.styleEnabled;

        if (ele) {
          if (styleEnabled) {
            var dim = ele[opts.name]();
            var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side

            var padding = 2 * ele.padding();
            return dim + border + padding;
          } else {
            return 1;
          }
        }
      };

      fn$4['rendered' + opts.uppercaseName] = function renderedDimImpl() {
        var ele = this[0];

        if (ele) {
          var d = ele[opts.name]();
          return d * this.cy().zoom();
        }
      };

      fn$4['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
        var ele = this[0];

        if (ele) {
          var od = ele[opts.outerName]();
          return od * this.cy().zoom();
        }
      };
    };

    defineDimFns({
      name: 'width'
    });
    defineDimFns({
      name: 'height'
    });

    elesfn$k.padding = function () {
      var ele = this[0];
      var _p = ele._private;

      if (ele.isParent()) {
        ele.updateCompoundBounds();

        if (_p.autoPadding !== undefined) {
          return _p.autoPadding;
        } else {
          return ele.pstyle('padding').pfValue;
        }
      } else {
        return ele.pstyle('padding').pfValue;
      }
    };

    var widthHeight = elesfn$k;

    var ifEdge = function ifEdge(ele, getValue) {
      if (ele.isEdge()) {
        return getValue(ele);
      }
    };

    var ifEdgeRenderedPosition = function ifEdgeRenderedPosition(ele, getPoint) {
      if (ele.isEdge()) {
        var cy = ele.cy();
        return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());
      }
    };

    var ifEdgeRenderedPositions = function ifEdgeRenderedPositions(ele, getPoints) {
      if (ele.isEdge()) {
        var cy = ele.cy();
        var pan = cy.pan();
        var zoom = cy.zoom();
        return getPoints(ele).map(function (p) {
          return modelToRenderedPosition(p, zoom, pan);
        });
      }
    };

    var controlPoints = function controlPoints(ele) {
      return ele.renderer().getControlPoints(ele);
    };

    var segmentPoints = function segmentPoints(ele) {
      return ele.renderer().getSegmentPoints(ele);
    };

    var sourceEndpoint = function sourceEndpoint(ele) {
      return ele.renderer().getSourceEndpoint(ele);
    };

    var targetEndpoint = function targetEndpoint(ele) {
      return ele.renderer().getTargetEndpoint(ele);
    };

    var midpoint = function midpoint(ele) {
      return ele.renderer().getEdgeMidpoint(ele);
    };

    var pts = {
      controlPoints: {
        get: controlPoints,
        mult: true
      },
      segmentPoints: {
        get: segmentPoints,
        mult: true
      },
      sourceEndpoint: {
        get: sourceEndpoint
      },
      targetEndpoint: {
        get: targetEndpoint
      },
      midpoint: {
        get: midpoint
      }
    };

    var renderedName = function renderedName(name) {
      return 'rendered' + name[0].toUpperCase() + name.substr(1);
    };

    var edgePoints = Object.keys(pts).reduce(function (obj, name) {
      var spec = pts[name];
      var rName = renderedName(name);

      obj[name] = function () {
        return ifEdge(this, spec.get);
      };

      if (spec.mult) {
        obj[rName] = function () {
          return ifEdgeRenderedPositions(this, spec.get);
        };
      } else {
        obj[rName] = function () {
          return ifEdgeRenderedPosition(this, spec.get);
        };
      }

      return obj;
    }, {});

    var dimensions = extend({}, position$1, bounds, widthHeight, edgePoints);

    /*!
    Event object based on jQuery events, MIT license

    https://jquery.org/license/
    https://tldrlegal.com/license/mit-license
    https://github.com/jquery/jquery/blob/master/src/event.js
    */
    var Event = function Event(src, props) {
      this.recycle(src, props);
    };

    function returnFalse() {
      return false;
    }

    function returnTrue() {
      return true;
    } // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


    Event.prototype = {
      instanceString: function instanceString() {
        return 'event';
      },
      recycle: function recycle(src, props) {
        this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;

        if (src != null && src.preventDefault) {
          // Browser Event object
          this.type = src.type; // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.

          this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
        } else if (src != null && src.type) {
          // Plain object containing all event details
          props = src;
        } else {
          // Event string
          this.type = src;
        } // Put explicitly provided properties onto the event object


        if (props != null) {
          // more efficient to manually copy fields we use
          this.originalEvent = props.originalEvent;
          this.type = props.type != null ? props.type : this.type;
          this.cy = props.cy;
          this.target = props.target;
          this.position = props.position;
          this.renderedPosition = props.renderedPosition;
          this.namespace = props.namespace;
          this.layout = props.layout;
        }

        if (this.cy != null && this.position != null && this.renderedPosition == null) {
          // create a rendered position based on the passed position
          var pos = this.position;
          var zoom = this.cy.zoom();
          var pan = this.cy.pan();
          this.renderedPosition = {
            x: pos.x * zoom + pan.x,
            y: pos.y * zoom + pan.y
          };
        } // Create a timestamp if incoming event doesn't have one


        this.timeStamp = src && src.timeStamp || Date.now();
      },
      preventDefault: function preventDefault() {
        this.isDefaultPrevented = returnTrue;
        var e = this.originalEvent;

        if (!e) {
          return;
        } // if preventDefault exists run it on the original event


        if (e.preventDefault) {
          e.preventDefault();
        }
      },
      stopPropagation: function stopPropagation() {
        this.isPropagationStopped = returnTrue;
        var e = this.originalEvent;

        if (!e) {
          return;
        } // if stopPropagation exists run it on the original event


        if (e.stopPropagation) {
          e.stopPropagation();
        }
      },
      stopImmediatePropagation: function stopImmediatePropagation() {
        this.isImmediatePropagationStopped = returnTrue;
        this.stopPropagation();
      },
      isDefaultPrevented: returnFalse,
      isPropagationStopped: returnFalse,
      isImmediatePropagationStopped: returnFalse
    };

    var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")

    var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

    var defaults$8 = {
      qualifierCompare: function qualifierCompare(q1, q2) {
        return q1 === q2;
      },
      eventMatches: function eventMatches()
      /*context, listener, eventObj*/
      {
        return true;
      },
      addEventFields: function addEventFields()
      /*context, evt*/
      {},
      callbackContext: function callbackContext(context
      /*, listener, eventObj*/
      ) {
        return context;
      },
      beforeEmit: function beforeEmit()
      /* context, listener, eventObj */
      {},
      afterEmit: function afterEmit()
      /* context, listener, eventObj */
      {},
      bubble: function bubble()
      /*context*/
      {
        return false;
      },
      parent: function parent()
      /*context*/
      {
        return null;
      },
      context: null
    };
    var defaultsKeys = Object.keys(defaults$8);

    function Emitter(opts, context) {
      // micro-optimisation vs Object.assign() -- reduces Element instantiation time
      for (var i = 0; i < defaultsKeys.length; i++) {
        var key = defaultsKeys[i];
        this[key] = opts[key] || defaults$8[key];
      }

      this.context = context || this.context;
      this.listeners = [];
      this.emitting = 0;
    }

    var p = Emitter.prototype;

    var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
      if (fn(qualifier)) {
        callback = qualifier;
        qualifier = null;
      }

      if (confOverrides) {
        if (conf == null) {
          conf = confOverrides;
        } else {
          conf = extend({}, conf, confOverrides);
        }
      }

      var eventList = array(events) ? events : events.split(/\s+/);

      for (var i = 0; i < eventList.length; i++) {
        var evt = eventList[i];

        if (emptyString(evt)) {
          continue;
        }

        var match = evt.match(eventRegex); // type[.namespace]

        if (match) {
          var type = match[1];
          var namespace = match[2] ? match[2] : null;
          var ret = handler(self, evt, type, namespace, qualifier, callback, conf);

          if (ret === false) {
            break;
          } // allow exiting early

        }
      }
    };

    var makeEventObj = function makeEventObj(self, obj) {
      self.addEventFields(self.context, obj);
      return new Event(obj.type, obj);
    };

    var forEachEventObj = function forEachEventObj(self, handler, events) {
      if (event(events)) {
        handler(self, events);
        return;
      } else if (plainObject(events)) {
        handler(self, makeEventObj(self, events));
        return;
      }

      var eventList = array(events) ? events : events.split(/\s+/);

      for (var i = 0; i < eventList.length; i++) {
        var evt = eventList[i];

        if (emptyString(evt)) {
          continue;
        }

        var match = evt.match(eventRegex); // type[.namespace]

        if (match) {
          var type = match[1];
          var namespace = match[2] ? match[2] : null;
          var eventObj = makeEventObj(self, {
            type: type,
            namespace: namespace,
            target: self.context
          });
          handler(self, eventObj);
        }
      }
    };

    p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
      forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {
        if (fn(callback)) {
          self.listeners.push({
            event: event,
            // full event string
            callback: callback,
            // callback to run
            type: type,
            // the event type (e.g. 'click')
            namespace: namespace,
            // the event namespace (e.g. ".foo")
            qualifier: qualifier,
            // a restriction on whether to match this emitter
            conf: conf // additional configuration

          });
        }
      }, events, qualifier, callback, conf, confOverrides);
      return this;
    };

    p.one = function (events, qualifier, callback, conf) {
      return this.on(events, qualifier, callback, conf, {
        one: true
      });
    };

    p.removeListener = p.off = function (events, qualifier, callback, conf) {
      var _this = this;

      if (this.emitting !== 0) {
        this.listeners = copyArray(this.listeners);
      }

      var listeners = this.listeners;

      var _loop = function _loop(i) {
        var listener = listeners[i];
        forEachEvent(_this, function (self, event, type, namespace, qualifier, callback
        /*, conf*/
        ) {
          if (listener.type === type && (!namespace || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
            listeners.splice(i, 1);
            return false;
          }
        }, events, qualifier, callback, conf);
      };

      for (var i = listeners.length - 1; i >= 0; i--) {
        _loop(i);
      }

      return this;
    };

    p.emit = p.trigger = function (events, extraParams, manualCallback) {
      var listeners = this.listeners;
      var numListenersBeforeEmit = listeners.length;
      this.emitting++;

      if (!array(extraParams)) {
        extraParams = [extraParams];
      }

      forEachEventObj(this, function (self, eventObj) {
        if (manualCallback != null) {
          listeners = [{
            event: eventObj.event,
            type: eventObj.type,
            namespace: eventObj.namespace,
            callback: manualCallback
          }];
          numListenersBeforeEmit = listeners.length;
        }

        var _loop2 = function _loop2(i) {
          var listener = listeners[i];

          if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
            var args = [eventObj];

            if (extraParams != null) {
              push(args, extraParams);
            }

            self.beforeEmit(self.context, listener, eventObj);

            if (listener.conf && listener.conf.one) {
              self.listeners = self.listeners.filter(function (l) {
                return l !== listener;
              });
            }

            var context = self.callbackContext(self.context, listener, eventObj);
            var ret = listener.callback.apply(context, args);
            self.afterEmit(self.context, listener, eventObj);

            if (ret === false) {
              eventObj.stopPropagation();
              eventObj.preventDefault();
            }
          } // if listener matches

        };

        for (var i = 0; i < numListenersBeforeEmit; i++) {
          _loop2(i);
        } // for listener


        if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
          self.parent(self.context).emit(eventObj, extraParams);
        }
      }, events);
      this.emitting--;
      return this;
    };

    var emitterOptions = {
      qualifierCompare: function qualifierCompare(selector1, selector2) {
        if (selector1 == null || selector2 == null) {
          return selector1 == null && selector2 == null;
        } else {
          return selector1.sameText(selector2);
        }
      },
      eventMatches: function eventMatches(ele, listener, eventObj) {
        var selector = listener.qualifier;

        if (selector != null) {
          return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
        }

        return true;
      },
      addEventFields: function addEventFields(ele, evt) {
        evt.cy = ele.cy();
        evt.target = ele;
      },
      callbackContext: function callbackContext(ele, listener, eventObj) {
        return listener.qualifier != null ? eventObj.target : ele;
      },
      beforeEmit: function beforeEmit(context, listener
      /*, eventObj*/
      ) {
        if (listener.conf && listener.conf.once) {
          listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
        }
      },
      bubble: function bubble() {
        return true;
      },
      parent: function parent(ele) {
        return ele.isChild() ? ele.parent() : ele.cy();
      }
    };

    var argSelector = function argSelector(arg) {
      if (string(arg)) {
        return new Selector(arg);
      } else {
        return arg;
      }
    };

    var elesfn$l = {
      createEmitter: function createEmitter() {
        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var _p = ele._private;

          if (!_p.emitter) {
            _p.emitter = new Emitter(emitterOptions, ele);
          }
        }

        return this;
      },
      emitter: function emitter() {
        return this._private.emitter;
      },
      on: function on(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().on(events, argSel, callback);
        }

        return this;
      },
      removeListener: function removeListener(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().removeListener(events, argSel, callback);
        }

        return this;
      },
      one: function one(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().one(events, argSel, callback);
        }

        return this;
      },
      once: function once(events, selector, callback) {
        var argSel = argSelector(selector);

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().on(events, argSel, callback, {
            once: true,
            onceCollection: this
          });
        }
      },
      emit: function emit(events, extraParams) {
        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          ele.emitter().emit(events, extraParams);
        }

        return this;
      },
      emitAndNotify: function emitAndNotify(event, extraParams) {
        // for internal use only
        if (this.length === 0) {
          return;
        } // empty collections don't need to notify anything
        // notify renderer


        this.cy().notify(event, this);
        this.emit(event, extraParams);
        return this;
      }
    };
    define$3.eventAliasesOn(elesfn$l);

    var elesfn$m = {
      nodes: function nodes(selector) {
        return this.filter(function (ele) {
          return ele.isNode();
        }).filter(selector);
      },
      edges: function edges(selector) {
        return this.filter(function (ele) {
          return ele.isEdge();
        }).filter(selector);
      },
      // internal helper to get nodes and edges as separate collections with single iteration over elements
      byGroup: function byGroup() {
        var nodes = this.spawn();
        var edges = this.spawn();

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];

          if (ele.isNode()) {
            nodes.merge(ele);
          } else {
            edges.merge(ele);
          }
        }

        return {
          nodes: nodes,
          edges: edges
        };
      },
      filter: function filter(_filter, thisArg) {
        if (_filter === undefined) {
          // check this first b/c it's the most common/performant case
          return this;
        } else if (string(_filter) || elementOrCollection(_filter)) {
          return new Selector(_filter).filter(this);
        } else if (fn(_filter)) {
          var filterEles = this.spawn();
          var eles = this;

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);

            if (include) {
              filterEles.merge(ele);
            }
          }

          return filterEles;
        }

        return this.spawn(); // if not handled by above, give 'em an empty collection
      },
      not: function not(toRemove) {
        if (!toRemove) {
          return this;
        } else {
          if (string(toRemove)) {
            toRemove = this.filter(toRemove);
          }

          var elements = [];
          var rMap = toRemove._private.map;

          for (var i = 0; i < this.length; i++) {
            var element = this[i];
            var remove = rMap.has(element.id());

            if (!remove) {
              elements.push(element);
            }
          }

          return this.spawn(elements);
        }
      },
      absoluteComplement: function absoluteComplement() {
        var cy = this.cy();
        return cy.mutableElements().not(this);
      },
      intersect: function intersect(other) {
        // if a selector is specified, then filter by it instead
        if (string(other)) {
          var selector = other;
          return this.filter(selector);
        }

        var elements = [];
        var col1 = this;
        var col2 = other;
        var col1Smaller = this.length < other.length;
        var map2 = col1Smaller ? col2._private.map : col1._private.map;
        var col = col1Smaller ? col1 : col2;

        for (var i = 0; i < col.length; i++) {
          var id = col[i]._private.data.id;
          var entry = map2.get(id);

          if (entry) {
            elements.push(entry.ele);
          }
        }

        return this.spawn(elements);
      },
      xor: function xor(other) {
        var cy = this._private.cy;

        if (string(other)) {
          other = cy.$(other);
        }

        var elements = [];
        var col1 = this;
        var col2 = other;

        var add = function add(col, other) {
          for (var i = 0; i < col.length; i++) {
            var ele = col[i];
            var id = ele._private.data.id;
            var inOther = other.hasElementWithId(id);

            if (!inOther) {
              elements.push(ele);
            }
          }
        };

        add(col1, col2);
        add(col2, col1);
        return this.spawn(elements);
      },
      diff: function diff(other) {
        var cy = this._private.cy;

        if (string(other)) {
          other = cy.$(other);
        }

        var left = [];
        var right = [];
        var both = [];
        var col1 = this;
        var col2 = other;

        var add = function add(col, other, retEles) {
          for (var i = 0; i < col.length; i++) {
            var ele = col[i];
            var id = ele._private.data.id;
            var inOther = other.hasElementWithId(id);

            if (inOther) {
              both.push(ele);
            } else {
              retEles.push(ele);
            }
          }
        };

        add(col1, col2, left);
        add(col2, col1, right);
        return {
          left: this.spawn(left, {
            unique: true
          }),
          right: this.spawn(right, {
            unique: true
          }),
          both: this.spawn(both, {
            unique: true
          })
        };
      },
      add: function add(toAdd) {
        var cy = this._private.cy;

        if (!toAdd) {
          return this;
        }

        if (string(toAdd)) {
          var selector = toAdd;
          toAdd = cy.mutableElements().filter(selector);
        }

        var elements = [];

        for (var i = 0; i < this.length; i++) {
          elements.push(this[i]);
        }

        var map = this._private.map;

        for (var _i = 0; _i < toAdd.length; _i++) {
          var add = !map.has(toAdd[_i].id());

          if (add) {
            elements.push(toAdd[_i]);
          }
        }

        return this.spawn(elements);
      },
      // in place merge on calling collection
      merge: function merge(toAdd) {
        var _p = this._private;
        var cy = _p.cy;

        if (!toAdd) {
          return this;
        }

        if (toAdd && string(toAdd)) {
          var selector = toAdd;
          toAdd = cy.mutableElements().filter(selector);
        }

        var map = _p.map;

        for (var i = 0; i < toAdd.length; i++) {
          var toAddEle = toAdd[i];
          var id = toAddEle._private.data.id;
          var add = !map.has(id);

          if (add) {
            var index = this.length++;
            this[index] = toAddEle;
            map.set(id, {
              ele: toAddEle,
              index: index
            });
          } else {
            // replace
            var _index = map.get(id).index;
            this[_index] = toAddEle;
            map.set(id, {
              ele: toAddEle,
              index: _index
            });
          }
        }

        return this; // chaining
      },
      unmergeAt: function unmergeAt(i) {
        var ele = this[i];
        var id = ele.id();
        var _p = this._private;
        var map = _p.map; // remove ele

        this[i] = undefined;
        map.delete(id);
        var unmergedLastEle = i === this.length - 1; // replace empty spot with last ele in collection

        if (this.length > 1 && !unmergedLastEle) {
          var lastEleI = this.length - 1;
          var lastEle = this[lastEleI];
          var lastEleId = lastEle._private.data.id;
          this[lastEleI] = undefined;
          this[i] = lastEle;
          map.set(lastEleId, {
            ele: lastEle,
            index: i
          });
        } // the collection is now 1 ele smaller


        this.length--;
        return this;
      },
      // remove single ele in place in calling collection
      unmergeOne: function unmergeOne(ele) {
        ele = ele[0];
        var _p = this._private;
        var id = ele._private.data.id;
        var map = _p.map;
        var entry = map.get(id);

        if (!entry) {
          return this; // no need to remove
        }

        var i = entry.index;
        this.unmergeAt(i);
        return this;
      },
      // remove eles in place on calling collection
      unmerge: function unmerge(toRemove) {
        var cy = this._private.cy;

        if (!toRemove) {
          return this;
        }

        if (toRemove && string(toRemove)) {
          var selector = toRemove;
          toRemove = cy.mutableElements().filter(selector);
        }

        for (var i = 0; i < toRemove.length; i++) {
          this.unmergeOne(toRemove[i]);
        }

        return this; // chaining
      },
      unmergeBy: function unmergeBy(toRmFn) {
        for (var i = this.length - 1; i >= 0; i--) {
          var ele = this[i];

          if (toRmFn(ele)) {
            this.unmergeAt(i);
          }
        }

        return this;
      },
      map: function map(mapFn, thisArg) {
        var arr = [];
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);
          arr.push(ret);
        }

        return arr;
      },
      reduce: function reduce(fn, initialValue) {
        var val = initialValue;
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          val = fn(val, eles[i], i, eles);
        }

        return val;
      },
      max: function max(valFn, thisArg) {
        var max = -Infinity;
        var maxEle;
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

          if (val > max) {
            max = val;
            maxEle = ele;
          }
        }

        return {
          value: max,
          ele: maxEle
        };
      },
      min: function min(valFn, thisArg) {
        var min = Infinity;
        var minEle;
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

          if (val < min) {
            min = val;
            minEle = ele;
          }
        }

        return {
          value: min,
          ele: minEle
        };
      }
    }; // aliases

    var fn$5 = elesfn$m;
    fn$5['u'] = fn$5['|'] = fn$5['+'] = fn$5.union = fn$5.or = fn$5.add;
    fn$5['\\'] = fn$5['!'] = fn$5['-'] = fn$5.difference = fn$5.relativeComplement = fn$5.subtract = fn$5.not;
    fn$5['n'] = fn$5['&'] = fn$5['.'] = fn$5.and = fn$5.intersection = fn$5.intersect;
    fn$5['^'] = fn$5['(+)'] = fn$5['(-)'] = fn$5.symmetricDifference = fn$5.symdiff = fn$5.xor;
    fn$5.fnFilter = fn$5.filterFn = fn$5.stdFilter = fn$5.filter;
    fn$5.complement = fn$5.abscomp = fn$5.absoluteComplement;

    var elesfn$n = {
      isNode: function isNode() {
        return this.group() === 'nodes';
      },
      isEdge: function isEdge() {
        return this.group() === 'edges';
      },
      isLoop: function isLoop() {
        return this.isEdge() && this.source()[0] === this.target()[0];
      },
      isSimple: function isSimple() {
        return this.isEdge() && this.source()[0] !== this.target()[0];
      },
      group: function group() {
        var ele = this[0];

        if (ele) {
          return ele._private.group;
        }
      }
    };

    /**
     *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
     *  and z-index (low to high).  These styles affect how this applies:
     *
     *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
     *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
     *      root to leaves of the compound graph.  The last drawn is `top`.
     *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
     *      `manual` ignores this convention and draws based on the `z-index` value setting.
     *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
     *      `z-index` will be drawn on top of an element with a lower `z-index`.
     */

    var zIndexSort = function zIndexSort(a, b) {
      var cy = a.cy();
      var hasCompoundNodes = cy.hasCompoundNodes();

      function getDepth(ele) {
        var style = ele.pstyle('z-compound-depth');

        if (style.value === 'auto') {
          return hasCompoundNodes ? ele.zDepth() : 0;
        } else if (style.value === 'bottom') {
          return -1;
        } else if (style.value === 'top') {
          return MAX_INT;
        } // 'orphan'


        return 0;
      }

      var depthDiff = getDepth(a) - getDepth(b);

      if (depthDiff !== 0) {
        return depthDiff;
      }

      function getEleDepth(ele) {
        var style = ele.pstyle('z-index-compare');

        if (style.value === 'auto') {
          return ele.isNode() ? 1 : 0;
        } // 'manual'


        return 0;
      }

      var eleDiff = getEleDepth(a) - getEleDepth(b);

      if (eleDiff !== 0) {
        return eleDiff;
      }

      var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;

      if (zDiff !== 0) {
        return zDiff;
      } // compare indices in the core (order added to graph w/ last on top)


      return a.poolIndex() - b.poolIndex();
    };

    var elesfn$o = {
      forEach: function forEach(fn$1, thisArg) {
        if (fn(fn$1)) {
          var N = this.length;

          for (var i = 0; i < N; i++) {
            var ele = this[i];
            var ret = thisArg ? fn$1.apply(thisArg, [ele, i, this]) : fn$1(ele, i, this);

            if (ret === false) {
              break;
            } // exit each early on return false

          }
        }

        return this;
      },
      toArray: function toArray() {
        var array = [];

        for (var i = 0; i < this.length; i++) {
          array.push(this[i]);
        }

        return array;
      },
      slice: function slice(start, end) {
        var array = [];
        var thisSize = this.length;

        if (end == null) {
          end = thisSize;
        }

        if (start == null) {
          start = 0;
        }

        if (start < 0) {
          start = thisSize + start;
        }

        if (end < 0) {
          end = thisSize + end;
        }

        for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
          array.push(this[i]);
        }

        return this.spawn(array);
      },
      size: function size() {
        return this.length;
      },
      eq: function eq(i) {
        return this[i] || this.spawn();
      },
      first: function first() {
        return this[0] || this.spawn();
      },
      last: function last() {
        return this[this.length - 1] || this.spawn();
      },
      empty: function empty() {
        return this.length === 0;
      },
      nonempty: function nonempty() {
        return !this.empty();
      },
      sort: function sort(sortFn) {
        if (!fn(sortFn)) {
          return this;
        }

        var sorted = this.toArray().sort(sortFn);
        return this.spawn(sorted);
      },
      sortByZIndex: function sortByZIndex() {
        return this.sort(zIndexSort);
      },
      zDepth: function zDepth() {
        var ele = this[0];

        if (!ele) {
          return undefined;
        } // let cy = ele.cy();


        var _p = ele._private;
        var group = _p.group;

        if (group === 'nodes') {
          var depth = _p.data.parent ? ele.parents().size() : 0;

          if (!ele.isParent()) {
            return MAX_INT - 1; // childless nodes always on top
          }

          return depth;
        } else {
          var src = _p.source;
          var tgt = _p.target;
          var srcDepth = src.zDepth();
          var tgtDepth = tgt.zDepth();
          return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
        }
      }
    };
    elesfn$o.each = elesfn$o.forEach;

    var getLayoutDimensionOptions = defaults$1({
      nodeDimensionsIncludeLabels: false
    });
    var elesfn$p = {
      // Calculates and returns node dimensions { x, y } based on options given
      layoutDimensions: function layoutDimensions(options) {
        options = getLayoutDimensionOptions(options);

        if (options.nodeDimensionsIncludeLabels) {
          var bbDim = this.boundingBox();
          return {
            w: bbDim.w,
            h: bbDim.h
          };
        } else {
          return {
            w: this.outerWidth(),
            h: this.outerHeight()
          };
        }
      },
      // using standard layout options, apply position function (w/ or w/o animation)
      layoutPositions: function layoutPositions(layout, options, fn) {
        var nodes = this.nodes();
        var cy = this.cy();
        var layoutEles = options.eles; // nodes & edges

        var getMemoizeKey = function getMemoizeKey(node) {
          return node.id();
        };

        var fnMem = memoize(fn, getMemoizeKey); // memoized version of position function

        layout.emit({
          type: 'layoutstart',
          layout: layout
        });
        layout.animations = [];

        var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
          var center = {
            x: nodesBb.x1 + nodesBb.w / 2,
            y: nodesBb.y1 + nodesBb.h / 2
          };
          var spacingVector = {
            // scale from center of bounding box (not necessarily 0,0)
            x: (pos.x - center.x) * spacing,
            y: (pos.y - center.y) * spacing
          };
          return {
            x: center.x + spacingVector.x,
            y: center.y + spacingVector.y
          };
        };

        var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;

        var spacingBb = function spacingBb() {
          if (!useSpacingFactor) {
            return null;
          }

          var bb = makeBoundingBox();

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var pos = fnMem(node, i);
            expandBoundingBoxByPoint(bb, pos.x, pos.y);
          }

          return bb;
        };

        var bb = spacingBb();
        var getFinalPos = memoize(function (node, i) {
          var newPos = fnMem(node, i);

          if (useSpacingFactor) {
            var spacing = Math.abs(options.spacingFactor);
            newPos = calculateSpacing(spacing, bb, newPos);
          }

          if (options.transform != null) {
            newPos = options.transform(node, newPos);
          }

          return newPos;
        }, getMemoizeKey);

        if (options.animate) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var newPos = getFinalPos(node, i);
            var animateNode = options.animateFilter == null || options.animateFilter(node, i);

            if (animateNode) {
              var ani = node.animation({
                position: newPos,
                duration: options.animationDuration,
                easing: options.animationEasing
              });
              layout.animations.push(ani);
            } else {
              node.position(newPos);
            }
          }

          if (options.fit) {
            var fitAni = cy.animation({
              fit: {
                boundingBox: layoutEles.boundingBoxAt(getFinalPos),
                padding: options.padding
              },
              duration: options.animationDuration,
              easing: options.animationEasing
            });
            layout.animations.push(fitAni);
          } else if (options.zoom !== undefined && options.pan !== undefined) {
            var zoomPanAni = cy.animation({
              zoom: options.zoom,
              pan: options.pan,
              duration: options.animationDuration,
              easing: options.animationEasing
            });
            layout.animations.push(zoomPanAni);
          }

          layout.animations.forEach(function (ani) {
            return ani.play();
          });
          layout.one('layoutready', options.ready);
          layout.emit({
            type: 'layoutready',
            layout: layout
          });
          Promise$1.all(layout.animations.map(function (ani) {
            return ani.promise();
          })).then(function () {
            layout.one('layoutstop', options.stop);
            layout.emit({
              type: 'layoutstop',
              layout: layout
            });
          });
        } else {
          nodes.positions(getFinalPos);

          if (options.fit) {
            cy.fit(options.eles, options.padding);
          }

          if (options.zoom != null) {
            cy.zoom(options.zoom);
          }

          if (options.pan) {
            cy.pan(options.pan);
          }

          layout.one('layoutready', options.ready);
          layout.emit({
            type: 'layoutready',
            layout: layout
          });
          layout.one('layoutstop', options.stop);
          layout.emit({
            type: 'layoutstop',
            layout: layout
          });
        }

        return this; // chaining
      },
      layout: function layout(options) {
        var cy = this.cy();
        return cy.makeLayout(extend({}, options, {
          eles: this
        }));
      }
    }; // aliases:

    elesfn$p.createLayout = elesfn$p.makeLayout = elesfn$p.layout;

    function styleCache(key, fn, ele) {
      var _p = ele._private;
      var cache = _p.styleCache = _p.styleCache || [];
      var val;

      if ((val = cache[key]) != null) {
        return val;
      } else {
        val = cache[key] = fn(ele);
        return val;
      }
    }

    function cacheStyleFunction(key, fn) {
      key = hashString(key);
      return function cachedStyleFunction(ele) {
        return styleCache(key, fn, ele);
      };
    }

    function cachePrototypeStyleFunction(key, fn) {
      key = hashString(key);

      var selfFn = function selfFn(ele) {
        return fn.call(ele);
      };

      return function cachedPrototypeStyleFunction() {
        var ele = this[0];

        if (ele) {
          return styleCache(key, selfFn, ele);
        }
      };
    }

    var elesfn$q = {
      recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
        var cy = this.cy();
        var renderer = cy.renderer();
        var styleEnabled = cy.styleEnabled();

        if (renderer && styleEnabled) {
          renderer.recalculateRenderedStyle(this, useCache);
        }

        return this;
      },
      dirtyStyleCache: function dirtyStyleCache() {
        var cy = this.cy();

        var dirty = function dirty(ele) {
          return ele._private.styleCache = null;
        };

        if (cy.hasCompoundNodes()) {
          var eles;
          eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
          eles.merge(eles.connectedEdges());
          eles.forEach(dirty);
        } else {
          this.forEach(function (ele) {
            dirty(ele);
            ele.connectedEdges().forEach(dirty);
          });
        }

        return this;
      },
      // fully updates (recalculates) the style for the elements
      updateStyle: function updateStyle(notifyRenderer) {
        var cy = this._private.cy;

        if (!cy.styleEnabled()) {
          return this;
        }

        if (cy.batching()) {
          var bEles = cy._private.batchStyleEles;
          bEles.merge(this);
          return this; // chaining and exit early when batching
        }

        var hasCompounds = cy.hasCompoundNodes();
        var style = cy.style();
        var updatedEles = this;
        notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

        if (hasCompounds) {
          // then add everything up and down for compound selector checks
          updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
        }

        var changedEles = style.apply(updatedEles);

        if (notifyRenderer) {
          changedEles.emitAndNotify('style'); // let renderer know we changed style
        } else {
          changedEles.emit('style'); // just fire the event
        }

        return this; // chaining
      },
      // get the internal parsed style object for the specified property
      parsedStyle: function parsedStyle(property) {
        var includeNonDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var ele = this[0];
        var cy = ele.cy();

        if (!cy.styleEnabled()) {
          return;
        }

        if (ele) {
          var overriddenStyle = ele._private.style[property];

          if (overriddenStyle != null) {
            return overriddenStyle;
          } else if (includeNonDefault) {
            return cy.style().getDefaultProperty(property);
          } else {
            return null;
          }
        }
      },
      numericStyle: function numericStyle(property) {
        var ele = this[0];

        if (!ele.cy().styleEnabled()) {
          return;
        }

        if (ele) {
          var pstyle = ele.pstyle(property);
          return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
        }
      },
      numericStyleUnits: function numericStyleUnits(property) {
        var ele = this[0];

        if (!ele.cy().styleEnabled()) {
          return;
        }

        if (ele) {
          return ele.pstyle(property).units;
        }
      },
      // get the specified css property as a rendered value (i.e. on-screen value)
      // or get the whole rendered style if no property specified (NB doesn't allow setting)
      renderedStyle: function renderedStyle(property) {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return this;
        }

        var ele = this[0];

        if (ele) {
          return cy.style().getRenderedStyle(ele, property);
        }
      },
      // read the calculated css style of the element or override the style (via a bypass)
      style: function style(name, value) {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return this;
        }

        var updateTransitions = false;
        var style = cy.style();

        if (plainObject(name)) {
          // then extend the bypass
          var props = name;
          style.applyBypass(this, props, updateTransitions);
          this.emitAndNotify('style'); // let the renderer know we've updated style
        } else if (string(name)) {
          if (value === undefined) {
            // then get the property from the style
            var ele = this[0];

            if (ele) {
              return style.getStylePropertyValue(ele, name);
            } else {
              // empty collection => can't get any value
              return;
            }
          } else {
            // then set the bypass with the property value
            style.applyBypass(this, name, value, updateTransitions);
            this.emitAndNotify('style'); // let the renderer know we've updated style
          }
        } else if (name === undefined) {
          var _ele = this[0];

          if (_ele) {
            return style.getRawStyle(_ele);
          } else {
            // empty collection => can't get any value
            return;
          }
        }

        return this; // chaining
      },
      removeStyle: function removeStyle(names) {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return this;
        }

        var updateTransitions = false;
        var style = cy.style();
        var eles = this;

        if (names === undefined) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            style.removeAllBypasses(ele, updateTransitions);
          }
        } else {
          names = names.split(/\s+/);

          for (var _i = 0; _i < eles.length; _i++) {
            var _ele2 = eles[_i];
            style.removeBypasses(_ele2, names, updateTransitions);
          }
        }

        this.emitAndNotify('style'); // let the renderer know we've updated style

        return this; // chaining
      },
      show: function show() {
        this.css('display', 'element');
        return this; // chaining
      },
      hide: function hide() {
        this.css('display', 'none');
        return this; // chaining
      },
      effectiveOpacity: function effectiveOpacity() {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return 1;
        }

        var hasCompoundNodes = cy.hasCompoundNodes();
        var ele = this[0];

        if (ele) {
          var _p = ele._private;
          var parentOpacity = ele.pstyle('opacity').value;

          if (!hasCompoundNodes) {
            return parentOpacity;
          }

          var parents = !_p.data.parent ? null : ele.parents();

          if (parents) {
            for (var i = 0; i < parents.length; i++) {
              var parent = parents[i];
              var opacity = parent.pstyle('opacity').value;
              parentOpacity = opacity * parentOpacity;
            }
          }

          return parentOpacity;
        }
      },
      transparent: function transparent() {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return false;
        }

        var ele = this[0];
        var hasCompoundNodes = ele.cy().hasCompoundNodes();

        if (ele) {
          if (!hasCompoundNodes) {
            return ele.pstyle('opacity').value === 0;
          } else {
            return ele.effectiveOpacity() === 0;
          }
        }
      },
      backgrounding: function backgrounding() {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return false;
        }

        var ele = this[0];
        return ele._private.backgrounding ? true : false;
      }
    };

    function checkCompound(ele, parentOk) {
      var _p = ele._private;
      var parents = _p.data.parent ? ele.parents() : null;

      if (parents) {
        for (var i = 0; i < parents.length; i++) {
          var parent = parents[i];

          if (!parentOk(parent)) {
            return false;
          }
        }
      }

      return true;
    }

    function defineDerivedStateFunction(specs) {
      var ok = specs.ok;
      var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
      var parentOk = specs.parentOk || specs.ok;
      return function () {
        var cy = this.cy();

        if (!cy.styleEnabled()) {
          return true;
        }

        var ele = this[0];
        var hasCompoundNodes = cy.hasCompoundNodes();

        if (ele) {
          var _p = ele._private;

          if (!ok(ele)) {
            return false;
          }

          if (ele.isNode()) {
            return !hasCompoundNodes || checkCompound(ele, parentOk);
          } else {
            var src = _p.source;
            var tgt = _p.target;
            return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
          }
        }
      };
    }

    var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
      return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
    });
    elesfn$q.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
      ok: eleTakesUpSpace
    }));
    var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
      return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
    });
    var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
      return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
    });
    elesfn$q.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
      ok: eleInteractive,
      parentOk: parentInteractive,
      edgeOkViaNode: eleTakesUpSpace
    }));

    elesfn$q.noninteractive = function () {
      var ele = this[0];

      if (ele) {
        return !ele.interactive();
      }
    };

    var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
      return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
    });
    var edgeVisibleViaNode = eleTakesUpSpace;
    elesfn$q.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
      ok: eleVisible,
      edgeOkViaNode: edgeVisibleViaNode
    }));

    elesfn$q.hidden = function () {
      var ele = this[0];

      if (ele) {
        return !ele.visible();
      }
    };

    elesfn$q.isBundledBezier = cachePrototypeStyleFunction('isBundledBezier', function () {
      if (!this.cy().styleEnabled()) {
        return false;
      }

      return !this.removed() && this.pstyle('curve-style').value === 'bezier' && this.takesUpSpace();
    });
    elesfn$q.bypass = elesfn$q.css = elesfn$q.style;
    elesfn$q.renderedCss = elesfn$q.renderedStyle;
    elesfn$q.removeBypass = elesfn$q.removeCss = elesfn$q.removeStyle;
    elesfn$q.pstyle = elesfn$q.parsedStyle;

    var elesfn$r = {};

    function defineSwitchFunction(params) {
      return function () {
        var args = arguments;
        var changedEles = []; // e.g. cy.nodes().select( data, handler )

        if (args.length === 2) {
          var data = args[0];
          var handler = args[1];
          this.on(params.event, data, handler);
        } // e.g. cy.nodes().select( handler )
        else if (args.length === 1 && fn(args[0])) {
            var _handler = args[0];
            this.on(params.event, _handler);
          } // e.g. cy.nodes().select()
          // e.g. (private) cy.nodes().select(['tapselect'])
          else if (args.length === 0 || args.length === 1 && array(args[0])) {
              var addlEvents = args.length === 1 ? args[0] : null;

              for (var i = 0; i < this.length; i++) {
                var ele = this[i];
                var able = !params.ableField || ele._private[params.ableField];
                var changed = ele._private[params.field] != params.value;

                if (params.overrideAble) {
                  var overrideAble = params.overrideAble(ele);

                  if (overrideAble !== undefined) {
                    able = overrideAble;

                    if (!overrideAble) {
                      return this;
                    } // to save cycles assume not able for all on override

                  }
                }

                if (able) {
                  ele._private[params.field] = params.value;

                  if (changed) {
                    changedEles.push(ele);
                  }
                }
              }

              var changedColl = this.spawn(changedEles);
              changedColl.updateStyle(); // change of state => possible change of style

              changedColl.emit(params.event);

              if (addlEvents) {
                changedColl.emit(addlEvents);
              }
            }

        return this;
      };
    }

    function defineSwitchSet(params) {
      elesfn$r[params.field] = function () {
        var ele = this[0];

        if (ele) {
          if (params.overrideField) {
            var val = params.overrideField(ele);

            if (val !== undefined) {
              return val;
            }
          }

          return ele._private[params.field];
        }
      };

      elesfn$r[params.on] = defineSwitchFunction({
        event: params.on,
        field: params.field,
        ableField: params.ableField,
        overrideAble: params.overrideAble,
        value: true
      });
      elesfn$r[params.off] = defineSwitchFunction({
        event: params.off,
        field: params.field,
        ableField: params.ableField,
        overrideAble: params.overrideAble,
        value: false
      });
    }

    defineSwitchSet({
      field: 'locked',
      overrideField: function overrideField(ele) {
        return ele.cy().autolock() ? true : undefined;
      },
      on: 'lock',
      off: 'unlock'
    });
    defineSwitchSet({
      field: 'grabbable',
      overrideField: function overrideField(ele) {
        return ele.cy().autoungrabify() ? false : undefined;
      },
      on: 'grabify',
      off: 'ungrabify'
    });
    defineSwitchSet({
      field: 'selected',
      ableField: 'selectable',
      overrideAble: function overrideAble(ele) {
        return ele.cy().autounselectify() ? false : undefined;
      },
      on: 'select',
      off: 'unselect'
    });
    defineSwitchSet({
      field: 'selectable',
      overrideField: function overrideField(ele) {
        return ele.cy().autounselectify() ? false : undefined;
      },
      on: 'selectify',
      off: 'unselectify'
    });
    elesfn$r.deselect = elesfn$r.unselect;

    elesfn$r.grabbed = function () {
      var ele = this[0];

      if (ele) {
        return ele._private.grabbed;
      }
    };

    defineSwitchSet({
      field: 'active',
      on: 'activate',
      off: 'unactivate'
    });

    elesfn$r.inactive = function () {
      var ele = this[0];

      if (ele) {
        return !ele._private.active;
      }
    };

    var elesfn$s = {}; // DAG functions
    ////////////////

    var defineDagExtremity = function defineDagExtremity(params) {
      return function dagExtremityImpl(selector) {
        var eles = this;
        var ret = [];

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (!ele.isNode()) {
            continue;
          }

          var disqualified = false;
          var edges = ele.connectedEdges();

          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            var src = edge.source();
            var tgt = edge.target();

            if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
              disqualified = true;
              break;
            }
          }

          if (!disqualified) {
            ret.push(ele);
          }
        }

        return this.spawn(ret, {
          unique: true
        }).filter(selector);
      };
    };

    var defineDagOneHop = function defineDagOneHop(params) {
      return function (selector) {
        var eles = this;
        var oEles = [];

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (!ele.isNode()) {
            continue;
          }

          var edges = ele.connectedEdges();

          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            var src = edge.source();
            var tgt = edge.target();

            if (params.outgoing && src === ele) {
              oEles.push(edge);
              oEles.push(tgt);
            } else if (params.incoming && tgt === ele) {
              oEles.push(edge);
              oEles.push(src);
            }
          }
        }

        return this.spawn(oEles, {
          unique: true
        }).filter(selector);
      };
    };

    var defineDagAllHops = function defineDagAllHops(params) {
      return function (selector) {
        var eles = this;
        var sEles = [];
        var sElesIds = {};

        for (;;) {
          var next = params.outgoing ? eles.outgoers() : eles.incomers();

          if (next.length === 0) {
            break;
          } // done if none left


          var newNext = false;

          for (var i = 0; i < next.length; i++) {
            var n = next[i];
            var nid = n.id();

            if (!sElesIds[nid]) {
              sElesIds[nid] = true;
              sEles.push(n);
              newNext = true;
            }
          }

          if (!newNext) {
            break;
          } // done if touched all outgoers already


          eles = next;
        }

        return this.spawn(sEles, {
          unique: true
        }).filter(selector);
      };
    };

    elesfn$s.clearTraversalCache = function () {
      for (var i = 0; i < this.length; i++) {
        this[i]._private.traversalCache = null;
      }
    };

    extend(elesfn$s, {
      // get the root nodes in the DAG
      roots: defineDagExtremity({
        noIncomingEdges: true
      }),
      // get the leaf nodes in the DAG
      leaves: defineDagExtremity({
        noOutgoingEdges: true
      }),
      // normally called children in graph theory
      // these nodes =edges=> outgoing nodes
      outgoers: cache(defineDagOneHop({
        outgoing: true
      }), 'outgoers'),
      // aka DAG descendants
      successors: defineDagAllHops({
        outgoing: true
      }),
      // normally called parents in graph theory
      // these nodes <=edges= incoming nodes
      incomers: cache(defineDagOneHop({
        incoming: true
      }), 'incomers'),
      // aka DAG ancestors
      predecessors: defineDagAllHops({
        incoming: true
      })
    }); // Neighbourhood functions
    //////////////////////////

    extend(elesfn$s, {
      neighborhood: cache(function (selector) {
        var elements = [];
        var nodes = this.nodes();

        for (var i = 0; i < nodes.length; i++) {
          // for all nodes
          var node = nodes[i];
          var connectedEdges = node.connectedEdges(); // for each connected edge, add the edge and the other node

          for (var j = 0; j < connectedEdges.length; j++) {
            var edge = connectedEdges[j];
            var src = edge.source();
            var tgt = edge.target();
            var otherNode = node === src ? tgt : src; // need check in case of loop

            if (otherNode.length > 0) {
              elements.push(otherNode[0]); // add node 1 hop away
            } // add connected edge


            elements.push(edge[0]);
          }
        }

        return this.spawn(elements, {
          unique: true
        }).filter(selector);
      }, 'neighborhood'),
      closedNeighborhood: function closedNeighborhood(selector) {
        return this.neighborhood().add(this).filter(selector);
      },
      openNeighborhood: function openNeighborhood(selector) {
        return this.neighborhood(selector);
      }
    }); // aliases

    elesfn$s.neighbourhood = elesfn$s.neighborhood;
    elesfn$s.closedNeighbourhood = elesfn$s.closedNeighborhood;
    elesfn$s.openNeighbourhood = elesfn$s.openNeighborhood; // Edge functions
    /////////////////

    extend(elesfn$s, {
      source: cache(function sourceImpl(selector) {
        var ele = this[0];
        var src;

        if (ele) {
          src = ele._private.source || ele.cy().collection();
        }

        return src && selector ? src.filter(selector) : src;
      }, 'source'),
      target: cache(function targetImpl(selector) {
        var ele = this[0];
        var tgt;

        if (ele) {
          tgt = ele._private.target || ele.cy().collection();
        }

        return tgt && selector ? tgt.filter(selector) : tgt;
      }, 'target'),
      sources: defineSourceFunction({
        attr: 'source'
      }),
      targets: defineSourceFunction({
        attr: 'target'
      })
    });

    function defineSourceFunction(params) {
      return function sourceImpl(selector) {
        var sources = [];

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var src = ele._private[params.attr];

          if (src) {
            sources.push(src);
          }
        }

        return this.spawn(sources, {
          unique: true
        }).filter(selector);
      };
    }

    extend(elesfn$s, {
      edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),
      edgesTo: cache(defineEdgesWithFunction({
        thisIsSrc: true
      }), 'edgesTo')
    });

    function defineEdgesWithFunction(params) {
      return function edgesWithImpl(otherNodes) {
        var elements = [];
        var cy = this._private.cy;
        var p = params || {}; // get elements if a selector is specified

        if (string(otherNodes)) {
          otherNodes = cy.$(otherNodes);
        }

        for (var h = 0; h < otherNodes.length; h++) {
          var edges = otherNodes[h]._private.edges;

          for (var i = 0; i < edges.length; i++) {
            var edge = edges[i];
            var edgeData = edge._private.data;
            var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
            var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
            var edgeConnectsThisAndOther = thisToOther || otherToThis;

            if (!edgeConnectsThisAndOther) {
              continue;
            }

            if (p.thisIsSrc || p.thisIsTgt) {
              if (p.thisIsSrc && !thisToOther) {
                continue;
              }

              if (p.thisIsTgt && !otherToThis) {
                continue;
              }
            }

            elements.push(edge);
          }
        }

        return this.spawn(elements, {
          unique: true
        });
      };
    }

    extend(elesfn$s, {
      connectedEdges: cache(function (selector) {
        var retEles = [];
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var node = eles[i];

          if (!node.isNode()) {
            continue;
          }

          var edges = node._private.edges;

          for (var j = 0; j < edges.length; j++) {
            var edge = edges[j];
            retEles.push(edge);
          }
        }

        return this.spawn(retEles, {
          unique: true
        }).filter(selector);
      }, 'connectedEdges'),
      connectedNodes: cache(function (selector) {
        var retEles = [];
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var edge = eles[i];

          if (!edge.isEdge()) {
            continue;
          }

          retEles.push(edge.source()[0]);
          retEles.push(edge.target()[0]);
        }

        return this.spawn(retEles, {
          unique: true
        }).filter(selector);
      }, 'connectedNodes'),
      parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),
      codirectedEdges: cache(defineParallelEdgesFunction({
        codirected: true
      }), 'codirectedEdges')
    });

    function defineParallelEdgesFunction(params) {
      var defaults = {
        codirected: false
      };
      params = extend({}, defaults, params);
      return function parallelEdgesImpl(selector) {
        // micro-optimised for renderer
        var elements = [];
        var edges = this.edges();
        var p = params; // look at all the edges in the collection

        for (var i = 0; i < edges.length; i++) {
          var edge1 = edges[i];
          var edge1_p = edge1._private;
          var src1 = edge1_p.source;
          var srcid1 = src1._private.data.id;
          var tgtid1 = edge1_p.data.target;
          var srcEdges1 = src1._private.edges; // look at edges connected to the src node of this edge

          for (var j = 0; j < srcEdges1.length; j++) {
            var edge2 = srcEdges1[j];
            var edge2data = edge2._private.data;
            var tgtid2 = edge2data.target;
            var srcid2 = edge2data.source;
            var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
            var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

            if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
              elements.push(edge2);
            }
          }
        }

        return this.spawn(elements, {
          unique: true
        }).filter(selector);
      };
    } // Misc functions
    /////////////////


    extend(elesfn$s, {
      components: function components(root) {
        var self = this;
        var cy = self.cy();
        var visited = cy.collection();
        var unvisited = root == null ? self.nodes() : root.nodes();
        var components = [];

        if (root != null && unvisited.empty()) {
          // root may contain only edges
          unvisited = root.sources(); // doesn't matter which node to use (undirected), so just use the source sides
        }

        var visitInComponent = function visitInComponent(node, component) {
          visited.merge(node);
          unvisited.unmerge(node);
          component.merge(node);
        };

        if (unvisited.empty()) {
          return self.spawn();
        }

        var _loop = function _loop() {
          // each iteration yields a component
          var cmpt = cy.collection();
          components.push(cmpt);
          var root = unvisited[0];
          visitInComponent(root, cmpt);
          self.bfs({
            directed: false,
            roots: root,
            visit: function visit(v) {
              return visitInComponent(v, cmpt);
            }
          });
          cmpt.forEach(function (node) {
            node.connectedEdges().forEach(function (e) {
              // connectedEdges() usually cached
              if (cmpt.has(e.source()) && cmpt.has(e.target())) {
                // has() is cheap
                cmpt.merge(e); // forEach() only considers nodes -- sets N at call time
              }
            });
          });
        };

        do {
          _loop();
        } while (unvisited.length > 0);

        return components;
      },
      component: function component() {
        var ele = this[0];
        return ele.cy().mutableElements().components(ele)[0];
      }
    });
    elesfn$s.componentsOf = elesfn$s.components;

    var idFactory = {
      generate: function generate(cy, element, tryThisId) {
        var id = tryThisId != null ? tryThisId : uuid();

        while (cy.hasElementWithId(id)) {
          id = uuid();
        }

        return id;
      }
    }; // represents a set of nodes, edges, or both together

    var Collection = function Collection(cy, elements, options) {
      if (cy === undefined || !core(cy)) {
        error('A collection must have a reference to the core');
        return;
      }

      var map = new Map$1();
      var createdElements = false;

      if (!elements) {
        elements = [];
      } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
        createdElements = true; // make elements from json and restore all at once later

        var eles = [];
        var elesIds = new Set$1();

        for (var i = 0, l = elements.length; i < l; i++) {
          var json = elements[i];

          if (json.data == null) {
            json.data = {};
          }

          var _data = json.data; // make sure newly created elements have valid ids

          if (_data.id == null) {
            _data.id = idFactory.generate(cy, json);
          } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
            continue; // can't create element if prior id already exists
          }

          var ele = new Element(cy, json, false);
          eles.push(ele);
          elesIds.add(_data.id);
        }

        elements = eles;
      }

      this.length = 0;

      for (var _i = 0, _l = elements.length; _i < _l; _i++) {
        var element$1 = elements[_i];

        if (element$1 == null) {
          continue;
        }

        var id = element$1._private.data.id;

        if (options == null || options.unique && !map.has(id)) {
          map.set(id, {
            index: this.length,
            ele: element$1
          });
          this[this.length] = element$1;
          this.length++;
        }
      }

      this._private = {
        cy: cy,
        map: map
      }; // restore the elements if we created them from json

      if (createdElements) {
        this.restore();
      }
    }; // Functions
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // keep the prototypes in sync (an element has the same functions as a collection)
    // and use elefn and elesfn as shorthands to the prototypes


    var elesfn$t = Element.prototype = Collection.prototype;

    elesfn$t.instanceString = function () {
      return 'collection';
    };

    elesfn$t.spawn = function (cy, eles, opts) {
      if (!core(cy)) {
        // cy is optional
        opts = eles;
        eles = cy;
        cy = this.cy();
      }

      return new Collection(cy, eles, opts);
    };

    elesfn$t.spawnSelf = function () {
      return this.spawn(this);
    };

    elesfn$t.cy = function () {
      return this._private.cy;
    };

    elesfn$t.renderer = function () {
      return this._private.cy.renderer();
    };

    elesfn$t.element = function () {
      return this[0];
    };

    elesfn$t.collection = function () {
      if (collection(this)) {
        return this;
      } else {
        // an element
        return new Collection(this._private.cy, [this]);
      }
    };

    elesfn$t.unique = function () {
      return new Collection(this._private.cy, this, {
        unique: true
      });
    };

    elesfn$t.hasElementWithId = function (id) {
      return this._private.map.has(id);
    };

    elesfn$t.getElementById = function (id) {
      var cy = this._private.cy;

      var entry = this._private.map.get(id);

      return entry ? entry.ele : new Collection(cy); // get ele or empty collection
    };

    elesfn$t.$id = elesfn$t.getElementById;

    elesfn$t.poolIndex = function () {
      var cy = this._private.cy;
      var eles = cy._private.elements;
      var id = this[0]._private.data.id;
      return eles._private.map.get(id).index;
    };

    elesfn$t.indexOf = function (ele) {
      var id = ele[0]._private.data.id;
      return this._private.map.get(id).index;
    };

    elesfn$t.indexOfId = function (id) {
      return this._private.map.get(id).index;
    };

    elesfn$t.json = function (obj) {
      var ele = this.element();
      var cy = this.cy();

      if (ele == null && obj) {
        return this;
      } // can't set to no eles


      if (ele == null) {
        return undefined;
      } // can't get from no eles


      var p = ele._private;

      if (plainObject(obj)) {
        // set
        cy.startBatch();

        if (obj.data) {
          ele.data(obj.data);
          var _data2 = p.data;

          if (ele.isEdge()) {
            // source and target are immutable via data()
            var move = false;
            var spec = {};
            var src = obj.data.source;
            var tgt = obj.data.target;

            if (src != null && src !== _data2.source) {
              spec.source = src;
              move = true;
            }

            if (tgt != null && tgt !== _data2.target) {
              spec.target = tgt;
              move = true;
            }

            if (move) {
              ele = ele.move(spec);
            }
          } else {
            // parent is immutable via data()
            var parent = obj.data.parent;

            if ((parent != null || _data2.parent != null) && parent !== _data2.parent) {
              if (parent === undefined) {
                // can't set undefined imperatively, so use null
                parent = null;
              }

              ele = ele.move({
                parent: parent
              });
            }
          }
        }

        if (obj.position) {
          ele.position(obj.position);
        } // ignore group -- immutable


        var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
          var obj_k = obj[k];

          if (obj_k != null && obj_k !== p[k]) {
            if (obj_k) {
              ele[trueFnName]();
            } else {
              ele[falseFnName]();
            }
          }
        };

        checkSwitch('removed', 'remove', 'restore');
        checkSwitch('selected', 'select', 'unselect');
        checkSwitch('selectable', 'selectify', 'unselectify');
        checkSwitch('locked', 'lock', 'unlock');
        checkSwitch('grabbable', 'grabify', 'ungrabify');

        if (obj.classes != null) {
          ele.classes(obj.classes);
        }

        cy.endBatch();
        return this;
      } else if (obj === undefined) {
        // get
        var json = {
          data: copy(p.data),
          position: copy(p.position),
          group: p.group,
          removed: p.removed,
          selected: p.selected,
          selectable: p.selectable,
          locked: p.locked,
          grabbable: p.grabbable,
          classes: null
        };
        json.classes = '';
        var i = 0;
        p.classes.forEach(function (cls) {
          return json.classes += i++ === 0 ? cls : ' ' + cls;
        });
        return json;
      }
    };

    elesfn$t.jsons = function () {
      var jsons = [];

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var json = ele.json();
        jsons.push(json);
      }

      return jsons;
    };

    elesfn$t.clone = function () {
      var cy = this.cy();
      var elesArr = [];

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var json = ele.json();
        var clone = new Element(cy, json, false); // NB no restore

        elesArr.push(clone);
      }

      return new Collection(cy, elesArr);
    };

    elesfn$t.copy = elesfn$t.clone;

    elesfn$t.restore = function () {
      var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var addToPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var self = this;
      var cy = self.cy();
      var cy_p = cy._private; // create arrays of nodes and edges, since we need to
      // restore the nodes first

      var nodes = [];
      var edges = [];
      var elements;

      for (var _i2 = 0, l = self.length; _i2 < l; _i2++) {
        var ele = self[_i2];

        if (addToPool && !ele.removed()) {
          // don't need to handle this ele
          continue;
        } // keep nodes first in the array and edges after


        if (ele.isNode()) {
          // put to front of array if node
          nodes.push(ele);
        } else {
          // put to end of array if edge
          edges.push(ele);
        }
      }

      elements = nodes.concat(edges);
      var i;

      var removeFromElements = function removeFromElements() {
        elements.splice(i, 1);
        i--;
      }; // now, restore each element


      for (i = 0; i < elements.length; i++) {
        var _ele = elements[i];
        var _private = _ele._private;
        var _data3 = _private.data; // the traversal cache should start fresh when ele is added

        _ele.clearTraversalCache(); // set id and validate


        if (!addToPool && !_private.removed) ; else if (_data3.id === undefined) {
          _data3.id = idFactory.generate(cy, _ele);
        } else if (number(_data3.id)) {
          _data3.id = '' + _data3.id; // now it's a string
        } else if (emptyString(_data3.id) || !string(_data3.id)) {
          error('Can not create element with invalid string ID `' + _data3.id + '`'); // can't create element if it has empty string as id or non-string id

          removeFromElements();
          continue;
        } else if (cy.hasElementWithId(_data3.id)) {
          error('Can not create second element with ID `' + _data3.id + '`'); // can't create element if one already has that id

          removeFromElements();
          continue;
        }

        var id = _data3.id; // id is finalised, now let's keep a ref

        if (_ele.isNode()) {
          // extra checks for nodes
          var pos = _private.position; // make sure the nodes have a defined position

          if (pos.x == null) {
            pos.x = 0;
          }

          if (pos.y == null) {
            pos.y = 0;
          }
        }

        if (_ele.isEdge()) {
          // extra checks for edges
          var edge = _ele;
          var fields = ['source', 'target'];
          var fieldsLength = fields.length;
          var badSourceOrTarget = false;

          for (var j = 0; j < fieldsLength; j++) {
            var field = fields[j];
            var val = _data3[field];

            if (number(val)) {
              val = _data3[field] = '' + _data3[field]; // now string
            }

            if (val == null || val === '') {
              // can't create if source or target is not defined properly
              error('Can not create edge `' + id + '` with unspecified ' + field);
              badSourceOrTarget = true;
            } else if (!cy.hasElementWithId(val)) {
              // can't create edge if one of its nodes doesn't exist
              error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
              badSourceOrTarget = true;
            }
          }

          if (badSourceOrTarget) {
            removeFromElements();
            continue;
          } // can't create this


          var src = cy.getElementById(_data3.source);
          var tgt = cy.getElementById(_data3.target);

          src._private.edges.push(edge);

          tgt._private.edges.push(edge);

          edge._private.source = src;
          edge._private.target = tgt;
        } // if is edge
        // create mock ids / indexes maps for element so it can be used like collections


        _private.map = new Map$1();

        _private.map.set(id, {
          ele: _ele,
          index: 0
        });

        _private.removed = false;

        if (addToPool) {
          cy.addToPool(_ele);
        }
      } // for each element
      // do compound node sanity checks


      for (var _i3 = 0; _i3 < nodes.length; _i3++) {
        // each node
        var node = nodes[_i3];
        var _data4 = node._private.data;

        if (number(_data4.parent)) {
          // then automake string
          _data4.parent = '' + _data4.parent;
        }

        var parentId = _data4.parent;
        var specifiedParent = parentId != null;

        if (specifiedParent) {
          var parent = cy.getElementById(parentId);

          if (parent.empty()) {
            // non-existant parent; just remove it
            _data4.parent = undefined;
          } else {
            var selfAsParent = false;
            var ancestor = parent;

            while (!ancestor.empty()) {
              if (node.same(ancestor)) {
                // mark self as parent and remove from data
                selfAsParent = true;
                _data4.parent = undefined; // remove parent reference
                // exit or we loop forever

                break;
              }

              ancestor = ancestor.parent();
            }

            if (!selfAsParent) {
              // connect with children
              parent[0]._private.children.push(node);

              node._private.parent = parent[0]; // let the core know we have a compound graph

              cy_p.hasCompoundNodes = true;
            }
          } // else

        } // if specified parent

      } // for each node


      if (elements.length > 0) {
        var restored = new Collection(cy, elements);

        for (var _i4 = 0; _i4 < restored.length; _i4++) {
          var _ele2 = restored[_i4];

          if (_ele2.isNode()) {
            continue;
          } // adding an edge invalidates the traversal caches for the parallel edges


          _ele2.parallelEdges().clearTraversalCache(); // adding an edge invalidates the traversal cache for the connected nodes


          _ele2.source().clearTraversalCache();

          _ele2.target().clearTraversalCache();
        }

        var toUpdateStyle;

        if (cy_p.hasCompoundNodes) {
          toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
        } else {
          toUpdateStyle = restored;
        }

        toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);

        if (notifyRenderer) {
          restored.emitAndNotify('add');
        } else if (addToPool) {
          restored.emit('add');
        }
      }

      return self; // chainability
    };

    elesfn$t.removed = function () {
      var ele = this[0];
      return ele && ele._private.removed;
    };

    elesfn$t.inside = function () {
      var ele = this[0];
      return ele && !ele._private.removed;
    };

    elesfn$t.remove = function () {
      var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var removeFromPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var self = this;
      var elesToRemove = [];
      var elesToRemoveIds = {};
      var cy = self._private.cy; // add connected edges

      function addConnectedEdges(node) {
        var edges = node._private.edges;

        for (var i = 0; i < edges.length; i++) {
          add(edges[i]);
        }
      } // add descendant nodes


      function addChildren(node) {
        var children = node._private.children;

        for (var i = 0; i < children.length; i++) {
          add(children[i]);
        }
      }

      function add(ele) {
        var alreadyAdded = elesToRemoveIds[ele.id()];

        if (removeFromPool && ele.removed() || alreadyAdded) {
          return;
        } else {
          elesToRemoveIds[ele.id()] = true;
        }

        if (ele.isNode()) {
          elesToRemove.push(ele); // nodes are removed last

          addConnectedEdges(ele);
          addChildren(ele);
        } else {
          elesToRemove.unshift(ele); // edges are removed first
        }
      } // make the list of elements to remove
      // (may be removing more than specified due to connected edges etc)


      for (var i = 0, l = self.length; i < l; i++) {
        var ele = self[i];
        add(ele);
      }

      function removeEdgeRef(node, edge) {
        var connectedEdges = node._private.edges;
        removeFromArray(connectedEdges, edge); // removing an edges invalidates the traversal cache for its nodes

        node.clearTraversalCache();
      }

      function removeParallelRef(pllEdge) {
        // removing an edge invalidates the traversal caches for the parallel edges
        pllEdge.clearTraversalCache();
      }

      var alteredParents = [];
      alteredParents.ids = {};

      function removeChildRef(parent, ele) {
        ele = ele[0];
        parent = parent[0];
        var children = parent._private.children;
        var pid = parent.id();
        removeFromArray(children, ele); // remove parent => child ref

        ele._private.parent = null; // remove child => parent ref

        if (!alteredParents.ids[pid]) {
          alteredParents.ids[pid] = true;
          alteredParents.push(parent);
        }
      }

      self.dirtyCompoundBoundsCache();

      if (removeFromPool) {
        cy.removeFromPool(elesToRemove); // remove from core pool
      }

      for (var _i5 = 0; _i5 < elesToRemove.length; _i5++) {
        var _ele3 = elesToRemove[_i5];

        if (_ele3.isEdge()) {
          // remove references to this edge in its connected nodes
          var src = _ele3.source()[0];

          var tgt = _ele3.target()[0];

          removeEdgeRef(src, _ele3);
          removeEdgeRef(tgt, _ele3);

          var pllEdges = _ele3.parallelEdges();

          for (var j = 0; j < pllEdges.length; j++) {
            var pllEdge = pllEdges[j];
            removeParallelRef(pllEdge);

            if (pllEdge.isBundledBezier()) {
              pllEdge.dirtyBoundingBoxCache();
            }
          }
        } else {
          // remove reference to parent
          var parent = _ele3.parent();

          if (parent.length !== 0) {
            removeChildRef(parent, _ele3);
          }
        }

        if (removeFromPool) {
          // mark as removed
          _ele3._private.removed = true;
        }
      } // check to see if we have a compound graph or not


      var elesStillInside = cy._private.elements;
      cy._private.hasCompoundNodes = false;

      for (var _i6 = 0; _i6 < elesStillInside.length; _i6++) {
        var _ele4 = elesStillInside[_i6];

        if (_ele4.isParent()) {
          cy._private.hasCompoundNodes = true;
          break;
        }
      }

      var removedElements = new Collection(this.cy(), elesToRemove);

      if (removedElements.size() > 0) {
        // must manually notify since trigger won't do this automatically once removed
        if (notifyRenderer) {
          removedElements.emitAndNotify('remove');
        } else if (removeFromPool) {
          removedElements.emit('remove');
        }
      } // the parents who were modified by the removal need their style updated


      for (var _i7 = 0; _i7 < alteredParents.length; _i7++) {
        var _ele5 = alteredParents[_i7];

        if (!removeFromPool || !_ele5.removed()) {
          _ele5.updateStyle();
        }
      }

      return removedElements;
    };

    elesfn$t.move = function (struct) {
      var cy = this._private.cy;
      var eles = this; // just clean up refs, caches, etc. in the same way as when removing and then restoring
      // (our calls to remove/restore do not remove from the graph or make events)

      var notifyRenderer = false;
      var modifyPool = false;

      if (struct.source !== undefined || struct.target !== undefined) {
        var srcId = struct.source;
        var tgtId = struct.target;
        var srcExists = srcId != null && cy.hasElementWithId(srcId);
        var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);

        if (srcExists || tgtExists) {
          cy.batch(function () {
            // avoid duplicate style updates
            eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

            eles.emitAndNotify('moveout');

            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              var _data5 = ele._private.data;

              if (ele.isEdge()) {
                if (srcExists) {
                  _data5.source = srcId;
                }

                if (tgtExists) {
                  _data5.target = tgtId;
                }
              }
            }

            eles.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
          });
          eles.emitAndNotify('move');
        }
      } else if (struct.parent !== undefined) {
        // move node to new parent
        var parentId = struct.parent;
        var parentExists = parentId === null || cy.hasElementWithId(parentId);

        if (parentExists) {
          var pidToAssign = parentId === null ? undefined : parentId;
          cy.batch(function () {
            // avoid duplicate style updates
            var updated = eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

            updated.emitAndNotify('moveout');

            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              var _data6 = ele._private.data;

              if (ele.isNode()) {
                _data6.parent = pidToAssign;
              }
            }

            updated.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
          });
          eles.emitAndNotify('move');
        }
      }

      return this;
    };

    [elesfn$b, elesfn$c, elesfn$d, elesfn$e, elesfn$f, data$1, elesfn$h, dimensions, elesfn$l, elesfn$m, elesfn$n, elesfn$o, elesfn$p, elesfn$q, elesfn$r, elesfn$s].forEach(function (props) {
      extend(elesfn$t, props);
    });

    var corefn = {
      add: function add(opts) {
        var elements;
        var cy = this; // add the elements

        if (elementOrCollection(opts)) {
          var eles = opts;

          if (eles._private.cy === cy) {
            // same instance => just restore
            elements = eles.restore();
          } else {
            // otherwise, copy from json
            var jsons = [];

            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              jsons.push(ele.json());
            }

            elements = new Collection(cy, jsons);
          }
        } // specify an array of options
        else if (array(opts)) {
            var _jsons = opts;
            elements = new Collection(cy, _jsons);
          } // specify via opts.nodes and opts.edges
          else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
              var elesByGroup = opts;
              var _jsons2 = [];
              var grs = ['nodes', 'edges'];

              for (var _i = 0, il = grs.length; _i < il; _i++) {
                var group = grs[_i];
                var elesArray = elesByGroup[group];

                if (array(elesArray)) {
                  for (var j = 0, jl = elesArray.length; j < jl; j++) {
                    var json = extend({
                      group: group
                    }, elesArray[j]);

                    _jsons2.push(json);
                  }
                }
              }

              elements = new Collection(cy, _jsons2);
            } // specify options for one element
            else {
                var _json = opts;
                elements = new Element(cy, _json).collection();
              }

        return elements;
      },
      remove: function remove(collection) {
        if (elementOrCollection(collection)) ; else if (string(collection)) {
          var selector = collection;
          collection = this.$(selector);
        }

        return collection.remove();
      }
    };

    /* global Float32Array */

    /*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
    function generateCubicBezier(mX1, mY1, mX2, mY2) {
      var NEWTON_ITERATIONS = 4,
          NEWTON_MIN_SLOPE = 0.001,
          SUBDIVISION_PRECISION = 0.0000001,
          SUBDIVISION_MAX_ITERATIONS = 10,
          kSplineTableSize = 11,
          kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
          float32ArraySupported = typeof Float32Array !== 'undefined';
      /* Must contain four arguments. */

      if (arguments.length !== 4) {
        return false;
      }
      /* Arguments must be numbers. */


      for (var i = 0; i < 4; ++i) {
        if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
          return false;
        }
      }
      /* X values must be in the [0, 1] range. */


      mX1 = Math.min(mX1, 1);
      mX2 = Math.min(mX2, 1);
      mX1 = Math.max(mX1, 0);
      mX2 = Math.max(mX2, 0);
      var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

      function A(aA1, aA2) {
        return 1.0 - 3.0 * aA2 + 3.0 * aA1;
      }

      function B(aA1, aA2) {
        return 3.0 * aA2 - 6.0 * aA1;
      }

      function C(aA1) {
        return 3.0 * aA1;
      }

      function calcBezier(aT, aA1, aA2) {
        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
      }

      function getSlope(aT, aA1, aA2) {
        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
      }

      function newtonRaphsonIterate(aX, aGuessT) {
        for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);

          if (currentSlope === 0.0) {
            return aGuessT;
          }

          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }

        return aGuessT;
      }

      function calcSampleValues() {
        for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
          mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
        }
      }

      function binarySubdivide(aX, aA, aB) {
        var currentX,
            currentT,
            i = 0;

        do {
          currentT = aA + (aB - aA) / 2.0;
          currentX = calcBezier(currentT, mX1, mX2) - aX;

          if (currentX > 0.0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

        return currentT;
      }

      function getTForX(aX) {
        var intervalStart = 0.0,
            currentSample = 1,
            lastSample = kSplineTableSize - 1;

        for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }

        --currentSample;
        var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
            guessForT = intervalStart + dist * kSampleStepSize,
            initialSlope = getSlope(guessForT, mX1, mX2);

        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT);
        } else if (initialSlope === 0.0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
        }
      }

      var _precomputed = false;

      function precompute() {
        _precomputed = true;

        if (mX1 !== mY1 || mX2 !== mY2) {
          calcSampleValues();
        }
      }

      var f = function f(aX) {
        if (!_precomputed) {
          precompute();
        }

        if (mX1 === mY1 && mX2 === mY2) {
          return aX;
        }

        if (aX === 0) {
          return 0;
        }

        if (aX === 1) {
          return 1;
        }

        return calcBezier(getTForX(aX), mY1, mY2);
      };

      f.getControlPoints = function () {
        return [{
          x: mX1,
          y: mY1
        }, {
          x: mX2,
          y: mY2
        }];
      };

      var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";

      f.toString = function () {
        return str;
      };

      return f;
    }

    /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
    var generateSpringRK4 = function () {
      function springAccelerationForState(state) {
        return -state.tension * state.x - state.friction * state.v;
      }

      function springEvaluateStateWithDerivative(initialState, dt, derivative) {
        var state = {
          x: initialState.x + derivative.dx * dt,
          v: initialState.v + derivative.dv * dt,
          tension: initialState.tension,
          friction: initialState.friction
        };
        return {
          dx: state.v,
          dv: springAccelerationForState(state)
        };
      }

      function springIntegrateState(state, dt) {
        var a = {
          dx: state.v,
          dv: springAccelerationForState(state)
        },
            b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
            c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
            d = springEvaluateStateWithDerivative(state, dt, c),
            dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
            dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
        state.x = state.x + dxdt * dt;
        state.v = state.v + dvdt * dt;
        return state;
      }

      return function springRK4Factory(tension, friction, duration) {
        var initState = {
          x: -1,
          v: 0,
          tension: null,
          friction: null
        },
            path = [0],
            time_lapsed = 0,
            tolerance = 1 / 10000,
            DT = 16 / 1000,
            have_duration,
            dt,
            last_state;
        tension = parseFloat(tension) || 500;
        friction = parseFloat(friction) || 20;
        duration = duration || null;
        initState.tension = tension;
        initState.friction = friction;
        have_duration = duration !== null;
        /* Calculate the actual time it takes for this animation to complete with the provided conditions. */

        if (have_duration) {
          /* Run the simulation without a duration. */
          time_lapsed = springRK4Factory(tension, friction);
          /* Compute the adjusted time delta. */

          dt = time_lapsed / duration * DT;
        } else {
          dt = DT;
        }

        for (;;) {
          /* Next/step function .*/
          last_state = springIntegrateState(last_state || initState, dt);
          /* Store the position. */

          path.push(1 + last_state.x);
          time_lapsed += 16;
          /* If the change threshold is reached, break. */

          if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
            break;
          }
        }
        /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
           computed path and returns a snapshot of the position according to a given percentComplete. */


        return !have_duration ? time_lapsed : function (percentComplete) {
          return path[percentComplete * (path.length - 1) | 0];
        };
      };
    }();

    var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
      var bezier = generateCubicBezier(t1, p1, t2, p2);
      return function (start, end, percent) {
        return start + (end - start) * bezier(percent);
      };
    };

    var easings = {
      'linear': function linear(start, end, percent) {
        return start + (end - start) * percent;
      },
      // default easings
      'ease': cubicBezier(0.25, 0.1, 0.25, 1),
      'ease-in': cubicBezier(0.42, 0, 1, 1),
      'ease-out': cubicBezier(0, 0, 0.58, 1),
      'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),
      // sine
      'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
      'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
      'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),
      // quad
      'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
      'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
      'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),
      // cubic
      'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
      'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
      'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),
      // quart
      'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
      'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
      'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),
      // quint
      'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
      'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
      'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),
      // expo
      'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
      'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
      'ease-in-out-expo': cubicBezier(1, 0, 0, 1),
      // circ
      'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
      'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
      'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),
      // user param easings...
      'spring': function spring(tension, friction, duration) {
        if (duration === 0) {
          // can't get a spring w/ duration 0
          return easings.linear; // duration 0 => jump to end so impl doesn't matter
        }

        var spring = generateSpringRK4(tension, friction, duration);
        return function (start, end, percent) {
          return start + (end - start) * spring(percent);
        };
      },
      'cubic-bezier': cubicBezier
    };

    function getEasedValue(type, start, end, percent, easingFn) {
      if (percent === 1) {
        return end;
      }

      var val = easingFn(start, end, percent);

      if (type == null) {
        return val;
      }

      if (type.roundValue || type.color) {
        val = Math.round(val);
      }

      if (type.min !== undefined) {
        val = Math.max(val, type.min);
      }

      if (type.max !== undefined) {
        val = Math.min(val, type.max);
      }

      return val;
    }

    function getValue(prop, spec) {
      if (prop.pfValue != null || prop.value != null) {
        if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {
          return prop.pfValue;
        } else {
          return prop.value;
        }
      } else {
        return prop;
      }
    }

    function ease(startProp, endProp, percent, easingFn, propSpec) {
      var type = propSpec != null ? propSpec.type : null;

      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }

      var start = getValue(startProp, propSpec);
      var end = getValue(endProp, propSpec);

      if (number(start) && number(end)) {
        return getEasedValue(type, start, end, percent, easingFn);
      } else if (array(start) && array(end)) {
        var easedArr = [];

        for (var i = 0; i < end.length; i++) {
          var si = start[i];
          var ei = end[i];

          if (si != null && ei != null) {
            var val = getEasedValue(type, si, ei, percent, easingFn);
            easedArr.push(val);
          } else {
            easedArr.push(ei);
          }
        }

        return easedArr;
      }

      return undefined;
    }

    function step(self, ani, now, isCore) {
      var isEles = !isCore;
      var _p = self._private;
      var ani_p = ani._private;
      var pEasing = ani_p.easing;
      var startTime = ani_p.startTime;
      var cy = isCore ? self : self.cy();
      var style = cy.style();

      if (!ani_p.easingImpl) {
        if (pEasing == null) {
          // use default
          ani_p.easingImpl = easings['linear'];
        } else {
          // then define w/ name
          var easingVals;

          if (string(pEasing)) {
            var easingProp = style.parse('transition-timing-function', pEasing);
            easingVals = easingProp.value;
          } else {
            // then assume preparsed array
            easingVals = pEasing;
          }

          var name, args;

          if (string(easingVals)) {
            name = easingVals;
            args = [];
          } else {
            name = easingVals[1];
            args = easingVals.slice(2).map(function (n) {
              return +n;
            });
          }

          if (args.length > 0) {
            // create with args
            if (name === 'spring') {
              args.push(ani_p.duration); // need duration to generate spring
            }

            ani_p.easingImpl = easings[name].apply(null, args);
          } else {
            // static impl by name
            ani_p.easingImpl = easings[name];
          }
        }
      }

      var easing = ani_p.easingImpl;
      var percent;

      if (ani_p.duration === 0) {
        percent = 1;
      } else {
        percent = (now - startTime) / ani_p.duration;
      }

      if (ani_p.applying) {
        percent = ani_p.progress;
      }

      if (percent < 0) {
        percent = 0;
      } else if (percent > 1) {
        percent = 1;
      }

      if (ani_p.delay == null) {
        // then update
        var startPos = ani_p.startPosition;
        var endPos = ani_p.position;

        if (endPos && isEles && !self.locked()) {
          var newPos = {};

          if (valid(startPos.x, endPos.x)) {
            newPos.x = ease(startPos.x, endPos.x, percent, easing);
          }

          if (valid(startPos.y, endPos.y)) {
            newPos.y = ease(startPos.y, endPos.y, percent, easing);
          }

          self.position(newPos);
        }

        var startPan = ani_p.startPan;
        var endPan = ani_p.pan;
        var pan = _p.pan;
        var animatingPan = endPan != null && isCore;

        if (animatingPan) {
          if (valid(startPan.x, endPan.x)) {
            pan.x = ease(startPan.x, endPan.x, percent, easing);
          }

          if (valid(startPan.y, endPan.y)) {
            pan.y = ease(startPan.y, endPan.y, percent, easing);
          }

          self.emit('pan');
        }

        var startZoom = ani_p.startZoom;
        var endZoom = ani_p.zoom;
        var animatingZoom = endZoom != null && isCore;

        if (animatingZoom) {
          if (valid(startZoom, endZoom)) {
            _p.zoom = ease(startZoom, endZoom, percent, easing);
          }

          self.emit('zoom');
        }

        if (animatingPan || animatingZoom) {
          self.emit('viewport');
        }

        var props = ani_p.style;

        if (props && props.length > 0 && isEles) {
          for (var i = 0; i < props.length; i++) {
            var prop = props[i];
            var _name = prop.name;
            var end = prop;
            var start = ani_p.startStyle[_name];
            var propSpec = style.properties[start.name];
            var easedVal = ease(start, end, percent, easing, propSpec);
            style.overrideBypass(self, _name, easedVal);
          } // for props


          self.emit('style');
        } // if

      }

      ani_p.progress = percent;
      return percent;
    }

    function valid(start, end) {
      if (start == null || end == null) {
        return false;
      }

      if (number(start) && number(end)) {
        return true;
      } else if (start && end) {
        return true;
      }

      return false;
    }

    function startAnimation(self, ani, now, isCore) {
      var ani_p = ani._private;
      ani_p.started = true;
      ani_p.startTime = now - ani_p.progress * ani_p.duration;
    }

    function stepAll(now, cy) {
      var eles = cy._private.aniEles;
      var doneEles = [];

      function stepOne(ele, isCore) {
        var _p = ele._private;
        var current = _p.animation.current;
        var queue = _p.animation.queue;
        var ranAnis = false; // cancel all animations on display:none ele

        if (!isCore && ele.pstyle('display').value === 'none') {
          // put all current and queue animations in this tick's current list
          // and empty the lists for the element
          current = current.splice(0, current.length).concat(queue.splice(0, queue.length)); // stop all animations

          for (var i = 0; i < current.length; i++) {
            current[i].stop();
          }
        } // if nothing currently animating, get something from the queue


        if (current.length === 0) {
          var next = queue.shift();

          if (next) {
            current.push(next);
          }
        }

        var callbacks = function callbacks(_callbacks) {
          for (var j = _callbacks.length - 1; j >= 0; j--) {
            var cb = _callbacks[j];
            cb();
          }

          _callbacks.splice(0, _callbacks.length);
        }; // step and remove if done


        for (var _i = current.length - 1; _i >= 0; _i--) {
          var ani = current[_i];
          var ani_p = ani._private;

          if (ani_p.stopped) {
            current.splice(_i, 1);
            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;
            callbacks(ani_p.frames);
            continue;
          }

          if (!ani_p.playing && !ani_p.applying) {
            continue;
          } // an apply() while playing shouldn't do anything


          if (ani_p.playing && ani_p.applying) {
            ani_p.applying = false;
          }

          if (!ani_p.started) {
            startAnimation(ele, ani, now);
          }

          step(ele, ani, now, isCore);

          if (ani_p.applying) {
            ani_p.applying = false;
          }

          callbacks(ani_p.frames);

          if (ani_p.step != null) {
            ani_p.step(now);
          }

          if (ani.completed()) {
            current.splice(_i, 1);
            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;
            callbacks(ani_p.completes);
          }

          ranAnis = true;
        }

        if (!isCore && current.length === 0 && queue.length === 0) {
          doneEles.push(ele);
        }

        return ranAnis;
      } // stepElement
      // handle all eles


      var ranEleAni = false;

      for (var e = 0; e < eles.length; e++) {
        var ele = eles[e];
        var handledThisEle = stepOne(ele);
        ranEleAni = ranEleAni || handledThisEle;
      } // each element


      var ranCoreAni = stepOne(cy, true); // notify renderer

      if (ranEleAni || ranCoreAni) {
        if (eles.length > 0) {
          cy.notify('draw', eles);
        } else {
          cy.notify('draw');
        }
      } // remove elements from list of currently animating if its queues are empty


      eles.unmerge(doneEles);
      cy.emit('step');
    } // stepAll

    var corefn$1 = {
      // pull in animation functions
      animate: define$3.animate(),
      animation: define$3.animation(),
      animated: define$3.animated(),
      clearQueue: define$3.clearQueue(),
      delay: define$3.delay(),
      delayAnimation: define$3.delayAnimation(),
      stop: define$3.stop(),
      addToAnimationPool: function addToAnimationPool(eles) {
        var cy = this;

        if (!cy.styleEnabled()) {
          return;
        } // save cycles when no style used


        cy._private.aniEles.merge(eles);
      },
      stopAnimationLoop: function stopAnimationLoop() {
        this._private.animationsRunning = false;
      },
      startAnimationLoop: function startAnimationLoop() {
        var cy = this;
        cy._private.animationsRunning = true;

        if (!cy.styleEnabled()) {
          return;
        } // save cycles when no style used
        // NB the animation loop will exec in headless environments if style enabled
        // and explicit cy.destroy() is necessary to stop the loop


        function headlessStep() {
          if (!cy._private.animationsRunning) {
            return;
          }

          requestAnimationFrame$1(function animationStep(now) {
            stepAll(now, cy);
            headlessStep();
          });
        }

        var renderer = cy.renderer();

        if (renderer && renderer.beforeRender) {
          // let the renderer schedule animations
          renderer.beforeRender(function rendererAnimationStep(willDraw, now) {
            stepAll(now, cy);
          }, renderer.beforeRenderPriorities.animations);
        } else {
          // manage the animation loop ourselves
          headlessStep(); // first call
        }
      }
    };

    var emitterOptions$1 = {
      qualifierCompare: function qualifierCompare(selector1, selector2) {
        if (selector1 == null || selector2 == null) {
          return selector1 == null && selector2 == null;
        } else {
          return selector1.sameText(selector2);
        }
      },
      eventMatches: function eventMatches(cy, listener, eventObj) {
        var selector = listener.qualifier;

        if (selector != null) {
          return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
        }

        return true;
      },
      addEventFields: function addEventFields(cy, evt) {
        evt.cy = cy;
        evt.target = cy;
      },
      callbackContext: function callbackContext(cy, listener, eventObj) {
        return listener.qualifier != null ? eventObj.target : cy;
      }
    };

    var argSelector$1 = function argSelector(arg) {
      if (string(arg)) {
        return new Selector(arg);
      } else {
        return arg;
      }
    };

    var elesfn$u = {
      createEmitter: function createEmitter() {
        var _p = this._private;

        if (!_p.emitter) {
          _p.emitter = new Emitter(emitterOptions$1, this);
        }

        return this;
      },
      emitter: function emitter() {
        return this._private.emitter;
      },
      on: function on(events, selector, callback) {
        this.emitter().on(events, argSelector$1(selector), callback);
        return this;
      },
      removeListener: function removeListener(events, selector, callback) {
        this.emitter().removeListener(events, argSelector$1(selector), callback);
        return this;
      },
      one: function one(events, selector, callback) {
        this.emitter().one(events, argSelector$1(selector), callback);
        return this;
      },
      once: function once(events, selector, callback) {
        this.emitter().one(events, argSelector$1(selector), callback);
        return this;
      },
      emit: function emit(events, extraParams) {
        this.emitter().emit(events, extraParams);
        return this;
      },
      emitAndNotify: function emitAndNotify(event, eles) {
        this.emit(event);
        this.notify(event, eles);
        return this;
      }
    };
    define$3.eventAliasesOn(elesfn$u);

    var corefn$2 = {
      png: function png(options) {
        var renderer = this._private.renderer;
        options = options || {};
        return renderer.png(options);
      },
      jpg: function jpg(options) {
        var renderer = this._private.renderer;
        options = options || {};
        options.bg = options.bg || '#fff';
        return renderer.jpg(options);
      }
    };
    corefn$2.jpeg = corefn$2.jpg;

    var corefn$3 = {
      layout: function layout(options) {
        var cy = this;

        if (options == null) {
          error('Layout options must be specified to make a layout');
          return;
        }

        if (options.name == null) {
          error('A `name` must be specified to make a layout');
          return;
        }

        var name = options.name;
        var Layout = cy.extension('layout', name);

        if (Layout == null) {
          error('No such layout `' + name + '` found.  Did you forget to import it and `cytoscape.use()` it?');
          return;
        }

        var eles;

        if (string(options.eles)) {
          eles = cy.$(options.eles);
        } else {
          eles = options.eles != null ? options.eles : cy.$();
        }

        var layout = new Layout(extend({}, options, {
          cy: cy,
          eles: eles
        }));
        return layout;
      }
    };
    corefn$3.createLayout = corefn$3.makeLayout = corefn$3.layout;

    var corefn$4 = {
      notify: function notify(eventName, eventEles) {
        var _p = this._private;

        if (this.batching()) {
          _p.batchNotifications = _p.batchNotifications || {};
          var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();

          if (eventEles != null) {
            eles.merge(eventEles);
          }

          return; // notifications are disabled during batching
        }

        if (!_p.notificationsEnabled) {
          return;
        } // exit on disabled


        var renderer = this.renderer(); // exit if destroy() called on core or renderer in between frames #1499 #1528

        if (this.isDestroyed() || !renderer) {
          return;
        }

        renderer.notify(eventName, eventEles);
      },
      notifications: function notifications(bool) {
        var p = this._private;

        if (bool === undefined) {
          return p.notificationsEnabled;
        } else {
          p.notificationsEnabled = bool ? true : false;
        }

        return this;
      },
      noNotifications: function noNotifications(callback) {
        this.notifications(false);
        callback();
        this.notifications(true);
      },
      batching: function batching() {
        return this._private.batchCount > 0;
      },
      startBatch: function startBatch() {
        var _p = this._private;

        if (_p.batchCount == null) {
          _p.batchCount = 0;
        }

        if (_p.batchCount === 0) {
          _p.batchStyleEles = this.collection();
          _p.batchNotifications = {};
        }

        _p.batchCount++;
        return this;
      },
      endBatch: function endBatch() {
        var _p = this._private;

        if (_p.batchCount === 0) {
          return this;
        }

        _p.batchCount--;

        if (_p.batchCount === 0) {
          // update style for dirty eles
          _p.batchStyleEles.updateStyle();

          var renderer = this.renderer(); // notify the renderer of queued eles and event types

          Object.keys(_p.batchNotifications).forEach(function (eventName) {
            var eles = _p.batchNotifications[eventName];

            if (eles.empty()) {
              renderer.notify(eventName);
            } else {
              renderer.notify(eventName, eles);
            }
          });
        }

        return this;
      },
      batch: function batch(callback) {
        this.startBatch();
        callback();
        this.endBatch();
        return this;
      },
      // for backwards compatibility
      batchData: function batchData(map) {
        var cy = this;
        return this.batch(function () {
          var ids = Object.keys(map);

          for (var i = 0; i < ids.length; i++) {
            var id = ids[i];
            var data = map[id];
            var ele = cy.getElementById(id);
            ele.data(data);
          }
        });
      }
    };

    var rendererDefaults = defaults$1({
      hideEdgesOnViewport: false,
      textureOnViewport: false,
      motionBlur: false,
      motionBlurOpacity: 0.05,
      pixelRatio: undefined,
      desktopTapThreshold: 4,
      touchTapThreshold: 8,
      wheelSensitivity: 1,
      debug: false,
      showFps: false
    });
    var corefn$5 = {
      renderTo: function renderTo(context, zoom, pan, pxRatio) {
        var r = this._private.renderer;
        r.renderTo(context, zoom, pan, pxRatio);
        return this;
      },
      renderer: function renderer() {
        return this._private.renderer;
      },
      forceRender: function forceRender() {
        this.notify('draw');
        return this;
      },
      resize: function resize() {
        this.invalidateSize();
        this.emitAndNotify('resize');
        return this;
      },
      initRenderer: function initRenderer(options) {
        var cy = this;
        var RendererProto = cy.extension('renderer', options.name);

        if (RendererProto == null) {
          error("Can not initialise: No such renderer `".concat(options.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
          return;
        }

        if (options.wheelSensitivity !== undefined) {
          warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
        }

        var rOpts = rendererDefaults(options);
        rOpts.cy = cy;
        cy._private.renderer = new RendererProto(rOpts);
        this.notify('init');
      },
      destroyRenderer: function destroyRenderer() {
        var cy = this;
        cy.notify('destroy'); // destroy the renderer

        var domEle = cy.container();

        if (domEle) {
          domEle._cyreg = null;

          while (domEle.childNodes.length > 0) {
            domEle.removeChild(domEle.childNodes[0]);
          }
        }

        cy._private.renderer = null; // to be extra safe, remove the ref

        cy.mutableElements().forEach(function (ele) {
          var _p = ele._private;
          _p.rscratch = {};
          _p.rstyle = {};
          _p.animation.current = [];
          _p.animation.queue = [];
        });
      },
      onRender: function onRender(fn) {
        return this.on('render', fn);
      },
      offRender: function offRender(fn) {
        return this.off('render', fn);
      }
    };
    corefn$5.invalidateDimensions = corefn$5.resize;

    var corefn$6 = {
      // get a collection
      // - empty collection on no args
      // - collection of elements in the graph on selector arg
      // - guarantee a returned collection when elements or collection specified
      collection: function collection(eles, opts) {
        if (string(eles)) {
          return this.$(eles);
        } else if (elementOrCollection(eles)) {
          return eles.collection();
        } else if (array(eles)) {
          return new Collection(this, eles, opts);
        }

        return new Collection(this);
      },
      nodes: function nodes(selector) {
        var nodes = this.$(function (ele) {
          return ele.isNode();
        });

        if (selector) {
          return nodes.filter(selector);
        }

        return nodes;
      },
      edges: function edges(selector) {
        var edges = this.$(function (ele) {
          return ele.isEdge();
        });

        if (selector) {
          return edges.filter(selector);
        }

        return edges;
      },
      // search the graph like jQuery
      $: function $(selector) {
        var eles = this._private.elements;

        if (selector) {
          return eles.filter(selector);
        } else {
          return eles.spawnSelf();
        }
      },
      mutableElements: function mutableElements() {
        return this._private.elements;
      }
    }; // aliases

    corefn$6.elements = corefn$6.filter = corefn$6.$;

    var styfn = {}; // keys for style blocks, e.g. ttfftt

    var TRUE = 't';
    var FALSE = 'f'; // (potentially expensive calculation)
    // apply the style to the element based on
    // - its bypass
    // - what selectors match it

    styfn.apply = function (eles) {
      var self = this;
      var _p = self._private;
      var cy = _p.cy;
      var updatedEles = cy.collection();

      if (_p.newStyle) {
        // clear style caches
        _p.contextStyles = {};
        _p.propDiffs = {};
        self.cleanElements(eles, true);
      }

      for (var ie = 0; ie < eles.length; ie++) {
        var ele = eles[ie];
        var cxtMeta = self.getContextMeta(ele);

        if (cxtMeta.empty) {
          continue;
        }

        var cxtStyle = self.getContextStyle(cxtMeta);
        var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);

        if (!_p.newStyle) {
          self.updateTransitions(ele, app.diffProps);
        }

        var hintsDiff = self.updateStyleHints(ele);

        if (hintsDiff) {
          updatedEles.merge(ele);
        }
      } // for elements


      _p.newStyle = false;
      return updatedEles;
    };

    styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
      var self = this;
      var cache = self._private.propDiffs = self._private.propDiffs || {};
      var dualCxtKey = oldCxtKey + '-' + newCxtKey;
      var cachedVal = cache[dualCxtKey];

      if (cachedVal) {
        return cachedVal;
      }

      var diffProps = [];
      var addedProp = {};

      for (var i = 0; i < self.length; i++) {
        var cxt = self[i];
        var oldHasCxt = oldCxtKey[i] === TRUE;
        var newHasCxt = newCxtKey[i] === TRUE;
        var cxtHasDiffed = oldHasCxt !== newHasCxt;
        var cxtHasMappedProps = cxt.mappedProperties.length > 0;

        if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
          var props = void 0;

          if (cxtHasDiffed && cxtHasMappedProps) {
            props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
          } else if (cxtHasDiffed) {
            props = cxt.properties; // need to check them all
          } else if (cxtHasMappedProps) {
            props = cxt.mappedProperties; // only need to check mapped
          }

          for (var j = 0; j < props.length; j++) {
            var prop = props[j];
            var name = prop.name; // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
            // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
            // is cached)

            var laterCxtOverrides = false;

            for (var k = i + 1; k < self.length; k++) {
              var laterCxt = self[k];
              var hasLaterCxt = newCxtKey[k] === TRUE;

              if (!hasLaterCxt) {
                continue;
              } // can't override unless the context is active


              laterCxtOverrides = laterCxt.properties[prop.name] != null;

              if (laterCxtOverrides) {
                break;
              } // exit early as long as one later context overrides

            }

            if (!addedProp[name] && !laterCxtOverrides) {
              addedProp[name] = true;
              diffProps.push(name);
            }
          } // for props

        } // if

      } // for contexts


      cache[dualCxtKey] = diffProps;
      return diffProps;
    };

    styfn.getContextMeta = function (ele) {
      var self = this;
      var cxtKey = '';
      var diffProps;
      var prevKey = ele._private.styleCxtKey || '';

      if (self._private.newStyle) {
        prevKey = ''; // since we need to apply all style if a fresh stylesheet
      } // get the cxt key


      for (var i = 0; i < self.length; i++) {
        var context = self[i];
        var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

        if (contextSelectorMatches) {
          cxtKey += TRUE;
        } else {
          cxtKey += FALSE;
        }
      } // for context


      diffProps = self.getPropertiesDiff(prevKey, cxtKey);
      ele._private.styleCxtKey = cxtKey;
      return {
        key: cxtKey,
        diffPropNames: diffProps,
        empty: diffProps.length === 0
      };
    }; // gets a computed ele style object based on matched contexts


    styfn.getContextStyle = function (cxtMeta) {
      var cxtKey = cxtMeta.key;
      var self = this;
      var cxtStyles = this._private.contextStyles = this._private.contextStyles || {}; // if already computed style, returned cached copy

      if (cxtStyles[cxtKey]) {
        return cxtStyles[cxtKey];
      }

      var style = {
        _private: {
          key: cxtKey
        }
      };

      for (var i = 0; i < self.length; i++) {
        var cxt = self[i];
        var hasCxt = cxtKey[i] === TRUE;

        if (!hasCxt) {
          continue;
        }

        for (var j = 0; j < cxt.properties.length; j++) {
          var prop = cxt.properties[j];
          style[prop.name] = prop;
        }
      }

      cxtStyles[cxtKey] = style;
      return style;
    };

    styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
      var self = this;
      var diffProps = cxtMeta.diffPropNames;
      var retDiffProps = {};
      var types = self.types;

      for (var i = 0; i < diffProps.length; i++) {
        var diffPropName = diffProps[i];
        var cxtProp = cxtStyle[diffPropName];
        var eleProp = ele.pstyle(diffPropName);

        if (!cxtProp) {
          // no context prop means delete
          if (!eleProp) {
            continue; // no existing prop means nothing needs to be removed
            // nb affects initial application on mapped values like control-point-distances
          } else if (eleProp.bypass) {
            cxtProp = {
              name: diffPropName,
              deleteBypassed: true
            };
          } else {
            cxtProp = {
              name: diffPropName,
              delete: true
            };
          }
        } // save cycles when the context prop doesn't need to be applied


        if (eleProp === cxtProp) {
          continue;
        } // save cycles when a mapped context prop doesn't need to be applied


        if (cxtProp.mapped === types.fn // context prop is function mapper
        && eleProp.mapping != null // ele prop is a concrete value from from a mapper
        && eleProp.mapping.value === cxtProp.value // the current prop on the ele is a flat prop value for the function mapper
        ) {
            // NB don't write to cxtProp, as it's shared among eles (stored in stylesheet)
            var mapping = eleProp.mapping; // can write to mapping, as it's a per-ele copy

            var fnValue = mapping.fnValue = cxtProp.value(ele); // temporarily cache the value in case of a miss

            if (fnValue === mapping.prevFnValue) {
              continue;
            }
          }

        var retDiffProp = retDiffProps[diffPropName] = {
          prev: eleProp
        };
        self.applyParsedProperty(ele, cxtProp);
        retDiffProp.next = ele.pstyle(diffPropName);

        if (retDiffProp.next && retDiffProp.next.bypass) {
          retDiffProp.next = retDiffProp.next.bypassed;
        }
      }

      return {
        diffProps: retDiffProps
      };
    };

    styfn.updateStyleHints = function (ele) {
      var _p = ele._private;
      var self = this;
      var propNames = self.propertyGroupNames;
      var propGrKeys = self.propertyGroupKeys;

      var propHash = function propHash(ele, propNames, seedKey) {
        return self.getPropertiesHash(ele, propNames, seedKey);
      };

      var oldStyleKey = _p.styleKey;

      if (ele.removed()) {
        return false;
      }

      var isNode = _p.group === 'nodes'; // get the style key hashes per prop group
      // but lazily -- only use non-default prop values to reduce the number of hashes
      //

      var overriddenStyles = ele._private.style;
      propNames = Object.keys(overriddenStyles);

      for (var i = 0; i < propGrKeys.length; i++) {
        var grKey = propGrKeys[i];
        _p.styleKeys[grKey] = 0;
      }

      var updateGrKey = function updateGrKey(val, grKey) {
        return _p.styleKeys[grKey] = hashInt(val, _p.styleKeys[grKey]);
      };

      var updateGrKeyWStr = function updateGrKeyWStr(strVal, grKey) {
        for (var j = 0; j < strVal.length; j++) {
          updateGrKey(strVal.charCodeAt(j), grKey);
        }
      }; // - hashing works on 32 bit ints b/c we use bitwise ops
      // - small numbers get cut off (e.g. 0.123 is seen as 0 by the hashing function)
      // - raise up small numbers so more significant digits are seen by hashing
      // - make small numbers negative to avoid collisions -- most style values are positive numbers
      // - works in practice and it's relatively cheap


      var cleanNum = function cleanNum(val) {
        return -128 < val && val < 128 && Math.floor(val) !== val ? -(val * 1024 | 0) : val;
      };

      for (var _i = 0; _i < propNames.length; _i++) {
        var name = propNames[_i];
        var parsedProp = overriddenStyles[name];

        if (parsedProp == null) {
          continue;
        }

        var propInfo = this.properties[name];
        var type = propInfo.type;
        var _grKey = propInfo.groupKey;
        var normalizedNumberVal = void 0;

        if (propInfo.hashOverride != null) {
          normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
        } else if (parsedProp.pfValue != null) {
          normalizedNumberVal = parsedProp.pfValue;
        } // might not be a number if it allows enums


        var numberVal = propInfo.enums == null ? parsedProp.value : null;
        var haveNormNum = normalizedNumberVal != null;
        var haveUnitedNum = numberVal != null;
        var haveNum = haveNormNum || haveUnitedNum;
        var units = parsedProp.units; // numbers are cheaper to hash than strings
        // 1 hash op vs n hash ops (for length n string)

        if (type.number && haveNum) {
          var v = haveNormNum ? normalizedNumberVal : numberVal;

          if (type.multiple) {
            for (var _i2 = 0; _i2 < v.length; _i2++) {
              updateGrKey(cleanNum(v[_i2]), _grKey);
            }
          } else {
            updateGrKey(cleanNum(v), _grKey);
          }

          if (!haveNormNum && units != null) {
            updateGrKeyWStr(units, _grKey);
          }
        } else {
          updateGrKeyWStr(parsedProp.strValue, _grKey);
        }
      } // overall style key
      //


      var hash = 0;

      for (var _i3 = 0; _i3 < propGrKeys.length; _i3++) {
        var _grKey2 = propGrKeys[_i3];
        var grHash = _p.styleKeys[_grKey2];
        hash = hashInt(grHash, hash);
      }

      _p.styleKey = hash; // label dims
      //

      var labelDimsKey = _p.labelDimsKey = _p.styleKeys.labelDimensions;
      _p.labelKey = propHash(ele, ['label'], labelDimsKey);
      _p.labelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.labelKey);

      if (!isNode) {
        _p.sourceLabelKey = propHash(ele, ['source-label'], labelDimsKey);
        _p.sourceLabelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.sourceLabelKey);
        _p.targetLabelKey = propHash(ele, ['target-label'], labelDimsKey);
        _p.targetLabelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.targetLabelKey);
      } // node
      //


      if (isNode) {
        var _p$styleKeys = _p.styleKeys,
            nodeBody = _p$styleKeys.nodeBody,
            nodeBorder = _p$styleKeys.nodeBorder,
            backgroundImage = _p$styleKeys.backgroundImage,
            compound = _p$styleKeys.compound,
            pie = _p$styleKeys.pie;
        _p.nodeKey = hashIntsArray([nodeBorder, backgroundImage, compound, pie], nodeBody);
        _p.hasPie = pie != 0;
      }

      return oldStyleKey !== _p.styleKey;
    };

    styfn.clearStyleHints = function (ele) {
      var _p = ele._private;
      _p.styleKeys = {};
      _p.styleKey = null;
      _p.labelKey = null;
      _p.labelStyleKey = null;
      _p.sourceLabelKey = null;
      _p.sourceLabelStyleKey = null;
      _p.targetLabelKey = null;
      _p.targetLabelStyleKey = null;
      _p.nodeKey = null;
      _p.hasPie = null;
    }; // apply a property to the style (for internal use)
    // returns whether application was successful
    //
    // now, this function flattens the property, and here's how:
    //
    // for parsedProp:{ bypass: true, deleteBypass: true }
    // no property is generated, instead the bypass property in the
    // element's style is replaced by what's pointed to by the `bypassed`
    // field in the bypass property (i.e. restoring the property the
    // bypass was overriding)
    //
    // for parsedProp:{ mapped: truthy }
    // the generated flattenedProp:{ mapping: prop }
    //
    // for parsedProp:{ bypass: true }
    // the generated flattenedProp:{ bypassed: parsedProp }


    styfn.applyParsedProperty = function (ele, parsedProp) {
      var self = this;
      var prop = parsedProp;
      var style = ele._private.style;
      var flatProp;
      var types = self.types;
      var type = self.properties[prop.name].type;
      var propIsBypass = prop.bypass;
      var origProp = style[prop.name];
      var origPropIsBypass = origProp && origProp.bypass;
      var _p = ele._private;
      var flatPropMapping = 'mapping';

      var getVal = function getVal(p) {
        if (p == null) {
          return null;
        } else if (p.pfValue != null) {
          return p.pfValue;
        } else {
          return p.value;
        }
      };

      var checkTriggers = function checkTriggers() {
        var fromVal = getVal(origProp);
        var toVal = getVal(prop);
        self.checkTriggers(ele, prop.name, fromVal, toVal);
      }; // edge sanity checks to prevent the client from making serious mistakes


      if (parsedProp.name === 'curve-style' && ele.isEdge() && ( // loops must be bundled beziers
      parsedProp.value !== 'bezier' && ele.isLoop() || // edges connected to compound nodes can not be haystacks
      parsedProp.value === 'haystack' && (ele.source().isParent() || ele.target().isParent()))) {
        prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
      }

      if (prop.delete) {
        // delete the property and use the default value on falsey value
        style[prop.name] = undefined;
        checkTriggers();
        return true;
      }

      if (prop.deleteBypassed) {
        // delete the property that the
        if (!origProp) {
          checkTriggers();
          return true; // can't delete if no prop
        } else if (origProp.bypass) {
          // delete bypassed
          origProp.bypassed = undefined;
          checkTriggers();
          return true;
        } else {
          return false; // we're unsuccessful deleting the bypassed
        }
      } // check if we need to delete the current bypass


      if (prop.deleteBypass) {
        // then this property is just here to indicate we need to delete
        if (!origProp) {
          checkTriggers();
          return true; // property is already not defined
        } else if (origProp.bypass) {
          // then replace the bypass property with the original
          // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
          style[prop.name] = origProp.bypassed;
          checkTriggers();
          return true;
        } else {
          return false; // we're unsuccessful deleting the bypass
        }
      }

      var printMappingErr = function printMappingErr() {
        warn('Do not assign mappings to elements without corresponding data (i.e. ele `' + ele.id() + '` has no mapping for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
      }; // put the property in the style objects


      switch (prop.mapped) {
        // flatten the property if mapped
        case types.mapData:
          {
            // flatten the field (e.g. data.foo.bar)
            var fields = prop.field.split('.');
            var fieldVal = _p.data;

            for (var i = 0; i < fields.length && fieldVal; i++) {
              var field = fields[i];
              fieldVal = fieldVal[field];
            }

            if (fieldVal == null) {
              printMappingErr();
              return false;
            }

            var percent;

            if (!number(fieldVal)) {
              // then don't apply and fall back on the existing style
              warn('Do not use continuous mappers without specifying numeric data (i.e. `' + prop.field + ': ' + fieldVal + '` for `' + ele.id() + '` is non-numeric)');
              return false;
            } else {
              var fieldWidth = prop.fieldMax - prop.fieldMin;

              if (fieldWidth === 0) {
                // safety check -- not strictly necessary as no props of zero range should be passed here
                percent = 0;
              } else {
                percent = (fieldVal - prop.fieldMin) / fieldWidth;
              }
            } // make sure to bound percent value


            if (percent < 0) {
              percent = 0;
            } else if (percent > 1) {
              percent = 1;
            }

            if (type.color) {
              var r1 = prop.valueMin[0];
              var r2 = prop.valueMax[0];
              var g1 = prop.valueMin[1];
              var g2 = prop.valueMax[1];
              var b1 = prop.valueMin[2];
              var b2 = prop.valueMax[2];
              var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
              var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
              var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
              flatProp = {
                // colours are simple, so just create the flat property instead of expensive string parsing
                bypass: prop.bypass,
                // we're a bypass if the mapping property is a bypass
                name: prop.name,
                value: clr,
                strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
              };
            } else if (type.number) {
              var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
              flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
            } else {
              return false; // can only map to colours and numbers
            }

            if (!flatProp) {
              // if we can't flatten the property, then don't apply the property and fall back on the existing style
              printMappingErr();
              return false;
            }

            flatProp.mapping = prop; // keep a reference to the mapping

            prop = flatProp; // the flattened (mapped) property is the one we want

            break;
          }
        // direct mapping

        case types.data:
          {
            // flatten the field (e.g. data.foo.bar)
            var _fields = prop.field.split('.');

            var _fieldVal = _p.data;

            for (var _i4 = 0; _i4 < _fields.length && _fieldVal; _i4++) {
              var _field = _fields[_i4];
              _fieldVal = _fieldVal[_field];
            }

            if (_fieldVal != null) {
              flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
            }

            if (!flatProp) {
              // if we can't flatten the property, then don't apply and fall back on the existing style
              printMappingErr();
              return false;
            }

            flatProp.mapping = prop; // keep a reference to the mapping

            prop = flatProp; // the flattened (mapped) property is the one we want

            break;
          }

        case types.fn:
          {
            var fn = prop.value;
            var fnRetVal = prop.fnValue != null ? prop.fnValue : fn(ele); // check for cached value before calling function

            prop.prevFnValue = fnRetVal;

            if (fnRetVal == null) {
              warn('Custom function mappers may not return null (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is null)');
              return false;
            }

            flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);

            if (!flatProp) {
              warn('Custom function mappers may not return invalid values for the property type (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is invalid)');
              return false;
            }

            flatProp.mapping = copy(prop); // keep a reference to the mapping

            prop = flatProp; // the flattened (mapped) property is the one we want

            break;
          }

        case undefined:
          break;
        // just set the property

        default:
          return false;
        // not a valid mapping
      } // if the property is a bypass property, then link the resultant property to the original one


      if (propIsBypass) {
        if (origPropIsBypass) {
          // then this bypass overrides the existing one
          prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
        } else {
          // then link the orig prop to the new bypass
          prop.bypassed = origProp;
        }

        style[prop.name] = prop; // and set
      } else {
        // prop is not bypass
        if (origPropIsBypass) {
          // then keep the orig prop (since it's a bypass) and link to the new prop
          origProp.bypassed = prop;
        } else {
          // then just replace the old prop with the new one
          style[prop.name] = prop;
        }
      }

      checkTriggers();
      return true;
    };

    styfn.cleanElements = function (eles, keepBypasses) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        this.clearStyleHints(ele);
        ele.dirtyCompoundBoundsCache();
        ele.dirtyBoundingBoxCache();

        if (!keepBypasses) {
          ele._private.style = {};
        } else {
          var style = ele._private.style;
          var propNames = Object.keys(style);

          for (var j = 0; j < propNames.length; j++) {
            var propName = propNames[j];
            var eleProp = style[propName];

            if (eleProp != null) {
              if (eleProp.bypass) {
                eleProp.bypassed = null;
              } else {
                style[propName] = null;
              }
            }
          }
        }
      }
    }; // updates the visual style for all elements (useful for manual style modification after init)


    styfn.update = function () {
      var cy = this._private.cy;
      var eles = cy.mutableElements();
      eles.updateStyle();
    }; // diffProps : { name => { prev, next } }


    styfn.updateTransitions = function (ele, diffProps) {
      var self = this;
      var _p = ele._private;
      var props = ele.pstyle('transition-property').value;
      var duration = ele.pstyle('transition-duration').pfValue;
      var delay = ele.pstyle('transition-delay').pfValue;

      if (props.length > 0 && duration > 0) {
        var style = {}; // build up the style to animate towards

        var anyPrev = false;

        for (var i = 0; i < props.length; i++) {
          var prop = props[i];
          var styProp = ele.pstyle(prop);
          var diffProp = diffProps[prop];

          if (!diffProp) {
            continue;
          }

          var prevProp = diffProp.prev;
          var fromProp = prevProp;
          var toProp = diffProp.next != null ? diffProp.next : styProp;
          var diff = false;
          var initVal = void 0;
          var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

          if (!fromProp) {
            continue;
          } // consider px values


          if (number(fromProp.pfValue) && number(toProp.pfValue)) {
            diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy

            initVal = fromProp.pfValue + initDt * diff; // consider numerical values
          } else if (number(fromProp.value) && number(toProp.value)) {
            diff = toProp.value - fromProp.value; // nonzero is truthy

            initVal = fromProp.value + initDt * diff; // consider colour values
          } else if (array(fromProp.value) && array(toProp.value)) {
            diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
            initVal = fromProp.strValue;
          } // the previous value is good for an animation only if it's different


          if (diff) {
            style[prop] = toProp.strValue; // to val

            this.applyBypass(ele, prop, initVal); // from val

            anyPrev = true;
          }
        } // end if props allow ani
        // can't transition if there's nothing previous to transition from


        if (!anyPrev) {
          return;
        }

        _p.transitioning = true;
        new Promise$1(function (resolve) {
          if (delay > 0) {
            ele.delayAnimation(delay).play().promise().then(resolve);
          } else {
            resolve();
          }
        }).then(function () {
          return ele.animation({
            style: style,
            duration: duration,
            easing: ele.pstyle('transition-timing-function').value,
            queue: false
          }).play().promise();
        }).then(function () {
          // if( !isBypass ){
          self.removeBypasses(ele, props);
          ele.emitAndNotify('style'); // }

          _p.transitioning = false;
        });
      } else if (_p.transitioning) {
        this.removeBypasses(ele, props);
        ele.emitAndNotify('style');
        _p.transitioning = false;
      }
    };

    styfn.checkTrigger = function (ele, name, fromValue, toValue, getTrigger, onTrigger) {
      var prop = this.properties[name];
      var triggerCheck = getTrigger(prop);

      if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
        onTrigger(prop);
      }
    };

    styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
      var _this = this;

      this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
        return prop.triggersZOrder;
      }, function () {
        _this._private.cy.notify('zorder', ele);
      });
    };

    styfn.checkBoundsTrigger = function (ele, name, fromValue, toValue) {
      this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
        return prop.triggersBounds;
      }, function (prop) {
        ele.dirtyCompoundBoundsCache();
        ele.dirtyBoundingBoxCache(); // if the prop change makes the bb of pll bezier edges invalid,
        // then dirty the pll edge bb cache as well

        if ( // only for beziers -- so performance of other edges isn't affected
        (ele.pstyle('curve-style').value === 'bezier' // already a bezier
        // was just now changed to or from a bezier:
        || name === 'curve-style' && (fromValue === 'bezier' || toValue === 'bezier')) && prop.triggersBoundsOfParallelBeziers) {
          ele.parallelEdges().forEach(function (pllEdge) {
            if (pllEdge.isBundledBezier()) {
              pllEdge.dirtyBoundingBoxCache();
            }
          });
        }
      });
    };

    styfn.checkTriggers = function (ele, name, fromValue, toValue) {
      ele.dirtyStyleCache();
      this.checkZOrderTrigger(ele, name, fromValue, toValue);
      this.checkBoundsTrigger(ele, name, fromValue, toValue);
    };

    var styfn$1 = {}; // bypasses are applied to an existing style on an element, and just tacked on temporarily
    // returns true iff application was successful for at least 1 specified property

    styfn$1.applyBypass = function (eles, name, value, updateTransitions) {
      var self = this;
      var props = [];
      var isBypass = true; // put all the properties (can specify one or many) in an array after parsing them

      if (name === '*' || name === '**') {
        // apply to all property names
        if (value !== undefined) {
          for (var i = 0; i < self.properties.length; i++) {
            var prop = self.properties[i];
            var _name = prop.name;
            var parsedProp = this.parse(_name, value, true);

            if (parsedProp) {
              props.push(parsedProp);
            }
          }
        }
      } else if (string(name)) {
        // then parse the single property
        var _parsedProp = this.parse(name, value, true);

        if (_parsedProp) {
          props.push(_parsedProp);
        }
      } else if (plainObject(name)) {
        // then parse each property
        var specifiedProps = name;
        updateTransitions = value;
        var names = Object.keys(specifiedProps);

        for (var _i = 0; _i < names.length; _i++) {
          var _name2 = names[_i];
          var _value = specifiedProps[_name2];

          if (_value === undefined) {
            // try camel case name too
            _value = specifiedProps[dash2camel(_name2)];
          }

          if (_value !== undefined) {
            var _parsedProp2 = this.parse(_name2, _value, true);

            if (_parsedProp2) {
              props.push(_parsedProp2);
            }
          }
        }
      } else {
        // can't do anything without well defined properties
        return false;
      } // we've failed if there are no valid properties


      if (props.length === 0) {
        return false;
      } // now, apply the bypass properties on the elements


      var ret = false; // return true if at least one succesful bypass applied

      for (var _i2 = 0; _i2 < eles.length; _i2++) {
        // for each ele
        var ele = eles[_i2];
        var diffProps = {};
        var diffProp = void 0;

        for (var j = 0; j < props.length; j++) {
          // for each prop
          var _prop = props[j];

          if (updateTransitions) {
            var prevProp = ele.pstyle(_prop.name);
            diffProp = diffProps[_prop.name] = {
              prev: prevProp
            };
          }

          ret = this.applyParsedProperty(ele, _prop) || ret;

          if (updateTransitions) {
            diffProp.next = ele.pstyle(_prop.name);
          }
        } // for props


        if (ret) {
          this.updateStyleHints(ele);
        }

        if (updateTransitions) {
          this.updateTransitions(ele, diffProps, isBypass);
        }
      } // for eles


      return ret;
    }; // only useful in specific cases like animation


    styfn$1.overrideBypass = function (eles, name, value) {
      name = camel2dash(name);

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var prop = ele._private.style[name];
        var type = this.properties[name].type;
        var isColor = type.color;
        var isMulti = type.mutiple;
        var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;

        if (!prop || !prop.bypass) {
          // need a bypass if one doesn't exist
          this.applyBypass(ele, name, value);
        } else {
          prop.value = value;

          if (prop.pfValue != null) {
            prop.pfValue = value;
          }

          if (isColor) {
            prop.strValue = 'rgb(' + value.join(',') + ')';
          } else if (isMulti) {
            prop.strValue = value.join(' ');
          } else {
            prop.strValue = '' + value;
          }

          this.updateStyleHints(ele);
        }

        this.checkTriggers(ele, name, oldValue, value);
      }
    };

    styfn$1.removeAllBypasses = function (eles, updateTransitions) {
      return this.removeBypasses(eles, this.propertyNames, updateTransitions);
    };

    styfn$1.removeBypasses = function (eles, props, updateTransitions) {
      var isBypass = true;

      for (var j = 0; j < eles.length; j++) {
        var ele = eles[j];
        var diffProps = {};

        for (var i = 0; i < props.length; i++) {
          var name = props[i];
          var prop = this.properties[name];
          var prevProp = ele.pstyle(prop.name);

          if (!prevProp || !prevProp.bypass) {
            // if a bypass doesn't exist for the prop, nothing needs to be removed
            continue;
          }

          var value = ''; // empty => remove bypass

          var parsedProp = this.parse(name, value, true);
          var diffProp = diffProps[prop.name] = {
            prev: prevProp
          };
          this.applyParsedProperty(ele, parsedProp);
          diffProp.next = ele.pstyle(prop.name);
        } // for props


        this.updateStyleHints(ele);

        if (updateTransitions) {
          this.updateTransitions(ele, diffProps, isBypass);
        }
      } // for eles

    };

    var styfn$2 = {}; // gets what an em size corresponds to in pixels relative to a dom element

    styfn$2.getEmSizeInPixels = function () {
      var px = this.containerCss('font-size');

      if (px != null) {
        return parseFloat(px);
      } else {
        return 1; // for headless
      }
    }; // gets css property from the core container


    styfn$2.containerCss = function (propName) {
      var cy = this._private.cy;
      var domElement = cy.container();

      if (window$1 && domElement && window$1.getComputedStyle) {
        return window$1.getComputedStyle(domElement).getPropertyValue(propName);
      }
    };

    var styfn$3 = {}; // gets the rendered style for an element

    styfn$3.getRenderedStyle = function (ele, prop) {
      if (prop) {
        return this.getStylePropertyValue(ele, prop, true);
      } else {
        return this.getRawStyle(ele, true);
      }
    }; // gets the raw style for an element


    styfn$3.getRawStyle = function (ele, isRenderedVal) {
      var self = this;
      ele = ele[0]; // insure it's an element

      if (ele) {
        var rstyle = {};

        for (var i = 0; i < self.properties.length; i++) {
          var prop = self.properties[i];
          var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);

          if (val != null) {
            rstyle[prop.name] = val;
            rstyle[dash2camel(prop.name)] = val;
          }
        }

        return rstyle;
      }
    };

    styfn$3.getIndexedStyle = function (ele, property, subproperty, index) {
      var pstyle = ele.pstyle(property)[subproperty][index];
      return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
    };

    styfn$3.getStylePropertyValue = function (ele, propName, isRenderedVal) {
      var self = this;
      ele = ele[0]; // insure it's an element

      if (ele) {
        var prop = self.properties[propName];

        if (prop.alias) {
          prop = prop.pointsTo;
        }

        var type = prop.type;
        var styleProp = ele.pstyle(prop.name);

        if (styleProp) {
          var value = styleProp.value,
              units = styleProp.units,
              strValue = styleProp.strValue;

          if (isRenderedVal && type.number && value != null && number(value)) {
            var zoom = ele.cy().zoom();

            var getRenderedValue = function getRenderedValue(val) {
              return val * zoom;
            };

            var getValueStringWithUnits = function getValueStringWithUnits(val, units) {
              return getRenderedValue(val) + units;
            };

            var isArrayValue = array(value);
            var haveUnits = isArrayValue ? units.every(function (u) {
              return u != null;
            }) : units != null;

            if (haveUnits) {
              if (isArrayValue) {
                return value.map(function (v, i) {
                  return getValueStringWithUnits(v, units[i]);
                }).join(' ');
              } else {
                return getValueStringWithUnits(value, units);
              }
            } else {
              if (isArrayValue) {
                return value.map(function (v) {
                  return string(v) ? v : '' + getRenderedValue(v);
                }).join(' ');
              } else {
                return '' + getRenderedValue(value);
              }
            }
          } else if (strValue != null) {
            return strValue;
          }
        }

        return null;
      }
    };

    styfn$3.getAnimationStartStyle = function (ele, aniProps) {
      var rstyle = {};

      for (var i = 0; i < aniProps.length; i++) {
        var aniProp = aniProps[i];
        var name = aniProp.name;
        var styleProp = ele.pstyle(name);

        if (styleProp !== undefined) {
          // then make a prop of it
          if (plainObject(styleProp)) {
            styleProp = this.parse(name, styleProp.strValue);
          } else {
            styleProp = this.parse(name, styleProp);
          }
        }

        if (styleProp) {
          rstyle[name] = styleProp;
        }
      }

      return rstyle;
    };

    styfn$3.getPropsList = function (propsObj) {
      var self = this;
      var rstyle = [];
      var style = propsObj;
      var props = self.properties;

      if (style) {
        var names = Object.keys(style);

        for (var i = 0; i < names.length; i++) {
          var name = names[i];
          var val = style[name];
          var prop = props[name] || props[camel2dash(name)];
          var styleProp = this.parse(prop.name, val);

          if (styleProp) {
            rstyle.push(styleProp);
          }
        }
      }

      return rstyle;
    };

    styfn$3.getNonDefaultPropertiesHash = function (ele, propNames, seed) {
      var hash = seed;
      var name, val, strVal, chVal;
      var i, j;

      for (i = 0; i < propNames.length; i++) {
        name = propNames[i];
        val = ele.pstyle(name, false);

        if (val == null) {
          continue;
        } else if (val.pfValue != null) {
          hash = hashInt(chVal, hash);
        } else {
          strVal = val.strValue;

          for (j = 0; j < strVal.length; j++) {
            chVal = strVal.charCodeAt(j);
            hash = hashInt(chVal, hash);
          }
        }
      }

      return hash;
    };

    styfn$3.getPropertiesHash = styfn$3.getNonDefaultPropertiesHash;

    var styfn$4 = {};

    styfn$4.appendFromJson = function (json) {
      var style = this;

      for (var i = 0; i < json.length; i++) {
        var context = json[i];
        var selector = context.selector;
        var props = context.style || context.css;
        var names = Object.keys(props);
        style.selector(selector); // apply selector

        for (var j = 0; j < names.length; j++) {
          var name = names[j];
          var value = props[name];
          style.css(name, value); // apply property
        }
      }

      return style;
    }; // accessible cy.style() function


    styfn$4.fromJson = function (json) {
      var style = this;
      style.resetToDefault();
      style.appendFromJson(json);
      return style;
    }; // get json from cy.style() api


    styfn$4.json = function () {
      var json = [];

      for (var i = this.defaultLength; i < this.length; i++) {
        var cxt = this[i];
        var selector = cxt.selector;
        var props = cxt.properties;
        var css = {};

        for (var j = 0; j < props.length; j++) {
          var prop = props[j];
          css[prop.name] = prop.strValue;
        }

        json.push({
          selector: !selector ? 'core' : selector.toString(),
          style: css
        });
      }

      return json;
    };

    var styfn$5 = {};

    styfn$5.appendFromString = function (string) {
      var self = this;
      var style = this;
      var remaining = '' + string;
      var selAndBlockStr;
      var blockRem;
      var propAndValStr; // remove comments from the style string

      remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

      function removeSelAndBlockFromRemaining() {
        // remove the parsed selector and block from the remaining text to parse
        if (remaining.length > selAndBlockStr.length) {
          remaining = remaining.substr(selAndBlockStr.length);
        } else {
          remaining = '';
        }
      }

      function removePropAndValFromRem() {
        // remove the parsed property and value from the remaining block text to parse
        if (blockRem.length > propAndValStr.length) {
          blockRem = blockRem.substr(propAndValStr.length);
        } else {
          blockRem = '';
        }
      }

      for (;;) {
        var nothingLeftToParse = remaining.match(/^\s*$/);

        if (nothingLeftToParse) {
          break;
        }

        var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

        if (!selAndBlock) {
          warn('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
          break;
        }

        selAndBlockStr = selAndBlock[0]; // parse the selector

        var selectorStr = selAndBlock[1];

        if (selectorStr !== 'core') {
          var selector = new Selector(selectorStr);

          if (selector.invalid) {
            warn('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr); // skip this selector and block

            removeSelAndBlockFromRemaining();
            continue;
          }
        } // parse the block of properties and values


        var blockStr = selAndBlock[2];
        var invalidBlock = false;
        blockRem = blockStr;
        var props = [];

        for (;;) {
          var _nothingLeftToParse = blockRem.match(/^\s*$/);

          if (_nothingLeftToParse) {
            break;
          }

          var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

          if (!propAndVal) {
            warn('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
            invalidBlock = true;
            break;
          }

          propAndValStr = propAndVal[0];
          var propStr = propAndVal[1];
          var valStr = propAndVal[2];
          var prop = self.properties[propStr];

          if (!prop) {
            warn('Skipping property: Invalid property name in: ' + propAndValStr); // skip this property in the block

            removePropAndValFromRem();
            continue;
          }

          var parsedProp = style.parse(propStr, valStr);

          if (!parsedProp) {
            warn('Skipping property: Invalid property definition in: ' + propAndValStr); // skip this property in the block

            removePropAndValFromRem();
            continue;
          }

          props.push({
            name: propStr,
            val: valStr
          });
          removePropAndValFromRem();
        }

        if (invalidBlock) {
          removeSelAndBlockFromRemaining();
          break;
        } // put the parsed block in the style


        style.selector(selectorStr);

        for (var i = 0; i < props.length; i++) {
          var _prop = props[i];
          style.css(_prop.name, _prop.val);
        }

        removeSelAndBlockFromRemaining();
      }

      return style;
    };

    styfn$5.fromString = function (string) {
      var style = this;
      style.resetToDefault();
      style.appendFromString(string);
      return style;
    };

    var styfn$6 = {};

    (function () {
      var number = number$1;
      var rgba = rgbaNoBackRefs;
      var hsla = hslaNoBackRefs;
      var hex3$1 = hex3;
      var hex6$1 = hex6;

      var data = function data(prefix) {
        return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
      };

      var mapData = function mapData(prefix) {
        var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3$1 + '|' + hex6$1;
        return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
      };

      var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$']; // each visual style property has a type and needs to be validated according to it

      styfn$6.types = {
        time: {
          number: true,
          min: 0,
          units: 's|ms',
          implicitUnits: 'ms'
        },
        percent: {
          number: true,
          min: 0,
          max: 100,
          units: '%',
          implicitUnits: '%'
        },
        percentages: {
          number: true,
          min: 0,
          max: 100,
          units: '%',
          implicitUnits: '%',
          multiple: true
        },
        zeroOneNumber: {
          number: true,
          min: 0,
          max: 1,
          unitless: true
        },
        zeroOneNumbers: {
          number: true,
          min: 0,
          max: 1,
          unitless: true,
          multiple: true
        },
        nOneOneNumber: {
          number: true,
          min: -1,
          max: 1,
          unitless: true
        },
        nonNegativeInt: {
          number: true,
          min: 0,
          integer: true,
          unitless: true
        },
        position: {
          enums: ['parent', 'origin']
        },
        nodeSize: {
          number: true,
          min: 0,
          enums: ['label']
        },
        number: {
          number: true,
          unitless: true
        },
        numbers: {
          number: true,
          unitless: true,
          multiple: true
        },
        positiveNumber: {
          number: true,
          unitless: true,
          min: 0,
          strictMin: true
        },
        size: {
          number: true,
          min: 0
        },
        bidirectionalSize: {
          number: true
        },
        // allows negative
        bidirectionalSizes: {
          number: true,
          multiple: true
        },
        // allows negative
        sizeMaybePercent: {
          number: true,
          min: 0,
          allowPercent: true
        },
        axisDirection: {
          enums: ['horizontal', 'leftward', 'rightward', 'vertical', 'upward', 'downward', 'auto']
        },
        paddingRelativeTo: {
          enums: ['width', 'height', 'average', 'min', 'max']
        },
        bgWH: {
          number: true,
          min: 0,
          allowPercent: true,
          enums: ['auto'],
          multiple: true
        },
        bgPos: {
          number: true,
          allowPercent: true,
          multiple: true
        },
        bgRelativeTo: {
          enums: ['inner', 'include-padding'],
          multiple: true
        },
        bgRepeat: {
          enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],
          multiple: true
        },
        bgFit: {
          enums: ['none', 'contain', 'cover'],
          multiple: true
        },
        bgCrossOrigin: {
          enums: ['anonymous', 'use-credentials'],
          multiple: true
        },
        bgClip: {
          enums: ['none', 'node']
        },
        color: {
          color: true
        },
        colors: {
          color: true,
          multiple: true
        },
        fill: {
          enums: ['solid', 'linear-gradient', 'radial-gradient']
        },
        bool: {
          enums: ['yes', 'no']
        },
        lineStyle: {
          enums: ['solid', 'dotted', 'dashed']
        },
        lineCap: {
          enums: ['butt', 'round', 'square']
        },
        borderStyle: {
          enums: ['solid', 'dotted', 'dashed', 'double']
        },
        curveStyle: {
          enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments', 'straight', 'taxi']
        },
        fontFamily: {
          regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
        },
        fontStyle: {
          enums: ['italic', 'normal', 'oblique']
        },
        fontWeight: {
          enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]
        },
        textDecoration: {
          enums: ['none', 'underline', 'overline', 'line-through']
        },
        textTransform: {
          enums: ['none', 'uppercase', 'lowercase']
        },
        textWrap: {
          enums: ['none', 'wrap', 'ellipsis']
        },
        textBackgroundShape: {
          enums: ['rectangle', 'roundrectangle', 'round-rectangle']
        },
        nodeShape: {
          enums: ['rectangle', 'roundrectangle', 'round-rectangle', 'cutrectangle', 'cut-rectangle', 'bottomroundrectangle', 'bottom-round-rectangle', 'barrel', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'concavehexagon', 'concave-hexagon', 'heptagon', 'octagon', 'tag', 'star', 'diamond', 'vee', 'rhomboid', 'polygon']
        },
        compoundIncludeLabels: {
          enums: ['include', 'exclude']
        },
        arrowShape: {
          enums: ['tee', 'triangle', 'triangle-tee', 'triangle-cross', 'triangle-backcurve', 'vee', 'square', 'circle', 'diamond', 'chevron', 'none']
        },
        arrowFill: {
          enums: ['filled', 'hollow']
        },
        display: {
          enums: ['element', 'none']
        },
        visibility: {
          enums: ['hidden', 'visible']
        },
        zCompoundDepth: {
          enums: ['bottom', 'orphan', 'auto', 'top']
        },
        zIndexCompare: {
          enums: ['auto', 'manual']
        },
        valign: {
          enums: ['top', 'center', 'bottom']
        },
        halign: {
          enums: ['left', 'center', 'right']
        },
        text: {
          string: true
        },
        data: {
          mapping: true,
          regex: data('data')
        },
        layoutData: {
          mapping: true,
          regex: data('layoutData')
        },
        scratch: {
          mapping: true,
          regex: data('scratch')
        },
        mapData: {
          mapping: true,
          regex: mapData('mapData')
        },
        mapLayoutData: {
          mapping: true,
          regex: mapData('mapLayoutData')
        },
        mapScratch: {
          mapping: true,
          regex: mapData('mapScratch')
        },
        fn: {
          mapping: true,
          fn: true
        },
        url: {
          regexes: urlRegexes,
          singleRegexMatchValue: true
        },
        urls: {
          regexes: urlRegexes,
          singleRegexMatchValue: true,
          multiple: true
        },
        propList: {
          propList: true
        },
        angle: {
          number: true,
          units: 'deg|rad',
          implicitUnits: 'rad'
        },
        textRotation: {
          number: true,
          units: 'deg|rad',
          implicitUnits: 'rad',
          enums: ['none', 'autorotate']
        },
        polygonPointList: {
          number: true,
          multiple: true,
          evenMultiple: true,
          min: -1,
          max: 1,
          unitless: true
        },
        edgeDistances: {
          enums: ['intersection', 'node-position']
        },
        edgeEndpoint: {
          number: true,
          multiple: true,
          units: '%|px|em|deg|rad',
          implicitUnits: 'px',
          enums: ['inside-to-node', 'outside-to-node', 'outside-to-node-or-label', 'outside-to-line', 'outside-to-line-or-label'],
          singleEnum: true,
          validate: function validate(valArr, unitsArr) {
            switch (valArr.length) {
              case 2:
                // can be % or px only
                return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';

              case 1:
                // can be enum, deg, or rad only
                return string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';

              default:
                return false;
            }
          }
        },
        easing: {
          regexes: ['^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'],
          enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
        },
        gradientDirection: {
          enums: ['to-bottom', 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left', 'to-right-bottom', 'to-left-bottom', 'to-right-top', 'to-left-top']
        }
      };
      var diff = {
        zeroNonZero: function zeroNonZero(val1, val2) {
          if ((val1 == null || val2 == null) && val1 !== val2) {
            return true; // null cases could represent any value
          }

          if (val1 == 0 && val2 != 0) {
            return true;
          } else if (val1 != 0 && val2 == 0) {
            return true;
          } else {
            return false;
          }
        },
        any: function any(val1, val2) {
          return val1 != val2;
        }
      }; // define visual style properties
      //
      // - n.b. adding a new group of props may require updates to updateStyleHints()
      // - adding new props to an existing group gets handled automatically

      var t = styfn$6.types;
      var mainLabel = [{
        name: 'label',
        type: t.text,
        triggersBounds: diff.any
      }, {
        name: 'text-rotation',
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: 'text-margin-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'text-margin-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }];
      var sourceLabel = [{
        name: 'source-label',
        type: t.text,
        triggersBounds: diff.any
      }, {
        name: 'source-text-rotation',
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: 'source-text-margin-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'source-text-margin-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'source-text-offset',
        type: t.size,
        triggersBounds: diff.any
      }];
      var targetLabel = [{
        name: 'target-label',
        type: t.text,
        triggersBounds: diff.any
      }, {
        name: 'target-text-rotation',
        type: t.textRotation,
        triggersBounds: diff.any
      }, {
        name: 'target-text-margin-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'target-text-margin-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'target-text-offset',
        type: t.size,
        triggersBounds: diff.any
      }];
      var labelDimensions = [{
        name: 'font-family',
        type: t.fontFamily,
        triggersBounds: diff.any
      }, {
        name: 'font-style',
        type: t.fontStyle,
        triggersBounds: diff.any
      }, {
        name: 'font-weight',
        type: t.fontWeight,
        triggersBounds: diff.any
      }, {
        name: 'font-size',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-transform',
        type: t.textTransform,
        triggersBounds: diff.any
      }, {
        name: 'text-wrap',
        type: t.textWrap,
        triggersBounds: diff.any
      }, {
        name: 'text-max-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-outline-width',
        type: t.size,
        triggersBounds: diff.any
      }];
      var commonLabel = [{
        name: 'text-valign',
        type: t.valign,
        triggersBounds: diff.any
      }, {
        name: 'text-halign',
        type: t.halign,
        triggersBounds: diff.any
      }, {
        name: 'color',
        type: t.color
      }, {
        name: 'text-outline-color',
        type: t.color
      }, {
        name: 'text-outline-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'text-background-color',
        type: t.color
      }, {
        name: 'text-background-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'text-background-padding',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-border-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'text-border-color',
        type: t.color
      }, {
        name: 'text-border-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'text-border-style',
        type: t.borderStyle,
        triggersBounds: diff.any
      }, {
        name: 'text-background-shape',
        type: t.textBackgroundShape,
        triggersBounds: diff.any
      }];
      var behavior = [{
        name: 'events',
        type: t.bool
      }, {
        name: 'text-events',
        type: t.bool
      }];
      var visibility = [{
        name: 'display',
        type: t.display,
        triggersZOrder: diff.any,
        triggersBounds: diff.any,
        triggersBoundsOfParallelBeziers: true
      }, {
        name: 'visibility',
        type: t.visibility,
        triggersZOrder: diff.any
      }, {
        name: 'opacity',
        type: t.zeroOneNumber,
        triggersZOrder: diff.zeroNonZero
      }, {
        name: 'text-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'min-zoomed-font-size',
        type: t.size
      }, {
        name: 'z-compound-depth',
        type: t.zCompoundDepth,
        triggersZOrder: diff.any
      }, {
        name: 'z-index-compare',
        type: t.zIndexCompare,
        triggersZOrder: diff.any
      }, {
        name: 'z-index',
        type: t.nonNegativeInt,
        triggersZOrder: diff.any
      }];
      var overlay = [{
        name: 'overlay-padding',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'overlay-color',
        type: t.color
      }, {
        name: 'overlay-opacity',
        type: t.zeroOneNumber,
        triggersBounds: diff.zeroNonZero
      }];
      var transition = [{
        name: 'transition-property',
        type: t.propList
      }, {
        name: 'transition-duration',
        type: t.time
      }, {
        name: 'transition-delay',
        type: t.time
      }, {
        name: 'transition-timing-function',
        type: t.easing
      }];

      var nodeSizeHashOverride = function nodeSizeHashOverride(ele, parsedProp) {
        if (parsedProp.value === 'label') {
          return -ele.poolIndex(); // no hash key hits is using label size (hitrate for perf probably low anyway)
        } else {
          return parsedProp.pfValue;
        }
      };

      var nodeBody = [{
        name: 'height',
        type: t.nodeSize,
        triggersBounds: diff.any,
        hashOverride: nodeSizeHashOverride
      }, {
        name: 'width',
        type: t.nodeSize,
        triggersBounds: diff.any,
        hashOverride: nodeSizeHashOverride
      }, {
        name: 'shape',
        type: t.nodeShape,
        triggersBounds: diff.any
      }, {
        name: 'shape-polygon-points',
        type: t.polygonPointList,
        triggersBounds: diff.any
      }, {
        name: 'background-color',
        type: t.color
      }, {
        name: 'background-fill',
        type: t.fill
      }, {
        name: 'background-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'background-blacken',
        type: t.nOneOneNumber
      }, {
        name: 'background-gradient-stop-colors',
        type: t.colors
      }, {
        name: 'background-gradient-stop-positions',
        type: t.percentages
      }, {
        name: 'background-gradient-direction',
        type: t.gradientDirection
      }, {
        name: 'padding',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'padding-relative-to',
        type: t.paddingRelativeTo,
        triggersBounds: diff.any
      }, {
        name: 'bounds-expansion',
        type: t.size,
        triggersBounds: diff.any
      }];
      var nodeBorder = [{
        name: 'border-color',
        type: t.color
      }, {
        name: 'border-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'border-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'border-style',
        type: t.borderStyle
      }];
      var backgroundImage = [{
        name: 'background-image',
        type: t.urls
      }, {
        name: 'background-image-crossorigin',
        type: t.bgCrossOrigin
      }, {
        name: 'background-image-opacity',
        type: t.zeroOneNumbers
      }, {
        name: 'background-position-x',
        type: t.bgPos
      }, {
        name: 'background-position-y',
        type: t.bgPos
      }, {
        name: 'background-width-relative-to',
        type: t.bgRelativeTo
      }, {
        name: 'background-height-relative-to',
        type: t.bgRelativeTo
      }, {
        name: 'background-repeat',
        type: t.bgRepeat
      }, {
        name: 'background-fit',
        type: t.bgFit
      }, {
        name: 'background-clip',
        type: t.bgClip
      }, {
        name: 'background-width',
        type: t.bgWH
      }, {
        name: 'background-height',
        type: t.bgWH
      }, {
        name: 'background-offset-x',
        type: t.bgPos
      }, {
        name: 'background-offset-y',
        type: t.bgPos
      }];
      var compound = [{
        name: 'position',
        type: t.position,
        triggersBounds: diff.any
      }, {
        name: 'compound-sizing-wrt-labels',
        type: t.compoundIncludeLabels,
        triggersBounds: diff.any
      }, {
        name: 'min-width',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'min-width-bias-left',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'min-width-bias-right',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'min-height',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'min-height-bias-top',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'min-height-bias-bottom',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }];
      var edgeLine = [{
        name: 'line-style',
        type: t.lineStyle
      }, {
        name: 'line-color',
        type: t.color
      }, {
        name: 'line-fill',
        type: t.fill
      }, {
        name: 'line-cap',
        type: t.lineCap
      }, {
        name: 'line-dash-pattern',
        type: t.numbers
      }, {
        name: 'line-dash-offset',
        type: t.number
      }, {
        name: 'line-gradient-stop-colors',
        type: t.colors
      }, {
        name: 'line-gradient-stop-positions',
        type: t.percentages
      }, {
        name: 'curve-style',
        type: t.curveStyle,
        triggersBounds: diff.any,
        triggersBoundsOfParallelBeziers: true
      }, {
        name: 'haystack-radius',
        type: t.zeroOneNumber,
        triggersBounds: diff.any
      }, {
        name: 'source-endpoint',
        type: t.edgeEndpoint,
        triggersBounds: diff.any
      }, {
        name: 'target-endpoint',
        type: t.edgeEndpoint,
        triggersBounds: diff.any
      }, {
        name: 'control-point-step-size',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'control-point-distances',
        type: t.bidirectionalSizes,
        triggersBounds: diff.any
      }, {
        name: 'control-point-weights',
        type: t.numbers,
        triggersBounds: diff.any
      }, {
        name: 'segment-distances',
        type: t.bidirectionalSizes,
        triggersBounds: diff.any
      }, {
        name: 'segment-weights',
        type: t.numbers,
        triggersBounds: diff.any
      }, {
        name: 'taxi-turn',
        type: t.sizeMaybePercent,
        triggersBounds: diff.any
      }, {
        name: 'taxi-turn-min-distance',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'taxi-direction',
        type: t.axisDirection,
        triggersBounds: diff.any
      }, {
        name: 'edge-distances',
        type: t.edgeDistances,
        triggersBounds: diff.any
      }, {
        name: 'arrow-scale',
        type: t.positiveNumber,
        triggersBounds: diff.any
      }, {
        name: 'loop-direction',
        type: t.angle,
        triggersBounds: diff.any
      }, {
        name: 'loop-sweep',
        type: t.angle,
        triggersBounds: diff.any
      }, {
        name: 'source-distance-from-node',
        type: t.size,
        triggersBounds: diff.any
      }, {
        name: 'target-distance-from-node',
        type: t.size,
        triggersBounds: diff.any
      }];
      var ghost = [{
        name: 'ghost',
        type: t.bool,
        triggersBounds: diff.any
      }, {
        name: 'ghost-offset-x',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'ghost-offset-y',
        type: t.bidirectionalSize,
        triggersBounds: diff.any
      }, {
        name: 'ghost-opacity',
        type: t.zeroOneNumber
      }];
      var core = [{
        name: 'selection-box-color',
        type: t.color
      }, {
        name: 'selection-box-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'selection-box-border-color',
        type: t.color
      }, {
        name: 'selection-box-border-width',
        type: t.size
      }, {
        name: 'active-bg-color',
        type: t.color
      }, {
        name: 'active-bg-opacity',
        type: t.zeroOneNumber
      }, {
        name: 'active-bg-size',
        type: t.size
      }, {
        name: 'outside-texture-bg-color',
        type: t.color
      }, {
        name: 'outside-texture-bg-opacity',
        type: t.zeroOneNumber
      }]; // pie backgrounds for nodes

      var pie = [];
      styfn$6.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)

      pie.push({
        name: 'pie-size',
        type: t.sizeMaybePercent
      });

      for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
        pie.push({
          name: 'pie-' + i + '-background-color',
          type: t.color
        });
        pie.push({
          name: 'pie-' + i + '-background-size',
          type: t.percent
        });
        pie.push({
          name: 'pie-' + i + '-background-opacity',
          type: t.zeroOneNumber
        });
      } // edge arrows


      var edgeArrow = [];
      var arrowPrefixes = styfn$6.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
      [{
        name: 'arrow-shape',
        type: t.arrowShape,
        triggersBounds: diff.any
      }, {
        name: 'arrow-color',
        type: t.color
      }, {
        name: 'arrow-fill',
        type: t.arrowFill
      }].forEach(function (prop) {
        arrowPrefixes.forEach(function (prefix) {
          var name = prefix + '-' + prop.name;
          var type = prop.type,
              triggersBounds = prop.triggersBounds;
          edgeArrow.push({
            name: name,
            type: type,
            triggersBounds: triggersBounds
          });
        });
      }, {});
      var props = styfn$6.properties = [].concat(behavior, transition, visibility, overlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, backgroundImage, pie, compound, edgeLine, edgeArrow, core);
      var propGroups = styfn$6.propertyGroups = {
        // common to all eles
        behavior: behavior,
        transition: transition,
        visibility: visibility,
        overlay: overlay,
        ghost: ghost,
        // labels
        commonLabel: commonLabel,
        labelDimensions: labelDimensions,
        mainLabel: mainLabel,
        sourceLabel: sourceLabel,
        targetLabel: targetLabel,
        // node props
        nodeBody: nodeBody,
        nodeBorder: nodeBorder,
        backgroundImage: backgroundImage,
        pie: pie,
        compound: compound,
        // edge props
        edgeLine: edgeLine,
        edgeArrow: edgeArrow,
        core: core
      };
      var propGroupNames = styfn$6.propertyGroupNames = {};
      var propGroupKeys = styfn$6.propertyGroupKeys = Object.keys(propGroups);
      propGroupKeys.forEach(function (key) {
        propGroupNames[key] = propGroups[key].map(function (prop) {
          return prop.name;
        });
        propGroups[key].forEach(function (prop) {
          return prop.groupKey = key;
        });
      }); // define aliases

      var aliases = styfn$6.aliases = [{
        name: 'content',
        pointsTo: 'label'
      }, {
        name: 'control-point-distance',
        pointsTo: 'control-point-distances'
      }, {
        name: 'control-point-weight',
        pointsTo: 'control-point-weights'
      }, {
        name: 'edge-text-rotation',
        pointsTo: 'text-rotation'
      }, {
        name: 'padding-left',
        pointsTo: 'padding'
      }, {
        name: 'padding-right',
        pointsTo: 'padding'
      }, {
        name: 'padding-top',
        pointsTo: 'padding'
      }, {
        name: 'padding-bottom',
        pointsTo: 'padding'
      }]; // list of property names

      styfn$6.propertyNames = props.map(function (p) {
        return p.name;
      }); // allow access of properties by name ( e.g. style.properties.height )

      for (var _i = 0; _i < props.length; _i++) {
        var prop = props[_i];
        props[prop.name] = prop; // allow lookup by name
      } // map aliases


      for (var _i2 = 0; _i2 < aliases.length; _i2++) {
        var alias = aliases[_i2];
        var pointsToProp = props[alias.pointsTo];
        var aliasProp = {
          name: alias.name,
          alias: true,
          pointsTo: pointsToProp
        }; // add alias prop for parsing

        props.push(aliasProp);
        props[alias.name] = aliasProp; // allow lookup by name
      }
    })();

    styfn$6.getDefaultProperty = function (name) {
      return this.getDefaultProperties()[name];
    };

    styfn$6.getDefaultProperties = function () {
      var _p = this._private;

      if (_p.defaultProperties != null) {
        return _p.defaultProperties;
      }

      var rawProps = extend({
        // core props
        'selection-box-color': '#ddd',
        'selection-box-opacity': 0.65,
        'selection-box-border-color': '#aaa',
        'selection-box-border-width': 1,
        'active-bg-color': 'black',
        'active-bg-opacity': 0.15,
        'active-bg-size': 30,
        'outside-texture-bg-color': '#000',
        'outside-texture-bg-opacity': 0.125,
        // common node/edge props
        'events': 'yes',
        'text-events': 'no',
        'text-valign': 'top',
        'text-halign': 'center',
        'color': '#000',
        'text-outline-color': '#000',
        'text-outline-width': 0,
        'text-outline-opacity': 1,
        'text-opacity': 1,
        'text-decoration': 'none',
        'text-transform': 'none',
        'text-wrap': 'none',
        'text-max-width': 9999,
        'text-background-color': '#000',
        'text-background-opacity': 0,
        'text-background-shape': 'rectangle',
        'text-background-padding': 0,
        'text-border-opacity': 0,
        'text-border-width': 0,
        'text-border-style': 'solid',
        'text-border-color': '#000',
        'font-family': 'Helvetica Neue, Helvetica, sans-serif',
        'font-style': 'normal',
        'font-weight': 'normal',
        'font-size': 16,
        'min-zoomed-font-size': 0,
        'text-rotation': 'none',
        'source-text-rotation': 'none',
        'target-text-rotation': 'none',
        'visibility': 'visible',
        'display': 'element',
        'opacity': 1,
        'z-compound-depth': 'auto',
        'z-index-compare': 'auto',
        'z-index': 0,
        'label': '',
        'text-margin-x': 0,
        'text-margin-y': 0,
        'source-label': '',
        'source-text-offset': 0,
        'source-text-margin-x': 0,
        'source-text-margin-y': 0,
        'target-label': '',
        'target-text-offset': 0,
        'target-text-margin-x': 0,
        'target-text-margin-y': 0,
        'overlay-opacity': 0,
        'overlay-color': '#000',
        'overlay-padding': 10,
        'transition-property': 'none',
        'transition-duration': 0,
        'transition-delay': 0,
        'transition-timing-function': 'linear',
        // node props
        'background-blacken': 0,
        'background-color': '#999',
        'background-fill': 'solid',
        'background-opacity': 1,
        'background-image': 'none',
        'background-image-crossorigin': 'anonymous',
        'background-image-opacity': 1,
        'background-position-x': '50%',
        'background-position-y': '50%',
        'background-offset-x': 0,
        'background-offset-y': 0,
        'background-width-relative-to': 'include-padding',
        'background-height-relative-to': 'include-padding',
        'background-repeat': 'no-repeat',
        'background-fit': 'none',
        'background-clip': 'node',
        'background-width': 'auto',
        'background-height': 'auto',
        'border-color': '#000',
        'border-opacity': 1,
        'border-width': 0,
        'border-style': 'solid',
        'height': 30,
        'width': 30,
        'shape': 'ellipse',
        'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',
        'bounds-expansion': 0,
        // node gradient
        'background-gradient-direction': 'to-bottom',
        'background-gradient-stop-colors': '#999',
        'background-gradient-stop-positions': '0%',
        // ghost props
        'ghost': 'no',
        'ghost-offset-y': 0,
        'ghost-offset-x': 0,
        'ghost-opacity': 0,
        // compound props
        'padding': 0,
        'padding-relative-to': 'width',
        'position': 'origin',
        'compound-sizing-wrt-labels': 'include',
        'min-width': 0,
        'min-width-bias-left': 0,
        'min-width-bias-right': 0,
        'min-height': 0,
        'min-height-bias-top': 0,
        'min-height-bias-bottom': 0
      }, {
        // node pie bg
        'pie-size': '100%'
      }, [{
        name: 'pie-{{i}}-background-color',
        value: 'black'
      }, {
        name: 'pie-{{i}}-background-size',
        value: '0%'
      }, {
        name: 'pie-{{i}}-background-opacity',
        value: 1
      }].reduce(function (css, prop) {
        for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
          var name = prop.name.replace('{{i}}', i);
          var val = prop.value;
          css[name] = val;
        }

        return css;
      }, {}), {
        // edge props
        'line-style': 'solid',
        'line-color': '#999',
        'line-fill': 'solid',
        'line-cap': 'butt',
        'line-gradient-stop-colors': '#999',
        'line-gradient-stop-positions': '0%',
        'control-point-step-size': 40,
        'control-point-weights': 0.5,
        'segment-weights': 0.5,
        'segment-distances': 20,
        'taxi-turn': '50%',
        'taxi-turn-min-distance': 10,
        'taxi-direction': 'auto',
        'edge-distances': 'intersection',
        'curve-style': 'haystack',
        'haystack-radius': 0,
        'arrow-scale': 1,
        'loop-direction': '-45deg',
        'loop-sweep': '-90deg',
        'source-distance-from-node': 0,
        'target-distance-from-node': 0,
        'source-endpoint': 'outside-to-node',
        'target-endpoint': 'outside-to-node',
        'line-dash-pattern': [6, 3],
        'line-dash-offset': 0
      }, [{
        name: 'arrow-shape',
        value: 'none'
      }, {
        name: 'arrow-color',
        value: '#999'
      }, {
        name: 'arrow-fill',
        value: 'filled'
      }].reduce(function (css, prop) {
        styfn$6.arrowPrefixes.forEach(function (prefix) {
          var name = prefix + '-' + prop.name;
          var val = prop.value;
          css[name] = val;
        });
        return css;
      }, {}));
      var parsedProps = {};

      for (var i = 0; i < this.properties.length; i++) {
        var prop = this.properties[i];

        if (prop.pointsTo) {
          continue;
        }

        var name = prop.name;
        var val = rawProps[name];
        var parsedProp = this.parse(name, val);
        parsedProps[name] = parsedProp;
      }

      _p.defaultProperties = parsedProps;
      return _p.defaultProperties;
    };

    styfn$6.addDefaultStylesheet = function () {
      this.selector(':parent').css({
        'shape': 'rectangle',
        'padding': 10,
        'background-color': '#eee',
        'border-color': '#ccc',
        'border-width': 1
      }).selector('edge').css({
        'width': 3
      }).selector(':loop').css({
        'curve-style': 'bezier'
      }).selector('edge:compound').css({
        'curve-style': 'bezier',
        'source-endpoint': 'outside-to-line',
        'target-endpoint': 'outside-to-line'
      }).selector(':selected').css({
        'background-color': '#0169D9',
        'line-color': '#0169D9',
        'source-arrow-color': '#0169D9',
        'target-arrow-color': '#0169D9',
        'mid-source-arrow-color': '#0169D9',
        'mid-target-arrow-color': '#0169D9'
      }).selector(':parent:selected').css({
        'background-color': '#CCE1F9',
        'border-color': '#aec8e5'
      }).selector(':active').css({
        'overlay-color': 'black',
        'overlay-padding': 10,
        'overlay-opacity': 0.25
      });
      this.defaultLength = this.length;
    };

    var styfn$7 = {}; // a caching layer for property parsing

    styfn$7.parse = function (name, value, propIsBypass, propIsFlat) {
      var self = this; // function values can't be cached in all cases, and there isn't much benefit of caching them anyway

      if (fn(value)) {
        return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
      }

      var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
      var bypassKey = propIsBypass ? 't' : 'f';
      var valueKey = '' + value;
      var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
      var propCache = self.propCache = self.propCache || [];
      var ret;

      if (!(ret = propCache[argHash])) {
        ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
      } // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
      // - mappings can't be shared b/c mappings are per-element


      if (propIsBypass || propIsFlat === 'mapping') {
        // need a copy since props are mutated later in their lifecycles
        ret = copy(ret);

        if (ret) {
          ret.value = copy(ret.value); // because it could be an array, e.g. colour
        }
      }

      return ret;
    };

    styfn$7.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
      var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);

      if (!prop && value != null) {
        warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
      }

      return prop;
    }; // parse a property; return null on invalid; return parsed property otherwise
    // fields :
    // - name : the name of the property
    // - value : the parsed, native-typed value of the property
    // - strValue : a string value that represents the property value in valid css
    // - bypass : true iff the property is a bypass property


    styfn$7.parseImpl = function (name, value, propIsBypass, propIsFlat) {
      var self = this;
      name = camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

      var property = self.properties[name];
      var passedValue = value;
      var types = self.types;

      if (!property) {
        return null;
      } // return null on property of unknown name


      if (value === undefined) {
        return null;
      } // can't assign undefined
      // the property may be an alias


      if (property.alias) {
        property = property.pointsTo;
        name = property.name;
      }

      var valueIsString = string(value);

      if (valueIsString) {
        // trim the value to make parsing easier
        value = value.trim();
      }

      var type = property.type;

      if (!type) {
        return null;
      } // no type, no luck
      // check if bypass is null or empty string (i.e. indication to delete bypass property)


      if (propIsBypass && (value === '' || value === null)) {
        return {
          name: name,
          value: value,
          bypass: true,
          deleteBypass: true
        };
      } // check if value is a function used as a mapper


      if (fn(value)) {
        return {
          name: name,
          value: value,
          strValue: 'fn',
          mapped: types.fn,
          bypass: propIsBypass
        };
      } // check if value is mapped


      var data, mapData;

      if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== 'a') ; else if (value.length >= 7 && value[0] === 'd' && (data = new RegExp(types.data.regex).exec(value))) {
        if (propIsBypass) {
          return false;
        } // mappers not allowed in bypass


        var mapped = types.data;
        return {
          name: name,
          value: data,
          strValue: '' + value,
          mapped: mapped,
          field: data[1],
          bypass: propIsBypass
        };
      } else if (value.length >= 10 && value[0] === 'm' && (mapData = new RegExp(types.mapData.regex).exec(value))) {
        if (propIsBypass) {
          return false;
        } // mappers not allowed in bypass


        if (type.multiple) {
          return false;
        } // impossible to map to num


        var _mapped = types.mapData; // we can map only if the type is a colour or a number

        if (!(type.color || type.number)) {
          return false;
        }

        var valueMin = this.parse(name, mapData[4]); // parse to validate

        if (!valueMin || valueMin.mapped) {
          return false;
        } // can't be invalid or mapped


        var valueMax = this.parse(name, mapData[5]); // parse to validate

        if (!valueMax || valueMax.mapped) {
          return false;
        } // can't be invalid or mapped
        // check if valueMin and valueMax are the same


        if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
          warn('`' + name + ': ' + value + '` is not a valid mapper because the output range is zero; converting to `' + name + ': ' + valueMin.strValue + '`');
          return this.parse(name, valueMin.strValue); // can't make much of a mapper without a range
        } else if (type.color) {
          var c1 = valueMin.value;
          var c2 = valueMax.value;
          var same = c1[0] === c2[0] // red
          && c1[1] === c2[1] // green
          && c1[2] === c2[2] // blue
          && ( // optional alpha
          c1[3] === c2[3] // same alpha outright
          || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?
          c2[3] == null || c2[3] === 1) // full opacity for colour 2?
          );

          if (same) {
            return false;
          } // can't make a mapper without a range

        }

        return {
          name: name,
          value: mapData,
          strValue: '' + value,
          mapped: _mapped,
          field: mapData[1],
          fieldMin: parseFloat(mapData[2]),
          // min & max are numeric
          fieldMax: parseFloat(mapData[3]),
          valueMin: valueMin.value,
          valueMax: valueMax.value,
          bypass: propIsBypass
        };
      }

      if (type.multiple && propIsFlat !== 'multiple') {
        var vals;

        if (valueIsString) {
          vals = value.split(/\s+/);
        } else if (array(value)) {
          vals = value;
        } else {
          vals = [value];
        }

        if (type.evenMultiple && vals.length % 2 !== 0) {
          return null;
        }

        var valArr = [];
        var unitsArr = [];
        var pfValArr = [];
        var strVal = '';
        var hasEnum = false;

        for (var i = 0; i < vals.length; i++) {
          var p = self.parse(name, vals[i], propIsBypass, 'multiple');
          hasEnum = hasEnum || string(p.value);
          valArr.push(p.value);
          pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
          unitsArr.push(p.units);
          strVal += (i > 0 ? ' ' : '') + p.strValue;
        }

        if (type.validate && !type.validate(valArr, unitsArr)) {
          return null;
        }

        if (type.singleEnum && hasEnum) {
          if (valArr.length === 1 && string(valArr[0])) {
            return {
              name: name,
              value: valArr[0],
              strValue: valArr[0],
              bypass: propIsBypass
            };
          } else {
            return null;
          }
        }

        return {
          name: name,
          value: valArr,
          pfValue: pfValArr,
          strValue: strVal,
          bypass: propIsBypass,
          units: unitsArr
        };
      } // several types also allow enums


      var checkEnums = function checkEnums() {
        for (var _i = 0; _i < type.enums.length; _i++) {
          var en = type.enums[_i];

          if (en === value) {
            return {
              name: name,
              value: value,
              strValue: '' + value,
              bypass: propIsBypass
            };
          }
        }

        return null;
      }; // check the type and return the appropriate object


      if (type.number) {
        var units;
        var implicitUnits = 'px'; // not set => px

        if (type.units) {
          // use specified units if set
          units = type.units;
        }

        if (type.implicitUnits) {
          implicitUnits = type.implicitUnits;
        }

        if (!type.unitless) {
          if (valueIsString) {
            var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');

            if (units) {
              unitsRegex = units;
            } // only allow explicit units if so set


            var match = value.match('^(' + number$1 + ')(' + unitsRegex + ')?' + '$');

            if (match) {
              value = match[1];
              units = match[2] || implicitUnits;
            }
          } else if (!units || type.implicitUnits) {
            units = implicitUnits; // implicitly px if unspecified
          }
        }

        value = parseFloat(value); // if not a number and enums not allowed, then the value is invalid

        if (isNaN(value) && type.enums === undefined) {
          return null;
        } // check if this number type also accepts special keywords in place of numbers
        // (i.e. `left`, `auto`, etc)


        if (isNaN(value) && type.enums !== undefined) {
          value = passedValue;
          return checkEnums();
        } // check if value must be an integer


        if (type.integer && !integer(value)) {
          return null;
        } // check value is within range


        if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
          return null;
        }

        var ret = {
          name: name,
          value: value,
          strValue: '' + value + (units ? units : ''),
          units: units,
          bypass: propIsBypass
        }; // normalise value in pixels

        if (type.unitless || units !== 'px' && units !== 'em') {
          ret.pfValue = value;
        } else {
          ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
        } // normalise value in ms


        if (units === 'ms' || units === 's') {
          ret.pfValue = units === 'ms' ? value : 1000 * value;
        } // normalise value in rad


        if (units === 'deg' || units === 'rad') {
          ret.pfValue = units === 'rad' ? value : deg2rad(value);
        } // normalize value in %


        if (units === '%') {
          ret.pfValue = value / 100;
        }

        return ret;
      } else if (type.propList) {
        var props = [];
        var propsStr = '' + value;

        if (propsStr === 'none') ; else {
          // go over each prop
          var propsSplit = propsStr.split(/\s*,\s*|\s+/);

          for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
            var propName = propsSplit[_i2].trim();

            if (self.properties[propName]) {
              props.push(propName);
            } else {
              warn('`' + propName + '` is not a valid property name');
            }
          }

          if (props.length === 0) {
            return null;
          }
        }

        return {
          name: name,
          value: props,
          strValue: props.length === 0 ? 'none' : props.join(' '),
          bypass: propIsBypass
        };
      } else if (type.color) {
        var tuple = color2tuple(value);

        if (!tuple) {
          return null;
        }

        return {
          name: name,
          value: tuple,
          pfValue: tuple,
          strValue: 'rgb(' + tuple[0] + ',' + tuple[1] + ',' + tuple[2] + ')',
          // n.b. no spaces b/c of multiple support
          bypass: propIsBypass
        };
      } else if (type.regex || type.regexes) {
        // first check enums
        if (type.enums) {
          var enumProp = checkEnums();

          if (enumProp) {
            return enumProp;
          }
        }

        var regexes = type.regexes ? type.regexes : [type.regex];

        for (var _i3 = 0; _i3 < regexes.length; _i3++) {
          var regex = new RegExp(regexes[_i3]); // make a regex from the type string

          var m = regex.exec(value);

          if (m) {
            // regex matches
            return {
              name: name,
              value: type.singleRegexMatchValue ? m[1] : m,
              strValue: '' + value,
              bypass: propIsBypass
            };
          }
        }

        return null; // didn't match any
      } else if (type.string) {
        // just return
        return {
          name: name,
          value: '' + value,
          strValue: '' + value,
          bypass: propIsBypass
        };
      } else if (type.enums) {
        // check enums last because it's a combo type in others
        return checkEnums();
      } else {
        return null; // not a type we can handle
      }
    };

    var Style = function Style(cy) {
      if (!(this instanceof Style)) {
        return new Style(cy);
      }

      if (!core(cy)) {
        error('A style must have a core reference');
        return;
      }

      this._private = {
        cy: cy,
        coreStyle: {}
      };
      this.length = 0;
      this.resetToDefault();
    };

    var styfn$8 = Style.prototype;

    styfn$8.instanceString = function () {
      return 'style';
    }; // remove all contexts


    styfn$8.clear = function () {
      for (var i = 0; i < this.length; i++) {
        this[i] = undefined;
      }

      this.length = 0;
      var _p = this._private;
      _p.newStyle = true;
      return this; // chaining
    };

    styfn$8.resetToDefault = function () {
      this.clear();
      this.addDefaultStylesheet();
      return this;
    }; // builds a style object for the 'core' selector


    styfn$8.core = function (propName) {
      return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
    }; // create a new context from the specified selector string and switch to that context


    styfn$8.selector = function (selectorStr) {
      // 'core' is a special case and does not need a selector
      var selector = selectorStr === 'core' ? null : new Selector(selectorStr);
      var i = this.length++; // new context means new index

      this[i] = {
        selector: selector,
        properties: [],
        mappedProperties: [],
        index: i
      };
      return this; // chaining
    }; // add one or many css rules to the current context


    styfn$8.css = function () {
      var self = this;
      var args = arguments;

      if (args.length === 1) {
        var map = args[0];

        for (var i = 0; i < self.properties.length; i++) {
          var prop = self.properties[i];
          var mapVal = map[prop.name];

          if (mapVal === undefined) {
            mapVal = map[dash2camel(prop.name)];
          }

          if (mapVal !== undefined) {
            this.cssRule(prop.name, mapVal);
          }
        }
      } else if (args.length === 2) {
        this.cssRule(args[0], args[1]);
      } // do nothing if args are invalid


      return this; // chaining
    };

    styfn$8.style = styfn$8.css; // add a single css rule to the current context

    styfn$8.cssRule = function (name, value) {
      // name-value pair
      var property = this.parse(name, value); // add property to current context if valid

      if (property) {
        var i = this.length - 1;
        this[i].properties.push(property);
        this[i].properties[property.name] = property; // allow access by name as well

        if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
          this._private.hasPie = true;
        }

        if (property.mapped) {
          this[i].mappedProperties.push(property);
        } // add to core style if necessary


        var currentSelectorIsCore = !this[i].selector;

        if (currentSelectorIsCore) {
          this._private.coreStyle[property.name] = property;
        }
      }

      return this; // chaining
    };

    styfn$8.append = function (style) {
      if (stylesheet(style)) {
        style.appendToStyle(this);
      } else if (array(style)) {
        this.appendFromJson(style);
      } else if (string(style)) {
        this.appendFromString(style);
      } // you probably wouldn't want to append a Style, since you'd duplicate the default parts


      return this;
    }; // static function


    Style.fromJson = function (cy, json) {
      var style = new Style(cy);
      style.fromJson(json);
      return style;
    };

    Style.fromString = function (cy, string) {
      return new Style(cy).fromString(string);
    };

    [styfn, styfn$1, styfn$2, styfn$3, styfn$4, styfn$5, styfn$6, styfn$7].forEach(function (props) {
      extend(styfn$8, props);
    });
    Style.types = styfn$8.types;
    Style.properties = styfn$8.properties;
    Style.propertyGroups = styfn$8.propertyGroups;
    Style.propertyGroupNames = styfn$8.propertyGroupNames;
    Style.propertyGroupKeys = styfn$8.propertyGroupKeys;

    var corefn$7 = {
      style: function style(newStyle) {
        if (newStyle) {
          var s = this.setStyle(newStyle);
          s.update();
        }

        return this._private.style;
      },
      setStyle: function setStyle(style) {
        var _p = this._private;

        if (stylesheet(style)) {
          _p.style = style.generateStyle(this);
        } else if (array(style)) {
          _p.style = Style.fromJson(this, style);
        } else if (string(style)) {
          _p.style = Style.fromString(this, style);
        } else {
          _p.style = Style(this);
        }

        return _p.style;
      }
    };

    var defaultSelectionType = 'single';
    var corefn$8 = {
      autolock: function autolock(bool) {
        if (bool !== undefined) {
          this._private.autolock = bool ? true : false;
        } else {
          return this._private.autolock;
        }

        return this; // chaining
      },
      autoungrabify: function autoungrabify(bool) {
        if (bool !== undefined) {
          this._private.autoungrabify = bool ? true : false;
        } else {
          return this._private.autoungrabify;
        }

        return this; // chaining
      },
      autounselectify: function autounselectify(bool) {
        if (bool !== undefined) {
          this._private.autounselectify = bool ? true : false;
        } else {
          return this._private.autounselectify;
        }

        return this; // chaining
      },
      selectionType: function selectionType(selType) {
        var _p = this._private;

        if (_p.selectionType == null) {
          _p.selectionType = defaultSelectionType;
        }

        if (selType !== undefined) {
          if (selType === 'additive' || selType === 'single') {
            _p.selectionType = selType;
          }
        } else {
          return _p.selectionType;
        }

        return this;
      },
      panningEnabled: function panningEnabled(bool) {
        if (bool !== undefined) {
          this._private.panningEnabled = bool ? true : false;
        } else {
          return this._private.panningEnabled;
        }

        return this; // chaining
      },
      userPanningEnabled: function userPanningEnabled(bool) {
        if (bool !== undefined) {
          this._private.userPanningEnabled = bool ? true : false;
        } else {
          return this._private.userPanningEnabled;
        }

        return this; // chaining
      },
      zoomingEnabled: function zoomingEnabled(bool) {
        if (bool !== undefined) {
          this._private.zoomingEnabled = bool ? true : false;
        } else {
          return this._private.zoomingEnabled;
        }

        return this; // chaining
      },
      userZoomingEnabled: function userZoomingEnabled(bool) {
        if (bool !== undefined) {
          this._private.userZoomingEnabled = bool ? true : false;
        } else {
          return this._private.userZoomingEnabled;
        }

        return this; // chaining
      },
      boxSelectionEnabled: function boxSelectionEnabled(bool) {
        if (bool !== undefined) {
          this._private.boxSelectionEnabled = bool ? true : false;
        } else {
          return this._private.boxSelectionEnabled;
        }

        return this; // chaining
      },
      pan: function pan() {
        var args = arguments;
        var pan = this._private.pan;
        var dim, val, dims, x, y;

        switch (args.length) {
          case 0:
            // .pan()
            return pan;

          case 1:
            if (string(args[0])) {
              // .pan('x')
              dim = args[0];
              return pan[dim];
            } else if (plainObject(args[0])) {
              // .pan({ x: 0, y: 100 })
              if (!this._private.panningEnabled) {
                return this;
              }

              dims = args[0];
              x = dims.x;
              y = dims.y;

              if (number(x)) {
                pan.x = x;
              }

              if (number(y)) {
                pan.y = y;
              }

              this.emit('pan viewport');
            }

            break;

          case 2:
            // .pan('x', 100)
            if (!this._private.panningEnabled) {
              return this;
            }

            dim = args[0];
            val = args[1];

            if ((dim === 'x' || dim === 'y') && number(val)) {
              pan[dim] = val;
            }

            this.emit('pan viewport');
            break;
          // invalid
        }

        this.notify('viewport');
        return this; // chaining
      },
      panBy: function panBy(arg0, arg1) {
        var args = arguments;
        var pan = this._private.pan;
        var dim, val, dims, x, y;

        if (!this._private.panningEnabled) {
          return this;
        }

        switch (args.length) {
          case 1:
            if (plainObject(arg0)) {
              // .panBy({ x: 0, y: 100 })
              dims = args[0];
              x = dims.x;
              y = dims.y;

              if (number(x)) {
                pan.x += x;
              }

              if (number(y)) {
                pan.y += y;
              }

              this.emit('pan viewport');
            }

            break;

          case 2:
            // .panBy('x', 100)
            dim = arg0;
            val = arg1;

            if ((dim === 'x' || dim === 'y') && number(val)) {
              pan[dim] += val;
            }

            this.emit('pan viewport');
            break;
          // invalid
        }

        this.notify('viewport');
        return this; // chaining
      },
      fit: function fit(elements, padding) {
        var viewportState = this.getFitViewport(elements, padding);

        if (viewportState) {
          var _p = this._private;
          _p.zoom = viewportState.zoom;
          _p.pan = viewportState.pan;
          this.emit('pan zoom viewport');
          this.notify('viewport');
        }

        return this; // chaining
      },
      getFitViewport: function getFitViewport(elements, padding) {
        if (number(elements) && padding === undefined) {
          // elements is optional
          padding = elements;
          elements = undefined;
        }

        if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
          return;
        }

        var bb;

        if (string(elements)) {
          var sel = elements;
          elements = this.$(sel);
        } else if (boundingBox(elements)) {
          // assume bb
          var bbe = elements;
          bb = {
            x1: bbe.x1,
            y1: bbe.y1,
            x2: bbe.x2,
            y2: bbe.y2
          };
          bb.w = bb.x2 - bb.x1;
          bb.h = bb.y2 - bb.y1;
        } else if (!elementOrCollection(elements)) {
          elements = this.mutableElements();
        }

        if (elementOrCollection(elements) && elements.empty()) {
          return;
        } // can't fit to nothing


        bb = bb || elements.boundingBox();
        var w = this.width();
        var h = this.height();
        var zoom;
        padding = number(padding) ? padding : 0;

        if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
          zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h); // crop zoom

          zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
          zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;
          var pan = {
            // now pan to middle
            x: (w - zoom * (bb.x1 + bb.x2)) / 2,
            y: (h - zoom * (bb.y1 + bb.y2)) / 2
          };
          return {
            zoom: zoom,
            pan: pan
          };
        }

        return;
      },
      zoomRange: function zoomRange(min, max) {
        var _p = this._private;

        if (max == null) {
          var opts = min;
          min = opts.min;
          max = opts.max;
        }

        if (number(min) && number(max) && min <= max) {
          _p.minZoom = min;
          _p.maxZoom = max;
        } else if (number(min) && max === undefined && min <= _p.maxZoom) {
          _p.minZoom = min;
        } else if (number(max) && min === undefined && max >= _p.minZoom) {
          _p.maxZoom = max;
        }

        return this;
      },
      minZoom: function minZoom(zoom) {
        if (zoom === undefined) {
          return this._private.minZoom;
        } else {
          return this.zoomRange({
            min: zoom
          });
        }
      },
      maxZoom: function maxZoom(zoom) {
        if (zoom === undefined) {
          return this._private.maxZoom;
        } else {
          return this.zoomRange({
            max: zoom
          });
        }
      },
      getZoomedViewport: function getZoomedViewport(params) {
        var _p = this._private;
        var currentPan = _p.pan;
        var currentZoom = _p.zoom;
        var pos; // in rendered px

        var zoom;
        var bail = false;

        if (!_p.zoomingEnabled) {
          // zooming disabled
          bail = true;
        }

        if (number(params)) {
          // then set the zoom
          zoom = params;
        } else if (plainObject(params)) {
          // then zoom about a point
          zoom = params.level;

          if (params.position != null) {
            pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
          } else if (params.renderedPosition != null) {
            pos = params.renderedPosition;
          }

          if (pos != null && !_p.panningEnabled) {
            // panning disabled
            bail = true;
          }
        } // crop zoom


        zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
        zoom = zoom < _p.minZoom ? _p.minZoom : zoom; // can't zoom with invalid params

        if (bail || !number(zoom) || zoom === currentZoom || pos != null && (!number(pos.x) || !number(pos.y))) {
          return null;
        }

        if (pos != null) {
          // set zoom about position
          var pan1 = currentPan;
          var zoom1 = currentZoom;
          var zoom2 = zoom;
          var pan2 = {
            x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
            y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
          };
          return {
            zoomed: true,
            panned: true,
            zoom: zoom2,
            pan: pan2
          };
        } else {
          // just set the zoom
          return {
            zoomed: true,
            panned: false,
            zoom: zoom,
            pan: currentPan
          };
        }
      },
      zoom: function zoom(params) {
        if (params === undefined) {
          // get
          return this._private.zoom;
        } else {
          // set
          var vp = this.getZoomedViewport(params);
          var _p = this._private;

          if (vp == null || !vp.zoomed) {
            return this;
          }

          _p.zoom = vp.zoom;

          if (vp.panned) {
            _p.pan.x = vp.pan.x;
            _p.pan.y = vp.pan.y;
          }

          this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');
          this.notify('viewport');
          return this; // chaining
        }
      },
      viewport: function viewport(opts) {
        var _p = this._private;
        var zoomDefd = true;
        var panDefd = true;
        var events = []; // to trigger

        var zoomFailed = false;
        var panFailed = false;

        if (!opts) {
          return this;
        }

        if (!number(opts.zoom)) {
          zoomDefd = false;
        }

        if (!plainObject(opts.pan)) {
          panDefd = false;
        }

        if (!zoomDefd && !panDefd) {
          return this;
        }

        if (zoomDefd) {
          var z = opts.zoom;

          if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
            zoomFailed = true;
          } else {
            _p.zoom = z;
            events.push('zoom');
          }
        }

        if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
          var p = opts.pan;

          if (number(p.x)) {
            _p.pan.x = p.x;
            panFailed = false;
          }

          if (number(p.y)) {
            _p.pan.y = p.y;
            panFailed = false;
          }

          if (!panFailed) {
            events.push('pan');
          }
        }

        if (events.length > 0) {
          events.push('viewport');
          this.emit(events.join(' '));
          this.notify('viewport');
        }

        return this; // chaining
      },
      center: function center(elements) {
        var pan = this.getCenterPan(elements);

        if (pan) {
          this._private.pan = pan;
          this.emit('pan viewport');
          this.notify('viewport');
        }

        return this; // chaining
      },
      getCenterPan: function getCenterPan(elements, zoom) {
        if (!this._private.panningEnabled) {
          return;
        }

        if (string(elements)) {
          var selector = elements;
          elements = this.mutableElements().filter(selector);
        } else if (!elementOrCollection(elements)) {
          elements = this.mutableElements();
        }

        if (elements.length === 0) {
          return;
        } // can't centre pan to nothing


        var bb = elements.boundingBox();
        var w = this.width();
        var h = this.height();
        zoom = zoom === undefined ? this._private.zoom : zoom;
        var pan = {
          // middle
          x: (w - zoom * (bb.x1 + bb.x2)) / 2,
          y: (h - zoom * (bb.y1 + bb.y2)) / 2
        };
        return pan;
      },
      reset: function reset() {
        if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
          return this;
        }

        this.viewport({
          pan: {
            x: 0,
            y: 0
          },
          zoom: 1
        });
        return this; // chaining
      },
      invalidateSize: function invalidateSize() {
        this._private.sizeCache = null;
      },
      size: function size() {
        var _p = this._private;
        var container = _p.container;
        return _p.sizeCache = _p.sizeCache || (container ? function () {
          var style = window$1.getComputedStyle(container);

          var val = function val(name) {
            return parseFloat(style.getPropertyValue(name));
          };

          return {
            width: container.clientWidth - val('padding-left') - val('padding-right'),
            height: container.clientHeight - val('padding-top') - val('padding-bottom')
          };
        }() : {
          // fallback if no container (not 0 b/c can be used for dividing etc)
          width: 1,
          height: 1
        });
      },
      width: function width() {
        return this.size().width;
      },
      height: function height() {
        return this.size().height;
      },
      extent: function extent() {
        var pan = this._private.pan;
        var zoom = this._private.zoom;
        var rb = this.renderedExtent();
        var b = {
          x1: (rb.x1 - pan.x) / zoom,
          x2: (rb.x2 - pan.x) / zoom,
          y1: (rb.y1 - pan.y) / zoom,
          y2: (rb.y2 - pan.y) / zoom
        };
        b.w = b.x2 - b.x1;
        b.h = b.y2 - b.y1;
        return b;
      },
      renderedExtent: function renderedExtent() {
        var width = this.width();
        var height = this.height();
        return {
          x1: 0,
          y1: 0,
          x2: width,
          y2: height,
          w: width,
          h: height
        };
      }
    }; // aliases

    corefn$8.centre = corefn$8.center; // backwards compatibility

    corefn$8.autolockNodes = corefn$8.autolock;
    corefn$8.autoungrabifyNodes = corefn$8.autoungrabify;

    var Core = function Core(opts) {
      var cy = this;
      opts = extend({}, opts);
      var container = opts.container; // allow for passing a wrapped jquery object
      // e.g. cytoscape({ container: $('#cy') })

      if (container && !htmlElement(container) && htmlElement(container[0])) {
        container = container[0];
      }

      var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery

      reg = reg || {};

      if (reg && reg.cy) {
        reg.cy.destroy();
        reg = {}; // old instance => replace reg completely
      }

      var readies = reg.readies = reg.readies || [];

      if (container) {
        container._cyreg = reg;
      } // make sure container assoc'd reg points to this cy


      reg.cy = cy;
      var head = window$1 !== undefined && container !== undefined && !opts.headless;
      var options = opts;
      options.layout = extend({
        name: head ? 'grid' : 'null'
      }, options.layout);
      options.renderer = extend({
        name: head ? 'canvas' : 'null'
      }, options.renderer);

      var defVal = function defVal(def, val, altVal) {
        if (val !== undefined) {
          return val;
        } else if (altVal !== undefined) {
          return altVal;
        } else {
          return def;
        }
      };

      var _p = this._private = {
        container: container,
        // html dom ele container
        ready: false,
        // whether ready has been triggered
        options: options,
        // cached options
        elements: new Collection(this),
        // elements in the graph
        listeners: [],
        // list of listeners
        aniEles: new Collection(this),
        // elements being animated
        scratch: {},
        // scratch object for core
        layout: null,
        renderer: null,
        destroyed: false,
        // whether destroy was called
        notificationsEnabled: true,
        // whether notifications are sent to the renderer
        minZoom: 1e-50,
        maxZoom: 1e50,
        zoomingEnabled: defVal(true, options.zoomingEnabled),
        userZoomingEnabled: defVal(true, options.userZoomingEnabled),
        panningEnabled: defVal(true, options.panningEnabled),
        userPanningEnabled: defVal(true, options.userPanningEnabled),
        boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
        autolock: defVal(false, options.autolock, options.autolockNodes),
        autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
        autounselectify: defVal(false, options.autounselectify),
        styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
        zoom: number(options.zoom) ? options.zoom : 1,
        pan: {
          x: plainObject(options.pan) && number(options.pan.x) ? options.pan.x : 0,
          y: plainObject(options.pan) && number(options.pan.y) ? options.pan.y : 0
        },
        animation: {
          // object for currently-running animations
          current: [],
          queue: []
        },
        hasCompoundNodes: false
      };

      this.createEmitter(); // set selection type

      this.selectionType(options.selectionType); // init zoom bounds

      this.zoomRange({
        min: options.minZoom,
        max: options.maxZoom
      });

      var loadExtData = function loadExtData(extData, next) {
        var anyIsPromise = extData.some(promise);

        if (anyIsPromise) {
          return Promise$1.all(extData).then(next); // load all data asynchronously, then exec rest of init
        } else {
          next(extData); // exec synchronously for convenience
        }
      }; // start with the default stylesheet so we have something before loading an external stylesheet


      if (_p.styleEnabled) {
        cy.setStyle([]);
      } // create the renderer


      var rendererOptions = extend({}, options, options.renderer); // allow rendering hints in top level options

      cy.initRenderer(rendererOptions);

      var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
        cy.notifications(false); // remove old elements

        var oldEles = cy.mutableElements();

        if (oldEles.length > 0) {
          oldEles.remove();
        }

        if (elements != null) {
          if (plainObject(elements) || array(elements)) {
            cy.add(elements);
          }
        }

        cy.one('layoutready', function (e) {
          cy.notifications(true);
          cy.emit(e); // we missed this event by turning notifications off, so pass it on

          cy.one('load', onload);
          cy.emitAndNotify('load');
        }).one('layoutstop', function () {
          cy.one('done', ondone);
          cy.emit('done');
        });
        var layoutOpts = extend({}, cy._private.options.layout);
        layoutOpts.eles = cy.elements();
        cy.layout(layoutOpts).run();
      };

      loadExtData([options.style, options.elements], function (thens) {
        var initStyle = thens[0];
        var initEles = thens[1]; // init style

        if (_p.styleEnabled) {
          cy.style().append(initStyle);
        } // initial load


        setElesAndLayout(initEles, function () {
          // onready
          cy.startAnimationLoop();
          _p.ready = true; // if a ready callback is specified as an option, the bind it

          if (fn(options.ready)) {
            cy.on('ready', options.ready);
          } // bind all the ready handlers registered before creating this instance


          for (var i = 0; i < readies.length; i++) {
            var fn$1 = readies[i];
            cy.on('ready', fn$1);
          }

          if (reg) {
            reg.readies = [];
          } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc


          cy.emit('ready');
        }, options.done);
      });
    };

    var corefn$9 = Core.prototype; // short alias

    extend(corefn$9, {
      instanceString: function instanceString() {
        return 'core';
      },
      isReady: function isReady() {
        return this._private.ready;
      },
      isDestroyed: function isDestroyed() {
        return this._private.destroyed;
      },
      ready: function ready(fn) {
        if (this.isReady()) {
          this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event
        } else {
          this.on('ready', fn);
        }

        return this;
      },
      destroy: function destroy() {
        var cy = this;
        if (cy.isDestroyed()) return;
        cy.stopAnimationLoop();
        cy.destroyRenderer();
        this.emit('destroy');
        cy._private.destroyed = true;
        return cy;
      },
      hasElementWithId: function hasElementWithId(id) {
        return this._private.elements.hasElementWithId(id);
      },
      getElementById: function getElementById(id) {
        return this._private.elements.getElementById(id);
      },
      hasCompoundNodes: function hasCompoundNodes() {
        return this._private.hasCompoundNodes;
      },
      headless: function headless() {
        return this._private.renderer.isHeadless();
      },
      styleEnabled: function styleEnabled() {
        return this._private.styleEnabled;
      },
      addToPool: function addToPool(eles) {
        this._private.elements.merge(eles);

        return this; // chaining
      },
      removeFromPool: function removeFromPool(eles) {
        this._private.elements.unmerge(eles);

        return this;
      },
      container: function container() {
        return this._private.container || null;
      },
      mount: function mount(container, rendererOptions) {
        if (container == null) {
          return;
        }

        var cy = this;
        var _p = cy._private;
        var options = _p.options;
        var rOpts = rendererOptions ? rendererOptions : {
          name: 'canvas'
        };
        options.renderer = rOpts;

        if (!htmlElement(container) && htmlElement(container[0])) {
          container = container[0];
        }

        cy.stopAnimationLoop();
        cy.destroyRenderer();
        _p.container = container;
        _p.styleEnabled = true;
        cy.invalidateSize();
        cy.initRenderer(rOpts);
        cy.startAnimationLoop();
        cy.style(options.style);
        cy.emit('mount');
        return cy;
      },
      unmount: function unmount() {
        var cy = this;
        cy.stopAnimationLoop();
        cy.destroyRenderer();
        cy.initRenderer({
          name: 'null'
        });
        cy.emit('unmount');
        return cy;
      },
      options: function options() {
        return copy(this._private.options);
      },
      json: function json(obj) {
        var cy = this;
        var _p = cy._private;
        var eles = cy.mutableElements();

        var getFreshRef = function getFreshRef(ele) {
          return cy.getElementById(ele.id());
        };

        if (plainObject(obj)) {
          // set
          cy.startBatch();

          if (obj.elements) {
            var idInJson = {};

            var updateEles = function updateEles(jsons, gr) {
              var toAdd = [];
              var toMod = [];

              for (var i = 0; i < jsons.length; i++) {
                var json = jsons[i];
                var id = json.data.id;
                var ele = cy.getElementById(id);
                idInJson[id] = true;

                if (ele.length !== 0) {
                  // existing element should be updated
                  toMod.push({
                    ele: ele,
                    json: json
                  });
                } else {
                  // otherwise should be added
                  if (gr) {
                    json.group = gr;
                    toAdd.push(json);
                  } else {
                    toAdd.push(json);
                  }
                }
              }

              cy.add(toAdd);

              for (var _i = 0; _i < toMod.length; _i++) {
                var _toMod$_i = toMod[_i],
                    _ele = _toMod$_i.ele,
                    _json = _toMod$_i.json;

                _ele.json(_json);
              }
            };

            if (array(obj.elements)) {
              // elements: []
              updateEles(obj.elements);
            } else {
              // elements: { nodes: [], edges: [] }
              var grs = ['nodes', 'edges'];

              for (var i = 0; i < grs.length; i++) {
                var gr = grs[i];
                var elements = obj.elements[gr];

                if (array(elements)) {
                  updateEles(elements, gr);
                }
              }
            }

            var parentsToRemove = cy.collection();
            eles.filter(function (ele) {
              return !idInJson[ele.id()];
            }).forEach(function (ele) {
              if (ele.isParent()) {
                parentsToRemove.merge(ele);
              } else {
                ele.remove();
              }
            }); // so that children are not removed w/parent

            parentsToRemove.forEach(function (ele) {
              return ele.children().move({
                parent: null
              });
            }); // intermediate parents may be moved by prior line, so make sure we remove by fresh refs

            parentsToRemove.forEach(function (ele) {
              return getFreshRef(ele).remove();
            });
          }

          if (obj.style) {
            cy.style(obj.style);
          }

          if (obj.zoom != null && obj.zoom !== _p.zoom) {
            cy.zoom(obj.zoom);
          }

          if (obj.pan) {
            if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
              cy.pan(obj.pan);
            }
          }

          var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify'];

          for (var _i2 = 0; _i2 < fields.length; _i2++) {
            var f = fields[_i2];

            if (obj[f] != null) {
              cy[f](obj[f]);
            }
          }

          cy.endBatch();
          return this; // chaining
        } else {
          // get
          var flat = !!obj;
          var json = {};

          if (flat) {
            json.elements = this.elements().map(function (ele) {
              return ele.json();
            });
          } else {
            json.elements = {};
            eles.forEach(function (ele) {
              var group = ele.group();

              if (!json.elements[group]) {
                json.elements[group] = [];
              }

              json.elements[group].push(ele.json());
            });
          }

          if (this._private.styleEnabled) {
            json.style = cy.style().json();
          }

          var options = _p.options;
          json.zoomingEnabled = _p.zoomingEnabled;
          json.userZoomingEnabled = _p.userZoomingEnabled;
          json.zoom = _p.zoom;
          json.minZoom = _p.minZoom;
          json.maxZoom = _p.maxZoom;
          json.panningEnabled = _p.panningEnabled;
          json.userPanningEnabled = _p.userPanningEnabled;
          json.pan = copy(_p.pan);
          json.boxSelectionEnabled = _p.boxSelectionEnabled;
          json.renderer = copy(options.renderer);
          json.hideEdgesOnViewport = options.hideEdgesOnViewport;
          json.textureOnViewport = options.textureOnViewport;
          json.wheelSensitivity = options.wheelSensitivity;
          json.motionBlur = options.motionBlur;
          return json;
        }
      },
      scratch: define$3.data({
        field: 'scratch',
        bindingEvent: 'scratch',
        allowBinding: true,
        allowSetting: true,
        settingEvent: 'scratch',
        settingTriggersEvent: true,
        triggerFnName: 'trigger',
        allowGetting: true
      }),
      removeScratch: define$3.removeData({
        field: 'scratch',
        event: 'scratch',
        triggerFnName: 'trigger',
        triggerEvent: true
      })
    });
    corefn$9.$id = corefn$9.getElementById;
    [corefn, corefn$1, elesfn$u, corefn$2, corefn$3, corefn$4, corefn$5, corefn$6, corefn$7, corefn$8].forEach(function (props) {
      extend(corefn$9, props);
    });

    /* eslint-disable no-unused-vars */

    var defaults$9 = {
      fit: true,
      // whether to fit the viewport to the graph
      directed: false,
      // whether the tree is directed downwards (or edges can point in any direction if false)
      padding: 30,
      // padding on fit
      circle: false,
      // put depths in concentric circles if true, put depths top down if false
      grid: false,
      // whether to create an even grid into which the DAG is placed (circle:false only)
      spacingFactor: 1.75,
      // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox if not enough space
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      roots: undefined,
      // the roots of the trees
      maximal: false,
      // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled,
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts

    };
    /* eslint-enable */

    var getInfo = function getInfo(ele) {
      return ele.scratch('breadthfirst');
    };

    var setInfo = function setInfo(ele, obj) {
      return ele.scratch('breadthfirst', obj);
    };

    function BreadthFirstLayout(options) {
      this.options = extend({}, defaults$9, options);
    }

    BreadthFirstLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().filter(function (n) {
        return !n.isParent();
      });
      var graph = eles;
      var directed = options.directed;
      var maximal = options.maximal || options.maximalAdjustments > 0; // maximalAdjustments for compat. w/ old code

      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var roots;

      if (elementOrCollection(options.roots)) {
        roots = options.roots;
      } else if (array(options.roots)) {
        var rootsArray = [];

        for (var i = 0; i < options.roots.length; i++) {
          var id = options.roots[i];
          var ele = cy.getElementById(id);
          rootsArray.push(ele);
        }

        roots = cy.collection(rootsArray);
      } else if (string(options.roots)) {
        roots = cy.$(options.roots);
      } else {
        if (directed) {
          roots = nodes.roots();
        } else {
          var components = eles.components();
          roots = cy.collection();

          var _loop = function _loop(_i) {
            var comp = components[_i];
            var maxDegree = comp.maxDegree(false);
            var compRoots = comp.filter(function (ele) {
              return ele.degree(false) === maxDegree;
            });
            roots = roots.add(compRoots);
          };

          for (var _i = 0; _i < components.length; _i++) {
            _loop(_i);
          }
        }
      }

      var depths = [];
      var foundByBfs = {};

      var addToDepth = function addToDepth(ele, d) {
        if (depths[d] == null) {
          depths[d] = [];
        }

        var i = depths[d].length;
        depths[d].push(ele);
        setInfo(ele, {
          index: i,
          depth: d
        });
      };

      var changeDepth = function changeDepth(ele, newDepth) {
        var _getInfo = getInfo(ele),
            depth = _getInfo.depth,
            index = _getInfo.index;

        depths[depth][index] = null;
        addToDepth(ele, newDepth);
      }; // find the depths of the nodes


      graph.bfs({
        roots: roots,
        directed: options.directed,
        visit: function visit(node, edge, pNode, i, depth) {
          var ele = node[0];
          var id = ele.id();
          addToDepth(ele, depth);
          foundByBfs[id] = true;
        }
      }); // check for nodes not found by bfs

      var orphanNodes = [];

      for (var _i2 = 0; _i2 < nodes.length; _i2++) {
        var _ele = nodes[_i2];

        if (foundByBfs[_ele.id()]) {
          continue;
        } else {
          orphanNodes.push(_ele);
        }
      } // assign the nodes a depth and index


      var assignDepthsAt = function assignDepthsAt(i) {
        var eles = depths[i];

        for (var j = 0; j < eles.length; j++) {
          var _ele2 = eles[j];

          if (_ele2 == null) {
            eles.splice(j, 1);
            j--;
            continue;
          }

          setInfo(_ele2, {
            depth: i,
            index: j
          });
        }
      };

      var assignDepths = function assignDepths() {
        for (var _i3 = 0; _i3 < depths.length; _i3++) {
          assignDepthsAt(_i3);
        }
      };

      var adjustMaximally = function adjustMaximally(ele, shifted) {
        var eInfo = getInfo(ele);
        var incomers = ele.incomers().filter(function (el) {
          return el.isNode() && eles.has(el);
        });
        var maxDepth = -1;
        var id = ele.id();

        for (var k = 0; k < incomers.length; k++) {
          var incmr = incomers[k];
          var iInfo = getInfo(incmr);
          maxDepth = Math.max(maxDepth, iInfo.depth);
        }

        if (eInfo.depth <= maxDepth) {
          if (shifted[id]) {
            return null;
          }

          changeDepth(ele, maxDepth + 1);
          shifted[id] = true;
          return true;
        }

        return false;
      }; // for the directed case, try to make the edges all go down (i.e. depth i => depth i + 1)


      if (directed && maximal) {
        var Q = [];
        var shifted = {};

        var enqueue = function enqueue(n) {
          return Q.push(n);
        };

        var dequeue = function dequeue() {
          return Q.shift();
        };

        nodes.forEach(function (n) {
          return Q.push(n);
        });

        while (Q.length > 0) {
          var _ele3 = dequeue();

          var didShift = adjustMaximally(_ele3, shifted);

          if (didShift) {
            _ele3.outgoers().filter(function (el) {
              return el.isNode() && eles.has(el);
            }).forEach(enqueue);
          } else if (didShift === null) {
            warn('Detected double maximal shift for node `' + _ele3.id() + '`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.');
            break; // exit on failure
          }
        }
      }

      assignDepths(); // clear holes
      // find min distance we need to leave between nodes

      var minDistance = 0;

      if (options.avoidOverlap) {
        for (var _i4 = 0; _i4 < nodes.length; _i4++) {
          var n = nodes[_i4];
          var nbb = n.layoutDimensions(options);
          var w = nbb.w;
          var h = nbb.h;
          minDistance = Math.max(minDistance, w, h);
        }
      } // get the weighted percent for an element based on its connectivity to other levels


      var cachedWeightedPercent = {};

      var getWeightedPercent = function getWeightedPercent(ele) {
        if (cachedWeightedPercent[ele.id()]) {
          return cachedWeightedPercent[ele.id()];
        }

        var eleDepth = getInfo(ele).depth;
        var neighbors = ele.neighborhood();
        var percent = 0;
        var samples = 0;

        for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
          var neighbor = neighbors[_i5];

          if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {
            continue;
          }

          var bf = getInfo(neighbor);
          var index = bf.index;
          var depth = bf.depth; // unassigned neighbours shouldn't affect the ordering

          if (index == null || depth == null) {
            continue;
          }

          var nDepth = depths[depth].length;

          if (depth < eleDepth) {
            // only get influenced by elements above
            percent += index / (nDepth - 1);
            samples++;
          }
        }

        samples = Math.max(1, samples);
        percent = percent / samples;

        if (samples === 0) {
          // put lone nodes at the start
          percent = 0;
        }

        cachedWeightedPercent[ele.id()] = percent;
        return percent;
      }; // rearrange the indices in each depth level based on connectivity


      var sortFn = function sortFn(a, b) {
        var apct = getWeightedPercent(a);
        var bpct = getWeightedPercent(b);
        var diff = apct - bpct;

        if (diff === 0) {
          return ascending(a.id(), b.id()); // make sure sort doesn't have don't-care comparisons
        } else {
          return diff;
        }
      }; // sort each level to make connected nodes closer


      for (var _i6 = 0; _i6 < depths.length; _i6++) {
        depths[_i6].sort(sortFn);

        assignDepthsAt(_i6);
      } // assign orphan nodes to a new top-level depth


      var orphanDepth = [];

      for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
        orphanDepth.push(orphanNodes[_i7]);
      }

      depths.unshift(orphanDepth);
      assignDepths();
      var biggestDepthSize = 0;

      for (var _i8 = 0; _i8 < depths.length; _i8++) {
        biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
      }

      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.x1 + bb.h / 2
      };
      var maxDepthSize = depths.reduce(function (max, eles) {
        return Math.max(max, eles.length);
      }, 0);

      var getPosition = function getPosition(ele) {
        var _getInfo2 = getInfo(ele),
            depth = _getInfo2.depth,
            index = _getInfo2.index;

        var depthSize = depths[depth].length;
        var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);
        var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
        var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
        radiusStepSize = Math.max(radiusStepSize, minDistance);

        if (!options.circle) {
          var epos = {
            x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
            y: (depth + 1) * distanceY
          };
          return epos;
        } else {
          var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
          var theta = 2 * Math.PI / depths[depth].length * index;

          if (depth === 0 && depths[0].length === 1) {
            radius = 1;
          }

          return {
            x: center.x + radius * Math.cos(theta),
            y: center.y + radius * Math.sin(theta)
          };
        }
      };

      nodes.layoutPositions(this, options, getPosition);
      return this; // chaining
    };

    var defaults$a = {
      fit: true,
      // whether to fit the viewport to the graph
      padding: 30,
      // the padding on fit
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox and radius if not enough space
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      spacingFactor: undefined,
      // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
      radius: undefined,
      // the radius of the circle
      startAngle: 3 / 2 * Math.PI,
      // where nodes start in radians
      sweep: undefined,
      // how many radians should be between the first and last node (defaults to full circle)
      clockwise: true,
      // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
      sort: undefined,
      // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts 

    };

    function CircleLayout(options) {
      this.options = extend({}, defaults$a, options);
    }

    CircleLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
      var nodes = eles.nodes().not(':parent');

      if (options.sort) {
        nodes = nodes.sort(options.sort);
      }

      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.y1 + bb.h / 2
      };
      var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
      var dTheta = sweep / Math.max(1, nodes.length - 1);
      var r;
      var minDistance = 0;

      for (var i = 0; i < nodes.length; i++) {
        var n = nodes[i];
        var nbb = n.layoutDimensions(options);
        var w = nbb.w;
        var h = nbb.h;
        minDistance = Math.max(minDistance, w, h);
      }

      if (number(options.radius)) {
        r = options.radius;
      } else if (nodes.length <= 1) {
        r = 0;
      } else {
        r = Math.min(bb.h, bb.w) / 2 - minDistance;
      } // calculate the radius


      if (nodes.length > 1 && options.avoidOverlap) {
        // but only if more than one node (can't overlap)
        minDistance *= 1.75; // just to have some nice spacing

        var dcos = Math.cos(dTheta) - Math.cos(0);
        var dsin = Math.sin(dTheta) - Math.sin(0);
        var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

        r = Math.max(rMin, r);
      }

      var getPos = function getPos(ele, i) {
        var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);
        var rx = r * Math.cos(theta);
        var ry = r * Math.sin(theta);
        var pos = {
          x: center.x + rx,
          y: center.y + ry
        };
        return pos;
      };

      nodes.layoutPositions(this, options, getPos);
      return this; // chaining
    };

    var defaults$b = {
      fit: true,
      // whether to fit the viewport to the graph
      padding: 30,
      // the padding on fit
      startAngle: 3 / 2 * Math.PI,
      // where nodes start in radians
      sweep: undefined,
      // how many radians should be between the first and last node (defaults to full circle)
      clockwise: true,
      // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
      equidistant: false,
      // whether levels have an equal radial distance betwen them, may cause bounding box overflow
      minNodeSpacing: 10,
      // min spacing between outside of nodes (used for radius adjustment)
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox if not enough space
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      height: undefined,
      // height of layout area (overrides container height)
      width: undefined,
      // width of layout area (overrides container width)
      spacingFactor: undefined,
      // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
      concentric: function concentric(node) {
        // returns numeric value for each node, placing higher nodes in levels towards the centre
        return node.degree();
      },
      levelWidth: function levelWidth(nodes) {
        // the letiation of concentric values in each level
        return nodes.maxDegree() / 4;
      },
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts

    };

    function ConcentricLayout(options) {
      this.options = extend({}, defaults$b, options);
    }

    ConcentricLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(':parent');
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });
      var center = {
        x: bb.x1 + bb.w / 2,
        y: bb.y1 + bb.h / 2
      };
      var nodeValues = []; // { node, value }

      var maxNodeSize = 0;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var value = void 0; // calculate the node value

        value = options.concentric(node);
        nodeValues.push({
          value: value,
          node: node
        }); // for style mapping

        node._private.scratch.concentric = value;
      } // in case we used the `concentric` in style


      nodes.updateStyle(); // calculate max size now based on potentially updated mappers

      for (var _i = 0; _i < nodes.length; _i++) {
        var _node = nodes[_i];

        var nbb = _node.layoutDimensions(options);

        maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
      } // sort node values in descreasing order


      nodeValues.sort(function (a, b) {
        return b.value - a.value;
      });
      var levelWidth = options.levelWidth(nodes); // put the values into levels

      var levels = [[]];
      var currentLevel = levels[0];

      for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
        var val = nodeValues[_i2];

        if (currentLevel.length > 0) {
          var diff = Math.abs(currentLevel[0].value - val.value);

          if (diff >= levelWidth) {
            currentLevel = [];
            levels.push(currentLevel);
          }
        }

        currentLevel.push(val);
      } // create positions from levels


      var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

      if (!options.avoidOverlap) {
        // then strictly constrain to bb
        var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
        var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
        var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
        minDist = Math.min(minDist, rStep);
      } // find the metrics for each level


      var r = 0;

      for (var _i3 = 0; _i3 < levels.length; _i3++) {
        var level = levels[_i3];
        var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
        var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1); // calculate the radius

        if (level.length > 1 && options.avoidOverlap) {
          // but only if more than one node (can't overlap)
          var dcos = Math.cos(dTheta) - Math.cos(0);
          var dsin = Math.sin(dTheta) - Math.sin(0);
          var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

          r = Math.max(rMin, r);
        }

        level.r = r;
        r += minDist;
      }

      if (options.equidistant) {
        var rDeltaMax = 0;
        var _r = 0;

        for (var _i4 = 0; _i4 < levels.length; _i4++) {
          var _level = levels[_i4];
          var rDelta = _level.r - _r;
          rDeltaMax = Math.max(rDeltaMax, rDelta);
        }

        _r = 0;

        for (var _i5 = 0; _i5 < levels.length; _i5++) {
          var _level2 = levels[_i5];

          if (_i5 === 0) {
            _r = _level2.r;
          }

          _level2.r = _r;
          _r += rDeltaMax;
        }
      } // calculate the node positions


      var pos = {}; // id => position

      for (var _i6 = 0; _i6 < levels.length; _i6++) {
        var _level3 = levels[_i6];
        var _dTheta = _level3.dTheta;
        var _r2 = _level3.r;

        for (var j = 0; j < _level3.length; j++) {
          var _val = _level3[j];
          var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;
          var p = {
            x: center.x + _r2 * Math.cos(theta),
            y: center.y + _r2 * Math.sin(theta)
          };
          pos[_val.node.id()] = p;
        }
      } // position the nodes


      nodes.layoutPositions(this, options, function (ele) {
        var id = ele.id();
        return pos[id];
      });
      return this; // chaining
    };

    /*
    The CoSE layout was written by Gerardo Huck.
    https://www.linkedin.com/in/gerardohuck/

    Based on the following article:
    http://dl.acm.org/citation.cfm?id=1498047

    Modifications tracked on Github.
    */
    var DEBUG;
    /**
     * @brief :  default layout options
     */

    var defaults$c = {
      // Called on `layoutready`
      ready: function ready() {},
      // Called on `layoutstop`
      stop: function stop() {},
      // Whether to animate while running the layout
      // true : Animate continuously as the layout is running
      // false : Just show the end result
      // 'end' : Animate with the end result, from the initial positions to the end positions
      animate: true,
      // Easing of the animation for animate:'end'
      animationEasing: undefined,
      // The duration of the animation for animate:'end'
      animationDuration: undefined,
      // A function that determines whether the node should be animated
      // All nodes animated by default on animate enabled
      // Non-animated nodes are positioned immediately when the layout starts
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // The layout animates only after this many milliseconds for animate:true
      // (prevents flashing on fast runs)
      animationThreshold: 250,
      // Number of iterations between consecutive screen positions update
      refresh: 20,
      // Whether to fit the network view after when done
      fit: true,
      // Padding on fit
      padding: 30,
      // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      boundingBox: undefined,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      nodeDimensionsIncludeLabels: false,
      // Randomize the initial positions of the nodes (true) or use existing positions (false)
      randomize: false,
      // Extra spacing between components in non-compound graphs
      componentSpacing: 40,
      // Node repulsion (non overlapping) multiplier
      nodeRepulsion: function nodeRepulsion(node) {
        return 2048;
      },
      // Node repulsion (overlapping) multiplier
      nodeOverlap: 4,
      // Ideal edge (non nested) length
      idealEdgeLength: function idealEdgeLength(edge) {
        return 32;
      },
      // Divisor to compute edge forces
      edgeElasticity: function edgeElasticity(edge) {
        return 32;
      },
      // Nesting factor (multiplier) to compute ideal edge length for nested edges
      nestingFactor: 1.2,
      // Gravity force (constant)
      gravity: 1,
      // Maximum number of iterations to perform
      numIter: 1000,
      // Initial temperature (maximum node displacement)
      initialTemp: 1000,
      // Cooling factor (how the temperature is reduced between consecutive iterations
      coolingFactor: 0.99,
      // Lower temperature threshold (below this point the layout will end)
      minTemp: 1.0,
      // Pass a reference to weaver to use threads for calculations
      weaver: false
    };
    /**
     * @brief       : constructor
     * @arg options : object containing layout options
     */

    function CoseLayout(options) {
      this.options = extend({}, defaults$c, options);
      this.options.layout = this;
    }
    /**
     * @brief : runs the layout
     */


    CoseLayout.prototype.run = function () {
      var options = this.options;
      var cy = options.cy;
      var layout = this;
      var thread = this.thread;
      var Thread = options.weaver ? options.weaver.Thread : null;
      var falseThread = {
        // use false thread as polyfill
        listeners: [],
        on: function on(e, cb) {
          this.listeners.push({
            event: e,
            callback: cb
          });
          return this;
        },
        trigger: function trigger(e) {
          if (string(e)) {
            e = {
              type: e
            };
          }

          var matchesEvent = function matchesEvent(l) {
            return l.event === e.type;
          };

          var trigger = function trigger(l) {
            l.callback(e);
          };

          this.listeners.filter(matchesEvent).forEach(trigger);
          return this;
        },
        pass: function pass(data) {
          this.pass = data;
          return this;
        },
        run: function run(cb) {
          var pass = this.pass;
          return new Promise$1(function (resolve) {
            resolve(cb(pass));
          });
        },
        stop: function stop() {
          return this;
        },
        stopped: function stopped() {
          return true;
        }
      };

      function broadcast(message) {
        // for false thread
        var e = {
          type: 'message',
          message: message
        };
        falseThread.trigger(e);
      }

      if (!thread || thread.stopped()) {
        thread = this.thread = Thread ? new Thread() : falseThread;
      }

      layout.stopped = false;

      if (options.animate === true || options.animate === false) {
        layout.emit({
          type: 'layoutstart',
          layout: layout
        });
      } // Set DEBUG - Global variable


      if (true === options.debug) {
        DEBUG = true;
      } else {
        DEBUG = false;
      } // Initialize layout info


      var layoutInfo = createLayoutInfo(cy, layout, options); // Show LayoutInfo contents if debugging

      if (DEBUG) {
        printLayoutInfo(layoutInfo);
      } // If required, randomize node positions


      if (options.randomize) {
        randomizePositions(layoutInfo);
      }

      var startTime = Date.now();
      var refreshRequested = false;

      var refresh = function refresh(rOpts) {
        rOpts = rOpts || {};

        if (refreshRequested && !rOpts.next) {
          return;
        }

        if (!rOpts.force && Date.now() - startTime < options.animationThreshold) {
          return;
        }

        refreshRequested = true;
        requestAnimationFrame$1(function () {
          refreshPositions(layoutInfo, cy, options); // Fit the graph if necessary

          if (true === options.fit) {
            cy.fit(options.padding);
          }

          refreshRequested = false;

          if (rOpts.next) {
            rOpts.next();
          }
        });
      };

      thread.on('message', function (e) {
        var layoutNodes = e.message;
        layoutInfo.layoutNodes = layoutNodes;
        refresh();
      });
      thread.pass({
        layoutInfo: layoutInfo,
        options: {
          animate: options.animate,
          refresh: options.refresh,
          componentSpacing: options.componentSpacing,
          nodeOverlap: options.nodeOverlap,
          nestingFactor: options.nestingFactor,
          gravity: options.gravity,
          numIter: options.numIter,
          initialTemp: options.initialTemp,
          coolingFactor: options.coolingFactor,
          minTemp: options.minTemp
        }
      }).run(function (pass) {
        var layoutInfo = pass.layoutInfo;
        var options = pass.options;
        /**
         * @brief          : Performs one iteration of the physical simulation
         * @arg layoutInfo : LayoutInfo object already initialized
         * @arg cy         : Cytoscape object
         * @arg options    : Layout options
         */

        var step = function step(layoutInfo, options, _step) {
          // var s = "\n\n###############################";
          // s += "\nSTEP: " + step;
          // s += "\n###############################\n";
          // logDebug(s);
          // Calculate node repulsions
          calculateNodeForces(layoutInfo, options); // Calculate edge forces

          calculateEdgeForces(layoutInfo); // Calculate gravity forces

          calculateGravityForces(layoutInfo, options); // Propagate forces from parent to child

          propagateForces(layoutInfo); // Update positions based on calculated forces

          updatePositions(layoutInfo);
        };
        /**
         * @brief : Computes the node repulsion forces
         */


        var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
          // Go through each of the graphs in graphSet
          // Nodes only repel each other if they belong to the same graph
          // var s = 'calculateNodeForces';
          // logDebug(s);
          for (var i = 0; i < layoutInfo.graphSet.length; i++) {
            var graph = layoutInfo.graphSet[i];
            var numNodes = graph.length; // s = "Set: " + graph.toString();
            // logDebug(s);
            // Now get all the pairs of nodes
            // Only get each pair once, (A, B) = (B, A)

            for (var j = 0; j < numNodes; j++) {
              var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

              for (var k = j + 1; k < numNodes; k++) {
                var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];
                nodeRepulsion(node1, node2, layoutInfo, options);
              }
            }
          }
        };

        var randomDistance = function randomDistance(max) {
          return -max + 2 * max * Math.random();
        };
        /**
         * @brief : Compute the node repulsion forces between a pair of nodes
         */


        var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
          // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;
          var cmptId1 = node1.cmptId;
          var cmptId2 = node2.cmptId;

          if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
            return;
          } // Get direction of line connecting both node centers


          var directionX = node2.positionX - node1.positionX;
          var directionY = node2.positionY - node1.positionY;
          var maxRandDist = 1; // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;
          // If both centers are the same, apply a random force

          if (0 === directionX && 0 === directionY) {
            directionX = randomDistance(maxRandDist);
            directionY = randomDistance(maxRandDist);
          }

          var overlap = nodesOverlap(node1, node2, directionX, directionY);

          if (overlap > 0) {
            // s += "\nNodes DO overlap.";
            // s += "\nOverlap: " + overlap;
            // If nodes overlap, repulsion force is proportional
            // to the overlap
            var force = options.nodeOverlap * overlap; // Compute the module and components of the force vector

            var distance = Math.sqrt(directionX * directionX + directionY * directionY); // s += "\nDistance: " + distance;

            var forceX = force * directionX / distance;
            var forceY = force * directionY / distance;
          } else {
            // s += "\nNodes do NOT overlap.";
            // If there's no overlap, force is inversely proportional
            // to squared distance
            // Get clipping points for both nodes
            var point1 = findClippingPoint(node1, directionX, directionY);
            var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY); // Use clipping points to compute distance

            var distanceX = point2.x - point1.x;
            var distanceY = point2.y - point1.y;
            var distanceSqr = distanceX * distanceX + distanceY * distanceY;
            var distance = Math.sqrt(distanceSqr); // s += "\nDistance: " + distance;
            // Compute the module and components of the force vector

            var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
            var forceX = force * distanceX / distance;
            var forceY = force * distanceY / distance;
          } // Apply force


          if (!node1.isLocked) {
            node1.offsetX -= forceX;
            node1.offsetY -= forceY;
          }

          if (!node2.isLocked) {
            node2.offsetX += forceX;
            node2.offsetY += forceY;
          } // s += "\nForceX: " + forceX + " ForceY: " + forceY;
          // logDebug(s);


          return;
        };
        /**
         * @brief  : Determines whether two nodes overlap or not
         * @return : Amount of overlapping (0 => no overlap)
         */


        var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {
          if (dX > 0) {
            var overlapX = node1.maxX - node2.minX;
          } else {
            var overlapX = node2.maxX - node1.minX;
          }

          if (dY > 0) {
            var overlapY = node1.maxY - node2.minY;
          } else {
            var overlapY = node2.maxY - node1.minY;
          }

          if (overlapX >= 0 && overlapY >= 0) {
            return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
          } else {
            return 0;
          }
        };
        /**
         * @brief : Finds the point in which an edge (direction dX, dY) intersects
         *          the rectangular bounding box of it's source/target node
         */


        var findClippingPoint = function findClippingPoint(node, dX, dY) {
          // Shorcuts
          var X = node.positionX;
          var Y = node.positionY;
          var H = node.height || 1;
          var W = node.width || 1;
          var dirSlope = dY / dX;
          var nodeSlope = H / W; // var s = 'Computing clipping point of node ' + node.id +
          //   " . Height:  " + H + ", Width: " + W +
          //   "\nDirection " + dX + ", " + dY;
          //
          // Compute intersection

          var res = {}; // Case: Vertical direction (up)

          if (0 === dX && 0 < dY) {
            res.x = X; // s += "\nUp direction";

            res.y = Y + H / 2;
            return res;
          } // Case: Vertical direction (down)


          if (0 === dX && 0 > dY) {
            res.x = X;
            res.y = Y + H / 2; // s += "\nDown direction";

            return res;
          } // Case: Intersects the right border


          if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
            res.x = X + W / 2;
            res.y = Y + W * dY / 2 / dX; // s += "\nRightborder";

            return res;
          } // Case: Intersects the left border


          if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
            res.x = X - W / 2;
            res.y = Y - W * dY / 2 / dX; // s += "\nLeftborder";

            return res;
          } // Case: Intersects the top border


          if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
            res.x = X + H * dX / 2 / dY;
            res.y = Y + H / 2; // s += "\nTop border";

            return res;
          } // Case: Intersects the bottom border


          if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
            res.x = X - H * dX / 2 / dY;
            res.y = Y - H / 2; // s += "\nBottom border";

            return res;
          } // s += "\nClipping point found at " + res.x + ", " + res.y;
          // logDebug(s);


          return res;
        };
        /**
         * @brief : Calculates all edge forces
         */


        var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
          // Iterate over all edges
          for (var i = 0; i < layoutInfo.edgeSize; i++) {
            // Get edge, source & target nodes
            var edge = layoutInfo.layoutEdges[i];
            var sourceIx = layoutInfo.idToIndex[edge.sourceId];
            var source = layoutInfo.layoutNodes[sourceIx];
            var targetIx = layoutInfo.idToIndex[edge.targetId];
            var target = layoutInfo.layoutNodes[targetIx]; // Get direction of line connecting both node centers

            var directionX = target.positionX - source.positionX;
            var directionY = target.positionY - source.positionY; // If both centers are the same, do nothing.
            // A random force has already been applied as node repulsion

            if (0 === directionX && 0 === directionY) {
              continue;
            } // Get clipping points for both nodes


            var point1 = findClippingPoint(source, directionX, directionY);
            var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
            var lx = point2.x - point1.x;
            var ly = point2.y - point1.y;
            var l = Math.sqrt(lx * lx + ly * ly);
            var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

            if (0 !== l) {
              var forceX = force * lx / l;
              var forceY = force * ly / l;
            } else {
              var forceX = 0;
              var forceY = 0;
            } // Add this force to target and source nodes


            if (!source.isLocked) {
              source.offsetX += forceX;
              source.offsetY += forceY;
            }

            if (!target.isLocked) {
              target.offsetX -= forceX;
              target.offsetY -= forceY;
            } // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
            // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
            // logDebug(s);

          }
        };
        /**
         * @brief : Computes gravity forces for all nodes
         */


        var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
          var distThreshold = 1; // var s = 'calculateGravityForces';
          // logDebug(s);

          for (var i = 0; i < layoutInfo.graphSet.length; i++) {
            var graph = layoutInfo.graphSet[i];
            var numNodes = graph.length; // s = "Set: " + graph.toString();
            // logDebug(s);
            // Compute graph center

            if (0 === i) {
              var centerX = layoutInfo.clientHeight / 2;
              var centerY = layoutInfo.clientWidth / 2;
            } else {
              // Get Parent node for this graph, and use its position as center
              var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
              var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
              var centerX = parent.positionX;
              var centerY = parent.positionY;
            } // s = "Center found at: " + centerX + ", " + centerY;
            // logDebug(s);
            // Apply force to all nodes in graph


            for (var j = 0; j < numNodes; j++) {
              var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]]; // s = "Node: " + node.id;

              if (node.isLocked) {
                continue;
              }

              var dx = centerX - node.positionX;
              var dy = centerY - node.positionY;
              var d = Math.sqrt(dx * dx + dy * dy);

              if (d > distThreshold) {
                var fx = options.gravity * dx / d;
                var fy = options.gravity * dy / d;
                node.offsetX += fx;
                node.offsetY += fy; // s += ": Applied force: " + fx + ", " + fy;
              } // s += ": skypped since it's too close to center";
                // logDebug(s);

            }
          }
        };
        /**
         * @brief          : This function propagates the existing offsets from
         *                   parent nodes to its descendents.
         * @arg layoutInfo : layoutInfo Object
         * @arg cy         : cytoscape Object
         * @arg options    : Layout options
         */


        var propagateForces = function propagateForces(layoutInfo, options) {
          // Inline implementation of a queue, used for traversing the graph in BFS order
          var queue = [];
          var start = 0; // Points to the start the queue

          var end = -1; // Points to the end of the queue
          // logDebug('propagateForces');
          // Start by visiting the nodes in the root graph

          queue.push.apply(queue, layoutInfo.graphSet[0]);
          end += layoutInfo.graphSet[0].length; // Traverse the graph, level by level,

          while (start <= end) {
            // Get the node to visit and remove it from queue
            var nodeId = queue[start++];
            var nodeIndex = layoutInfo.idToIndex[nodeId];
            var node = layoutInfo.layoutNodes[nodeIndex];
            var children = node.children; // We only need to process the node if it's compound

            if (0 < children.length && !node.isLocked) {
              var offX = node.offsetX;
              var offY = node.offsetY; // var s = "Propagating offset from parent node : " + node.id +
              //   ". OffsetX: " + offX + ". OffsetY: " + offY;
              // s += "\n Children: " + children.toString();
              // logDebug(s);

              for (var i = 0; i < children.length; i++) {
                var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]]; // Propagate offset

                childNode.offsetX += offX;
                childNode.offsetY += offY; // Add children to queue to be visited

                queue[++end] = children[i];
              } // Reset parent offsets


              node.offsetX = 0;
              node.offsetY = 0;
            }
          }
        };
        /**
         * @brief : Updates the layout model positions, based on
         *          the accumulated forces
         */


        var updatePositions = function updatePositions(layoutInfo, options) {
          // var s = 'Updating positions';
          // logDebug(s);
          // Reset boundaries for compound nodes
          for (var i = 0; i < layoutInfo.nodeSize; i++) {
            var n = layoutInfo.layoutNodes[i];

            if (0 < n.children.length) {
              // logDebug("Resetting boundaries of compound node: " + n.id);
              n.maxX = undefined;
              n.minX = undefined;
              n.maxY = undefined;
              n.minY = undefined;
            }
          }

          for (var i = 0; i < layoutInfo.nodeSize; i++) {
            var n = layoutInfo.layoutNodes[i];

            if (0 < n.children.length || n.isLocked) {
              // No need to set compound or locked node position
              // logDebug("Skipping position update of node: " + n.id);
              continue;
            } // s = "Node: " + n.id + " Previous position: (" +
            // n.positionX + ", " + n.positionY + ").";
            // Limit displacement in order to improve stability


            var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
            n.positionX += tempForce.x;
            n.positionY += tempForce.y;
            n.offsetX = 0;
            n.offsetY = 0;
            n.minX = n.positionX - n.width;
            n.maxX = n.positionX + n.width;
            n.minY = n.positionY - n.height;
            n.maxY = n.positionY + n.height; // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
            // logDebug(s);
            // Update ancestry boudaries

            updateAncestryBoundaries(n, layoutInfo);
          } // Update size, position of compund nodes


          for (var i = 0; i < layoutInfo.nodeSize; i++) {
            var n = layoutInfo.layoutNodes[i];

            if (0 < n.children.length && !n.isLocked) {
              n.positionX = (n.maxX + n.minX) / 2;
              n.positionY = (n.maxY + n.minY) / 2;
              n.width = n.maxX - n.minX;
              n.height = n.maxY - n.minY; // s = "Updating position, size of compound node " + n.id;
              // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
              // s += "\nWidth: " + n.width + ", Height: " + n.height;
              // logDebug(s);
            }
          }
        };
        /**
         * @brief : Limits a force (forceX, forceY) to be not
         *          greater (in modulo) than max.
         8          Preserves force direction.
         */


        var limitForce = function limitForce(forceX, forceY, max) {
          // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
          var force = Math.sqrt(forceX * forceX + forceY * forceY);

          if (force > max) {
            var res = {
              x: max * forceX / force,
              y: max * forceY / force
            };
          } else {
            var res = {
              x: forceX,
              y: forceY
            };
          } // s += ".\nResult: (" + res.x + ", " + res.y + ")";
          // logDebug(s);


          return res;
        };
        /**
         * @brief : Function used for keeping track of compound node
         *          sizes, since they should bound all their subnodes.
         */


        var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
          // var s = "Propagating new position/size of node " + node.id;
          var parentId = node.parentId;

          if (null == parentId) {
            // If there's no parent, we are done
            // s += ". No parent node.";
            // logDebug(s);
            return;
          } // Get Parent Node


          var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
          var flag = false; // MaxX

          if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
            p.maxX = node.maxX + p.padRight;
            flag = true; // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
          } // MinX


          if (null == p.minX || node.minX - p.padLeft < p.minX) {
            p.minX = node.minX - p.padLeft;
            flag = true; // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
          } // MaxY


          if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
            p.maxY = node.maxY + p.padBottom;
            flag = true; // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
          } // MinY


          if (null == p.minY || node.minY - p.padTop < p.minY) {
            p.minY = node.minY - p.padTop;
            flag = true; // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
          } // If updated boundaries, propagate changes upward


          if (flag) {
            // logDebug(s);
            return updateAncestryBoundaries(p, layoutInfo);
          } // s += ". No changes in boundaries/position of parent node " + p.id;
          // logDebug(s);


          return;
        };

        var separateComponents = function separateComponents(layutInfo, options) {
          var nodes = layoutInfo.layoutNodes;
          var components = [];

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var cid = node.cmptId;
            var component = components[cid] = components[cid] || [];
            component.push(node);
          }

          var totalA = 0;

          for (var i = 0; i < components.length; i++) {
            var c = components[i];

            if (!c) {
              continue;
            }

            c.x1 = Infinity;
            c.x2 = -Infinity;
            c.y1 = Infinity;
            c.y2 = -Infinity;

            for (var j = 0; j < c.length; j++) {
              var n = c[j];
              c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
              c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
              c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
              c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
            }

            c.w = c.x2 - c.x1;
            c.h = c.y2 - c.y1;
            totalA += c.w * c.h;
          }

          components.sort(function (c1, c2) {
            return c2.w * c2.h - c1.w * c1.h;
          });
          var x = 0;
          var y = 0;
          var usedW = 0;
          var rowH = 0;
          var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;

          for (var i = 0; i < components.length; i++) {
            var c = components[i];

            if (!c) {
              continue;
            }

            for (var j = 0; j < c.length; j++) {
              var n = c[j];

              if (!n.isLocked) {
                n.positionX += x;
                n.positionY += y;
              }
            }

            x += c.w + options.componentSpacing;
            usedW += c.w + options.componentSpacing;
            rowH = Math.max(rowH, c.h);

            if (usedW > maxRowW) {
              y += rowH + options.componentSpacing;
              x = 0;
              usedW = 0;
              rowH = 0;
            }
          }
        };

        var mainLoop = function mainLoop(i) {


          step(layoutInfo, options); // Update temperature

          layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor; // logDebug("New temperature: " + layoutInfo.temperature);

          if (layoutInfo.temperature < options.minTemp) {
            // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
            return false;
          }

          return true;
        };

        var i = 0;
        var loopRet;

        do {
          var f = 0;

          while ((f < options.refresh || options.refresh === 0) && i < options.numIter) {
            var loopRet = mainLoop();

            if (!loopRet) {
              break;
            }

            f++;
            i++;
          }

          if (options.animate === true) {
            broadcast(layoutInfo.layoutNodes); // eslint-disable-line no-undef
          }
        } while (loopRet && i + 1 < options.numIter);

        separateComponents(layoutInfo, options);
        return layoutInfo;
      }).then(function (layoutInfoUpdated) {
        layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

        thread.stop();
        done();
      });

      var done = function done() {
        if (options.animate === true || options.animate === false) {
          refresh({
            force: true,
            next: function next() {
              // Layout has finished
              layout.one('layoutstop', options.stop);
              layout.emit({
                type: 'layoutstop',
                layout: layout
              });
            }
          });
        } else {
          var nodes = options.eles.nodes();
          var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
          nodes.layoutPositions(layout, options, getScaledPos);
        }
      };

      return this; // chaining
    };
    /**
     * @brief : called on continuous layouts to stop them before they finish
     */


    CoseLayout.prototype.stop = function () {
      this.stopped = true;

      if (this.thread) {
        this.thread.stop();
      }

      this.emit('layoutstop');
      return this; // chaining
    };

    CoseLayout.prototype.destroy = function () {
      if (this.thread) {
        this.thread.stop();
      }

      return this; // chaining
    };
    /**
     * @brief     : Creates an object which is contains all the data
     *              used in the layout process
     * @arg cy    : cytoscape.js object
     * @return    : layoutInfo object initialized
     */


    var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
      // Shortcut
      var edges = options.eles.edges();
      var nodes = options.eles.nodes();
      var layoutInfo = {
        isCompound: cy.hasCompoundNodes(),
        layoutNodes: [],
        idToIndex: {},
        nodeSize: nodes.size(),
        graphSet: [],
        indexToGraph: [],
        layoutEdges: [],
        edgeSize: edges.size(),
        temperature: options.initialTemp,
        clientWidth: cy.width(),
        clientHeight: cy.width(),
        boundingBox: makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0,
          y1: 0,
          w: cy.width(),
          h: cy.height()
        })
      };
      var components = options.eles.components();
      var id2cmptId = {};

      for (var i = 0; i < components.length; i++) {
        var component = components[i];

        for (var j = 0; j < component.length; j++) {
          var node = component[j];
          id2cmptId[node.id()] = i;
        }
      } // Iterate over all nodes, creating layout nodes


      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = nodes[i];
        var nbb = n.layoutDimensions(options);
        var tempNode = {};
        tempNode.isLocked = n.locked();
        tempNode.id = n.data('id');
        tempNode.parentId = n.data('parent');
        tempNode.cmptId = id2cmptId[n.id()];
        tempNode.children = [];
        tempNode.positionX = n.position('x');
        tempNode.positionY = n.position('y');
        tempNode.offsetX = 0;
        tempNode.offsetY = 0;
        tempNode.height = nbb.w;
        tempNode.width = nbb.h;
        tempNode.maxX = tempNode.positionX + tempNode.width / 2;
        tempNode.minX = tempNode.positionX - tempNode.width / 2;
        tempNode.maxY = tempNode.positionY + tempNode.height / 2;
        tempNode.minY = tempNode.positionY - tempNode.height / 2;
        tempNode.padLeft = parseFloat(n.style('padding'));
        tempNode.padRight = parseFloat(n.style('padding'));
        tempNode.padTop = parseFloat(n.style('padding'));
        tempNode.padBottom = parseFloat(n.style('padding')); // forces

        tempNode.nodeRepulsion = fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion; // Add new node

        layoutInfo.layoutNodes.push(tempNode); // Add entry to id-index map

        layoutInfo.idToIndex[tempNode.id] = i;
      } // Inline implementation of a queue, used for traversing the graph in BFS order


      var queue = [];
      var start = 0; // Points to the start the queue

      var end = -1; // Points to the end of the queue

      var tempGraph = []; // Second pass to add child information and
      // initialize queue for hierarchical traversal

      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];
        var p_id = n.parentId; // Check if node n has a parent node

        if (null != p_id) {
          // Add node Id to parent's list of children
          layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
        } else {
          // If a node doesn't have a parent, then it's in the root graph
          queue[++end] = n.id;
          tempGraph.push(n.id);
        }
      } // Add root graph to graphSet


      layoutInfo.graphSet.push(tempGraph); // Traverse the graph, level by level,

      while (start <= end) {
        // Get the node to visit and remove it from queue
        var node_id = queue[start++];
        var node_ix = layoutInfo.idToIndex[node_id];
        var node = layoutInfo.layoutNodes[node_ix];
        var children = node.children;

        if (children.length > 0) {
          // Add children nodes as a new graph to graph set
          layoutInfo.graphSet.push(children); // Add children to que queue to be visited

          for (var i = 0; i < children.length; i++) {
            queue[++end] = children[i];
          }
        }
      } // Create indexToGraph map


      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
        var graph = layoutInfo.graphSet[i];

        for (var j = 0; j < graph.length; j++) {
          var index = layoutInfo.idToIndex[graph[j]];
          layoutInfo.indexToGraph[index] = i;
        }
      } // Iterate over all edges, creating Layout Edges


      for (var i = 0; i < layoutInfo.edgeSize; i++) {
        var e = edges[i];
        var tempEdge = {};
        tempEdge.id = e.data('id');
        tempEdge.sourceId = e.data('source');
        tempEdge.targetId = e.data('target'); // Compute ideal length

        var idealLength = fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
        var elasticity = fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity; // Check if it's an inter graph edge

        var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
        var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
        var sourceGraph = layoutInfo.indexToGraph[sourceIx];
        var targetGraph = layoutInfo.indexToGraph[targetIx];

        if (sourceGraph != targetGraph) {
          // Find lowest common graph ancestor
          var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo); // Compute sum of node depths, relative to lca graph

          var lcaGraph = layoutInfo.graphSet[lca];
          var depth = 0; // Source depth

          var tempNode = layoutInfo.layoutNodes[sourceIx];

          while (-1 === lcaGraph.indexOf(tempNode.id)) {
            tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
            depth++;
          } // Target depth


          tempNode = layoutInfo.layoutNodes[targetIx];

          while (-1 === lcaGraph.indexOf(tempNode.id)) {
            tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
            depth++;
          } // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
          //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
          //  ". Depth: " + depth);
          // Update idealLength


          idealLength *= depth * options.nestingFactor;
        }

        tempEdge.idealLength = idealLength;
        tempEdge.elasticity = elasticity;
        layoutInfo.layoutEdges.push(tempEdge);
      } // Finally, return layoutInfo object


      return layoutInfo;
    };
    /**
     * @brief : This function finds the index of the lowest common
     *          graph ancestor between 2 nodes in the subtree
     *          (from the graph hierarchy induced tree) whose
     *          root is graphIx
     *
     * @arg node1: node1's ID
     * @arg node2: node2's ID
     * @arg layoutInfo: layoutInfo object
     *
     */


    var findLCA = function findLCA(node1, node2, layoutInfo) {
      // Find their common ancester, starting from the root graph
      var res = findLCA_aux(node1, node2, 0, layoutInfo);

      if (2 > res.count) {
        // If aux function couldn't find the common ancester,
        // then it is the root graph
        return 0;
      } else {
        return res.graph;
      }
    };
    /**
     * @brief          : Auxiliary function used for LCA computation
     *
     * @arg node1      : node1's ID
     * @arg node2      : node2's ID
     * @arg graphIx    : subgraph index
     * @arg layoutInfo : layoutInfo object
     *
     * @return         : object of the form {count: X, graph: Y}, where:
     *                   X is the number of ancesters (max: 2) found in
     *                   graphIx (and it's subgraphs),
     *                   Y is the graph index of the lowest graph containing
     *                   all X nodes
     */


    var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
      var graph = layoutInfo.graphSet[graphIx]; // If both nodes belongs to graphIx

      if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
        return {
          count: 2,
          graph: graphIx
        };
      } // Make recursive calls for all subgraphs


      var c = 0;

      for (var i = 0; i < graph.length; i++) {
        var nodeId = graph[i];
        var nodeIx = layoutInfo.idToIndex[nodeId];
        var children = layoutInfo.layoutNodes[nodeIx].children; // If the node has no child, skip it

        if (0 === children.length) {
          continue;
        }

        var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
        var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);

        if (0 === result.count) {
          // Neither node1 nor node2 are present in this subgraph
          continue;
        } else if (1 === result.count) {
          // One of (node1, node2) is present in this subgraph
          c++;

          if (2 === c) {
            // We've already found both nodes, no need to keep searching
            break;
          }
        } else {
          // Both nodes are present in this subgraph
          return result;
        }
      }

      return {
        count: c,
        graph: graphIx
      };
    };
    /**
     * @brief: printsLayoutInfo into js console
     *         Only used for debbuging
     */


var printLayoutInfo; 
    /**
     * @brief : Randomizes the position of all nodes
     */


    var randomizePositions = function randomizePositions(layoutInfo, cy) {
      var width = layoutInfo.clientWidth;
      var height = layoutInfo.clientHeight;

      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i]; // No need to randomize compound nodes or locked nodes

        if (0 === n.children.length && !n.isLocked) {
          n.positionX = Math.random() * width;
          n.positionY = Math.random() * height;
        }
      }
    };

    var getScaleInBoundsFn = function getScaleInBoundsFn(layoutInfo, options, nodes) {
      var bb = layoutInfo.boundingBox;
      var coseBB = {
        x1: Infinity,
        x2: -Infinity,
        y1: Infinity,
        y2: -Infinity
      };

      if (options.boundingBox) {
        nodes.forEach(function (node) {
          var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];
          coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
          coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
          coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
          coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
        });
        coseBB.w = coseBB.x2 - coseBB.x1;
        coseBB.h = coseBB.y2 - coseBB.y1;
      }

      return function (ele, i) {
        var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];

        if (options.boundingBox) {
          // then add extra bounding box constraint
          var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
          var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
          return {
            x: bb.x1 + pctX * bb.w,
            y: bb.y1 + pctY * bb.h
          };
        } else {
          return {
            x: lnode.positionX,
            y: lnode.positionY
          };
        }
      };
    };
    /**
     * @brief          : Updates the positions of nodes in the network
     * @arg layoutInfo : LayoutInfo object
     * @arg cy         : Cytoscape object
     * @arg options    : Layout options
     */


    var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
      // var s = 'Refreshing positions';
      // logDebug(s);
      var layout = options.layout;
      var nodes = options.eles.nodes();
      var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
      nodes.positions(getScaledPos); // Trigger layoutReady only on first call

      if (true !== layoutInfo.ready) {
        // s = 'Triggering layoutready';
        // logDebug(s);
        layoutInfo.ready = true;
        layout.one('layoutready', options.ready);
        layout.emit({
          type: 'layoutready',
          layout: this
        });
      }
    };

    var defaults$d = {
      fit: true,
      // whether to fit the viewport to the graph
      padding: 30,
      // padding used on fit
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true,
      // prevents node overlap, may overflow boundingBox if not enough space
      avoidOverlapPadding: 10,
      // extra spacing around nodes when avoidOverlap: true
      nodeDimensionsIncludeLabels: false,
      // Excludes the label when calculating node bounding boxes for the layout algorithm
      spacingFactor: undefined,
      // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
      condense: false,
      // uses all available space on false, uses minimal space on true
      rows: undefined,
      // force num of rows in the grid
      cols: undefined,
      // force num of columns in the grid
      position: function position(node) {},
      // returns { row, col } for element
      sort: undefined,
      // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts 

    };

    function GridLayout(options) {
      this.options = extend({}, defaults$d, options);
    }

    GridLayout.prototype.run = function () {
      var params = this.options;
      var options = params;
      var cy = params.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(':parent');

      if (options.sort) {
        nodes = nodes.sort(options.sort);
      }

      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });

      if (bb.h === 0 || bb.w === 0) {
        nodes.layoutPositions(this, options, function (ele) {
          return {
            x: bb.x1,
            y: bb.y1
          };
        });
      } else {
        // width/height * splits^2 = cells where splits is number of times to split width
        var cells = nodes.size();
        var splits = Math.sqrt(cells * bb.h / bb.w);
        var rows = Math.round(splits);
        var cols = Math.round(bb.w / bb.h * splits);

        var small = function small(val) {
          if (val == null) {
            return Math.min(rows, cols);
          } else {
            var min = Math.min(rows, cols);

            if (min == rows) {
              rows = val;
            } else {
              cols = val;
            }
          }
        };

        var large = function large(val) {
          if (val == null) {
            return Math.max(rows, cols);
          } else {
            var max = Math.max(rows, cols);

            if (max == rows) {
              rows = val;
            } else {
              cols = val;
            }
          }
        };

        var oRows = options.rows;
        var oCols = options.cols != null ? options.cols : options.columns; // if rows or columns were set in options, use those values

        if (oRows != null && oCols != null) {
          rows = oRows;
          cols = oCols;
        } else if (oRows != null && oCols == null) {
          rows = oRows;
          cols = Math.ceil(cells / rows);
        } else if (oRows == null && oCols != null) {
          cols = oCols;
          rows = Math.ceil(cells / cols);
        } // otherwise use the automatic values and adjust accordingly
        // if rounding was up, see if we can reduce rows or columns
        else if (cols * rows > cells) {
            var sm = small();
            var lg = large(); // reducing the small side takes away the most cells, so try it first

            if ((sm - 1) * lg >= cells) {
              small(sm - 1);
            } else if ((lg - 1) * sm >= cells) {
              large(lg - 1);
            }
          } else {
            // if rounding was too low, add rows or columns
            while (cols * rows < cells) {
              var _sm = small();

              var _lg = large(); // try to add to larger side first (adds less in multiplication)


              if ((_lg + 1) * _sm >= cells) {
                large(_lg + 1);
              } else {
                small(_sm + 1);
              }
            }
          }

        var cellWidth = bb.w / cols;
        var cellHeight = bb.h / rows;

        if (options.condense) {
          cellWidth = 0;
          cellHeight = 0;
        }

        if (options.avoidOverlap) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var pos = node._private.position;

            if (pos.x == null || pos.y == null) {
              // for bb
              pos.x = 0;
              pos.y = 0;
            }

            var nbb = node.layoutDimensions(options);
            var p = options.avoidOverlapPadding;
            var w = nbb.w + p;
            var h = nbb.h + p;
            cellWidth = Math.max(cellWidth, w);
            cellHeight = Math.max(cellHeight, h);
          }
        }

        var cellUsed = {}; // e.g. 'c-0-2' => true

        var used = function used(row, col) {
          return cellUsed['c-' + row + '-' + col] ? true : false;
        };

        var use = function use(row, col) {
          cellUsed['c-' + row + '-' + col] = true;
        }; // to keep track of current cell position


        var row = 0;
        var col = 0;

        var moveToNextCell = function moveToNextCell() {
          col++;

          if (col >= cols) {
            col = 0;
            row++;
          }
        }; // get a cache of all the manual positions


        var id2manPos = {};

        for (var _i = 0; _i < nodes.length; _i++) {
          var _node = nodes[_i];
          var rcPos = options.position(_node);

          if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
            // must have at least row or col def'd
            var _pos = {
              row: rcPos.row,
              col: rcPos.col
            };

            if (_pos.col === undefined) {
              // find unused col
              _pos.col = 0;

              while (used(_pos.row, _pos.col)) {
                _pos.col++;
              }
            } else if (_pos.row === undefined) {
              // find unused row
              _pos.row = 0;

              while (used(_pos.row, _pos.col)) {
                _pos.row++;
              }
            }

            id2manPos[_node.id()] = _pos;
            use(_pos.row, _pos.col);
          }
        }

        var getPos = function getPos(element, i) {
          var x, y;

          if (element.locked() || element.isParent()) {
            return false;
          } // see if we have a manual position set


          var rcPos = id2manPos[element.id()];

          if (rcPos) {
            x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
            y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
          } else {
            // otherwise set automatically
            while (used(row, col)) {
              moveToNextCell();
            }

            x = col * cellWidth + cellWidth / 2 + bb.x1;
            y = row * cellHeight + cellHeight / 2 + bb.y1;
            use(row, col);
            moveToNextCell();
          }

          return {
            x: x,
            y: y
          };
        };

        nodes.layoutPositions(this, options, getPos);
      }

      return this; // chaining
    };

    var defaults$e = {
      ready: function ready() {},
      // on layoutready
      stop: function stop() {} // on layoutstop

    }; // constructor
    // options : object containing layout options

    function NullLayout(options) {
      this.options = extend({}, defaults$e, options);
    } // runs the layout


    NullLayout.prototype.run = function () {
      var options = this.options;
      var eles = options.eles; // elements to consider in the layout

      var layout = this; // cy is automatically populated for us in the constructor
      // (disable eslint for next line as this serves as example layout code to external developers)
      // eslint-disable-next-line no-unused-vars

      options.cy;
      layout.emit('layoutstart'); // puts all nodes at (0, 0)
      // n.b. most layouts would use layoutPositions(), instead of positions() and manual events

      eles.nodes().positions(function () {
        return {
          x: 0,
          y: 0
        };
      }); // trigger layoutready when each node has had its position set at least once

      layout.one('layoutready', options.ready);
      layout.emit('layoutready'); // trigger layoutstop when the layout stops (e.g. finishes)

      layout.one('layoutstop', options.stop);
      layout.emit('layoutstop');
      return this; // chaining
    }; // called on continuous layouts to stop them before they finish


    NullLayout.prototype.stop = function () {
      return this; // chaining
    };

    var defaults$f = {
      positions: undefined,
      // map of (node id) => (position obj); or function(node){ return somPos; }
      zoom: undefined,
      // the zoom level to set (prob want fit = false if set)
      pan: undefined,
      // the pan level to set (prob want fit = false if set)
      fit: true,
      // whether to fit to viewport
      padding: 30,
      // padding on fit
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts

    };

    function PresetLayout(options) {
      this.options = extend({}, defaults$f, options);
    }

    PresetLayout.prototype.run = function () {
      var options = this.options;
      var eles = options.eles;
      var nodes = eles.nodes();
      var posIsFn = fn(options.positions);

      function getPosition(node) {
        if (options.positions == null) {
          return copyPosition(node.position());
        }

        if (posIsFn) {
          return options.positions(node);
        }

        var pos = options.positions[node._private.data.id];

        if (pos == null) {
          return null;
        }

        return pos;
      }

      nodes.layoutPositions(this, options, function (node, i) {
        var position = getPosition(node);

        if (node.locked() || position == null) {
          return false;
        }

        return position;
      });
      return this; // chaining
    };

    var defaults$g = {
      fit: true,
      // whether to fit to viewport
      padding: 30,
      // fit padding
      boundingBox: undefined,
      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      animate: false,
      // whether to transition the node positions
      animationDuration: 500,
      // duration of animation in ms if enabled
      animationEasing: undefined,
      // easing of animation if enabled
      animateFilter: function animateFilter(node, i) {
        return true;
      },
      // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
      ready: undefined,
      // callback on layoutready
      stop: undefined,
      // callback on layoutstop
      transform: function transform(node, position) {
        return position;
      } // transform a given node position. Useful for changing flow direction in discrete layouts 

    };

    function RandomLayout(options) {
      this.options = extend({}, defaults$g, options);
    }

    RandomLayout.prototype.run = function () {
      var options = this.options;
      var cy = options.cy;
      var eles = options.eles;
      var nodes = eles.nodes().not(':parent');
      var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      });

      var getPos = function getPos(node, i) {
        return {
          x: bb.x1 + Math.round(Math.random() * bb.w),
          y: bb.y1 + Math.round(Math.random() * bb.h)
        };
      };

      nodes.layoutPositions(this, options, getPos);
      return this; // chaining
    };

    var layout$1 = [{
      name: 'breadthfirst',
      impl: BreadthFirstLayout
    }, {
      name: 'circle',
      impl: CircleLayout
    }, {
      name: 'concentric',
      impl: ConcentricLayout
    }, {
      name: 'cose',
      impl: CoseLayout
    }, {
      name: 'grid',
      impl: GridLayout
    }, {
      name: 'null',
      impl: NullLayout
    }, {
      name: 'preset',
      impl: PresetLayout
    }, {
      name: 'random',
      impl: RandomLayout
    }];

    function NullRenderer(options) {
      this.options = options;
      this.notifications = 0; // for testing
    }

    var noop$1 = function noop() {};

    NullRenderer.prototype = {
      recalculateRenderedStyle: noop$1,
      notify: function notify() {
        this.notifications++;
      },
      init: noop$1,
      isHeadless: function isHeadless() {
        return true;
      }
    };

    var BRp = {};
    BRp.arrowShapeWidth = 0.3;

    BRp.registerArrowShapes = function () {
      var arrowShapes = this.arrowShapes = {};
      var renderer = this; // Contract for arrow shapes:
      // 0, 0 is arrow tip
      // (0, 1) is direction towards node
      // (1, 0) is right
      //
      // functional api:
      // collide: check x, y in shape
      // roughCollide: called before collide, no false negatives
      // draw: draw
      // spacing: dist(arrowTip, nodeBoundary)
      // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

      var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
        var x1 = translation.x - size / 2 - padding;
        var x2 = translation.x + size / 2 + padding;
        var y1 = translation.y - size / 2 - padding;
        var y2 = translation.y + size / 2 + padding;
        var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;
        return inside;
      };

      var transform = function transform(x, y, size, angle, translation) {
        var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
        var yRotated = x * Math.sin(angle) + y * Math.cos(angle);
        var xScaled = xRotated * size;
        var yScaled = yRotated * size;
        var xTranslated = xScaled + translation.x;
        var yTranslated = yScaled + translation.y;
        return {
          x: xTranslated,
          y: yTranslated
        };
      };

      var transformPoints = function transformPoints(pts, size, angle, translation) {
        var retPts = [];

        for (var i = 0; i < pts.length; i += 2) {
          var x = pts[i];
          var y = pts[i + 1];
          retPts.push(transform(x, y, size, angle, translation));
        }

        return retPts;
      };

      var pointsToArr = function pointsToArr(pts) {
        var ret = [];

        for (var i = 0; i < pts.length; i++) {
          var p = pts[i];
          ret.push(p.x, p.y);
        }

        return ret;
      };

      var standardGap = function standardGap(edge) {
        return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
      };

      var defineArrowShape = function defineArrowShape(name, defn) {
        if (string(defn)) {
          defn = arrowShapes[defn];
        }

        arrowShapes[name] = extend({
          name: name,
          points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
          collide: function collide(x, y, size, angle, translation, padding) {
            var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
            var inside = pointInsidePolygonPoints(x, y, points);
            return inside;
          },
          roughCollide: bbCollide,
          draw: function draw(context, size, angle, translation) {
            var points = transformPoints(this.points, size, angle, translation);
            renderer.arrowShapeImpl('polygon')(context, points);
          },
          spacing: function spacing(edge) {
            return 0;
          },
          gap: standardGap
        }, defn);
      };

      defineArrowShape('none', {
        collide: falsify,
        roughCollide: falsify,
        draw: noop,
        spacing: zeroify,
        gap: zeroify
      });
      defineArrowShape('triangle', {
        points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
      });
      defineArrowShape('arrow', 'triangle');
      defineArrowShape('triangle-backcurve', {
        points: arrowShapes['triangle'].points,
        controlPoint: [0, -0.15],
        roughCollide: bbCollide,
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var ptsTrans = transformPoints(this.points, size, angle, translation);
          var ctrlPt = this.controlPoint;
          var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);
          renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
        },
        gap: function gap(edge) {
          return standardGap(edge) * 0.8;
        }
      });
      defineArrowShape('triangle-tee', {
        points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
        pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));
          var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.points, size, angle, translation);
          var teePts = transformPoints(this.pointsTee, size, angle, translation);
          renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
        }
      });
      defineArrowShape('triangle-cross', {
        points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
        baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle
        -0.15, -0.4, 0.15, -0.4, // second half of the rectangle
        0.15, -0.4],
        crossLinePts: function crossLinePts(size, edgeWidth) {
          // shift points so that the distance between the cross points matches edge width
          var p = this.baseCrossLinePts.slice();
          var shiftFactor = edgeWidth / size;
          var y0 = 3;
          var y1 = 5;
          p[y0] = p[y0] - shiftFactor;
          p[y1] = p[y1] - shiftFactor;
          return p;
        },
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
          var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          var triPts = transformPoints(this.points, size, angle, translation);
          var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);
          renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
        }
      });
      defineArrowShape('vee', {
        points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
        gap: function gap(edge) {
          return standardGap(edge) * 0.525;
        }
      });
      defineArrowShape('circle', {
        radius: 0.15,
        collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
          var t = translation;
          var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
          return inside;
        },
        draw: function draw(context, size, angle, translation, edgeWidth) {
          renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
        },
        spacing: function spacing(edge) {
          return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
        }
      });
      defineArrowShape('tee', {
        points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
        spacing: function spacing(edge) {
          return 1;
        },
        gap: function gap(edge) {
          return 1;
        }
      });
      defineArrowShape('square', {
        points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
      });
      defineArrowShape('diamond', {
        points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
        gap: function gap(edge) {
          return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
        }
      });
      defineArrowShape('chevron', {
        points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
        gap: function gap(edge) {
          return 0.95 * edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
        }
      });
    };

    var BRp$1 = {}; // Project mouse

    BRp$1.projectIntoViewport = function (clientX, clientY) {
      var cy = this.cy;
      var offsets = this.findContainerClientCoords();
      var offsetLeft = offsets[0];
      var offsetTop = offsets[1];
      var scale = offsets[4];
      var pan = cy.pan();
      var zoom = cy.zoom();
      var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
      var y = ((clientY - offsetTop) / scale - pan.y) / zoom;
      return [x, y];
    };

    BRp$1.findContainerClientCoords = function () {
      if (this.containerBB) {
        return this.containerBB;
      }

      var container = this.container;
      var rect = container.getBoundingClientRect();
      var style = window$1.getComputedStyle(container);

      var styleValue = function styleValue(name) {
        return parseFloat(style.getPropertyValue(name));
      };

      var padding = {
        left: styleValue('padding-left'),
        right: styleValue('padding-right'),
        top: styleValue('padding-top'),
        bottom: styleValue('padding-bottom')
      };
      var border = {
        left: styleValue('border-left-width'),
        right: styleValue('border-right-width'),
        top: styleValue('border-top-width'),
        bottom: styleValue('border-bottom-width')
      };
      var clientWidth = container.clientWidth;
      var clientHeight = container.clientHeight;
      var paddingHor = padding.left + padding.right;
      var paddingVer = padding.top + padding.bottom;
      var borderHor = border.left + border.right;
      var scale = rect.width / (clientWidth + borderHor);
      var unscaledW = clientWidth - paddingHor;
      var unscaledH = clientHeight - paddingVer;
      var left = rect.left + padding.left + border.left;
      var top = rect.top + padding.top + border.top;
      return this.containerBB = [left, top, unscaledW, unscaledH, scale];
    };

    BRp$1.invalidateContainerClientCoordsCache = function () {
      this.containerBB = null;
    };

    BRp$1.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
      return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
    };

    BRp$1.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
      var self = this;
      var r = this;
      var eles = r.getCachedZSortedEles();
      var near = []; // 1 node max, 1 edge max

      var zoom = r.cy.zoom();
      var hasCompounds = r.cy.hasCompoundNodes();
      var edgeThreshold = (isTouch ? 24 : 8) / zoom;
      var nodeThreshold = (isTouch ? 8 : 2) / zoom;
      var labelThreshold = (isTouch ? 8 : 2) / zoom;
      var minSqDist = Infinity;
      var nearEdge;
      var nearNode;

      if (interactiveElementsOnly) {
        eles = eles.interactive;
      }

      function addEle(ele, sqDist) {
        if (ele.isNode()) {
          if (nearNode) {
            return; // can't replace node
          } else {
            nearNode = ele;
            near.push(ele);
          }
        }

        if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
          if (nearEdge) {
            // then replace existing edge
            // can replace only if same z-index
            if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {
              for (var i = 0; i < near.length; i++) {
                if (near[i].isEdge()) {
                  near[i] = ele;
                  nearEdge = ele;
                  minSqDist = sqDist != null ? sqDist : minSqDist;
                  break;
                }
              }
            }
          } else {
            near.push(ele);
            nearEdge = ele;
            minSqDist = sqDist != null ? sqDist : minSqDist;
          }
        }
      }

      function checkNode(node) {
        var width = node.outerWidth() + 2 * nodeThreshold;
        var height = node.outerHeight() + 2 * nodeThreshold;
        var hw = width / 2;
        var hh = height / 2;
        var pos = node.position();

        if (pos.x - hw <= x && x <= pos.x + hw // bb check x
        && pos.y - hh <= y && y <= pos.y + hh // bb check y
        ) {
            var shape = r.nodeShapes[self.getNodeShape(node)];

            if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
              addEle(node, 0);
              return true;
            }
          }
      }

      function checkEdge(edge) {
        var _p = edge._private;
        var rs = _p.rscratch;
        var styleWidth = edge.pstyle('width').pfValue;
        var scale = edge.pstyle('arrow-scale').value;
        var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre

        var widthSq = width * width;
        var width2 = width * 2;
        var src = _p.source;
        var tgt = _p.target;
        var sqDist;

        if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
          var pts = rs.allpts;

          for (var i = 0; i + 3 < pts.length; i += 2) {
            if (inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
              addEle(edge, sqDist);
              return true;
            }
          }
        } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
          var pts = rs.allpts;

          for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
            if (inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
              addEle(edge, sqDist);
              return true;
            }
          }
        } // if we're close to the edge but didn't hit it, maybe we hit its arrows


        var src = src || _p.source;
        var tgt = tgt || _p.target;
        var arSize = self.getArrowWidth(styleWidth, scale);
        var arrows = [{
          name: 'source',
          x: rs.arrowStartX,
          y: rs.arrowStartY,
          angle: rs.srcArrowAngle
        }, {
          name: 'target',
          x: rs.arrowEndX,
          y: rs.arrowEndY,
          angle: rs.tgtArrowAngle
        }, {
          name: 'mid-source',
          x: rs.midX,
          y: rs.midY,
          angle: rs.midsrcArrowAngle
        }, {
          name: 'mid-target',
          x: rs.midX,
          y: rs.midY,
          angle: rs.midtgtArrowAngle
        }];

        for (var i = 0; i < arrows.length; i++) {
          var ar = arrows[i];
          var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
          var edgeWidth = edge.pstyle('width').pfValue;

          if (shape.roughCollide(x, y, arSize, ar.angle, {
            x: ar.x,
            y: ar.y
          }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {
            x: ar.x,
            y: ar.y
          }, edgeWidth, edgeThreshold)) {
            addEle(edge);
            return true;
          }
        } // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)


        if (hasCompounds && near.length > 0) {
          checkNode(src);
          checkNode(tgt);
        }
      }

      function preprop(obj, name, pre) {
        return getPrefixedProperty(obj, name, pre);
      }

      function checkLabel(ele, prefix) {
        var _p = ele._private;
        var th = labelThreshold;
        var prefixDash;

        if (prefix) {
          prefixDash = prefix + '-';
        } else {
          prefixDash = '';
        }

        var text = ele.pstyle(prefixDash + 'label').value;
        var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';

        if (!eventsEnabled || !text) {
          return;
        }

        var rstyle = _p.rstyle;
        var bw = ele.pstyle('text-border-width').pfValue;
        var pw = ele.pstyle('text-background-padding').pfValue;
        var lw = preprop(rstyle, 'labelWidth', prefix) + bw + 2 * th + 2 * pw;
        var lh = preprop(rstyle, 'labelHeight', prefix) + bw + 2 * th + 2 * pw;
        var lx = preprop(rstyle, 'labelX', prefix);
        var ly = preprop(rstyle, 'labelY', prefix);
        var theta = preprop(_p.rscratch, 'labelAngle', prefix);
        var lx1 = lx - lw / 2;
        var lx2 = lx + lw / 2;
        var ly1 = ly - lh / 2;
        var ly2 = ly + lh / 2;

        if (theta) {
          var cos = Math.cos(theta);
          var sin = Math.sin(theta);

          var rotate = function rotate(x, y) {
            x = x - lx;
            y = y - ly;
            return {
              x: x * cos - y * sin + lx,
              y: x * sin + y * cos + ly
            };
          };

          var px1y1 = rotate(lx1, ly1);
          var px1y2 = rotate(lx1, ly2);
          var px2y1 = rotate(lx2, ly1);
          var px2y2 = rotate(lx2, ly2);
          var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];

          if (pointInsidePolygonPoints(x, y, points)) {
            addEle(ele);
            return true;
          }
        } else {
          // do a cheaper bb check
          var bb = {
            w: lw,
            h: lh,
            x1: lx1,
            x2: lx2,
            y1: ly1,
            y2: ly2
          };

          if (inBoundingBox(bb, x, y)) {
            addEle(ele);
            return true;
          }
        }
      }

      for (var i = eles.length - 1; i >= 0; i--) {
        // reverse order for precedence
        var ele = eles[i];

        if (ele.isNode()) {
          checkNode(ele) || checkLabel(ele);
        } else {
          // then edge
          checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
        }
      }

      return near;
    }; // 'Give me everything from this box'


    BRp$1.getAllInBox = function (x1, y1, x2, y2) {
      var eles = this.getCachedZSortedEles().interactive;
      var box = [];
      var x1c = Math.min(x1, x2);
      var x2c = Math.max(x1, x2);
      var y1c = Math.min(y1, y2);
      var y2c = Math.max(y1, y2);
      x1 = x1c;
      x2 = x2c;
      y1 = y1c;
      y2 = y2c;
      var boxBb = makeBoundingBox({
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2
      });

      for (var e = 0; e < eles.length; e++) {
        var ele = eles[e];

        if (ele.isNode()) {
          var node = ele;
          var nodeBb = node.boundingBox({
            includeNodes: true,
            includeEdges: false,
            includeLabels: false
          });

          if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
            box.push(node);
          }
        } else {
          var edge = ele;
          var _p = edge._private;
          var rs = _p.rscratch;

          if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
            continue;
          }

          if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
            continue;
          }

          if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {
            var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
            var allInside = true;

            for (var i = 0; i < pts.length; i++) {
              if (!pointInBoundingBox(boxBb, pts[i])) {
                allInside = false;
                break;
              }
            }

            if (allInside) {
              box.push(edge);
            }
          } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
            box.push(edge);
          }
        }
      }

      return box;
    };

    var BRp$2 = {};

    BRp$2.calculateArrowAngles = function (edge) {
      var rs = edge._private.rscratch;
      var isHaystack = rs.edgeType === 'haystack';
      var isBezier = rs.edgeType === 'bezier';
      var isMultibezier = rs.edgeType === 'multibezier';
      var isSegments = rs.edgeType === 'segments';
      var isCompound = rs.edgeType === 'compound';
      var isSelf = rs.edgeType === 'self'; // Displacement gives direction for arrowhead orientation

      var dispX, dispY;
      var startX, startY, endX, endY, midX, midY;

      if (isHaystack) {
        startX = rs.haystackPts[0];
        startY = rs.haystackPts[1];
        endX = rs.haystackPts[2];
        endY = rs.haystackPts[3];
      } else {
        startX = rs.arrowStartX;
        startY = rs.arrowStartY;
        endX = rs.arrowEndX;
        endY = rs.arrowEndY;
      }

      midX = rs.midX;
      midY = rs.midY; // source
      //

      if (isSegments) {
        dispX = startX - rs.segpts[0];
        dispY = startY - rs.segpts[1];
      } else if (isMultibezier || isCompound || isSelf || isBezier) {
        var pts = rs.allpts;
        var bX = qbezierAt(pts[0], pts[2], pts[4], 0.1);
        var bY = qbezierAt(pts[1], pts[3], pts[5], 0.1);
        dispX = startX - bX;
        dispY = startY - bY;
      } else {
        dispX = startX - midX;
        dispY = startY - midY;
      }

      rs.srcArrowAngle = getAngleFromDisp(dispX, dispY); // mid target
      //

      var midX = rs.midX;
      var midY = rs.midY;

      if (isHaystack) {
        midX = (startX + endX) / 2;
        midY = (startY + endY) / 2;
      }

      dispX = endX - startX;
      dispY = endY - startY;

      if (isSegments) {
        var pts = rs.allpts;

        if (pts.length / 2 % 2 === 0) {
          var i2 = pts.length / 2;
          var i1 = i2 - 2;
          dispX = pts[i2] - pts[i1];
          dispY = pts[i2 + 1] - pts[i1 + 1];
        } else {
          var i2 = pts.length / 2 - 1;
          var i1 = i2 - 2;
          var i3 = i2 + 2;
          dispX = pts[i2] - pts[i1];
          dispY = pts[i2 + 1] - pts[i1 + 1];
        }
      } else if (isMultibezier || isCompound || isSelf) {
        var pts = rs.allpts;
        var cpts = rs.ctrlpts;
        var bp0x, bp0y;
        var bp1x, bp1y;

        if (cpts.length / 2 % 2 === 0) {
          var p0 = pts.length / 2 - 1; // startpt

          var ic = p0 + 2;
          var p1 = ic + 2;
          bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
          bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);
          bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
          bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
        } else {
          var ic = pts.length / 2 - 1; // ctrpt

          var p0 = ic - 2; // startpt

          var p1 = ic + 2; // endpt

          bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
          bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);
          bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
          bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
        }

        dispX = bp1x - bp0x;
        dispY = bp1y - bp0y;
      }

      rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
      rs.midDispX = dispX;
      rs.midDispY = dispY; // mid source
      //

      dispX *= -1;
      dispY *= -1;

      if (isSegments) {
        var pts = rs.allpts;

        if (pts.length / 2 % 2 === 0) ; else {
          var i2 = pts.length / 2 - 1;
          var i3 = i2 + 2;
          dispX = -(pts[i3] - pts[i2]);
          dispY = -(pts[i3 + 1] - pts[i2 + 1]);
        }
      }

      rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY); // target
      //

      if (isSegments) {
        dispX = endX - rs.segpts[rs.segpts.length - 2];
        dispY = endY - rs.segpts[rs.segpts.length - 1];
      } else if (isMultibezier || isCompound || isSelf || isBezier) {
        var pts = rs.allpts;
        var l = pts.length;
        var bX = qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
        var bY = qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);
        dispX = endX - bX;
        dispY = endY - bY;
      } else {
        dispX = endX - midX;
        dispY = endY - midY;
      }

      rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
    };

    BRp$2.getArrowWidth = BRp$2.getArrowHeight = function (edgeWidth, scale) {
      var cache = this.arrowWidthCache = this.arrowWidthCache || {};
      var cachedVal = cache[edgeWidth + ', ' + scale];

      if (cachedVal) {
        return cachedVal;
      }

      cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
      cache[edgeWidth + ', ' + scale] = cachedVal;
      return cachedVal;
    };

    var BRp$3 = {};

    BRp$3.findHaystackPoints = function (edges) {
      for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        var _p = edge._private;
        var rs = _p.rscratch;

        if (!rs.haystack) {
          var angle = Math.random() * 2 * Math.PI;
          rs.source = {
            x: Math.cos(angle),
            y: Math.sin(angle)
          };
          angle = Math.random() * 2 * Math.PI;
          rs.target = {
            x: Math.cos(angle),
            y: Math.sin(angle)
          };
        }

        var src = _p.source;
        var tgt = _p.target;
        var srcPos = src.position();
        var tgtPos = tgt.position();
        var srcW = src.width();
        var tgtW = tgt.width();
        var srcH = src.height();
        var tgtH = tgt.height();
        var radius = edge.pstyle('haystack-radius').value;
        var halfRadius = radius / 2; // b/c have to half width/height

        rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
        rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
        rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2; // always override as haystack in case set to different type previously

        rs.edgeType = 'haystack';
        rs.haystack = true;
        this.storeEdgeProjections(edge);
        this.calculateArrowAngles(edge);
        this.recalculateEdgeLabelProjections(edge);
        this.calculateLabelAngles(edge);
      }
    };

    BRp$3.findSegmentsPoints = function (edge, pairInfo) {
      // Segments (multiple straight lines)
      var rs = edge._private.rscratch;
      var posPts = pairInfo.posPts,
          intersectionPts = pairInfo.intersectionPts,
          vectorNormInverse = pairInfo.vectorNormInverse;
      var edgeDistances = edge.pstyle('edge-distances').value;
      var segmentWs = edge.pstyle('segment-weights');
      var segmentDs = edge.pstyle('segment-distances');
      var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
      rs.edgeType = 'segments';
      rs.segpts = [];

      for (var s = 0; s < segmentsN; s++) {
        var w = segmentWs.pfValue[s];
        var d = segmentDs.pfValue[s];
        var w1 = 1 - w;
        var w2 = w;
        var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
        var adjustedMidpt = {
          x: midptPts.x1 * w1 + midptPts.x2 * w2,
          y: midptPts.y1 * w1 + midptPts.y2 * w2
        };
        rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
      }
    };

    BRp$3.findLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
      // Self-edge
      var rs = edge._private.rscratch;
      var dirCounts = pairInfo.dirCounts,
          srcPos = pairInfo.srcPos;
      var ctrlptDists = edge.pstyle('control-point-distances');
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var loopDir = edge.pstyle('loop-direction').pfValue;
      var loopSwp = edge.pstyle('loop-sweep').pfValue;
      var stepSize = edge.pstyle('control-point-step-size').pfValue;
      rs.edgeType = 'self';
      var j = i;
      var loopDist = stepSize;

      if (edgeIsUnbundled) {
        j = 0;
        loopDist = ctrlptDist;
      }

      var loopAngle = loopDir - Math.PI / 2;
      var outAngle = loopAngle - loopSwp / 2;
      var inAngle = loopAngle + loopSwp / 2; // increase by step size for overlapping loops, keyed on direction and sweep values

      var dc = String(loopDir + '_' + loopSwp);
      j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];
      rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
    };

    BRp$3.findCompoundLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
      // Compound edge
      var rs = edge._private.rscratch;
      rs.edgeType = 'compound';
      var srcPos = pairInfo.srcPos,
          tgtPos = pairInfo.tgtPos,
          srcW = pairInfo.srcW,
          srcH = pairInfo.srcH,
          tgtW = pairInfo.tgtW,
          tgtH = pairInfo.tgtH;
      var stepSize = edge.pstyle('control-point-step-size').pfValue;
      var ctrlptDists = edge.pstyle('control-point-distances');
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var j = i;
      var loopDist = stepSize;

      if (edgeIsUnbundled) {
        j = 0;
        loopDist = ctrlptDist;
      }

      var loopW = 50;
      var loopaPos = {
        x: srcPos.x - srcW / 2,
        y: srcPos.y - srcH / 2
      };
      var loopbPos = {
        x: tgtPos.x - tgtW / 2,
        y: tgtPos.y - tgtH / 2
      };
      var loopPos = {
        x: Math.min(loopaPos.x, loopbPos.x),
        y: Math.min(loopaPos.y, loopbPos.y)
      }; // avoids cases with impossible beziers

      var minCompoundStretch = 0.5;
      var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
      var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
      rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
    };

    BRp$3.findStraightEdgePoints = function (edge) {
      // Straight edge within bundle
      edge._private.rscratch.edgeType = 'straight';
    };

    BRp$3.findBezierPoints = function (edge, pairInfo, i, edgeIsUnbundled, edgeIsSwapped) {
      var rs = edge._private.rscratch;
      var vectorNormInverse = pairInfo.vectorNormInverse,
          posPts = pairInfo.posPts,
          intersectionPts = pairInfo.intersectionPts;
      var edgeDistances = edge.pstyle('edge-distances').value;
      var stepSize = edge.pstyle('control-point-step-size').pfValue;
      var ctrlptDists = edge.pstyle('control-point-distances');
      var ctrlptWs = edge.pstyle('control-point-weights');
      var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var ctrlptWeight = ctrlptWs.value[0]; // (Multi)bezier

      var multi = edgeIsUnbundled;
      rs.edgeType = multi ? 'multibezier' : 'bezier';
      rs.ctrlpts = [];

      for (var b = 0; b < bezierN; b++) {
        var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i) * stepSize * (edgeIsSwapped ? -1 : 1);
        var manctrlptDist = void 0;
        var sign = signum(normctrlptDist);

        if (multi) {
          ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size

          ctrlptWeight = ctrlptWs.value[b];
        }

        if (edgeIsUnbundled) {
          // multi or single unbundled
          manctrlptDist = ctrlptDist;
        } else {
          manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
        }

        var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;
        var w1 = 1 - ctrlptWeight;
        var w2 = ctrlptWeight;
        var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
        var adjustedMidpt = {
          x: midptPts.x1 * w1 + midptPts.x2 * w2,
          y: midptPts.y1 * w1 + midptPts.y2 * w2
        };
        rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
      }
    };

    BRp$3.findTaxiPoints = function (edge, pairInfo) {
      // Taxicab geometry with two turns maximum
      var rs = edge._private.rscratch;
      rs.edgeType = 'segments';
      var VERTICAL = 'vertical';
      var HORIZONTAL = 'horizontal';
      var LEFTWARD = 'leftward';
      var RIGHTWARD = 'rightward';
      var DOWNWARD = 'downward';
      var UPWARD = 'upward';
      var AUTO = 'auto';
      var posPts = pairInfo.posPts,
          srcW = pairInfo.srcW,
          srcH = pairInfo.srcH,
          tgtW = pairInfo.tgtW,
          tgtH = pairInfo.tgtH;
      var edgeDistances = edge.pstyle('edge-distances').value;
      var dIncludesNodeBody = edgeDistances !== 'node-position';
      var taxiDir = edge.pstyle('taxi-direction').value;
      var rawTaxiDir = taxiDir; // unprocessed value

      var taxiTurn = edge.pstyle('taxi-turn');
      var taxiTurnPfVal = taxiTurn.pfValue;
      var minD = edge.pstyle('taxi-turn-min-distance').pfValue;
      var turnIsPercent = taxiTurn.units === '%';
      var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
      var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
      var pdx = posPts.x2 - posPts.x1;
      var pdy = posPts.y2 - posPts.y1; // take away the effective w/h from the magnitude of the delta value

      var subDWH = function subDWH(dxy, dwh) {
        if (dxy > 0) {
          return Math.max(dxy - dwh, 0);
        } else {
          return Math.min(dxy + dwh, 0);
        }
      };

      var dx = subDWH(pdx, dw);
      var dy = subDWH(pdy, dh);
      var isExplicitDir = false;

      if (taxiDir === AUTO) {
        taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
      } else if (taxiDir === UPWARD || taxiDir === DOWNWARD) {
        taxiDir = VERTICAL;
        isExplicitDir = true;
      } else if (taxiDir === LEFTWARD || taxiDir === RIGHTWARD) {
        taxiDir = HORIZONTAL;
        isExplicitDir = true;
      }

      var isVert = taxiDir === VERTICAL;
      var l = isVert ? dy : dx;
      var pl = isVert ? pdy : pdx;
      var sgnL = signum(pl);
      var forcedDir = false;

      if (!(isExplicitDir && turnIsPercent) // forcing in this case would cause weird growing in the opposite direction
      && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {
        sgnL *= -1;
        l = sgnL * Math.abs(l);
        forcedDir = true;
      }

      var d = turnIsPercent ? taxiTurnPfVal * l : taxiTurnPfVal * sgnL;

      var getIsTooClose = function getIsTooClose(d) {
        return Math.abs(d) < minD || Math.abs(d) >= Math.abs(l);
      };

      var isTooCloseSrc = getIsTooClose(d);
      var isTooCloseTgt = getIsTooClose(l - d);
      var isTooClose = isTooCloseSrc || isTooCloseTgt;

      if (isTooClose && !forcedDir) {
        // non-ideal routing
        if (isVert) {
          // vertical fallbacks
          var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;
          var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;

          if (lShapeInsideSrc) {
            // horizontal Z-shape (direction not respected)
            var x = (posPts.x1 + posPts.x2) / 2;
            var y1 = posPts.y1,
                y2 = posPts.y2;
            rs.segpts = [x, y1, x, y2];
          } else if (lShapeInsideTgt) {
            // vertical Z-shape (distance not respected)
            var y = (posPts.y1 + posPts.y2) / 2;
            var x1 = posPts.x1,
                x2 = posPts.x2;
            rs.segpts = [x1, y, x2, y];
          } else {
            // L-shape fallback (turn distance not respected, but works well with tree siblings)
            rs.segpts = [posPts.x1, posPts.y2];
          }
        } else {
          // horizontal fallbacks
          var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;

          var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;

          if (_lShapeInsideSrc) {
            // vertical Z-shape (direction not respected)
            var _y = (posPts.y1 + posPts.y2) / 2;

            var _x = posPts.x1,
                _x2 = posPts.x2;
            rs.segpts = [_x, _y, _x2, _y];
          } else if (_lShapeInsideTgt) {
            // horizontal Z-shape (turn distance not respected)
            var _x3 = (posPts.x1 + posPts.x2) / 2;

            var _y2 = posPts.y1,
                _y3 = posPts.y2;
            rs.segpts = [_x3, _y2, _x3, _y3];
          } else {
            // L-shape (turn distance not respected, but works well for tree siblings)
            rs.segpts = [posPts.x2, posPts.y1];
          }
        }
      } else {
        // ideal routing
        if (isVert) {
          var _y4 = posPts.y1 + d + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);

          var _x4 = posPts.x1,
              _x5 = posPts.x2;
          rs.segpts = [_x4, _y4, _x5, _y4];
        } else {
          // horizontal
          var _x6 = posPts.x1 + d + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);

          var _y5 = posPts.y1,
              _y6 = posPts.y2;
          rs.segpts = [_x6, _y5, _x6, _y6];
        }
      }
    };

    BRp$3.tryToCorrectInvalidPoints = function (edge, pairInfo) {
      var rs = edge._private.rscratch; // can only correct beziers for now...

      if (rs.edgeType === 'bezier') {
        var srcPos = pairInfo.srcPos,
            tgtPos = pairInfo.tgtPos,
            srcW = pairInfo.srcW,
            srcH = pairInfo.srcH,
            tgtW = pairInfo.tgtW,
            tgtH = pairInfo.tgtH,
            srcShape = pairInfo.srcShape,
            tgtShape = pairInfo.tgtShape;
        var badStart = !number(rs.startX) || !number(rs.startY);
        var badAStart = !number(rs.arrowStartX) || !number(rs.arrowStartY);
        var badEnd = !number(rs.endX) || !number(rs.endY);
        var badAEnd = !number(rs.arrowEndX) || !number(rs.arrowEndY);
        var minCpADistFactor = 3;
        var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
        var minCpADist = minCpADistFactor * arrowW;
        var startACpDist = dist({
          x: rs.ctrlpts[0],
          y: rs.ctrlpts[1]
        }, {
          x: rs.startX,
          y: rs.startY
        });
        var closeStartACp = startACpDist < minCpADist;
        var endACpDist = dist({
          x: rs.ctrlpts[0],
          y: rs.ctrlpts[1]
        }, {
          x: rs.endX,
          y: rs.endY
        });
        var closeEndACp = endACpDist < minCpADist;
        var overlapping = false;

        if (badStart || badAStart || closeStartACp) {
          overlapping = true; // project control point along line from src centre to outside the src shape
          // (otherwise intersection will yield nothing)

          var cpD = {
            // delta
            x: rs.ctrlpts[0] - srcPos.x,
            y: rs.ctrlpts[1] - srcPos.y
          };
          var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line

          var cpM = {
            // normalised delta
            x: cpD.x / cpL,
            y: cpD.y / cpL
          };
          var radius = Math.max(srcW, srcH);
          var cpProj = {
            // *2 radius guarantees outside shape
            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
            y: rs.ctrlpts[1] + cpM.y * 2 * radius
          };
          var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);

          if (closeStartACp) {
            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
          } else {
            rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
            rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
          }
        }

        if (badEnd || badAEnd || closeEndACp) {
          overlapping = true; // project control point along line from tgt centre to outside the tgt shape
          // (otherwise intersection will yield nothing)

          var _cpD = {
            // delta
            x: rs.ctrlpts[0] - tgtPos.x,
            y: rs.ctrlpts[1] - tgtPos.y
          };

          var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y); // length of line


          var _cpM = {
            // normalised delta
            x: _cpD.x / _cpL,
            y: _cpD.y / _cpL
          };

          var _radius = Math.max(srcW, srcH);

          var _cpProj = {
            // *2 radius guarantees outside shape
            x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,
            y: rs.ctrlpts[1] + _cpM.y * 2 * _radius
          };
          var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0);

          if (closeEndACp) {
            rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
          } else {
            rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
            rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
          }
        }

        if (overlapping) {
          // recalc endpts
          this.findEndpoints(edge);
        }
      }
    };

    BRp$3.storeAllpts = function (edge) {
      var rs = edge._private.rscratch;

      if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
        rs.allpts = [];
        rs.allpts.push(rs.startX, rs.startY);

        for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
          // ctrl pt itself
          rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]); // the midpt between ctrlpts as intermediate destination pts

          if (b + 3 < rs.ctrlpts.length) {
            rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
          }
        }

        rs.allpts.push(rs.endX, rs.endY);
        var m, mt;

        if (rs.ctrlpts.length / 2 % 2 === 0) {
          m = rs.allpts.length / 2 - 1;
          rs.midX = rs.allpts[m];
          rs.midY = rs.allpts[m + 1];
        } else {
          m = rs.allpts.length / 2 - 3;
          mt = 0.5;
          rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
          rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
        }
      } else if (rs.edgeType === 'straight') {
        // need to calc these after endpts
        rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY]; // default midpt for labels etc

        rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
        rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
      } else if (rs.edgeType === 'segments') {
        rs.allpts = [];
        rs.allpts.push(rs.startX, rs.startY);
        rs.allpts.push.apply(rs.allpts, rs.segpts);
        rs.allpts.push(rs.endX, rs.endY);

        if (rs.segpts.length % 4 === 0) {
          var i2 = rs.segpts.length / 2;
          var i1 = i2 - 2;
          rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
          rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
        } else {
          var _i = rs.segpts.length / 2 - 1;

          rs.midX = rs.segpts[_i];
          rs.midY = rs.segpts[_i + 1];
        }
      }
    };

    BRp$3.checkForInvalidEdgeWarning = function (edge) {
      var rs = edge[0]._private.rscratch;

      if (rs.nodesOverlap || number(rs.startX) && number(rs.startY) && number(rs.endX) && number(rs.endY)) {
        rs.loggedErr = false;
      } else {
        if (!rs.loggedErr) {
          rs.loggedErr = true;
          warn('Edge `' + edge.id() + '` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.');
        }
      }
    };

    BRp$3.findEdgeControlPoints = function (edges) {
      var _this = this;

      if (!edges || edges.length === 0) {
        return;
      }

      var r = this;
      var cy = r.cy;
      var hasCompounds = cy.hasCompoundNodes();
      var hashTable = new Map$1();
      var pairIds = [];
      var haystackEdges = []; // create a table of edge (src, tgt) => list of edges between them

      for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        var _p = edge._private;
        var curveStyle = edge.pstyle('curve-style').value; // ignore edges who are not to be displayed
        // they shouldn't take up space

        if (edge.removed() || !edge.takesUpSpace()) {
          continue;
        }

        if (curveStyle === 'haystack') {
          haystackEdges.push(edge);
          continue;
        }

        var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'straight' || curveStyle === 'taxi';
        var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';

        var srcIndex = _p.source.poolIndex();

        var tgtIndex = _p.target.poolIndex();

        var hash = (edgeIsUnbundled ? -1 : 1) * hashIntsArray([srcIndex, tgtIndex].sort());
        var pairId = hash;
        var tableEntry = hashTable.get(pairId);

        if (tableEntry == null) {
          tableEntry = {
            eles: []
          };
          hashTable.set(pairId, tableEntry);
          pairIds.push(pairId);
        }

        tableEntry.eles.push(edge);

        if (edgeIsUnbundled) {
          tableEntry.hasUnbundled = true;
        }

        if (edgeIsBezier) {
          tableEntry.hasBezier = true;
        }
      } // for each pair (src, tgt), create the ctrl pts
      // Nested for loop is OK; total number of iterations for both loops = edgeCount


      var _loop = function _loop(p) {
        var pairId = pairIds[p];
        var pairInfo = hashTable.get(pairId);
        var swappedpairInfo = void 0;

        if (!pairInfo.hasUnbundled) {
          var pllEdges = pairInfo.eles[0].parallelEdges().filter(function (e) {
            return e.isBundledBezier();
          });
          clearArray(pairInfo.eles);
          pllEdges.forEach(function (edge) {
            return pairInfo.eles.push(edge);
          }); // for each pair id, the edges should be sorted by index

          pairInfo.eles.sort(function (edge1, edge2) {
            return edge1.poolIndex() - edge2.poolIndex();
          });
        }

        var firstEdge = pairInfo.eles[0];
        var src = firstEdge.source();
        var tgt = firstEdge.target(); // make sure src/tgt distinction is consistent w.r.t. pairId

        if (src.poolIndex() > tgt.poolIndex()) {
          var temp = src;
          src = tgt;
          tgt = temp;
        }

        var srcPos = pairInfo.srcPos = src.position();
        var tgtPos = pairInfo.tgtPos = tgt.position();
        var srcW = pairInfo.srcW = src.outerWidth();
        var srcH = pairInfo.srcH = src.outerHeight();
        var tgtW = pairInfo.tgtW = tgt.outerWidth();
        var tgtH = pairInfo.tgtH = tgt.outerHeight();

        var srcShape = pairInfo.srcShape = r.nodeShapes[_this.getNodeShape(src)];

        var tgtShape = pairInfo.tgtShape = r.nodeShapes[_this.getNodeShape(tgt)];

        pairInfo.dirCounts = {
          'north': 0,
          'west': 0,
          'south': 0,
          'east': 0,
          'northwest': 0,
          'southwest': 0,
          'northeast': 0,
          'southeast': 0
        };

        for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
          var _edge = pairInfo.eles[_i2];
          var rs = _edge[0]._private.rscratch;

          var _curveStyle = _edge.pstyle('curve-style').value;

          var _edgeIsUnbundled = _curveStyle === 'unbundled-bezier' || _curveStyle === 'segments' || _curveStyle === 'taxi'; // whether the normalised pair order is the reverse of the edge's src-tgt order


          var edgeIsSwapped = !src.same(_edge.source());

          if (!pairInfo.calculatedIntersection && src !== tgt && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
            pairInfo.calculatedIntersection = true; // pt outside src shape to calc distance/displacement from src to tgt

            var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);
            var srcIntn = pairInfo.srcIntn = srcOutside; // pt outside tgt shape to calc distance/displacement from src to tgt

            var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);
            var tgtIntn = pairInfo.tgtIntn = tgtOutside;
            var intersectionPts = pairInfo.intersectionPts = {
              x1: srcOutside[0],
              x2: tgtOutside[0],
              y1: srcOutside[1],
              y2: tgtOutside[1]
            };
            var posPts = pairInfo.posPts = {
              x1: srcPos.x,
              x2: tgtPos.x,
              y1: srcPos.y,
              y2: tgtPos.y
            };
            var dy = tgtOutside[1] - srcOutside[1];
            var dx = tgtOutside[0] - srcOutside[0];
            var l = Math.sqrt(dx * dx + dy * dy);
            var vector = pairInfo.vector = {
              x: dx,
              y: dy
            };
            var vectorNorm = pairInfo.vectorNorm = {
              x: vector.x / l,
              y: vector.y / l
            };
            var vectorNormInverse = {
              x: -vectorNorm.y,
              y: vectorNorm.x
            }; // if node shapes overlap, then no ctrl pts to draw

            pairInfo.nodesOverlap = !number(l) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y);
            pairInfo.vectorNormInverse = vectorNormInverse;
            swappedpairInfo = {
              nodesOverlap: pairInfo.nodesOverlap,
              dirCounts: pairInfo.dirCounts,
              calculatedIntersection: true,
              hasBezier: pairInfo.hasBezier,
              hasUnbundled: pairInfo.hasUnbundled,
              eles: pairInfo.eles,
              srcPos: tgtPos,
              tgtPos: srcPos,
              srcW: tgtW,
              srcH: tgtH,
              tgtW: srcW,
              tgtH: srcH,
              srcIntn: tgtIntn,
              tgtIntn: srcIntn,
              srcShape: tgtShape,
              tgtShape: srcShape,
              posPts: {
                x1: posPts.x2,
                y1: posPts.y2,
                x2: posPts.x1,
                y2: posPts.y1
              },
              intersectionPts: {
                x1: intersectionPts.x2,
                y1: intersectionPts.y2,
                x2: intersectionPts.x1,
                y2: intersectionPts.y1
              },
              vector: {
                x: -vector.x,
                y: -vector.y
              },
              vectorNorm: {
                x: -vectorNorm.x,
                y: -vectorNorm.y
              },
              vectorNormInverse: {
                x: -vectorNormInverse.x,
                y: -vectorNormInverse.y
              }
            };
          }

          var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
          rs.nodesOverlap = passedPairInfo.nodesOverlap;
          rs.srcIntn = passedPairInfo.srcIntn;
          rs.tgtIntn = passedPairInfo.tgtIntn;

          if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src) || src.same(tgt))) {
            _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
          } else if (src === tgt) {
            _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
          } else if (_curveStyle === 'segments') {
            _this.findSegmentsPoints(_edge, passedPairInfo);
          } else if (_curveStyle === 'taxi') {
            _this.findTaxiPoints(_edge, passedPairInfo);
          } else if (_curveStyle === 'straight' || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
            _this.findStraightEdgePoints(_edge);
          } else {
            _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
          }

          _this.findEndpoints(_edge);

          _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);

          _this.checkForInvalidEdgeWarning(_edge);

          _this.storeAllpts(_edge);

          _this.storeEdgeProjections(_edge);

          _this.calculateArrowAngles(_edge);

          _this.recalculateEdgeLabelProjections(_edge);

          _this.calculateLabelAngles(_edge);
        } // for pair edges

      };

      for (var p = 0; p < pairIds.length; p++) {
        _loop(p);
      } // for pair ids
      // haystacks avoid the expense of pairInfo stuff (intersections etc.)


      this.findHaystackPoints(haystackEdges);
    };

    function getPts(pts) {
      var retPts = [];

      if (pts == null) {
        return;
      }

      for (var i = 0; i < pts.length; i += 2) {
        var x = pts[i];
        var y = pts[i + 1];
        retPts.push({
          x: x,
          y: y
        });
      }

      return retPts;
    }

    BRp$3.getSegmentPoints = function (edge) {
      var rs = edge[0]._private.rscratch;
      var type = rs.edgeType;

      if (type === 'segments') {
        this.recalculateRenderedStyle(edge);
        return getPts(rs.segpts);
      }
    };

    BRp$3.getControlPoints = function (edge) {
      var rs = edge[0]._private.rscratch;
      var type = rs.edgeType;

      if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {
        this.recalculateRenderedStyle(edge);
        return getPts(rs.ctrlpts);
      }
    };

    BRp$3.getEdgeMidpoint = function (edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);
      return {
        x: rs.midX,
        y: rs.midY
      };
    };

    var BRp$4 = {};

    BRp$4.manualEndptToPx = function (node, prop) {
      var r = this;
      var npos = node.position();
      var w = node.outerWidth();
      var h = node.outerHeight();

      if (prop.value.length === 2) {
        var p = [prop.pfValue[0], prop.pfValue[1]];

        if (prop.units[0] === '%') {
          p[0] = p[0] * w;
        }

        if (prop.units[1] === '%') {
          p[1] = p[1] * h;
        }

        p[0] += npos.x;
        p[1] += npos.y;
        return p;
      } else {
        var angle = prop.pfValue[0];
        angle = -Math.PI / 2 + angle; // start at 12 o'clock

        var l = 2 * Math.max(w, h);
        var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];
        return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
      }
    };

    BRp$4.findEndpoints = function (edge) {
      var r = this;
      var intersect;
      var source = edge.source()[0];
      var target = edge.target()[0];
      var srcPos = source.position();
      var tgtPos = target.position();
      var tgtArShape = edge.pstyle('target-arrow-shape').value;
      var srcArShape = edge.pstyle('source-arrow-shape').value;
      var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
      var srcDist = edge.pstyle('source-distance-from-node').pfValue;
      var curveStyle = edge.pstyle('curve-style').value;
      var rs = edge._private.rscratch;
      var et = rs.edgeType;
      var taxi = curveStyle === 'taxi';
      var self = et === 'self' || et === 'compound';
      var bezier = et === 'bezier' || et === 'multibezier' || self;
      var multi = et !== 'bezier';
      var lines = et === 'straight' || et === 'segments';
      var segments = et === 'segments';
      var hasEndpts = bezier || multi || lines;
      var overrideEndpts = self || taxi;
      var srcManEndpt = edge.pstyle('source-endpoint');
      var srcManEndptVal = overrideEndpts ? 'outside-to-node' : srcManEndpt.value;
      var tgtManEndpt = edge.pstyle('target-endpoint');
      var tgtManEndptVal = overrideEndpts ? 'outside-to-node' : tgtManEndpt.value;
      rs.srcManEndpt = srcManEndpt;
      rs.tgtManEndpt = tgtManEndpt;
      var p1; // last known point of edge on target side

      var p2; // last known point of edge on source side

      var p1_i; // point to intersect with target shape

      var p2_i; // point to intersect with source shape

      if (bezier) {
        var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
        var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
        p1 = cpEnd;
        p2 = cpStart;
      } else if (lines) {
        var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
        var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
        p1 = tgtArrowFromPt;
        p2 = srcArrowFromPt;
      }

      if (tgtManEndptVal === 'inside-to-node') {
        intersect = [tgtPos.x, tgtPos.y];
      } else if (tgtManEndpt.units) {
        intersect = this.manualEndptToPx(target, tgtManEndpt);
      } else if (tgtManEndptVal === 'outside-to-line') {
        intersect = rs.tgtIntn; // use cached value from ctrlpt calc
      } else {
        if (tgtManEndptVal === 'outside-to-node' || tgtManEndptVal === 'outside-to-node-or-label') {
          p1_i = p1;
        } else if (tgtManEndptVal === 'outside-to-line' || tgtManEndptVal === 'outside-to-line-or-label') {
          p1_i = [srcPos.x, srcPos.y];
        }

        intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);

        if (tgtManEndptVal === 'outside-to-node-or-label' || tgtManEndptVal === 'outside-to-line-or-label') {
          var trs = target._private.rscratch;
          var lw = trs.labelWidth;
          var lh = trs.labelHeight;
          var lx = trs.labelX;
          var ly = trs.labelY;
          var va = target.pstyle('text-valign').value;

          if (va === 'top') {
            ly -= lh / 2;
          } else if (va === 'bottom') {
            ly += lh / 2;
          }

          var ha = target.pstyle('text-halign').value;

          if (ha === 'left') {
            lx -= lw / 2;
          } else if (ha === 'right') {
            lx += lw / 2;
          }

          var labelIntersect = r.nodeShapes['rectangle'].intersectLine(lx, ly, lw, lh, p1_i[0], p1_i[1], 0);
          var refPt = srcPos;
          var intSqdist = sqdist(refPt, array2point(intersect));
          var labIntSqdist = sqdist(refPt, array2point(labelIntersect));

          if (labIntSqdist < intSqdist) {
            intersect = labelIntersect;
          }
        }
      }

      var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
      var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);
      rs.endX = edgeEnd[0];
      rs.endY = edgeEnd[1];
      rs.arrowEndX = arrowEnd[0];
      rs.arrowEndY = arrowEnd[1];

      if (srcManEndptVal === 'inside-to-node') {
        intersect = [srcPos.x, srcPos.y];
      } else if (srcManEndpt.units) {
        intersect = this.manualEndptToPx(source, srcManEndpt);
      } else if (srcManEndptVal === 'outside-to-line') {
        intersect = rs.srcIntn; // use cached value from ctrlpt calc
      } else {
        if (srcManEndptVal === 'outside-to-node' || srcManEndptVal === 'outside-to-node-or-label') {
          p2_i = p2;
        } else if (srcManEndptVal === 'outside-to-line' || srcManEndptVal === 'outside-to-line-or-label') {
          p2_i = [tgtPos.x, tgtPos.y];
        }

        intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);

        if (srcManEndptVal === 'outside-to-node-or-label' || srcManEndptVal === 'outside-to-line-or-label') {
          var srs = source._private.rscratch;
          var _lw = srs.labelWidth;
          var _lh = srs.labelHeight;
          var _lx = srs.labelX;
          var _ly = srs.labelY;
          var _va = source.pstyle('text-valign').value;

          if (_va === 'top') {
            _ly -= _lh / 2;
          } else if (_va === 'bottom') {
            _ly += _lh / 2;
          }

          var _ha = source.pstyle('text-halign').value;

          if (_ha === 'left') {
            _lx -= _lw / 2;
          } else if (_ha === 'right') {
            _lx += _lw / 2;
          }

          var _labelIntersect = r.nodeShapes['rectangle'].intersectLine(_lx, _ly, _lw, _lh, p2_i[0], p2_i[1], 0);

          var _refPt = tgtPos;

          var _intSqdist = sqdist(_refPt, array2point(intersect));

          var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));

          if (_labIntSqdist < _intSqdist) {
            intersect = _labelIntersect;
          }
        }
      }

      var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
      var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);
      rs.startX = edgeStart[0];
      rs.startY = edgeStart[1];
      rs.arrowStartX = arrowStart[0];
      rs.arrowStartY = arrowStart[1];

      if (hasEndpts) {
        if (!number(rs.startX) || !number(rs.startY) || !number(rs.endX) || !number(rs.endY)) {
          rs.badLine = true;
        } else {
          rs.badLine = false;
        }
      }
    };

    BRp$4.getSourceEndpoint = function (edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);

      switch (rs.edgeType) {
        case 'haystack':
          return {
            x: rs.haystackPts[0],
            y: rs.haystackPts[1]
          };

        default:
          return {
            x: rs.arrowStartX,
            y: rs.arrowStartY
          };
      }
    };

    BRp$4.getTargetEndpoint = function (edge) {
      var rs = edge[0]._private.rscratch;
      this.recalculateRenderedStyle(edge);

      switch (rs.edgeType) {
        case 'haystack':
          return {
            x: rs.haystackPts[2],
            y: rs.haystackPts[3]
          };

        default:
          return {
            x: rs.arrowEndX,
            y: rs.arrowEndY
          };
      }
    };

    var BRp$5 = {};

    function pushBezierPts(r, edge, pts) {
      var qbezierAt$1 = function qbezierAt$1(p1, p2, p3, t) {
        return qbezierAt(p1, p2, p3, t);
      };

      var _p = edge._private;
      var bpts = _p.rstyle.bezierPts;

      for (var i = 0; i < r.bezierProjPcts.length; i++) {
        var p = r.bezierProjPcts[i];
        bpts.push({
          x: qbezierAt$1(pts[0], pts[2], pts[4], p),
          y: qbezierAt$1(pts[1], pts[3], pts[5], p)
        });
      }
    }

    BRp$5.storeEdgeProjections = function (edge) {
      var _p = edge._private;
      var rs = _p.rscratch;
      var et = rs.edgeType; // clear the cached points state

      _p.rstyle.bezierPts = null;
      _p.rstyle.linePts = null;
      _p.rstyle.haystackPts = null;

      if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
        _p.rstyle.bezierPts = [];

        for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
          pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
        }
      } else if (et === 'segments') {
        var lpts = _p.rstyle.linePts = [];

        for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
          lpts.push({
            x: rs.allpts[i],
            y: rs.allpts[i + 1]
          });
        }
      } else if (et === 'haystack') {
        var hpts = rs.haystackPts;
        _p.rstyle.haystackPts = [{
          x: hpts[0],
          y: hpts[1]
        }, {
          x: hpts[2],
          y: hpts[3]
        }];
      }

      _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
    };

    BRp$5.recalculateEdgeProjections = function (edges) {
      this.findEdgeControlPoints(edges);
    };

    var BRp$6 = {};

    BRp$6.recalculateNodeLabelProjection = function (node) {
      var content = node.pstyle('label').strValue;

      if (emptyString(content)) {
        return;
      }

      var textX, textY;
      var _p = node._private;
      var nodeWidth = node.width();
      var nodeHeight = node.height();
      var padding = node.padding();
      var nodePos = node.position();
      var textHalign = node.pstyle('text-halign').strValue;
      var textValign = node.pstyle('text-valign').strValue;
      var rs = _p.rscratch;
      var rstyle = _p.rstyle;

      switch (textHalign) {
        case 'left':
          textX = nodePos.x - nodeWidth / 2 - padding;
          break;

        case 'right':
          textX = nodePos.x + nodeWidth / 2 + padding;
          break;

        default:
          // e.g. center
          textX = nodePos.x;
      }

      switch (textValign) {
        case 'top':
          textY = nodePos.y - nodeHeight / 2 - padding;
          break;

        case 'bottom':
          textY = nodePos.y + nodeHeight / 2 + padding;
          break;

        default:
          // e.g. middle
          textY = nodePos.y;
      }

      rs.labelX = textX;
      rs.labelY = textY;
      rstyle.labelX = textX;
      rstyle.labelY = textY;
      this.applyLabelDimensions(node);
    };

    var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {
      var angle = Math.atan(dy / dx);

      if (dx === 0 && angle < 0) {
        angle = angle * -1;
      }

      return angle;
    };

    var lineAngle = function lineAngle(p0, p1) {
      var dx = p1.x - p0.x;
      var dy = p1.y - p0.y;
      return lineAngleFromDelta(dx, dy);
    };

    var bezierAngle = function bezierAngle(p0, p1, p2, t) {
      var t0 = bound(0, t - 0.001, 1);
      var t1 = bound(0, t + 0.001, 1);
      var lp0 = qbezierPtAt(p0, p1, p2, t0);
      var lp1 = qbezierPtAt(p0, p1, p2, t1);
      return lineAngle(lp0, lp1);
    };

    BRp$6.recalculateEdgeLabelProjections = function (edge) {
      var p;
      var _p = edge._private;
      var rs = _p.rscratch;
      var r = this;
      var content = {
        mid: edge.pstyle('label').strValue,
        source: edge.pstyle('source-label').strValue,
        target: edge.pstyle('target-label').strValue
      };

      if (content.mid || content.source || content.target) ; else {
          return; // no labels => no calcs
        } // add center point to style so bounding box calculations can use it
      //


      p = {
        x: rs.midX,
        y: rs.midY
      };

      var setRs = function setRs(propName, prefix, value) {
        setPrefixedProperty(_p.rscratch, propName, prefix, value);
        setPrefixedProperty(_p.rstyle, propName, prefix, value);
      };

      setRs('labelX', null, p.x);
      setRs('labelY', null, p.y);
      var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
      setRs('labelAutoAngle', null, midAngle);

      var createControlPointInfo = function createControlPointInfo() {
        if (createControlPointInfo.cache) {
          return createControlPointInfo.cache;
        } // use cache so only 1x per edge


        var ctrlpts = []; // store each ctrlpt info init

        for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
          var p0 = {
            x: rs.allpts[i],
            y: rs.allpts[i + 1]
          };
          var p1 = {
            x: rs.allpts[i + 2],
            y: rs.allpts[i + 3]
          }; // ctrlpt

          var p2 = {
            x: rs.allpts[i + 4],
            y: rs.allpts[i + 5]
          };
          ctrlpts.push({
            p0: p0,
            p1: p1,
            p2: p2,
            startDist: 0,
            length: 0,
            segments: []
          });
        }

        var bpts = _p.rstyle.bezierPts;
        var nProjs = r.bezierProjPcts.length;

        function addSegment(cp, p0, p1, t0, t1) {
          var length = dist(p0, p1);
          var prevSegment = cp.segments[cp.segments.length - 1];
          var segment = {
            p0: p0,
            p1: p1,
            t0: t0,
            t1: t1,
            startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
            length: length
          };
          cp.segments.push(segment);
          cp.length += length;
        } // update each ctrlpt with segment info


        for (var i = 0; i < ctrlpts.length; i++) {
          var cp = ctrlpts[i];
          var prevCp = ctrlpts[i - 1];

          if (prevCp) {
            cp.startDist = prevCp.startDist + prevCp.length;
          }

          addSegment(cp, cp.p0, bpts[i * nProjs], 0, r.bezierProjPcts[0]); // first

          for (var j = 0; j < nProjs - 1; j++) {
            addSegment(cp, bpts[i * nProjs + j], bpts[i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
          }

          addSegment(cp, bpts[i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
        }

        return createControlPointInfo.cache = ctrlpts;
      };

      var calculateEndProjection = function calculateEndProjection(prefix) {
        var angle;
        var isSrc = prefix === 'source';

        if (!content[prefix]) {
          return;
        }

        var offset = edge.pstyle(prefix + '-text-offset').pfValue;

        switch (rs.edgeType) {
          case 'self':
          case 'compound':
          case 'bezier':
          case 'multibezier':
            var cps = createControlPointInfo();
            var selected;
            var startDist = 0;
            var totalDist = 0; // find the segment we're on

            for (var i = 0; i < cps.length; i++) {
              var cp = cps[isSrc ? i : cps.length - 1 - i];

              for (var j = 0; j < cp.segments.length; j++) {
                var seg = cp.segments[isSrc ? j : cp.segments.length - 1 - j];
                var lastSeg = i === cps.length - 1 && j === cp.segments.length - 1;
                startDist = totalDist;
                totalDist += seg.length;

                if (totalDist >= offset || lastSeg) {
                  selected = {
                    cp: cp,
                    segment: seg
                  };
                  break;
                }
              }

              if (selected) {
                break;
              }
            }

            var cp = selected.cp;
            var seg = selected.segment;
            var tSegment = (offset - startDist) / seg.length;
            var segDt = seg.t1 - seg.t0;
            var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
            t = bound(0, t, 1);
            p = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
            angle = bezierAngle(cp.p0, cp.p1, cp.p2, t);
            break;

          case 'straight':
          case 'segments':
          case 'haystack':
            var d = 0,
                di,
                d0;
            var p0, p1;
            var l = rs.allpts.length;

            for (var i = 0; i + 3 < l; i += 2) {
              if (isSrc) {
                p0 = {
                  x: rs.allpts[i],
                  y: rs.allpts[i + 1]
                };
                p1 = {
                  x: rs.allpts[i + 2],
                  y: rs.allpts[i + 3]
                };
              } else {
                p0 = {
                  x: rs.allpts[l - 2 - i],
                  y: rs.allpts[l - 1 - i]
                };
                p1 = {
                  x: rs.allpts[l - 4 - i],
                  y: rs.allpts[l - 3 - i]
                };
              }

              di = dist(p0, p1);
              d0 = d;
              d += di;

              if (d >= offset) {
                break;
              }
            }

            var pD = offset - d0;
            var t = pD / di;
            t = bound(0, t, 1);
            p = lineAt(p0, p1, t);
            angle = lineAngle(p0, p1);
            break;
        }

        setRs('labelX', prefix, p.x);
        setRs('labelY', prefix, p.y);
        setRs('labelAutoAngle', prefix, angle);
      };

      calculateEndProjection('source');
      calculateEndProjection('target');
      this.applyLabelDimensions(edge);
    };

    BRp$6.applyLabelDimensions = function (ele) {
      this.applyPrefixedLabelDimensions(ele);

      if (ele.isEdge()) {
        this.applyPrefixedLabelDimensions(ele, 'source');
        this.applyPrefixedLabelDimensions(ele, 'target');
      }
    };

    BRp$6.applyPrefixedLabelDimensions = function (ele, prefix) {
      var _p = ele._private;
      var text = this.getLabelText(ele, prefix);
      var labelDims = this.calculateLabelDimensions(ele, text);
      setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, labelDims.width);
      setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, labelDims.width);
      setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, labelDims.height);
      setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, labelDims.height);
    };

    BRp$6.getLabelText = function (ele, prefix) {
      var _p = ele._private;
      var pfd = prefix ? prefix + '-' : '';
      var text = ele.pstyle(pfd + 'label').strValue;
      var textTransform = ele.pstyle('text-transform').value;

      var rscratch = function rscratch(propName, value) {
        if (value) {
          setPrefixedProperty(_p.rscratch, propName, prefix, value);
          return value;
        } else {
          return getPrefixedProperty(_p.rscratch, propName, prefix);
        }
      }; // for empty text, skip all processing


      if (!text) {
        return '';
      }

      if (textTransform == 'none') ; else if (textTransform == 'uppercase') {
        text = text.toUpperCase();
      } else if (textTransform == 'lowercase') {
        text = text.toLowerCase();
      }

      var wrapStyle = ele.pstyle('text-wrap').value;

      if (wrapStyle === 'wrap') {
        //console.log('wrap');
        var labelKey = rscratch('labelKey'); // save recalc if the label is the same as before

        if (labelKey != null && rscratch('labelWrapKey') === labelKey) {
          // console.log('wrap cache hit');
          return rscratch('labelWrapCachedText');
        } // console.log('wrap cache miss');


        var lines = text.split('\n');
        var maxW = ele.pstyle('text-max-width').pfValue;
        var wrappedLines = [];

        for (var l = 0; l < lines.length; l++) {
          var line = lines[l];
          var lineDims = this.calculateLabelDimensions(ele, line);
          var lineW = lineDims.width;

          if (lineW > maxW) {
            // line is too long
            var words = line.split(/\s+/); // NB: assume collapsed whitespace into single space

            var subline = '';

            for (var w = 0; w < words.length; w++) {
              var word = words[w];
              var testLine = subline.length === 0 ? word : subline + ' ' + word;
              var testDims = this.calculateLabelDimensions(ele, testLine);
              var testW = testDims.width;

              if (testW <= maxW) {
                // word fits on current line
                subline += word + ' ';
              } else {
                // word starts new line
                wrappedLines.push(subline);
                subline = word + ' ';
              }
            } // if there's remaining text, put it in a wrapped line


            if (!subline.match(/^\s+$/)) {
              wrappedLines.push(subline);
            }
          } else {
            // line is already short enough
            wrappedLines.push(line);
          }
        } // for


        rscratch('labelWrapCachedLines', wrappedLines);
        text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
        rscratch('labelWrapKey', labelKey); // console.log(text)
      } else if (wrapStyle === 'ellipsis') {
        var maxW = ele.pstyle('text-max-width').pfValue;
        var ellipsized = '';
        var ellipsis = "\u2026";
        var incLastCh = false;

        for (var i = 0; i < text.length; i++) {
          var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;

          if (widthWithNextCh > maxW) {
            break;
          }

          ellipsized += text[i];

          if (i === text.length - 1) {
            incLastCh = true;
          }
        }

        if (!incLastCh) {
          ellipsized += ellipsis;
        }

        return ellipsized;
      } // if ellipsize


      return text;
    };

    BRp$6.calculateLabelDimensions = function (ele, text) {
      var r = this;
      var cacheKey = hashString(text, ele._private.labelDimsKey);
      var cache = r.labelDimCache || (r.labelDimCache = []);
      var existingVal = cache[cacheKey];

      if (existingVal != null) {
        return existingVal;
      }

      var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text

      var fStyle = ele.pstyle('font-style').strValue;
      var size = sizeMult * ele.pstyle('font-size').pfValue + 'px';
      var family = ele.pstyle('font-family').strValue;
      var weight = ele.pstyle('font-weight').strValue;
      var div = this.labelCalcDiv;

      if (!div) {
        div = this.labelCalcDiv = document.createElement('div'); // eslint-disable-line no-undef

        document.body.appendChild(div); // eslint-disable-line no-undef
      }

      var ds = div.style; // from ele style

      ds.fontFamily = family;
      ds.fontStyle = fStyle;
      ds.fontSize = size;
      ds.fontWeight = weight; // forced style

      ds.position = 'absolute';
      ds.left = '-9999px';
      ds.top = '-9999px';
      ds.zIndex = '-1';
      ds.visibility = 'hidden';
      ds.pointerEvents = 'none';
      ds.padding = '0';
      ds.lineHeight = '1';

      if (ele.pstyle('text-wrap').value === 'wrap') {
        ds.whiteSpace = 'pre'; // so newlines are taken into account
      } else {
        ds.whiteSpace = 'normal';
      } // put label content in div


      div.textContent = text;
      return cache[cacheKey] = {
        width: Math.ceil(div.clientWidth / sizeMult),
        height: Math.ceil(div.clientHeight / sizeMult)
      };
    };

    BRp$6.calculateLabelAngle = function (ele, prefix) {
      var _p = ele._private;
      var rs = _p.rscratch;
      var isEdge = ele.isEdge();
      var prefixDash = prefix ? prefix + '-' : '';
      var rot = ele.pstyle(prefixDash + 'text-rotation');
      var rotStr = rot.strValue;

      if (rotStr === 'none') {
        return 0;
      } else if (isEdge && rotStr === 'autorotate') {
        return rs.labelAutoAngle;
      } else if (rotStr === 'autorotate') {
        return 0;
      } else {
        return rot.pfValue;
      }
    };

    BRp$6.calculateLabelAngles = function (ele) {
      var r = this;
      var isEdge = ele.isEdge();
      var _p = ele._private;
      var rs = _p.rscratch;
      rs.labelAngle = r.calculateLabelAngle(ele);

      if (isEdge) {
        rs.sourceLabelAngle = r.calculateLabelAngle(ele, 'source');
        rs.targetLabelAngle = r.calculateLabelAngle(ele, 'target');
      }
    };

    var BRp$7 = {};
    var TOO_SMALL_CUT_RECT = 28;
    var warnedCutRect = false;

    BRp$7.getNodeShape = function (node) {
      var r = this;
      var shape = node.pstyle('shape').value;

      if (shape === 'cutrectangle' && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
        if (!warnedCutRect) {
          warn('The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead');
          warnedCutRect = true;
        }

        return 'rectangle';
      }

      if (node.isParent()) {
        if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'cutrectangle' || shape === 'barrel') {
          return shape;
        } else {
          return 'rectangle';
        }
      }

      if (shape === 'polygon') {
        var points = node.pstyle('shape-polygon-points').value;
        return r.nodeShapes.makePolygon(points).name;
      }

      return shape;
    };

    var BRp$8 = {};

    BRp$8.registerCalculationListeners = function () {
      var cy = this.cy;
      var elesToUpdate = cy.collection();
      var r = this;

      var enqueue = function enqueue(eles) {
        var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        elesToUpdate.merge(eles);

        if (dirtyStyleCaches) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var _p = ele._private;
            var rstyle = _p.rstyle;
            rstyle.clean = false;
          }
        }
      };

      r.binder(cy).on('bounds.* dirty.*', function onDirtyBounds(e) {
        var ele = e.target;
        enqueue(ele);
      }).on('style.* background.*', function onDirtyStyle(e) {
        var ele = e.target;
        enqueue(ele, false);
      });

      var updateEleCalcs = function updateEleCalcs(willDraw) {
        if (willDraw) {
          var fns = r.onUpdateEleCalcsFns;

          for (var i = 0; i < elesToUpdate.length; i++) {
            var ele = elesToUpdate[i];

            if (ele.isNode() && !ele._private.rstyle.clean) {
              enqueue(ele.connectedEdges());
            }
          }

          if (fns) {
            for (var i = 0; i < fns.length; i++) {
              var fn = fns[i];
              fn(willDraw, elesToUpdate);
            }
          }

          r.recalculateRenderedStyle(elesToUpdate);
          elesToUpdate = cy.collection();
        }
      };

      r.flushRenderedStyleQueue = function () {
        updateEleCalcs(true);
      };

      r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
    };

    BRp$8.onUpdateEleCalcs = function (fn) {
      var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
      fns.push(fn);
    };

    BRp$8.recalculateRenderedStyle = function (eles, useCache) {
      var edges = [];
      var nodes = []; // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()

      if (this.destroyed) {
        return;
      } // use cache by default for perf


      if (useCache === undefined) {
        useCache = true;
      }

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var _p = ele._private;
        var rstyle = _p.rstyle; // only update if dirty and in graph

        if (useCache && rstyle.clean || ele.removed()) {
          continue;
        } // only update if not display: none


        if (ele.pstyle('display').value === 'none') {
          continue;
        }

        if (_p.group === 'nodes') {
          nodes.push(ele);
        } else {
          // edges
          edges.push(ele);
        }

        rstyle.clean = true;
      } // update node data from projections


      for (var i = 0; i < nodes.length; i++) {
        var ele = nodes[i];
        var _p = ele._private;
        var rstyle = _p.rstyle;
        var pos = ele.position();
        this.recalculateNodeLabelProjection(ele);
        rstyle.nodeX = pos.x;
        rstyle.nodeY = pos.y;
        rstyle.nodeW = ele.pstyle('width').pfValue;
        rstyle.nodeH = ele.pstyle('height').pfValue;
      }

      this.recalculateEdgeProjections(edges); // update edge data from projections

      for (var i = 0; i < edges.length; i++) {
        var ele = edges[i];
        var _p = ele._private;
        var rstyle = _p.rstyle;
        var rs = _p.rscratch; // update rstyle positions

        rstyle.srcX = rs.arrowStartX;
        rstyle.srcY = rs.arrowStartY;
        rstyle.tgtX = rs.arrowEndX;
        rstyle.tgtY = rs.arrowEndY;
        rstyle.midX = rs.midX;
        rstyle.midY = rs.midY;
        rstyle.labelAngle = rs.labelAngle;
        rstyle.sourceLabelAngle = rs.sourceLabelAngle;
        rstyle.targetLabelAngle = rs.targetLabelAngle;
      }
    };

    var BRp$9 = {};

    BRp$9.updateCachedGrabbedEles = function () {
      var eles = this.cachedZSortedEles;

      if (!eles) {
        // just let this be recalculated on the next z sort tick
        return;
      }

      eles.drag = [];
      eles.nondrag = [];
      var grabTargets = [];

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var rs = ele._private.rscratch;

        if (ele.grabbed() && !ele.isParent()) {
          grabTargets.push(ele);
        } else if (rs.inDragLayer) {
          eles.drag.push(ele);
        } else {
          eles.nondrag.push(ele);
        }
      } // put the grab target nodes last so it's on top of its neighbourhood


      for (var i = 0; i < grabTargets.length; i++) {
        var ele = grabTargets[i];
        eles.drag.push(ele);
      }
    };

    BRp$9.invalidateCachedZSortedEles = function () {
      this.cachedZSortedEles = null;
    };

    BRp$9.getCachedZSortedEles = function (forceRecalc) {
      if (forceRecalc || !this.cachedZSortedEles) {
        var eles = this.cy.mutableElements().toArray();
        eles.sort(zIndexSort);
        eles.interactive = eles.filter(function (ele) {
          return ele.interactive();
        });
        this.cachedZSortedEles = eles;
        this.updateCachedGrabbedEles();
      } else {
        eles = this.cachedZSortedEles;
      }

      return eles;
    };

    var BRp$a = {};
    [BRp$1, BRp$2, BRp$3, BRp$4, BRp$5, BRp$6, BRp$7, BRp$8, BRp$9].forEach(function (props) {
      extend(BRp$a, props);
    });

    var BRp$b = {};

    BRp$b.getCachedImage = function (url, crossOrigin, onLoad) {
      var r = this;
      var imageCache = r.imageCache = r.imageCache || {};
      var cache = imageCache[url];

      if (cache) {
        if (!cache.image.complete) {
          cache.image.addEventListener('load', onLoad);
        }

        return cache.image;
      } else {
        cache = imageCache[url] = imageCache[url] || {};
        var image = cache.image = new Image(); // eslint-disable-line no-undef

        image.addEventListener('load', onLoad);
        image.addEventListener('error', function () {
          image.error = true;
        }); // #1582 safari doesn't load data uris with crossOrigin properly
        // https://bugs.webkit.org/show_bug.cgi?id=123978

        var dataUriPrefix = 'data:';
        var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;

        if (!isDataUri) {
          image.crossOrigin = crossOrigin; // prevent tainted canvas
        }

        image.src = url;
        return image;
      }
    };

    var BRp$c = {};
    /* global document, window */

    BRp$c.registerBinding = function (target, event, handler, useCapture) {
      // eslint-disable-line no-unused-vars
      var args = Array.prototype.slice.apply(arguments, [1]); // copy

      var b = this.binder(target);
      return b.on.apply(b, args);
    };

    BRp$c.binder = function (tgt) {
      var r = this;
      var tgtIsDom = tgt === window || tgt === document || tgt === document.body || domElement(tgt);

      if (r.supportsPassiveEvents == null) {
        // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
        var supportsPassive = false;

        try {
          var opts = Object.defineProperty({}, 'passive', {
            get: function get() {
              supportsPassive = true;
              return true;
            }
          });
          window.addEventListener('test', null, opts);
        } catch (err) {// not supported
        }

        r.supportsPassiveEvents = supportsPassive;
      }

      var on = function on(event, handler, useCapture) {
        var args = Array.prototype.slice.call(arguments);

        if (tgtIsDom && r.supportsPassiveEvents) {
          // replace useCapture w/ opts obj
          args[2] = {
            capture: useCapture != null ? useCapture : false,
            passive: false,
            once: false
          };
        }

        r.bindings.push({
          target: tgt,
          args: args
        });
        (tgt.addEventListener || tgt.on).apply(tgt, args);
        return this;
      };

      return {
        on: on,
        addEventListener: on,
        addListener: on,
        bind: on
      };
    };

    BRp$c.nodeIsDraggable = function (node) {
      return node && node.isNode() && !node.locked() && node.grabbable();
    };

    BRp$c.nodeIsGrabbable = function (node) {
      return this.nodeIsDraggable(node) && node.interactive();
    };

    BRp$c.load = function () {
      var r = this;

      var isSelected = function isSelected(ele) {
        return ele.selected();
      };

      var triggerEvents = function triggerEvents(target, names, e, position) {
        if (target == null) {
          target = r.cy;
        }

        for (var i = 0; i < names.length; i++) {
          var name = names[i];
          target.emit({
            originalEvent: e,
            type: name,
            position: position
          });
        }
      };

      var isMultSelKeyDown = function isMultSelKeyDown(e) {
        return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
      };

      var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
        var allowPassthrough = true;

        if (r.cy.hasCompoundNodes() && down && down.isEdge()) {
          // a compound node below the edge => no passthrough panning
          for (var i = 0; downs && i < downs.length; i++) {
            var down = downs[i];

            if (down.isNode() && down.isParent()) {
              allowPassthrough = false;
              break;
            }
          }
        } else {
          allowPassthrough = true;
        }

        return allowPassthrough;
      };

      var setGrabbed = function setGrabbed(ele) {
        ele[0]._private.grabbed = true;
      };

      var setFreed = function setFreed(ele) {
        ele[0]._private.grabbed = false;
      };

      var setInDragLayer = function setInDragLayer(ele) {
        ele[0]._private.rscratch.inDragLayer = true;
      };

      var setOutDragLayer = function setOutDragLayer(ele) {
        ele[0]._private.rscratch.inDragLayer = false;
      };

      var setGrabTarget = function setGrabTarget(ele) {
        ele[0]._private.rscratch.isGrabTarget = true;
      };

      var removeGrabTarget = function removeGrabTarget(ele) {
        ele[0]._private.rscratch.isGrabTarget = false;
      };

      var addToDragList = function addToDragList(ele, opts) {
        var list = opts.addToList;
        var listHasEle = list.has(ele);

        if (!listHasEle) {
          list.merge(ele);
          setGrabbed(ele);
        }
      }; // helper function to determine which child nodes and inner edges
      // of a compound node to be dragged as well as the grabbed and selected nodes


      var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
        if (!node.cy().hasCompoundNodes()) {
          return;
        }

        if (opts.inDragLayer == null && opts.addToList == null) {
          return;
        } // nothing to do


        var innerNodes = node.descendants();

        if (opts.inDragLayer) {
          innerNodes.forEach(setInDragLayer);
          innerNodes.connectedEdges().forEach(setInDragLayer);
        }

        if (opts.addToList) {
          opts.addToList.unmerge(innerNodes);
        }
      }; // adds the given nodes and its neighbourhood to the drag layer


      var addNodesToDrag = function addNodesToDrag(nodes, opts) {
        opts = opts || {};
        var hasCompoundNodes = nodes.cy().hasCompoundNodes();

        if (opts.inDragLayer) {
          nodes.forEach(setInDragLayer);
          nodes.neighborhood().stdFilter(function (ele) {
            return !hasCompoundNodes || ele.isEdge();
          }).forEach(setInDragLayer);
        }

        if (opts.addToList) {
          nodes.forEach(function (ele) {
            addToDragList(ele, opts);
          });
        }

        addDescendantsToDrag(nodes, opts); // always add to drag
        // also add nodes and edges related to the topmost ancestor

        updateAncestorsInDragLayer(nodes, {
          inDragLayer: opts.inDragLayer
        });
        r.updateCachedGrabbedEles();
      };

      var addNodeToDrag = addNodesToDrag;

      var freeDraggedElements = function freeDraggedElements(grabbedEles) {
        if (!grabbedEles) {
          return;
        } // just go over all elements rather than doing a bunch of (possibly expensive) traversals


        r.getCachedZSortedEles().forEach(function (ele) {
          setFreed(ele);
          setOutDragLayer(ele);
          removeGrabTarget(ele);
        });
        r.updateCachedGrabbedEles();
      }; // helper function to determine which ancestor nodes and edges should go
      // to the drag layer (or should be removed from drag layer).


      var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {
        if (opts.inDragLayer == null && opts.addToList == null) {
          return;
        } // nothing to do


        if (!node.cy().hasCompoundNodes()) {
          return;
        } // find top-level parent


        var parent = node.ancestors().orphans(); // no parent node: no nodes to add to the drag layer

        if (parent.same(node)) {
          return;
        }

        var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());
        var edges = nodes.connectedEdges();

        if (opts.inDragLayer) {
          edges.forEach(setInDragLayer);
          nodes.forEach(setInDragLayer);
        }

        if (opts.addToList) {
          nodes.forEach(function (ele) {
            addToDragList(ele, opts);
          });
        }
      };

      var blurActiveDomElement = function blurActiveDomElement() {
        if (document.activeElement != null && document.activeElement.blur != null) {
          document.activeElement.blur();
        }
      };

      var haveMutationsApi = typeof MutationObserver !== 'undefined'; // watch for when the cy container is removed from the dom

      if (haveMutationsApi) {
        r.removeObserver = new MutationObserver(function (mutns) {
          // eslint-disable-line no-undef
          for (var i = 0; i < mutns.length; i++) {
            var mutn = mutns[i];
            var rNodes = mutn.removedNodes;

            if (rNodes) {
              for (var j = 0; j < rNodes.length; j++) {
                var rNode = rNodes[j];

                if (rNode === r.container) {
                  r.destroy();
                  break;
                }
              }
            }
          }
        });

        if (r.container.parentNode) {
          r.removeObserver.observe(r.container.parentNode, {
            childList: true
          });
        }
      } else {
        r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
          // eslint-disable-line no-unused-vars
          r.destroy();
        });
      }

      var onResize = util$3(function () {
        r.cy.resize();
      }, 100);

      if (haveMutationsApi) {
        r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

        r.styleObserver.observe(r.container, {
          attributes: true
        });
      } // auto resize


      r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef

      var forEachUp = function forEachUp(domEle, fn) {
        while (domEle != null) {
          fn(domEle);
          domEle = domEle.parentNode;
        }
      };

      var invalidateCoords = function invalidateCoords() {
        r.invalidateContainerClientCoordsCache();
      };

      forEachUp(r.container, function (domEle) {
        r.registerBinding(domEle, 'transitionend', invalidateCoords);
        r.registerBinding(domEle, 'animationend', invalidateCoords);
        r.registerBinding(domEle, 'scroll', invalidateCoords);
      }); // stop right click menu from appearing on cy

      r.registerBinding(r.container, 'contextmenu', function (e) {
        e.preventDefault();
      });

      var inBoxSelection = function inBoxSelection() {
        return r.selection[4] !== 0;
      };

      var eventInContainer = function eventInContainer(e) {
        // save cycles if mouse events aren't to be captured
        var containerPageCoords = r.findContainerClientCoords();
        var x = containerPageCoords[0];
        var y = containerPageCoords[1];
        var width = containerPageCoords[2];
        var height = containerPageCoords[3];
        var positions = e.touches ? e.touches : [e];
        var atLeastOnePosInside = false;

        for (var i = 0; i < positions.length; i++) {
          var p = positions[i];

          if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
            atLeastOnePosInside = true;
            break;
          }
        }

        if (!atLeastOnePosInside) {
          return false;
        }

        var container = r.container;
        var target = e.target;
        var tParent = target.parentNode;
        var containerIsTarget = false;

        while (tParent) {
          if (tParent === container) {
            containerIsTarget = true;
            break;
          }

          tParent = tParent.parentNode;
        }

        if (!containerIsTarget) {
          return false;
        } // if target is outisde cy container, then this event is not for us


        return true;
      }; // Primary key


      r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
        if (!eventInContainer(e)) {
          return;
        }

        e.preventDefault();
        blurActiveDomElement();
        r.hoverData.capture = true;
        r.hoverData.which = e.which;
        var cy = r.cy;
        var gpos = [e.clientX, e.clientY];
        var pos = r.projectIntoViewport(gpos[0], gpos[1]);
        var select = r.selection;
        var nears = r.findNearestElements(pos[0], pos[1], true, false);
        var near = nears[0];
        var draggedElements = r.dragData.possibleDragElements;
        r.hoverData.mdownPos = pos;
        r.hoverData.mdownGPos = gpos;

        var checkForTaphold = function checkForTaphold() {
          r.hoverData.tapholdCancelled = false;
          clearTimeout(r.hoverData.tapholdTimeout);
          r.hoverData.tapholdTimeout = setTimeout(function () {
            if (r.hoverData.tapholdCancelled) {
              return;
            } else {
              var ele = r.hoverData.down;

              if (ele) {
                ele.emit({
                  originalEvent: e,
                  type: 'taphold',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              } else {
                cy.emit({
                  originalEvent: e,
                  type: 'taphold',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }
            }
          }, r.tapholdDuration);
        }; // Right click button


        if (e.which == 3) {
          r.hoverData.cxtStarted = true;
          var cxtEvt = {
            originalEvent: e,
            type: 'cxttapstart',
            position: {
              x: pos[0],
              y: pos[1]
            }
          };

          if (near) {
            near.activate();
            near.emit(cxtEvt);
            r.hoverData.down = near;
          } else {
            cy.emit(cxtEvt);
          }

          r.hoverData.downTime = new Date().getTime();
          r.hoverData.cxtDragged = false; // Primary button
        } else if (e.which == 1) {
          if (near) {
            near.activate();
          } // Element dragging


          {
            // If something is under the cursor and it is draggable, prepare to grab it
            if (near != null) {
              if (r.nodeIsGrabbable(near)) {
                var makeEvent = function makeEvent(type) {
                  return {
                    originalEvent: e,
                    type: type,
                    position: {
                      x: pos[0],
                      y: pos[1]
                    }
                  };
                };

                var triggerGrab = function triggerGrab(ele) {
                  ele.emit(makeEvent('grab'));
                };

                setGrabTarget(near);

                if (!near.selected()) {
                  draggedElements = r.dragData.possibleDragElements = cy.collection();
                  addNodeToDrag(near, {
                    addToList: draggedElements
                  });
                  near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
                } else {
                  draggedElements = r.dragData.possibleDragElements = cy.collection();
                  var selectedNodes = cy.$(function (ele) {
                    return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
                  });
                  addNodesToDrag(selectedNodes, {
                    addToList: draggedElements
                  });
                  near.emit(makeEvent('grabon'));
                  selectedNodes.forEach(triggerGrab);
                }

                r.redrawHint('eles', true);
                r.redrawHint('drag', true);
              }
            }

            r.hoverData.down = near;
            r.hoverData.downs = nears;
            r.hoverData.downTime = new Date().getTime();
          }
          triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
            x: pos[0],
            y: pos[1]
          });

          if (near == null) {
            select[4] = 1;
            r.data.bgActivePosistion = {
              x: pos[0],
              y: pos[1]
            };
            r.redrawHint('select', true);
            r.redraw();
          } else if (near.isEdge()) {
            select[4] = 1; // for future pan
          }

          checkForTaphold();
        } // Initialize selection box coordinates


        select[0] = select[2] = pos[0];
        select[1] = select[3] = pos[1];
      }, false);
      r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {
        // eslint-disable-line no-undef
        var capture = r.hoverData.capture;

        if (!capture && !eventInContainer(e)) {
          return;
        }

        var preventDefault = false;
        var cy = r.cy;
        var zoom = cy.zoom();
        var gpos = [e.clientX, e.clientY];
        var pos = r.projectIntoViewport(gpos[0], gpos[1]);
        var mdownPos = r.hoverData.mdownPos;
        var mdownGPos = r.hoverData.mdownGPos;
        var select = r.selection;
        var near = null;

        if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
          near = r.findNearestElement(pos[0], pos[1], true, false);
        }

        var last = r.hoverData.last;
        var down = r.hoverData.down;
        var disp = [pos[0] - select[2], pos[1] - select[3]];
        var draggedElements = r.dragData.possibleDragElements;
        var isOverThresholdDrag;

        if (mdownGPos) {
          var dx = gpos[0] - mdownGPos[0];
          var dx2 = dx * dx;
          var dy = gpos[1] - mdownGPos[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
        }

        var multSelKeyDown = isMultSelKeyDown(e);

        if (isOverThresholdDrag) {
          r.hoverData.tapholdCancelled = true;
        }

        var updateDragDelta = function updateDragDelta() {
          var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

          if (dragDelta.length === 0) {
            dragDelta.push(disp[0]);
            dragDelta.push(disp[1]);
          } else {
            dragDelta[0] += disp[0];
            dragDelta[1] += disp[1];
          }
        };

        preventDefault = true;
        triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
          x: pos[0],
          y: pos[1]
        });

        var goIntoBoxMode = function goIntoBoxMode() {
          r.data.bgActivePosistion = undefined;

          if (!r.hoverData.selecting) {
            cy.emit({
              originalEvent: e,
              type: 'boxstart',
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }

          select[4] = 1;
          r.hoverData.selecting = true;
          r.redrawHint('select', true);
          r.redraw();
        }; // trigger context drag if rmouse down


        if (r.hoverData.which === 3) {
          // but only if over threshold
          if (isOverThresholdDrag) {
            var cxtEvt = {
              originalEvent: e,
              type: 'cxtdrag',
              position: {
                x: pos[0],
                y: pos[1]
              }
            };

            if (down) {
              down.emit(cxtEvt);
            } else {
              cy.emit(cxtEvt);
            }

            r.hoverData.cxtDragged = true;

            if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {
              if (r.hoverData.cxtOver) {
                r.hoverData.cxtOver.emit({
                  originalEvent: e,
                  type: 'cxtdragout',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }

              r.hoverData.cxtOver = near;

              if (near) {
                near.emit({
                  originalEvent: e,
                  type: 'cxtdragover',
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                });
              }
            }
          } // Check if we are drag panning the entire graph

        } else if (r.hoverData.dragging) {
          preventDefault = true;

          if (cy.panningEnabled() && cy.userPanningEnabled()) {
            var deltaP;

            if (r.hoverData.justStartedPan) {
              var mdPos = r.hoverData.mdownPos;
              deltaP = {
                x: (pos[0] - mdPos[0]) * zoom,
                y: (pos[1] - mdPos[1]) * zoom
              };
              r.hoverData.justStartedPan = false;
            } else {
              deltaP = {
                x: disp[0] * zoom,
                y: disp[1] * zoom
              };
            }

            cy.panBy(deltaP);
            r.hoverData.dragged = true;
          } // Needs reproject due to pan changing viewport


          pos = r.projectIntoViewport(e.clientX, e.clientY); // Checks primary button down & out of time & mouse not moved much
        } else if (select[4] == 1 && (down == null || down.isEdge())) {
          if (isOverThresholdDrag) {
            if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
              goIntoBoxMode();
            } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
              var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);

              if (allowPassthrough) {
                r.hoverData.dragging = true;
                r.hoverData.justStartedPan = true;
                select[4] = 0;
                r.data.bgActivePosistion = array2point(mdownPos);
                r.redrawHint('select', true);
                r.redraw();
              }
            }

            if (down && down.isEdge() && down.active()) {
              down.unactivate();
            }
          }
        } else {
          if (down && down.isEdge() && down.active()) {
            down.unactivate();
          }

          if ((!down || !down.grabbed()) && near != last) {
            if (last) {
              triggerEvents(last, ['mouseout', 'tapdragout'], e, {
                x: pos[0],
                y: pos[1]
              });
            }

            if (near) {
              triggerEvents(near, ['mouseover', 'tapdragover'], e, {
                x: pos[0],
                y: pos[1]
              });
            }

            r.hoverData.last = near;
          }

          if (down) {
            if (isOverThresholdDrag) {
              // then we can take action
              if (cy.boxSelectionEnabled() && multSelKeyDown) {
                // then selection overrides
                if (down && down.grabbed()) {
                  freeDraggedElements(draggedElements);
                  down.emit('freeon');
                  draggedElements.emit('free');

                  if (r.dragData.didDrag) {
                    down.emit('dragfreeon');
                    draggedElements.emit('dragfree');
                  }
                }

                goIntoBoxMode();
              } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
                // drag node
                var justStartedDrag = !r.dragData.didDrag;

                if (justStartedDrag) {
                  r.redrawHint('eles', true);
                }

                r.dragData.didDrag = true; // indicate that we actually did drag the node

                var toTrigger = cy.collection(); // now, add the elements to the drag layer if not done already

                if (!r.hoverData.draggingEles) {
                  addNodesToDrag(draggedElements, {
                    inDragLayer: true
                  });
                }

                var totalShift = {
                  x: 0,
                  y: 0
                };

                if (number(disp[0]) && number(disp[1])) {
                  totalShift.x += disp[0];
                  totalShift.y += disp[1];

                  if (justStartedDrag) {
                    var dragDelta = r.hoverData.dragDelta;

                    if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                      totalShift.x += dragDelta[0];
                      totalShift.y += dragDelta[1];
                    }
                  }
                }

                for (var i = 0; i < draggedElements.length; i++) {
                  var dEle = draggedElements[i];

                  if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
                    toTrigger.merge(dEle);
                  }
                }

                r.hoverData.draggingEles = true;
                toTrigger.silentShift(totalShift).emit('position drag');
                r.redrawHint('drag', true);
                r.redraw();
              }
            } else {
              // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
              updateDragDelta();
            }
          } // prevent the dragging from triggering text selection on the page


          preventDefault = true;
        }

        select[2] = pos[0];
        select[3] = pos[1];

        if (preventDefault) {
          if (e.stopPropagation) e.stopPropagation();
          if (e.preventDefault) e.preventDefault();
          return false;
        }
      }, false);
      r.registerBinding(window, 'mouseup', function mouseupHandler(e) {
        // eslint-disable-line no-undef
        var capture = r.hoverData.capture;

        if (!capture) {
          return;
        }

        r.hoverData.capture = false;
        var cy = r.cy;
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        var select = r.selection;
        var near = r.findNearestElement(pos[0], pos[1], true, false);
        var draggedElements = r.dragData.possibleDragElements;
        var down = r.hoverData.down;
        var multSelKeyDown = isMultSelKeyDown(e);

        if (r.data.bgActivePosistion) {
          r.redrawHint('select', true);
          r.redraw();
        }

        r.hoverData.tapholdCancelled = true;
        r.data.bgActivePosistion = undefined; // not active bg now

        if (down) {
          down.unactivate();
        }

        if (r.hoverData.which === 3) {
          var cxtEvt = {
            originalEvent: e,
            type: 'cxttapend',
            position: {
              x: pos[0],
              y: pos[1]
            }
          };

          if (down) {
            down.emit(cxtEvt);
          } else {
            cy.emit(cxtEvt);
          }

          if (!r.hoverData.cxtDragged) {
            var cxtTap = {
              originalEvent: e,
              type: 'cxttap',
              position: {
                x: pos[0],
                y: pos[1]
              }
            };

            if (down) {
              down.emit(cxtTap);
            } else {
              cy.emit(cxtTap);
            }
          }

          r.hoverData.cxtDragged = false;
          r.hoverData.which = null;
        } else if (r.hoverData.which === 1) {
          triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
            x: pos[0],
            y: pos[1]
          });

          if (!r.dragData.didDrag // didn't move a node around
          && !r.hoverData.dragged // didn't pan
          && !r.hoverData.selecting // not box selection
          && !r.hoverData.isOverThresholdDrag // didn't move too much
          ) {
              triggerEvents(down, ['click', 'tap', 'vclick'], e, {
                x: pos[0],
                y: pos[1]
              });
            } // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something


          if (down == null && // not mousedown on node
          !r.dragData.didDrag // didn't move the node around
          && !r.hoverData.selecting // not box selection
          && !r.hoverData.dragged // didn't pan
          && !isMultSelKeyDown(e)) {
            cy.$(isSelected).unselect(['tapunselect']);

            if (draggedElements.length > 0) {
              r.redrawHint('eles', true);
            }

            r.dragData.possibleDragElements = draggedElements = cy.collection();
          } // Single selection


          if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
            if (near != null && near._private.selectable) {
              if (r.hoverData.dragging) ; else if (cy.selectionType() === 'additive' || multSelKeyDown) {
                if (near.selected()) {
                  near.unselect(['tapunselect']);
                } else {
                  near.select(['tapselect']);
                }
              } else {
                if (!multSelKeyDown) {
                  cy.$(isSelected).unmerge(near).unselect(['tapunselect']);
                  near.select(['tapselect']);
                }
              }

              r.redrawHint('eles', true);
            }
          }

          if (r.hoverData.selecting) {
            var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
            r.redrawHint('select', true);

            if (box.length > 0) {
              r.redrawHint('eles', true);
            }

            cy.emit({
              type: 'boxend',
              originalEvent: e,
              position: {
                x: pos[0],
                y: pos[1]
              }
            });

            var eleWouldBeSelected = function eleWouldBeSelected(ele) {
              return ele.selectable() && !ele.selected();
            };

            if (cy.selectionType() === 'additive') {
              box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
            } else {
              if (!multSelKeyDown) {
                cy.$(isSelected).unmerge(box).unselect();
              }

              box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
            } // always need redraw in case eles unselectable


            r.redraw();
          } // Cancel drag pan


          if (r.hoverData.dragging) {
            r.hoverData.dragging = false;
            r.redrawHint('select', true);
            r.redrawHint('eles', true);
            r.redraw();
          }

          if (!select[4]) {
            r.redrawHint('drag', true);
            r.redrawHint('eles', true);
            var downWasGrabbed = down && down.grabbed();
            freeDraggedElements(draggedElements);

            if (downWasGrabbed) {
              down.emit('freeon');
              draggedElements.emit('free');

              if (r.dragData.didDrag) {
                down.emit('dragfreeon');
                draggedElements.emit('dragfree');
              }
            }
          }
        } // else not right mouse


        select[4] = 0;
        r.hoverData.down = null;
        r.hoverData.cxtStarted = false;
        r.hoverData.draggingEles = false;
        r.hoverData.selecting = false;
        r.hoverData.isOverThresholdDrag = false;
        r.dragData.didDrag = false;
        r.hoverData.dragged = false;
        r.hoverData.dragDelta = [];
        r.hoverData.mdownPos = null;
        r.hoverData.mdownGPos = null;
      }, false);

      var wheelHandler = function wheelHandler(e) {
        if (r.scrollingPage) {
          return;
        } // while scrolling, ignore wheel-to-zoom


        var cy = r.cy;
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        var rpos = [pos[0] * cy.zoom() + cy.pan().x, pos[1] * cy.zoom() + cy.pan().y];

        if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
          // if pan dragging or cxt dragging, wheel movements make no zoom
          e.preventDefault();
          return;
        }

        if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
          e.preventDefault();
          r.data.wheelZooming = true;
          clearTimeout(r.data.wheelTimeout);
          r.data.wheelTimeout = setTimeout(function () {
            r.data.wheelZooming = false;
            r.redrawHint('eles', true);
            r.redraw();
          }, 150);
          var diff;

          if (e.deltaY != null) {
            diff = e.deltaY / -250;
          } else if (e.wheelDeltaY != null) {
            diff = e.wheelDeltaY / 1000;
          } else {
            diff = e.wheelDelta / 1000;
          }

          diff = diff * r.wheelSensitivity;
          var needsWheelFix = e.deltaMode === 1;

          if (needsWheelFix) {
            // fixes slow wheel events on ff/linux and ff/windows
            diff *= 33;
          }

          cy.zoom({
            level: cy.zoom() * Math.pow(10, diff),
            renderedPosition: {
              x: rpos[0],
              y: rpos[1]
            }
          });
        }
      }; // Functions to help with whether mouse wheel should trigger zooming
      // --


      r.registerBinding(r.container, 'wheel', wheelHandler, true); // disable nonstandard wheel events
      // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
      // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
      // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

      r.registerBinding(window, 'scroll', function scrollHandler(e) {
        // eslint-disable-line no-unused-vars
        r.scrollingPage = true;
        clearTimeout(r.scrollingPageTimeout);
        r.scrollingPageTimeout = setTimeout(function () {
          r.scrollingPage = false;
        }, 250);
      }, true); // Functions to help with handling mouseout/mouseover on the Cytoscape container
      // Handle mouseout on Cytoscape container

      r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        r.cy.emit({
          originalEvent: e,
          type: 'mouseout',
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }, false);
      r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
        var pos = r.projectIntoViewport(e.clientX, e.clientY);
        r.cy.emit({
          originalEvent: e,
          type: 'mouseover',
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }, false);
      var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom

      var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom

      var center1, modelCenter1; // center point on start pinch to zoom

      var offsetLeft, offsetTop;
      var containerWidth, containerHeight;
      var twoFingersStartInside;

      var distance = function distance(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      };

      var distanceSq = function distanceSq(x1, y1, x2, y2) {
        return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
      };

      var touchstartHandler;
      r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
        if (!eventInContainer(e)) {
          return;
        }

        blurActiveDomElement();
        r.touchData.capture = true;
        r.data.bgActivePosistion = undefined;
        var cy = r.cy;
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;

        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }

        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }

        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        } // record starting points for pinch-to-zoom


        if (e.touches[1]) {
          freeDraggedElements(r.dragData.touchDragEles);
          var offsets = r.findContainerClientCoords();
          offsetLeft = offsets[0];
          offsetTop = offsets[1];
          containerWidth = offsets[2];
          containerHeight = offsets[3];
          f1x1 = e.touches[0].clientX - offsetLeft;
          f1y1 = e.touches[0].clientY - offsetTop;
          f2x1 = e.touches[1].clientX - offsetLeft;
          f2y1 = e.touches[1].clientY - offsetTop;
          twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
          var pan = cy.pan();
          var zoom = cy.zoom();
          distance1 = distance(f1x1, f1y1, f2x1, f2y1);
          distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
          center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
          modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom]; // consider context tap

          var cxtDistThreshold = 200;
          var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;

          if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
            var near1 = r.findNearestElement(now[0], now[1], true, true);
            var near2 = r.findNearestElement(now[2], now[3], true, true);

            if (near1 && near1.isNode()) {
              near1.activate().emit({
                originalEvent: e,
                type: 'cxttapstart',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
              r.touchData.start = near1;
            } else if (near2 && near2.isNode()) {
              near2.activate().emit({
                originalEvent: e,
                type: 'cxttapstart',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
              r.touchData.start = near2;
            } else {
              cy.emit({
                originalEvent: e,
                type: 'cxttapstart',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }

            if (r.touchData.start) {
              r.touchData.start._private.grabbed = false;
            }

            r.touchData.cxt = true;
            r.touchData.cxtDragged = false;
            r.data.bgActivePosistion = undefined;
            r.redraw();
            return;
          }
        }

        if (e.touches[2]) ; else if (e.touches[1]) ; else if (e.touches[0]) {
          var nears = r.findNearestElements(now[0], now[1], true, true);
          var near = nears[0];

          if (near != null) {
            near.activate();
            r.touchData.start = near;
            r.touchData.starts = nears;

            if (r.nodeIsGrabbable(near)) {
              var draggedEles = r.dragData.touchDragEles = cy.collection();
              var selectedNodes = null;
              r.redrawHint('eles', true);
              r.redrawHint('drag', true);

              if (near.selected()) {
                // reset drag elements, since near will be added again
                selectedNodes = cy.$(function (ele) {
                  return ele.selected() && r.nodeIsGrabbable(ele);
                });
                addNodesToDrag(selectedNodes, {
                  addToList: draggedEles
                });
              } else {
                addNodeToDrag(near, {
                  addToList: draggedEles
                });
              }

              setGrabTarget(near);

              var makeEvent = function makeEvent(type) {
                return {
                  originalEvent: e,
                  type: type,
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                };
              };

              near.emit(makeEvent('grabon'));

              if (selectedNodes) {
                selectedNodes.forEach(function (n) {
                  n.emit(makeEvent('grab'));
                });
              } else {
                near.emit(makeEvent('grab'));
              }
            }
          }

          triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
            x: now[0],
            y: now[1]
          });

          if (near == null) {
            r.data.bgActivePosistion = {
              x: pos[0],
              y: pos[1]
            };
            r.redrawHint('select', true);
            r.redraw();
          } // Tap, taphold
          // -----


          r.touchData.singleTouchMoved = false;
          r.touchData.singleTouchStartTime = +new Date();
          clearTimeout(r.touchData.tapholdTimeout);
          r.touchData.tapholdTimeout = setTimeout(function () {
            if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
            && !r.touchData.selecting // box selection shouldn't allow taphold through
            ) {
                triggerEvents(r.touchData.start, ['taphold'], e, {
                  x: now[0],
                  y: now[1]
                });
              }
          }, r.tapholdDuration);
        }

        if (e.touches.length >= 1) {
          var sPos = r.touchData.startPosition = [];

          for (var i = 0; i < now.length; i++) {
            sPos[i] = earlier[i] = now[i];
          }

          var touch0 = e.touches[0];
          r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
        }
      }, false);
      var touchmoveHandler;
      r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
        // eslint-disable-line no-undef
        var capture = r.touchData.capture;

        if (!capture && !eventInContainer(e)) {
          return;
        }

        var select = r.selection;
        var cy = r.cy;
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;
        var zoom = cy.zoom();

        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }

        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }

        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }

        var startGPos = r.touchData.startGPosition;
        var isOverThresholdDrag;

        if (capture && e.touches[0] && startGPos) {
          var disp = [];

          for (var j = 0; j < now.length; j++) {
            disp[j] = now[j] - earlier[j];
          }

          var dx = e.touches[0].clientX - startGPos[0];
          var dx2 = dx * dx;
          var dy = e.touches[0].clientY - startGPos[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
        } // context swipe cancelling


        if (capture && r.touchData.cxt) {
          e.preventDefault();
          var f1x2 = e.touches[0].clientX - offsetLeft,
              f1y2 = e.touches[0].clientY - offsetTop;
          var f2x2 = e.touches[1].clientX - offsetLeft,
              f2y2 = e.touches[1].clientY - offsetTop; // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );

          var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
          var factorSq = distance2Sq / distance1Sq;
          var distThreshold = 150;
          var distThresholdSq = distThreshold * distThreshold;
          var factorThreshold = 1.5;
          var factorThresholdSq = factorThreshold * factorThreshold; // cancel ctx gestures if the distance b/t the fingers increases

          if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
            r.touchData.cxt = false;
            r.data.bgActivePosistion = undefined;
            r.redrawHint('select', true);
            var cxtEvt = {
              originalEvent: e,
              type: 'cxttapend',
              position: {
                x: now[0],
                y: now[1]
              }
            };

            if (r.touchData.start) {
              r.touchData.start.unactivate().emit(cxtEvt);
              r.touchData.start = null;
            } else {
              cy.emit(cxtEvt);
            }
          }
        } // context swipe


        if (capture && r.touchData.cxt) {
          var cxtEvt = {
            originalEvent: e,
            type: 'cxtdrag',
            position: {
              x: now[0],
              y: now[1]
            }
          };
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);

          if (r.touchData.start) {
            r.touchData.start.emit(cxtEvt);
          } else {
            cy.emit(cxtEvt);
          }

          if (r.touchData.start) {
            r.touchData.start._private.grabbed = false;
          }

          r.touchData.cxtDragged = true;
          var near = r.findNearestElement(now[0], now[1], true, true);

          if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {
            if (r.touchData.cxtOver) {
              r.touchData.cxtOver.emit({
                originalEvent: e,
                type: 'cxtdragout',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }

            r.touchData.cxtOver = near;

            if (near) {
              near.emit({
                originalEvent: e,
                type: 'cxtdragover',
                position: {
                  x: now[0],
                  y: now[1]
                }
              });
            }
          } // box selection

        } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
          e.preventDefault();
          r.data.bgActivePosistion = undefined;
          this.lastThreeTouch = +new Date();

          if (!r.touchData.selecting) {
            cy.emit({
              originalEvent: e,
              type: 'boxstart',
              position: {
                x: now[0],
                y: now[1]
              }
            });
          }

          r.touchData.selecting = true;
          r.redrawHint('select', true);

          if (!select || select.length === 0 || select[0] === undefined) {
            select[0] = (now[0] + now[2] + now[4]) / 3;
            select[1] = (now[1] + now[3] + now[5]) / 3;
            select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
            select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
          } else {
            select[2] = (now[0] + now[2] + now[4]) / 3;
            select[3] = (now[1] + now[3] + now[5]) / 3;
          }

          select[4] = 1;
          r.touchData.selecting = true;
          r.redraw(); // pinch to zoom
        } else if (capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
          // two fingers => pinch to zoom
          e.preventDefault();
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
          var draggedEles = r.dragData.touchDragEles;

          if (draggedEles) {
            r.redrawHint('drag', true);

            for (var i = 0; i < draggedEles.length; i++) {
              var de_p = draggedEles[i]._private;
              de_p.grabbed = false;
              de_p.rscratch.inDragLayer = false;
            }
          }

          var _start = r.touchData.start; // (x2, y2) for fingers 1 and 2

          var f1x2 = e.touches[0].clientX - offsetLeft,
              f1y2 = e.touches[0].clientY - offsetTop;
          var f2x2 = e.touches[1].clientX - offsetLeft,
              f2y2 = e.touches[1].clientY - offsetTop;
          var distance2 = distance(f1x2, f1y2, f2x2, f2y2); // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
          // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );

          var factor = distance2 / distance1;

          if (twoFingersStartInside) {
            // delta finger1
            var df1x = f1x2 - f1x1;
            var df1y = f1y2 - f1y1; // delta finger 2

            var df2x = f2x2 - f2x1;
            var df2y = f2y2 - f2y1; // translation is the normalised vector of the two fingers movement
            // i.e. so pinching cancels out and moving together pans

            var tx = (df1x + df2x) / 2;
            var ty = (df1y + df2y) / 2; // now calculate the zoom

            var zoom1 = cy.zoom();
            var zoom2 = zoom1 * factor;
            var pan1 = cy.pan(); // the model center point converted to the current rendered pos

            var ctrx = modelCenter1[0] * zoom1 + pan1.x;
            var ctry = modelCenter1[1] * zoom1 + pan1.y;
            var pan2 = {
              x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
              y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
            }; // remove dragged eles

            if (_start && _start.active()) {
              var draggedEles = r.dragData.touchDragEles;
              freeDraggedElements(draggedEles);
              r.redrawHint('drag', true);
              r.redrawHint('eles', true);

              _start.unactivate().emit('freeon');

              draggedEles.emit('free');

              if (r.dragData.didDrag) {
                _start.emit('dragfreeon');

                draggedEles.emit('dragfree');
              }
            }

            cy.viewport({
              zoom: zoom2,
              pan: pan2,
              cancelOnFailedZoom: true
            });
            distance1 = distance2;
            f1x1 = f1x2;
            f1y1 = f1y2;
            f2x1 = f2x2;
            f2y1 = f2y2;
            r.pinching = true;
          } // Re-project


          if (e.touches[0]) {
            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
            now[0] = pos[0];
            now[1] = pos[1];
          }

          if (e.touches[1]) {
            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
            now[2] = pos[0];
            now[3] = pos[1];
          }

          if (e.touches[2]) {
            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
            now[4] = pos[0];
            now[5] = pos[1];
          }
        } else if (e.touches[0]) {
          var start = r.touchData.start;
          var last = r.touchData.last;
          var near;

          if (!r.hoverData.draggingEles && !r.swipePanning) {
            near = r.findNearestElement(now[0], now[1], true, true);
          }

          if (capture && start != null) {
            e.preventDefault();
          } // dragging nodes


          if (capture && start != null && r.nodeIsDraggable(start)) {
            if (isOverThresholdDrag) {
              // then dragging can happen
              var draggedEles = r.dragData.touchDragEles;
              var justStartedDrag = !r.dragData.didDrag;

              if (justStartedDrag) {
                addNodesToDrag(draggedEles, {
                  inDragLayer: true
                });
              }

              r.dragData.didDrag = true;
              var totalShift = {
                x: 0,
                y: 0
              };

              if (number(disp[0]) && number(disp[1])) {
                totalShift.x += disp[0];
                totalShift.y += disp[1];

                if (justStartedDrag) {
                  r.redrawHint('eles', true);
                  var dragDelta = r.touchData.dragDelta;

                  if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                    totalShift.x += dragDelta[0];
                    totalShift.y += dragDelta[1];
                  }
                }
              }

              r.hoverData.draggingEles = true;
              draggedEles.silentShift(totalShift).emit('position drag');
              r.redrawHint('drag', true);

              if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {
                r.redrawHint('eles', true);
              }

              r.redraw();
            } else {
              // otherise keep track of drag delta for later
              var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

              if (dragDelta.length === 0) {
                dragDelta.push(disp[0]);
                dragDelta.push(disp[1]);
              } else {
                dragDelta[0] += disp[0];
                dragDelta[1] += disp[1];
              }
            }
          } // touchmove


          {
            triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
              x: now[0],
              y: now[1]
            });

            if ((!start || !start.grabbed()) && near != last) {
              if (last) {
                last.emit({
                  originalEvent: e,
                  type: 'tapdragout',
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                });
              }

              if (near) {
                near.emit({
                  originalEvent: e,
                  type: 'tapdragover',
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                });
              }
            }

            r.touchData.last = near;
          } // check to cancel taphold

          if (capture) {
            for (var i = 0; i < now.length; i++) {
              if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {
                r.touchData.singleTouchMoved = true;
              }
            }
          } // panning


          if (capture && (start == null || start.isEdge()) && cy.panningEnabled() && cy.userPanningEnabled()) {
            var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);

            if (allowPassthrough) {
              e.preventDefault();

              if (r.swipePanning) {
                cy.panBy({
                  x: disp[0] * zoom,
                  y: disp[1] * zoom
                });
              } else if (isOverThresholdDrag) {
                r.swipePanning = true;
                cy.panBy({
                  x: dx * zoom,
                  y: dy * zoom
                });

                if (start) {
                  start.unactivate();

                  if (!r.data.bgActivePosistion) {
                    r.data.bgActivePosistion = array2point(r.touchData.startPosition);
                  }

                  r.redrawHint('select', true);
                  r.touchData.start = null;
                }
              }
            } // Re-project


            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
            now[0] = pos[0];
            now[1] = pos[1];
          }
        }

        for (var j = 0; j < now.length; j++) {
          earlier[j] = now[j];
        } // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning


        if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
          r.redraw();
        }
      }, false);
      var touchcancelHandler;
      r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
        // eslint-disable-line no-unused-vars
        var start = r.touchData.start;
        r.touchData.capture = false;

        if (start) {
          start.unactivate();
        }
      });
      var touchendHandler;
      r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {
        // eslint-disable-line no-unused-vars
        var start = r.touchData.start;
        var capture = r.touchData.capture;

        if (capture) {
          if (e.touches.length === 0) {
            r.touchData.capture = false;
          }

          e.preventDefault();
        } else {
          return;
        }

        var select = r.selection;
        r.swipePanning = false;
        r.hoverData.draggingEles = false;
        var cy = r.cy;
        var zoom = cy.zoom();
        var now = r.touchData.now;
        var earlier = r.touchData.earlier;

        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }

        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }

        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }

        if (start) {
          start.unactivate();
        }

        var ctxTapend;

        if (r.touchData.cxt) {
          ctxTapend = {
            originalEvent: e,
            type: 'cxttapend',
            position: {
              x: now[0],
              y: now[1]
            }
          };

          if (start) {
            start.emit(ctxTapend);
          } else {
            cy.emit(ctxTapend);
          }

          if (!r.touchData.cxtDragged) {
            var ctxTap = {
              originalEvent: e,
              type: 'cxttap',
              position: {
                x: now[0],
                y: now[1]
              }
            };

            if (start) {
              start.emit(ctxTap);
            } else {
              cy.emit(ctxTap);
            }
          }

          if (r.touchData.start) {
            r.touchData.start._private.grabbed = false;
          }

          r.touchData.cxt = false;
          r.touchData.start = null;
          r.redraw();
          return;
        } // no more box selection if we don't have three fingers


        if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
          r.touchData.selecting = false;
          var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
          select[0] = undefined;
          select[1] = undefined;
          select[2] = undefined;
          select[3] = undefined;
          select[4] = 0;
          r.redrawHint('select', true);
          cy.emit({
            type: 'boxend',
            originalEvent: e,
            position: {
              x: now[0],
              y: now[1]
            }
          });

          var eleWouldBeSelected = function eleWouldBeSelected(ele) {
            return ele.selectable() && !ele.selected();
          };

          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');

          if (box.nonempty()) {
            r.redrawHint('eles', true);
          }

          r.redraw();
        }

        if (start != null) {
          start.unactivate();
        }

        if (e.touches[2]) {
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
        } else if (e.touches[1]) ; else if (e.touches[0]) ; else if (!e.touches[0]) {
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
          var draggedEles = r.dragData.touchDragEles;

          if (start != null) {
            var startWasGrabbed = start._private.grabbed;
            freeDraggedElements(draggedEles);
            r.redrawHint('drag', true);
            r.redrawHint('eles', true);

            if (startWasGrabbed) {
              start.emit('freeon');
              draggedEles.emit('free');

              if (r.dragData.didDrag) {
                start.emit('dragfreeon');
                draggedEles.emit('dragfree');
              }
            }

            triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
              x: now[0],
              y: now[1]
            });
            start.unactivate();
            r.touchData.start = null;
          } else {
            var near = r.findNearestElement(now[0], now[1], true, true);
            triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
              x: now[0],
              y: now[1]
            });
          }

          var dx = r.touchData.startPosition[0] - now[0];
          var dx2 = dx * dx;
          var dy = r.touchData.startPosition[1] - now[1];
          var dy2 = dy * dy;
          var dist2 = dx2 + dy2;
          var rdist2 = dist2 * zoom * zoom; // Tap event, roughly same as mouse click event for touch

          if (!r.touchData.singleTouchMoved) {
            if (!start) {
              cy.$(':selected').unselect(['tapunselect']);
            }

            triggerEvents(start, ['tap', 'vclick'], e, {
              x: now[0],
              y: now[1]
            });
          } // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance


          if (start != null && !r.dragData.didDrag // didn't drag nodes around
          && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
          ) {
              if (cy.selectionType() === 'single') {
                cy.$(isSelected).unmerge(start).unselect(['tapunselect']);
                start.select(['tapselect']);
              } else {
                if (start.selected()) {
                  start.unselect(['tapunselect']);
                } else {
                  start.select(['tapselect']);
                }
              }

              r.redrawHint('eles', true);
            }

          r.touchData.singleTouchMoved = true;
        }

        for (var j = 0; j < now.length; j++) {
          earlier[j] = now[j];
        }

        r.dragData.didDrag = false; // reset for next mousedown

        if (e.touches.length === 0) {
          r.touchData.dragDelta = [];
          r.touchData.startPosition = null;
          r.touchData.startGPosition = null;
        }

        if (e.touches.length < 2) {
          r.pinching = false;
          r.redrawHint('eles', true);
          r.redraw();
        } //r.redraw();

      }, false); // fallback compatibility layer for ms pointer events

      if (typeof TouchEvent === 'undefined') {
        var pointers = [];

        var makeTouch = function makeTouch(e) {
          return {
            clientX: e.clientX,
            clientY: e.clientY,
            force: 1,
            identifier: e.pointerId,
            pageX: e.pageX,
            pageY: e.pageY,
            radiusX: e.width / 2,
            radiusY: e.height / 2,
            screenX: e.screenX,
            screenY: e.screenY,
            target: e.target
          };
        };

        var makePointer = function makePointer(e) {
          return {
            event: e,
            touch: makeTouch(e)
          };
        };

        var addPointer = function addPointer(e) {
          pointers.push(makePointer(e));
        };

        var removePointer = function removePointer(e) {
          for (var i = 0; i < pointers.length; i++) {
            var p = pointers[i];

            if (p.event.pointerId === e.pointerId) {
              pointers.splice(i, 1);
              return;
            }
          }
        };

        var updatePointer = function updatePointer(e) {
          var p = pointers.filter(function (p) {
            return p.event.pointerId === e.pointerId;
          })[0];
          p.event = e;
          p.touch = makeTouch(e);
        };

        var addTouchesToEvent = function addTouchesToEvent(e) {
          e.touches = pointers.map(function (p) {
            return p.touch;
          });
        };

        var pointerIsMouse = function pointerIsMouse(e) {
          return e.pointerType === 'mouse' || e.pointerType === 4;
        };

        r.registerBinding(r.container, 'pointerdown', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          e.preventDefault();
          addPointer(e);
          addTouchesToEvent(e);
          touchstartHandler(e);
        });
        r.registerBinding(r.container, 'pointerup', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          removePointer(e);
          addTouchesToEvent(e);
          touchendHandler(e);
        });
        r.registerBinding(r.container, 'pointercancel', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          removePointer(e);
          addTouchesToEvent(e);
          touchcancelHandler(e);
        });
        r.registerBinding(r.container, 'pointermove', function (e) {
          if (pointerIsMouse(e)) {
            return;
          } // mouse already handled


          e.preventDefault();
          updatePointer(e);
          addTouchesToEvent(e);
          touchmoveHandler(e);
        });
      }
    };

    var BRp$d = {};

    BRp$d.generatePolygon = function (name, points) {
      return this.nodeShapes[name] = {
        renderer: this,
        name: name,
        points: points,
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
        }
      };
    };

    BRp$d.generateEllipse = function () {
      return this.nodeShapes['ellipse'] = {
        renderer: this,
        name: 'ellipse',
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          return checkInEllipse(x, y, width, height, centerX, centerY, padding);
        }
      };
    };

    BRp$d.generateRoundRectangle = function () {
      return this.nodeShapes['round-rectangle'] = this.nodeShapes['roundrectangle'] = {
        renderer: this,
        name: 'round-rectangle',
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var cornerRadius = getRoundRectangleRadius(width, height);
          var diam = cornerRadius * 2; // Check hBox

          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
            return true;
          } // Check top left quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
            return true;
          } // Check top right quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
            return true;
          } // Check bottom right quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          } // Check bottom left quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }

          return false;
        }
      };
    };

    BRp$d.generateCutRectangle = function () {
      return this.nodeShapes['cut-rectangle'] = this.nodeShapes['cutrectangle'] = {
        renderer: this,
        name: 'cut-rectangle',
        cornerLength: getCutRectangleCornerLength(),
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
          var cl = this.cornerLength;
          var hh = height / 2;
          var hw = width / 2;
          var xBegin = centerX - hw;
          var xEnd = centerX + hw;
          var yBegin = centerY - hh;
          var yEnd = centerY + hh; // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]

          return {
            topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
            topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
            bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
            bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
          };
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
          var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
          return polygonIntersectLine(x, y, pts, nodeX, nodeY);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          // Check hBox
          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
            return true;
          }

          var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
          return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
        }
      };
    };

    BRp$d.generateBarrel = function () {
      return this.nodeShapes['barrel'] = {
        renderer: this,
        name: 'barrel',
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          // use two fixed t values for the bezier curve approximation
          var t0 = 0.15;
          var t1 = 0.5;
          var t2 = 0.85;
          var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);

          var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
            // approximate curve pts based on the two t values
            var m0 = qbezierPtAt({
              x: pts[0],
              y: pts[1]
            }, {
              x: pts[2],
              y: pts[3]
            }, {
              x: pts[4],
              y: pts[5]
            }, t0);
            var m1 = qbezierPtAt({
              x: pts[0],
              y: pts[1]
            }, {
              x: pts[2],
              y: pts[3]
            }, {
              x: pts[4],
              y: pts[5]
            }, t1);
            var m2 = qbezierPtAt({
              x: pts[0],
              y: pts[1]
            }, {
              x: pts[2],
              y: pts[3]
            }, {
              x: pts[4],
              y: pts[5]
            }, t2);
            return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
          };

          var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
          return polygonIntersectLine(x, y, pts, nodeX, nodeY);
        },
        generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
          var hh = height / 2;
          var hw = width / 2;
          var xBegin = centerX - hw;
          var xEnd = centerX + hw;
          var yBegin = centerY - hh;
          var yEnd = centerY + hh;
          var curveConstants = getBarrelCurveConstants(width, height);
          var hOffset = curveConstants.heightOffset;
          var wOffset = curveConstants.widthOffset;
          var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width; // points are in clockwise order, inner (imaginary) control pt on [4, 5]

          var pts = {
            topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
            topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
            bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
            bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
          };
          pts.topLeft.isTop = true;
          pts.topRight.isTop = true;
          pts.bottomLeft.isBottom = true;
          pts.bottomRight.isBottom = true;
          return pts;
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var curveConstants = getBarrelCurveConstants(width, height);
          var hOffset = curveConstants.heightOffset;
          var wOffset = curveConstants.widthOffset; // Check hBox

          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
            return true;
          }

          var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);

          var getCurveT = function getCurveT(x, y, curvePts) {
            var x0 = curvePts[4];
            var x1 = curvePts[2];
            var x2 = curvePts[0];
            var y0 = curvePts[5]; // var y1 = curvePts[ 3 ];

            var y2 = curvePts[1];
            var xMin = Math.min(x0, x2);
            var xMax = Math.max(x0, x2);
            var yMin = Math.min(y0, y2);
            var yMax = Math.max(y0, y2);

            if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
              var coeff = bezierPtsToQuadCoeff(x0, x1, x2);
              var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x);
              var validRoots = roots.filter(function (r) {
                return 0 <= r && r <= 1;
              });

              if (validRoots.length > 0) {
                return validRoots[0];
              }
            }

            return null;
          };

          var curveRegions = Object.keys(barrelCurvePts);

          for (var i = 0; i < curveRegions.length; i++) {
            var corner = curveRegions[i];
            var cornerPts = barrelCurvePts[corner];
            var t = getCurveT(x, y, cornerPts);

            if (t == null) {
              continue;
            }

            var y0 = cornerPts[5];
            var y1 = cornerPts[3];
            var y2 = cornerPts[1];
            var bezY = qbezierAt(y0, y1, y2, t);

            if (cornerPts.isTop && bezY <= y) {
              return true;
            }

            if (cornerPts.isBottom && y <= bezY) {
              return true;
            }
          }

          return false;
        }
      };
    };

    BRp$d.generateBottomRoundrectangle = function () {
      return this.nodeShapes['bottom-round-rectangle'] = this.nodeShapes['bottomroundrectangle'] = {
        renderer: this,
        name: 'bottom-round-rectangle',
        points: generateUnitNgonPointsFitToSquare(4, 0),
        draw: function draw(context, centerX, centerY, width, height) {
          this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
        },
        intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
          var topStartX = nodeX - (width / 2 + padding);
          var topStartY = nodeY - (height / 2 + padding);
          var topEndY = topStartY;
          var topEndX = nodeX + (width / 2 + padding);
          var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

          if (topIntersections.length > 0) {
            return topIntersections;
          }

          return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
        },
        checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
          var cornerRadius = getRoundRectangleRadius(width, height);
          var diam = 2 * cornerRadius; // Check hBox

          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
            return true;
          } // Check vBox


          if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
            return true;
          } // check non-rounded top side


          var outerWidth = width / 2 + 2 * padding;
          var outerHeight = height / 2 + 2 * padding;
          var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];

          if (pointInsidePolygonPoints(x, y, points)) {
            return true;
          } // Check bottom right quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          } // Check bottom left quarter circle


          if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
            return true;
          }

          return false;
        }
      };
    };

    BRp$d.registerNodeShapes = function () {
      var nodeShapes = this.nodeShapes = {};
      var renderer = this;
      this.generateEllipse();
      this.generatePolygon('triangle', generateUnitNgonPointsFitToSquare(3, 0));
      this.generatePolygon('rectangle', generateUnitNgonPointsFitToSquare(4, 0));
      nodeShapes['square'] = nodeShapes['rectangle'];
      this.generateRoundRectangle();
      this.generateCutRectangle();
      this.generateBarrel();
      this.generateBottomRoundrectangle();
      this.generatePolygon('diamond', [0, 1, 1, 0, 0, -1, -1, 0]);
      this.generatePolygon('pentagon', generateUnitNgonPointsFitToSquare(5, 0));
      this.generatePolygon('hexagon', generateUnitNgonPointsFitToSquare(6, 0));
      this.generatePolygon('heptagon', generateUnitNgonPointsFitToSquare(7, 0));
      this.generatePolygon('octagon', generateUnitNgonPointsFitToSquare(8, 0));
      var star5Points = new Array(20);
      {
        var outerPoints = generateUnitNgonPoints(5, 0);
        var innerPoints = generateUnitNgonPoints(5, Math.PI / 5); // Outer radius is 1; inner radius of star is smaller

        var innerRadius = 0.5 * (3 - Math.sqrt(5));
        innerRadius *= 1.57;

        for (var i = 0; i < innerPoints.length / 2; i++) {
          innerPoints[i * 2] *= innerRadius;
          innerPoints[i * 2 + 1] *= innerRadius;
        }

        for (var i = 0; i < 20 / 4; i++) {
          star5Points[i * 4] = outerPoints[i * 2];
          star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];
          star5Points[i * 4 + 2] = innerPoints[i * 2];
          star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
        }
      }
      star5Points = fitPolygonToSquare(star5Points);
      this.generatePolygon('star', star5Points);
      this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);
      this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
      this.nodeShapes['concavehexagon'] = this.generatePolygon('concave-hexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
      this.generatePolygon('tag', [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1]);

      nodeShapes.makePolygon = function (points) {
        // use caching on user-specified polygons so they are as fast as native shapes
        var key = points.join('$');
        var name = 'polygon-' + key;
        var shape;

        if (shape = this[name]) {
          // got cached shape
          return shape;
        } // create and cache new shape


        return renderer.generatePolygon(name, points);
      };
    };

    var BRp$e = {};

    BRp$e.timeToRender = function () {
      return this.redrawTotalTime / this.redrawCount;
    };

    BRp$e.redraw = function (options) {
      options = options || staticEmptyObject();
      var r = this;

      if (r.averageRedrawTime === undefined) {
        r.averageRedrawTime = 0;
      }

      if (r.lastRedrawTime === undefined) {
        r.lastRedrawTime = 0;
      }

      if (r.lastDrawTime === undefined) {
        r.lastDrawTime = 0;
      }

      r.requestedFrame = true;
      r.renderOptions = options;
    };

    BRp$e.beforeRender = function (fn, priority) {
      // the renderer can't add tick callbacks when destroyed
      if (this.destroyed) {
        return;
      }

      if (priority == null) {
        error('Priority is not optional for beforeRender');
      }

      var cbs = this.beforeRenderCallbacks;
      cbs.push({
        fn: fn,
        priority: priority
      }); // higher priority callbacks executed first

      cbs.sort(function (a, b) {
        return b.priority - a.priority;
      });
    };

    var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
      var cbs = r.beforeRenderCallbacks;

      for (var i = 0; i < cbs.length; i++) {
        cbs[i].fn(willDraw, startTime);
      }
    };

    BRp$e.startRenderLoop = function () {
      var r = this;
      var cy = r.cy;

      if (r.renderLoopStarted) {
        return;
      } else {
        r.renderLoopStarted = true;
      }

      var renderFn = function renderFn(requestTime) {
        if (r.destroyed) {
          return;
        }

        if (cy.batching()) ; else if (r.requestedFrame && !r.skipFrame) {
          beforeRenderCallbacks(r, true, requestTime);
          var startTime = performanceNow();
          r.render(r.renderOptions);
          var endTime = r.lastDrawTime = performanceNow();

          if (r.averageRedrawTime === undefined) {
            r.averageRedrawTime = endTime - startTime;
          }

          if (r.redrawCount === undefined) {
            r.redrawCount = 0;
          }

          r.redrawCount++;

          if (r.redrawTotalTime === undefined) {
            r.redrawTotalTime = 0;
          }

          var duration = endTime - startTime;
          r.redrawTotalTime += duration;
          r.lastRedrawTime = duration; // use a weighted average with a bias from the previous average so we don't spike so easily

          r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;
          r.requestedFrame = false;
        } else {
          beforeRenderCallbacks(r, false, requestTime);
        }

        r.skipFrame = false;
        requestAnimationFrame$1(renderFn);
      };

      requestAnimationFrame$1(renderFn);
    };

    var BaseRenderer = function BaseRenderer(options) {
      this.init(options);
    };

    var BR = BaseRenderer;
    var BRp$f = BR.prototype;
    BRp$f.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];

    BRp$f.init = function (options) {
      var r = this;
      r.options = options;
      r.cy = options.cy;
      var ctr = r.container = options.cy.container(); // prepend a stylesheet in the head such that

      if (window$1) {
        var document = window$1.document;
        var head = document.head;
        var stylesheetId = '__________cytoscape_stylesheet';
        var className = '__________cytoscape_container';
        var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;

        if (ctr.className.indexOf(className) < 0) {
          ctr.className = (ctr.className || '') + ' ' + className;
        }

        if (!stylesheetAlreadyExists) {
          var stylesheet = document.createElement('style');
          stylesheet.id = stylesheetId;
          stylesheet.innerHTML = '.' + className + ' { position: relative; }';
          head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
        }

        var computedStyle = window$1.getComputedStyle(ctr);
        var position = computedStyle.getPropertyValue('position');

        if (position === 'static') {
          warn('A Cytoscape container has style position:static and so can not use UI extensions properly');
        }
      }

      r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

      r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95]; //--Pointer-related data

      r.hoverData = {
        down: null,
        last: null,
        downTime: null,
        triggerMode: null,
        dragging: false,
        initialPan: [null, null],
        capture: false
      };
      r.dragData = {
        possibleDragElements: []
      };
      r.touchData = {
        start: null,
        capture: false,
        // These 3 fields related to tap, taphold events
        startPosition: [null, null, null, null, null, null],
        singleTouchStartTime: null,
        singleTouchMoved: true,
        now: [null, null, null, null, null, null],
        earlier: [null, null, null, null, null, null]
      };
      r.redraws = 0;
      r.showFps = options.showFps;
      r.debug = options.debug;
      r.hideEdgesOnViewport = options.hideEdgesOnViewport;
      r.hideLabelsOnViewport = options.hideLabelsOnViewport;
      r.textureOnViewport = options.textureOnViewport;
      r.wheelSensitivity = options.wheelSensitivity;
      r.motionBlurEnabled = options.motionBlur; // on by default

      r.forcedPixelRatio = number(options.pixelRatio) ? options.pixelRatio : null;
      r.motionBlur = options.motionBlur; // for initial kick off

      r.motionBlurOpacity = options.motionBlurOpacity;
      r.motionBlurTransparency = 1 - r.motionBlurOpacity;
      r.motionBlurPxRatio = 1;
      r.mbPxRBlurry = 1; //0.8;

      r.minMbLowQualFrames = 4;
      r.fullQualityMb = false;
      r.clearedForMotionBlur = [];
      r.desktopTapThreshold = options.desktopTapThreshold;
      r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
      r.touchTapThreshold = options.touchTapThreshold;
      r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
      r.tapholdDuration = 500;
      r.bindings = [];
      r.beforeRenderCallbacks = [];
      r.beforeRenderPriorities = {
        // higher priority execs before lower one
        animations: 400,
        eleCalcs: 300,
        eleTxrDeq: 200,
        lyrTxrDeq: 150,
        lyrTxrSkip: 100
      };
      r.registerNodeShapes();
      r.registerArrowShapes();
      r.registerCalculationListeners();
    };

    BRp$f.notify = function (eventName, eles) {
      var r = this;
      var cy = r.cy; // the renderer can't be notified after it's destroyed

      if (this.destroyed) {
        return;
      }

      if (eventName === 'init') {
        r.load();
        return;
      }

      if (eventName === 'destroy') {
        r.destroy();
        return;
      }

      if (eventName === 'add' || eventName === 'remove' || eventName === 'move' && cy.hasCompoundNodes() || eventName === 'load' || eventName === 'zorder' || eventName === 'mount') {
        r.invalidateCachedZSortedEles();
      }

      if (eventName === 'viewport') {
        r.redrawHint('select', true);
      }

      if (eventName === 'load' || eventName === 'resize' || eventName === 'mount') {
        r.invalidateContainerClientCoordsCache();
        r.matchCanvasSize(r.container);
      }

      r.redrawHint('eles', true);
      r.redrawHint('drag', true);
      this.startRenderLoop();
      this.redraw();
    };

    BRp$f.destroy = function () {
      var r = this;
      r.destroyed = true;
      r.cy.stopAnimationLoop();

      for (var i = 0; i < r.bindings.length; i++) {
        var binding = r.bindings[i];
        var b = binding;
        var tgt = b.target;
        (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
      }

      r.bindings = [];
      r.beforeRenderCallbacks = [];
      r.onUpdateEleCalcsFns = [];

      if (r.removeObserver) {
        r.removeObserver.disconnect();
      }

      if (r.styleObserver) {
        r.styleObserver.disconnect();
      }

      if (r.labelCalcDiv) {
        try {
          document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
        } catch (e) {// ie10 issue #1014
        }
      }
    };

    BRp$f.isHeadless = function () {
      return false;
    };

    [BRp, BRp$a, BRp$b, BRp$c, BRp$d, BRp$e].forEach(function (props) {
      extend(BRp$f, props);
    });

    var fullFpsTime = 1000 / 60; // assume 60 frames per second

    var defs = {
      setupDequeueing: function setupDequeueing(opts) {
        return function setupDequeueingImpl() {
          var self = this;
          var r = this.renderer;

          if (self.dequeueingSetup) {
            return;
          } else {
            self.dequeueingSetup = true;
          }

          var queueRedraw = util$3(function () {
            r.redrawHint('eles', true);
            r.redrawHint('drag', true);
            r.redraw();
          }, opts.deqRedrawThreshold);

          var dequeue = function dequeue(willDraw, frameStartTime) {
            var startTime = performanceNow();
            var avgRenderTime = r.averageRedrawTime;
            var renderTime = r.lastRedrawTime;
            var deqd = [];
            var extent = r.cy.extent();
            var pixelRatio = r.getPixelRatio(); // if we aren't in a tick that causes a draw, then the rendered style
            // queue won't automatically be flushed before dequeueing starts

            if (!willDraw) {
              r.flushRenderedStyleQueue();
            }

            while (true) {
              // eslint-disable-line no-constant-condition
              var now = performanceNow();
              var duration = now - startTime;
              var frameDuration = now - frameStartTime;

              if (renderTime < fullFpsTime) {
                // if we're rendering faster than the ideal fps, then do dequeueing
                // during all of the remaining frame time
                var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);

                if (frameDuration >= opts.deqFastCost * timeAvailable) {
                  break;
                }
              } else {
                if (willDraw) {
                  if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                    break;
                  }
                } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
                  break;
                }
              }

              var thisDeqd = opts.deq(self, pixelRatio, extent);

              if (thisDeqd.length > 0) {
                for (var i = 0; i < thisDeqd.length; i++) {
                  deqd.push(thisDeqd[i]);
                }
              } else {
                break;
              }
            } // callbacks on dequeue


            if (deqd.length > 0) {
              opts.onDeqd(self, deqd);

              if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
                queueRedraw();
              }
            }
          };

          var priority = opts.priority || noop;
          r.beforeRender(dequeue, priority(self));
        };
      }
    };

    // Uses keys so elements may share the same cache.

    var ElementTextureCacheLookup =
    /*#__PURE__*/
    function () {
      function ElementTextureCacheLookup(getKey) {
        var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : falsify;

        _classCallCheck(this, ElementTextureCacheLookup);

        this.idsByKey = new Map$1();
        this.keyForId = new Map$1();
        this.cachesByLvl = new Map$1();
        this.lvls = [];
        this.getKey = getKey;
        this.doesEleInvalidateKey = doesEleInvalidateKey;
      }

      _createClass(ElementTextureCacheLookup, [{
        key: "getIdsFor",
        value: function getIdsFor(key) {
          if (key == null) {
            error("Can not get id list for null key");
          }

          var idsByKey = this.idsByKey;
          var ids = this.idsByKey.get(key);

          if (!ids) {
            ids = new Set$1();
            idsByKey.set(key, ids);
          }

          return ids;
        }
      }, {
        key: "addIdForKey",
        value: function addIdForKey(key, id) {
          if (key != null) {
            this.getIdsFor(key).add(id);
          }
        }
      }, {
        key: "deleteIdForKey",
        value: function deleteIdForKey(key, id) {
          if (key != null) {
            this.getIdsFor(key).delete(id);
          }
        }
      }, {
        key: "getNumberOfIdsForKey",
        value: function getNumberOfIdsForKey(key) {
          if (key == null) {
            return 0;
          } else {
            return this.getIdsFor(key).size;
          }
        }
      }, {
        key: "updateKeyMappingFor",
        value: function updateKeyMappingFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          var currKey = this.getKey(ele);
          this.deleteIdForKey(prevKey, id);
          this.addIdForKey(currKey, id);
          this.keyForId.set(id, currKey);
        }
      }, {
        key: "deleteKeyMappingFor",
        value: function deleteKeyMappingFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          this.deleteIdForKey(prevKey, id);
          this.keyForId.delete(id);
        }
      }, {
        key: "keyHasChangedFor",
        value: function keyHasChangedFor(ele) {
          var id = ele.id();
          var prevKey = this.keyForId.get(id);
          var newKey = this.getKey(ele);
          return prevKey !== newKey;
        }
      }, {
        key: "isInvalid",
        value: function isInvalid(ele) {
          return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
        }
      }, {
        key: "getCachesAt",
        value: function getCachesAt(lvl) {
          var cachesByLvl = this.cachesByLvl,
              lvls = this.lvls;
          var caches = cachesByLvl.get(lvl);

          if (!caches) {
            caches = new Map$1();
            cachesByLvl.set(lvl, caches);
            lvls.push(lvl);
          }

          return caches;
        }
      }, {
        key: "getCache",
        value: function getCache(key, lvl) {
          return this.getCachesAt(lvl).get(key);
        }
      }, {
        key: "get",
        value: function get(ele, lvl) {
          var key = this.getKey(ele);
          var cache = this.getCache(key, lvl); // getting for an element may need to add to the id list b/c eles can share keys

          if (cache != null) {
            this.updateKeyMappingFor(ele);
          }

          return cache;
        }
      }, {
        key: "getForCachedKey",
        value: function getForCachedKey(ele, lvl) {
          var key = this.keyForId.get(ele.id()); // n.b. use cached key, not newly computed key

          var cache = this.getCache(key, lvl);
          return cache;
        }
      }, {
        key: "hasCache",
        value: function hasCache(key, lvl) {
          return this.getCachesAt(lvl).has(key);
        }
      }, {
        key: "has",
        value: function has(ele, lvl) {
          var key = this.getKey(ele);
          return this.hasCache(key, lvl);
        }
      }, {
        key: "setCache",
        value: function setCache(key, lvl, cache) {
          cache.key = key;
          this.getCachesAt(lvl).set(key, cache);
        }
      }, {
        key: "set",
        value: function set(ele, lvl, cache) {
          var key = this.getKey(ele);
          this.setCache(key, lvl, cache);
          this.updateKeyMappingFor(ele);
        }
      }, {
        key: "deleteCache",
        value: function deleteCache(key, lvl) {
          this.getCachesAt(lvl).delete(key);
        }
      }, {
        key: "delete",
        value: function _delete(ele, lvl) {
          var key = this.getKey(ele);
          this.deleteCache(key, lvl);
        }
      }, {
        key: "invalidateKey",
        value: function invalidateKey(key) {
          var _this = this;

          this.lvls.forEach(function (lvl) {
            return _this.deleteCache(key, lvl);
          });
        } // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)

      }, {
        key: "invalidate",
        value: function invalidate(ele) {
          var id = ele.id();
          var key = this.keyForId.get(id); // n.b. use stored key rather than current (potential key)

          this.deleteKeyMappingFor(ele);
          var entireKeyInvalidated = this.doesEleInvalidateKey(ele);

          if (entireKeyInvalidated) {
            // clear mapping for current key
            this.invalidateKey(key);
          }

          return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
        }
      }]);

      return ElementTextureCacheLookup;
    }();

    var minTxrH = 25; // the size of the texture cache for small height eles (special case)

    var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up

    var minLvl = -4; // when scaling smaller than that we don't need to re-render

    var maxLvl = 3; // when larger than this scale just render directly (caching is not helpful)

    var maxZoom = 7.99; // beyond this zoom level, layered textures are not used

    var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps

    var defTxrWidth = 1024; // default/minimum texture width

    var maxTxrW = 1024; // the maximum width of a texture

    var maxTxrH = 1024; // the maximum height of a texture

    var minUtility = 0.2; // if usage of texture is less than this, it is retired

    var maxFullness = 0.8; // fullness of texture after which queue removal is checked

    var maxFullnessChecks = 10; // dequeued after this many checks

    var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

    var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time

    var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

    var deqFastCost = 0.9; // % of frame time to be used when >60fps

    var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

    var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

    var getTxrReasons = {
      dequeue: 'dequeue',
      downscale: 'downscale',
      highQuality: 'highQuality'
    };
    var initDefaults = defaults$1({
      getKey: null,
      doesEleInvalidateKey: falsify,
      drawElement: null,
      getBoundingBox: null,
      getRotationPoint: null,
      getRotationOffset: null,
      isVisible: trueify,
      allowEdgeTxrCaching: true,
      allowParentTxrCaching: true
    });

    var ElementTextureCache = function ElementTextureCache(renderer, initOptions) {
      var self = this;
      self.renderer = renderer;
      self.onDequeues = [];
      var opts = initDefaults(initOptions);
      extend(self, opts);
      self.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
      self.setupDequeueing();
    };

    var ETCp = ElementTextureCache.prototype;
    ETCp.reasons = getTxrReasons; // the list of textures in which new subtextures for elements can be placed

    ETCp.getTextureQueue = function (txrH) {
      var self = this;
      self.eleImgCaches = self.eleImgCaches || {};
      return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
    }; // the list of usused textures which can be recycled (in use in texture queue)


    ETCp.getRetiredTextureQueue = function (txrH) {
      var self = this;
      var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
      var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
      return rtxtrQ;
    }; // queue of element draw requests at different scale levels


    ETCp.getElementQueue = function () {
      var self = this;
      var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {
        return b.reqs - a.reqs;
      });
      return q;
    }; // queue of element draw requests at different scale levels (element id lookup)


    ETCp.getElementKeyToQueue = function () {
      var self = this;
      var k2q = self.eleKeyToCacheQueue = self.eleKeyToCacheQueue || {};
      return k2q;
    };

    ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
      var self = this;
      var r = this.renderer;
      var zoom = r.cy.zoom();
      var lookup = this.lookup;

      if (bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible()) {
        return null;
      }

      if (!self.allowEdgeTxrCaching && ele.isEdge() || !self.allowParentTxrCaching && ele.isParent()) {
        return null;
      }

      if (lvl == null) {
        lvl = Math.ceil(log2(zoom * pxRatio));
      }

      if (lvl < minLvl) {
        lvl = minLvl;
      } else if (zoom >= maxZoom || lvl > maxLvl) {
        return null;
      }

      var scale = Math.pow(2, lvl);
      var eleScaledH = bb.h * scale;
      var eleScaledW = bb.w * scale;
      var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);

      if (!this.isVisible(ele, scaledLabelShown)) {
        return null;
      }

      var eleCache = lookup.get(ele, lvl); // if this get was on an unused/invalidated cache, then restore the texture usage metric

      if (eleCache && eleCache.invalidated) {
        eleCache.invalidated = false;
        eleCache.texture.invalidatedWidth -= eleCache.width;
      }

      if (eleCache) {
        return eleCache;
      }

      var txrH; // which texture height this ele belongs to

      if (eleScaledH <= minTxrH) {
        txrH = minTxrH;
      } else if (eleScaledH <= txrStepH) {
        txrH = txrStepH;
      } else {
        txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
      }

      if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
        return null; // caching large elements is not efficient
      }

      var txrQ = self.getTextureQueue(txrH); // first try the second last one in case it has space at the end

      var txr = txrQ[txrQ.length - 2];

      var addNewTxr = function addNewTxr() {
        return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
      }; // try the last one if there is no second last one


      if (!txr) {
        txr = txrQ[txrQ.length - 1];
      } // if the last one doesn't exist, we need a first one


      if (!txr) {
        txr = addNewTxr();
      } // if there's no room in the current texture, we need a new one


      if (txr.width - txr.usedWidth < eleScaledW) {
        txr = addNewTxr();
      }

      var scalableFrom = function scalableFrom(otherCache) {
        return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
      };

      var deqing = reason && reason === getTxrReasons.dequeue;
      var highQualityReq = reason && reason === getTxrReasons.highQuality;
      var downscaleReq = reason && reason === getTxrReasons.downscale;
      var higherCache; // the nearest cache with a higher level

      for (var l = lvl + 1; l <= maxLvl; l++) {
        var c = lookup.get(ele, l);

        if (c) {
          higherCache = c;
          break;
        }
      }

      var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

      var downscale = function downscale() {
        txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
      }; // reset ele area in texture


      txr.context.setTransform(1, 0, 0, 1, 0, 0);
      txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);

      if (scalableFrom(oneUpCache)) {
        // then we can relatively cheaply rescale the existing image w/o rerendering
        downscale();
      } else if (scalableFrom(higherCache)) {
        // then use the higher cache for now and queue the next level down
        // to cheaply scale towards the smaller level
        if (highQualityReq) {
          for (var _l = higherCache.level; _l > lvl; _l--) {
            oneUpCache = self.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
          }

          downscale();
        } else {
          self.queueElement(ele, higherCache.level - 1);
          return higherCache;
        }
      } else {
        var lowerCache; // the nearest cache with a lower level

        if (!deqing && !highQualityReq && !downscaleReq) {
          for (var _l2 = lvl - 1; _l2 >= minLvl; _l2--) {
            var _c = lookup.get(ele, _l2);

            if (_c) {
              lowerCache = _c;
              break;
            }
          }
        }

        if (scalableFrom(lowerCache)) {
          // then use the lower quality cache for now and queue the better one for later
          self.queueElement(ele, lvl);
          return lowerCache;
        }

        txr.context.translate(txr.usedWidth, 0);
        txr.context.scale(scale, scale);
        this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
        txr.context.scale(1 / scale, 1 / scale);
        txr.context.translate(-txr.usedWidth, 0);
      }

      eleCache = {
        x: txr.usedWidth,
        texture: txr,
        level: lvl,
        scale: scale,
        width: eleScaledW,
        height: eleScaledH,
        scaledLabelShown: scaledLabelShown
      };
      txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
      txr.eleCaches.push(eleCache);
      lookup.set(ele, lvl, eleCache);
      self.checkTextureFullness(txr);
      return eleCache;
    };

    ETCp.invalidateElements = function (eles) {
      for (var i = 0; i < eles.length; i++) {
        this.invalidateElement(eles[i]);
      }
    };

    ETCp.invalidateElement = function (ele) {
      var self = this;
      var lookup = self.lookup;
      var caches = [];
      var invalid = lookup.isInvalid(ele);

      if (!invalid) {
        return; // override the invalidation request if the element key has not changed
      }

      for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
        var cache = lookup.getForCachedKey(ele, lvl);

        if (cache) {
          caches.push(cache);
        }
      }

      var noOtherElesUseCache = lookup.invalidate(ele);

      if (noOtherElesUseCache) {
        for (var i = 0; i < caches.length; i++) {
          var _cache = caches[i];
          var txr = _cache.texture; // remove space from the texture it belongs to

          txr.invalidatedWidth += _cache.width; // mark the cache as invalidated

          _cache.invalidated = true; // retire the texture if its utility is low

          self.checkTextureUtility(txr);
        }
      } // remove from queue since the old req was for the old state


      self.removeFromQueue(ele);
    };

    ETCp.checkTextureUtility = function (txr) {
      // invalidate all entries in the cache if the cache size is small
      if (txr.invalidatedWidth >= minUtility * txr.width) {
        this.retireTexture(txr);
      }
    };

    ETCp.checkTextureFullness = function (txr) {
      // if texture has been mostly filled and passed over several times, remove
      // it from the queue so we don't need to waste time looking at it to put new things
      var self = this;
      var txrQ = self.getTextureQueue(txr.height);

      if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
        removeFromArray(txrQ, txr);
      } else {
        txr.fullnessChecks++;
      }
    };

    ETCp.retireTexture = function (txr) {
      var self = this;
      var txrH = txr.height;
      var txrQ = self.getTextureQueue(txrH);
      var lookup = this.lookup; // retire the texture from the active / searchable queue:

      removeFromArray(txrQ, txr);
      txr.retired = true; // remove the refs from the eles to the caches:

      var eleCaches = txr.eleCaches;

      for (var i = 0; i < eleCaches.length; i++) {
        var eleCache = eleCaches[i];
        lookup.deleteCache(eleCache.key, eleCache.level);
      }

      clearArray(eleCaches); // add the texture to a retired queue so it can be recycled in future:

      var rtxtrQ = self.getRetiredTextureQueue(txrH);
      rtxtrQ.push(txr);
    };

    ETCp.addTexture = function (txrH, minW) {
      var self = this;
      var txrQ = self.getTextureQueue(txrH);
      var txr = {};
      txrQ.push(txr);
      txr.eleCaches = [];
      txr.height = txrH;
      txr.width = Math.max(defTxrWidth, minW);
      txr.usedWidth = 0;
      txr.invalidatedWidth = 0;
      txr.fullnessChecks = 0;
      txr.canvas = self.renderer.makeOffscreenCanvas(txr.width, txr.height);
      txr.context = txr.canvas.getContext('2d');
      return txr;
    };

    ETCp.recycleTexture = function (txrH, minW) {
      var self = this;
      var txrQ = self.getTextureQueue(txrH);
      var rtxtrQ = self.getRetiredTextureQueue(txrH);

      for (var i = 0; i < rtxtrQ.length; i++) {
        var txr = rtxtrQ[i];

        if (txr.width >= minW) {
          txr.retired = false;
          txr.usedWidth = 0;
          txr.invalidatedWidth = 0;
          txr.fullnessChecks = 0;
          clearArray(txr.eleCaches);
          txr.context.setTransform(1, 0, 0, 1, 0, 0);
          txr.context.clearRect(0, 0, txr.width, txr.height);
          removeFromArray(rtxtrQ, txr);
          txrQ.push(txr);
          return txr;
        }
      }
    };

    ETCp.queueElement = function (ele, lvl) {
      var self = this;
      var q = self.getElementQueue();
      var k2q = self.getElementKeyToQueue();
      var key = this.getKey(ele);
      var existingReq = k2q[key];

      if (existingReq) {
        // use the max lvl b/c in between lvls are cheap to make
        existingReq.level = Math.max(existingReq.level, lvl);
        existingReq.eles.merge(ele);
        existingReq.reqs++;
        q.updateItem(existingReq);
      } else {
        var req = {
          eles: ele.spawn().merge(ele),
          level: lvl,
          reqs: 1,
          key: key
        };
        q.push(req);
        k2q[key] = req;
      }
    };

    ETCp.dequeue = function (pxRatio
    /*, extent*/
    ) {
      var self = this;
      var q = self.getElementQueue();
      var k2q = self.getElementKeyToQueue();
      var dequeued = [];
      var lookup = self.lookup;

      for (var i = 0; i < maxDeqSize; i++) {
        if (q.size() > 0) {
          var req = q.pop();
          var key = req.key;
          var ele = req.eles[0]; // all eles have the same key

          var cacheExists = lookup.hasCache(ele, req.level); // clear out the key to req lookup

          k2q[key] = null; // dequeueing isn't necessary with an existing cache

          if (cacheExists) {
            continue;
          }

          dequeued.push(req);
          var bb = self.getBoundingBox(ele);
          self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
        } else {
          break;
        }
      }

      return dequeued;
    };

    ETCp.removeFromQueue = function (ele) {
      var self = this;
      var q = self.getElementQueue();
      var k2q = self.getElementKeyToQueue();
      var key = this.getKey(ele);
      var req = k2q[key];

      if (req != null) {
        if (req.eles.length === 1) {
          // remove if last ele in the req
          // bring to front of queue
          req.reqs = MAX_INT;
          q.updateItem(req);
          q.pop(); // remove from queue

          k2q[key] = null; // remove from lookup map
        } else {
          // otherwise just remove ele from req
          req.eles.unmerge(ele);
        }
      }
    };

    ETCp.onDequeue = function (fn) {
      this.onDequeues.push(fn);
    };

    ETCp.offDequeue = function (fn) {
      removeFromArray(this.onDequeues, fn);
    };

    ETCp.setupDequeueing = defs.setupDequeueing({
      deqRedrawThreshold: deqRedrawThreshold,
      deqCost: deqCost,
      deqAvgCost: deqAvgCost,
      deqNoDrawCost: deqNoDrawCost,
      deqFastCost: deqFastCost,
      deq: function deq(self, pxRatio, extent) {
        return self.dequeue(pxRatio, extent);
      },
      onDeqd: function onDeqd(self, deqd) {
        for (var i = 0; i < self.onDequeues.length; i++) {
          var fn = self.onDequeues[i];
          fn(deqd);
        }
      },
      shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
        for (var i = 0; i < deqd.length; i++) {
          var eles = deqd[i].eles;

          for (var j = 0; j < eles.length; j++) {
            var bb = eles[j].boundingBox();

            if (boundingBoxesIntersect(bb, extent)) {
              return true;
            }
          }
        }

        return false;
      },
      priority: function priority(self) {
        return self.renderer.beforeRenderPriorities.eleTxrDeq;
      }
    });

    var defNumLayers = 1; // default number of layers to use

    var minLvl$1 = -4; // when scaling smaller than that we don't need to re-render

    var maxLvl$1 = 2; // when larger than this scale just render directly (caching is not helpful)

    var maxZoom$1 = 3.99; // beyond this zoom level, layered textures are not used

    var deqRedrawThreshold$1 = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

    var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates

    var deqCost$1 = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

    var deqAvgCost$1 = 0.1; // % of add'l rendering cost compared to average overall redraw time

    var deqNoDrawCost$1 = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

    var deqFastCost$1 = 0.9; // % of frame time to be used when >60fps

    var maxDeqSize$1 = 1; // number of eles to dequeue and render at higher texture in each batch

    var invalidThreshold = 250; // time threshold for disabling b/c of invalidations

    var maxLayerArea = 4000 * 4000; // layers can't be bigger than this

    var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)
    // var log = function(){ console.log.apply( console, arguments ); };

    var LayeredTextureCache = function LayeredTextureCache(renderer) {
      var self = this;
      var r = self.renderer = renderer;
      var cy = r.cy;
      self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

      self.firstGet = true;
      self.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
      self.skipping = false;
      self.eleTxrDeqs = cy.collection();
      self.scheduleElementRefinement = util$3(function () {
        self.refineElementTextures(self.eleTxrDeqs);
        self.eleTxrDeqs.unmerge(self.eleTxrDeqs);
      }, refineEleDebounceTime);
      r.beforeRender(function (willDraw, now) {
        if (now - self.lastInvalidationTime <= invalidThreshold) {
          self.skipping = true;
        } else {
          self.skipping = false;
        }
      }, r.beforeRenderPriorities.lyrTxrSkip);

      var qSort = function qSort(a, b) {
        return b.reqs - a.reqs;
      };

      self.layersQueue = new Heap(qSort);
      self.setupDequeueing();
    };

    var LTCp = LayeredTextureCache.prototype;
    var layerIdPool = 0;
    var MAX_INT$1 = Math.pow(2, 53) - 1;

    LTCp.makeLayer = function (bb, lvl) {
      var scale = Math.pow(2, lvl);
      var w = Math.ceil(bb.w * scale);
      var h = Math.ceil(bb.h * scale);
      var canvas = this.renderer.makeOffscreenCanvas(w, h);
      var layer = {
        id: layerIdPool = ++layerIdPool % MAX_INT$1,
        bb: bb,
        level: lvl,
        width: w,
        height: h,
        canvas: canvas,
        context: canvas.getContext('2d'),
        eles: [],
        elesQueue: [],
        reqs: 0
      }; // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

      var cxt = layer.context;
      var dx = -layer.bb.x1;
      var dy = -layer.bb.y1; // do the transform on creation to save cycles (it's the same for all eles)

      cxt.scale(scale, scale);
      cxt.translate(dx, dy);
      return layer;
    };

    LTCp.getLayers = function (eles, pxRatio, lvl) {
      var self = this;
      var r = self.renderer;
      var cy = r.cy;
      var zoom = cy.zoom();
      var firstGet = self.firstGet;
      self.firstGet = false; // log('--\nget layers with %s eles', eles.length);
      //log eles.map(function(ele){ return ele.id() }) );

      if (lvl == null) {
        lvl = Math.ceil(log2(zoom * pxRatio));

        if (lvl < minLvl$1) {
          lvl = minLvl$1;
        } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {
          return null;
        }
      }

      self.validateLayersElesOrdering(lvl, eles);
      var layersByLvl = self.layersByLevel;
      var scale = Math.pow(2, lvl);
      var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
      var bb;
      var lvlComplete = self.levelIsComplete(lvl, eles);
      var tmpLayers;

      var checkTempLevels = function checkTempLevels() {
        var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
          self.validateLayersElesOrdering(l, eles);

          if (self.levelIsComplete(l, eles)) {
            tmpLayers = layersByLvl[l];
            return true;
          }
        };

        var checkLvls = function checkLvls(dir) {
          if (tmpLayers) {
            return;
          }

          for (var l = lvl + dir; minLvl$1 <= l && l <= maxLvl$1; l += dir) {
            if (canUseAsTmpLvl(l)) {
              break;
            }
          }
        };

        checkLvls(+1);
        checkLvls(-1); // remove the invalid layers; they will be replaced as needed later in this function

        for (var i = layers.length - 1; i >= 0; i--) {
          var layer = layers[i];

          if (layer.invalid) {
            removeFromArray(layers, layer);
          }
        }
      };

      if (!lvlComplete) {
        // if the current level is incomplete, then use the closest, best quality layerset temporarily
        // and later queue the current layerset so we can get the proper quality level soon
        checkTempLevels();
      } else {
        // log('level complete, using existing layers\n--');
        return layers;
      }

      var getBb = function getBb() {
        if (!bb) {
          bb = makeBoundingBox();

          for (var i = 0; i < eles.length; i++) {
            updateBoundingBox(bb, eles[i].boundingBox());
          }
        }

        return bb;
      };

      var makeLayer = function makeLayer(opts) {
        opts = opts || {};
        var after = opts.after;
        getBb();
        var area = bb.w * scale * (bb.h * scale);

        if (area > maxLayerArea) {
          return null;
        }

        var layer = self.makeLayer(bb, lvl);

        if (after != null) {
          var index = layers.indexOf(after) + 1;
          layers.splice(index, 0, layer);
        } else if (opts.insert === undefined || opts.insert) {
          // no after specified => first layer made so put at start
          layers.unshift(layer);
        } // if( tmpLayers ){
        //self.queueLayer( layer );
        // }


        return layer;
      };

      if (self.skipping && !firstGet) {
        // log('skip layers');
        return null;
      } // log('do layers');


      var layer = null;
      var maxElesPerLayer = eles.length / defNumLayers;
      var allowLazyQueueing = !firstGet;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var rs = ele._private.rscratch;
        var caches = rs.imgLayerCaches = rs.imgLayerCaches || {}; // log('look at ele', ele.id());

        var existingLayer = caches[lvl];

        if (existingLayer) {
          // reuse layer for later eles
          // log('reuse layer for', ele.id());
          layer = existingLayer;
          continue;
        }

        if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
          // log('make new layer for ele %s', ele.id());
          layer = makeLayer({
            insert: true,
            after: layer
          }); // if now layer can be built then we can't use layers at this level

          if (!layer) {
            return null;
          } // log('new layer with id %s', layer.id);

        }

        if (tmpLayers || allowLazyQueueing) {
          // log('queue ele %s in layer %s', ele.id(), layer.id);
          self.queueLayer(layer, ele);
        } else {
          // log('draw ele %s in layer %s', ele.id(), layer.id);
          self.drawEleInLayer(layer, ele, lvl, pxRatio);
        }

        layer.eles.push(ele);
        caches[lvl] = layer;
      } // log('--');


      if (tmpLayers) {
        // then we only queued the current layerset and can't draw it yet
        return tmpLayers;
      }

      if (allowLazyQueueing) {
        // log('lazy queue level', lvl);
        return null;
      }

      return layers;
    }; // a layer may want to use an ele cache of a higher level to avoid blurriness
    // so the layer level might not equal the ele level


    LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
      return lvl;
    };

    LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
      var self = this;
      var r = this.renderer;
      var context = layer.context;
      var bb = ele.boundingBox();

      if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
        return;
      }

      lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);

      {
        r.setImgSmoothing(context, false);
      }

      {
        r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
      }

      {
        r.setImgSmoothing(context, true);
      }
    };

    LTCp.levelIsComplete = function (lvl, eles) {
      var self = this;
      var layers = self.layersByLevel[lvl];

      if (!layers || layers.length === 0) {
        return false;
      }

      var numElesInLayers = 0;

      for (var i = 0; i < layers.length; i++) {
        var layer = layers[i]; // if there are any eles needed to be drawn yet, the level is not complete

        if (layer.reqs > 0) {
          return false;
        } // if the layer is invalid, the level is not complete


        if (layer.invalid) {
          return false;
        }

        numElesInLayers += layer.eles.length;
      } // we should have exactly the number of eles passed in to be complete


      if (numElesInLayers !== eles.length) {
        return false;
      }

      return true;
    };

    LTCp.validateLayersElesOrdering = function (lvl, eles) {
      var layers = this.layersByLevel[lvl];

      if (!layers) {
        return;
      } // if in a layer the eles are not in the same order, then the layer is invalid
      // (i.e. there is an ele in between the eles in the layer)


      for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        var offset = -1; // find the offset

        for (var j = 0; j < eles.length; j++) {
          if (layer.eles[0] === eles[j]) {
            offset = j;
            break;
          }
        }

        if (offset < 0) {
          // then the layer has nonexistant elements and is invalid
          this.invalidateLayer(layer);
          continue;
        } // the eles in the layer must be in the same continuous order, else the layer is invalid


        var o = offset;

        for (var j = 0; j < layer.eles.length; j++) {
          if (layer.eles[j] !== eles[o + j]) {
            // log('invalidate based on ordering', layer.id);
            this.invalidateLayer(layer);
            break;
          }
        }
      }
    };

    LTCp.updateElementsInLayers = function (eles, update) {
      var self = this;
      var isEles = element(eles[0]); // collect udpated elements (cascaded from the layers) and update each
      // layer itself along the way

      for (var i = 0; i < eles.length; i++) {
        var req = isEles ? null : eles[i];
        var ele = isEles ? eles[i] : eles[i].ele;
        var rs = ele._private.rscratch;
        var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

        for (var l = minLvl$1; l <= maxLvl$1; l++) {
          var layer = caches[l];

          if (!layer) {
            continue;
          } // if update is a request from the ele cache, then it affects only
          // the matching level


          if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
            continue;
          }

          update(layer, ele, req);
        }
      }
    };

    LTCp.haveLayers = function () {
      var self = this;
      var haveLayers = false;

      for (var l = minLvl$1; l <= maxLvl$1; l++) {
        var layers = self.layersByLevel[l];

        if (layers && layers.length > 0) {
          haveLayers = true;
          break;
        }
      }

      return haveLayers;
    };

    LTCp.invalidateElements = function (eles) {
      var self = this;

      if (eles.length === 0) {
        return;
      }

      self.lastInvalidationTime = performanceNow(); // log('update invalidate layer time from eles');

      if (eles.length === 0 || !self.haveLayers()) {
        return;
      }

      self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
        self.invalidateLayer(layer);
      });
    };

    LTCp.invalidateLayer = function (layer) {
      // log('update invalidate layer time');
      this.lastInvalidationTime = performanceNow();

      if (layer.invalid) {
        return;
      } // save cycles


      var lvl = layer.level;
      var eles = layer.eles;
      var layers = this.layersByLevel[lvl]; // log('invalidate layer', layer.id );

      removeFromArray(layers, layer); // layer.eles = [];

      layer.elesQueue = [];
      layer.invalid = true;

      if (layer.replacement) {
        layer.replacement.invalid = true;
      }

      for (var i = 0; i < eles.length; i++) {
        var caches = eles[i]._private.rscratch.imgLayerCaches;

        if (caches) {
          caches[lvl] = null;
        }
      }
    };

    LTCp.refineElementTextures = function (eles) {
      var self = this; // log('refine', eles.length);

      self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
        var rLyr = layer.replacement;

        if (!rLyr) {
          rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
          rLyr.replaces = layer;
          rLyr.eles = layer.eles; // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
        }

        if (!rLyr.reqs) {
          for (var i = 0; i < rLyr.eles.length; i++) {
            self.queueLayer(rLyr, rLyr.eles[i]);
          } // log('queue replacement layer refinement', rLyr.id);

        }
      });
    };

    LTCp.enqueueElementRefinement = function (ele) {

      this.eleTxrDeqs.merge(ele);
      this.scheduleElementRefinement();
    };

    LTCp.queueLayer = function (layer, ele) {
      var self = this;
      var q = self.layersQueue;
      var elesQ = layer.elesQueue;
      var hasId = elesQ.hasId = elesQ.hasId || {}; // if a layer is going to be replaced, queuing is a waste of time

      if (layer.replacement) {
        return;
      }

      if (ele) {
        if (hasId[ele.id()]) {
          return;
        }

        elesQ.push(ele);
        hasId[ele.id()] = true;
      }

      if (layer.reqs) {
        layer.reqs++;
        q.updateItem(layer);
      } else {
        layer.reqs = 1;
        q.push(layer);
      }
    };

    LTCp.dequeue = function (pxRatio) {
      var self = this;
      var q = self.layersQueue;
      var deqd = [];
      var eleDeqs = 0;

      while (eleDeqs < maxDeqSize$1) {
        if (q.size() === 0) {
          break;
        }

        var layer = q.peek(); // if a layer has been or will be replaced, then don't waste time with it

        if (layer.replacement) {
          // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
          q.pop();
          continue;
        } // if this is a replacement layer that has been superceded, then forget it


        if (layer.replaces && layer !== layer.replaces.replacement) {
          // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
          q.pop();
          continue;
        }

        if (layer.invalid) {
          // log('replacement layer %s is invalid; dequeued', layer.id);
          q.pop();
          continue;
        }

        var ele = layer.elesQueue.shift();

        if (ele) {
          // log('dequeue layer %s', layer.id);
          self.drawEleInLayer(layer, ele, layer.level, pxRatio);
          eleDeqs++;
        }

        if (deqd.length === 0) {
          // we need only one entry in deqd to queue redrawing etc
          deqd.push(true);
        } // if the layer has all its eles done, then remove from the queue


        if (layer.elesQueue.length === 0) {
          q.pop();
          layer.reqs = 0; // log('dequeue of layer %s complete', layer.id);
          // when a replacement layer is dequeued, it replaces the old layer in the level

          if (layer.replaces) {
            self.applyLayerReplacement(layer);
          }

          self.requestRedraw();
        }
      }

      return deqd;
    };

    LTCp.applyLayerReplacement = function (layer) {
      var self = this;
      var layersInLevel = self.layersByLevel[layer.level];
      var replaced = layer.replaces;
      var index = layersInLevel.indexOf(replaced); // if the replaced layer is not in the active list for the level, then replacing
      // refs would be a mistake (i.e. overwriting the true active layer)

      if (index < 0 || replaced.invalid) {
        // log('replacement layer would have no effect', layer.id);
        return;
      }

      layersInLevel[index] = layer; // replace level ref
      // replace refs in eles

      for (var i = 0; i < layer.eles.length; i++) {
        var _p = layer.eles[i]._private;
        var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

        if (cache) {
          cache[layer.level] = layer;
        }
      } // log('apply replacement layer %s over %s', layer.id, replaced.id);


      self.requestRedraw();
    };

    LTCp.requestRedraw = util$3(function () {
      var r = this.renderer;
      r.redrawHint('eles', true);
      r.redrawHint('drag', true);
      r.redraw();
    }, 100);
    LTCp.setupDequeueing = defs.setupDequeueing({
      deqRedrawThreshold: deqRedrawThreshold$1,
      deqCost: deqCost$1,
      deqAvgCost: deqAvgCost$1,
      deqNoDrawCost: deqNoDrawCost$1,
      deqFastCost: deqFastCost$1,
      deq: function deq(self, pxRatio) {
        return self.dequeue(pxRatio);
      },
      onDeqd: noop,
      shouldRedraw: trueify,
      priority: function priority(self) {
        return self.renderer.beforeRenderPriorities.lyrTxrDeq;
      }
    });

    var CRp = {};
    var impl;

    function polygon(context, points) {
      for (var i = 0; i < points.length; i++) {
        var pt = points[i];
        context.lineTo(pt.x, pt.y);
      }
    }

    function triangleBackcurve(context, points, controlPoint) {
      var firstPt;

      for (var i = 0; i < points.length; i++) {
        var pt = points[i];

        if (i === 0) {
          firstPt = pt;
        }

        context.lineTo(pt.x, pt.y);
      }

      context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
    }

    function triangleTee(context, trianglePoints, teePoints) {
      if (context.beginPath) {
        context.beginPath();
      }

      var triPts = trianglePoints;

      for (var i = 0; i < triPts.length; i++) {
        var pt = triPts[i];
        context.lineTo(pt.x, pt.y);
      }

      var teePts = teePoints;
      var firstTeePt = teePoints[0];
      context.moveTo(firstTeePt.x, firstTeePt.y);

      for (var i = 1; i < teePts.length; i++) {
        var pt = teePts[i];
        context.lineTo(pt.x, pt.y);
      }

      if (context.closePath) {
        context.closePath();
      }
    }

    function circle(context, rx, ry, r) {
      context.arc(rx, ry, r, 0, Math.PI * 2, false);
    }

    CRp.arrowShapeImpl = function (name) {
      return (impl || (impl = {
        'polygon': polygon,
        'triangle-backcurve': triangleBackcurve,
        'triangle-tee': triangleTee,
        'triangle-cross': triangleTee,
        'circle': circle
      }))[name];
    };

    var CRp$1 = {};

    CRp$1.drawElement = function (context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
      var r = this;

      if (ele.isNode()) {
        r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
      } else {
        r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
      }
    };

    CRp$1.drawElementOverlay = function (context, ele) {
      var r = this;

      if (ele.isNode()) {
        r.drawNodeOverlay(context, ele);
      } else {
        r.drawEdgeOverlay(context, ele);
      }
    };

    CRp$1.drawCachedElementPortion = function (context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation) {
      var r = this;
      var bb = eleTxrCache.getBoundingBox(ele);

      if (bb.w === 0 || bb.h === 0) {
        return;
      } // ignore zero size case


      var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);

      if (eleCache != null) {
        var opacity = ele.effectiveOpacity();

        if (opacity === 0) {
          return;
        }

        var theta = getRotation(r, ele);
        var x1 = bb.x1,
            y1 = bb.y1,
            w = bb.w,
            h = bb.h;
        var x, y, sx, sy, smooth;

        if (theta !== 0) {
          var rotPt = eleTxrCache.getRotationPoint(ele);
          sx = rotPt.x;
          sy = rotPt.y;
          context.translate(sx, sy);
          context.rotate(theta);
          smooth = r.getImgSmoothing(context);

          if (!smooth) {
            r.setImgSmoothing(context, true);
          }

          var off = eleTxrCache.getRotationOffset(ele);
          x = off.x;
          y = off.y;
        } else {
          x = x1;
          y = y1;
        }

        var oldGlobalAlpha;

        if (opacity !== 1) {
          oldGlobalAlpha = context.globalAlpha;
          context.globalAlpha = oldGlobalAlpha * opacity;
        }

        context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);

        if (opacity !== 1) {
          context.globalAlpha = oldGlobalAlpha;
        }

        if (theta !== 0) {
          context.rotate(-theta);
          context.translate(-sx, -sy);

          if (!smooth) {
            r.setImgSmoothing(context, false);
          }
        }
      } else {
        eleTxrCache.drawElement(context, ele); // direct draw fallback
      }
    };

    var getZeroRotation = function getZeroRotation() {
      return 0;
    };

    var getLabelRotation = function getLabelRotation(r, ele) {
      return r.getTextAngle(ele, null);
    };

    var getSourceLabelRotation = function getSourceLabelRotation(r, ele) {
      return r.getTextAngle(ele, 'source');
    };

    var getTargetLabelRotation = function getTargetLabelRotation(r, ele) {
      return r.getTextAngle(ele, 'target');
    };

    CRp$1.drawCachedElement = function (context, ele, pxRatio, extent, lvl, requestHighQuality) {
      var r = this;
      var _r$data = r.data,
          eleTxrCache = _r$data.eleTxrCache,
          lblTxrCache = _r$data.lblTxrCache,
          slbTxrCache = _r$data.slbTxrCache,
          tlbTxrCache = _r$data.tlbTxrCache;
      var bb = ele.boundingBox();
      var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;

      if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
        return;
      }

      if (!extent || boundingBoxesIntersect(bb, extent)) {
        r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation);
        r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation);

        if (ele.isEdge()) {
          r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation);
          r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation);
        }

        r.drawElementOverlay(context, ele);
      }
    };

    CRp$1.drawElements = function (context, eles) {
      var r = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        r.drawElement(context, ele);
      }
    };

    CRp$1.drawCachedElements = function (context, eles, pxRatio, extent) {
      var r = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        r.drawCachedElement(context, ele, pxRatio, extent);
      }
    };

    CRp$1.drawCachedNodes = function (context, eles, pxRatio, extent) {
      var r = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (!ele.isNode()) {
          continue;
        }

        r.drawCachedElement(context, ele, pxRatio, extent);
      }
    };

    CRp$1.drawLayeredElements = function (context, eles, pxRatio, extent) {
      var r = this;
      var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);

      if (layers) {
        for (var i = 0; i < layers.length; i++) {
          var layer = layers[i];
          var bb = layer.bb;

          if (bb.w === 0 || bb.h === 0) {
            continue;
          }

          context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
        }
      } else {
        // fall back on plain caching if no layers
        r.drawCachedElements(context, eles, pxRatio, extent);
      }
    };

    /* global Path2D */
    var CRp$2 = {};

    CRp$2.drawEdge = function (context, edge, shiftToOriginWithBb) {
      var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var r = this;
      var rs = edge._private.rscratch;

      if (!edge.visible()) {
        return;
      } // if bezier ctrl pts can not be calculated, then die


      if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
        // isNaN in case edge is impossible and browser bugs (e.g. safari)
        return;
      }

      var bb;

      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      }

      var opacity = shouldDrawOpacity ? edge.pstyle('opacity').value : 1;
      var lineStyle = edge.pstyle('line-style').value;
      var edgeWidth = edge.pstyle('width').pfValue;
      var lineCap = edge.pstyle('line-cap').value;

      var drawLine = function drawLine() {
        var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
        context.lineWidth = edgeWidth;
        context.lineCap = lineCap;
        r.eleStrokeStyle(context, edge, strokeOpacity);
        r.drawEdgePath(edge, context, rs.allpts, lineStyle);
        context.lineCap = 'butt'; // reset for other drawing functions
      };

      var drawOverlay = function drawOverlay() {
        if (!shouldDrawOverlay) {
          return;
        }

        r.drawEdgeOverlay(context, edge);
      };

      var drawArrows = function drawArrows() {
        var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
        r.drawArrowheads(context, edge, arrowOpacity);
      };

      var drawText = function drawText() {
        r.drawElementText(context, edge, null, drawLabel);
      };

      context.lineJoin = 'round';
      var ghost = edge.pstyle('ghost').value === 'yes';

      if (ghost) {
        var gx = edge.pstyle('ghost-offset-x').pfValue;
        var gy = edge.pstyle('ghost-offset-y').pfValue;
        var ghostOpacity = edge.pstyle('ghost-opacity').value;
        var effectiveGhostOpacity = opacity * ghostOpacity;
        context.translate(gx, gy);
        drawLine(effectiveGhostOpacity);
        drawArrows(effectiveGhostOpacity);
        context.translate(-gx, -gy);
      }

      drawLine();
      drawArrows();
      drawOverlay();
      drawText();

      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };

    CRp$2.drawEdgeOverlay = function (context, edge) {
      if (!edge.visible()) {
        return;
      }

      var overlayOpacity = edge.pstyle('overlay-opacity').value;

      if (overlayOpacity === 0) {
        return;
      }

      var r = this;
      var usePaths = r.usePaths();
      var rs = edge._private.rscratch;
      var overlayPadding = edge.pstyle('overlay-padding').pfValue;
      var overlayWidth = 2 * overlayPadding;
      var overlayColor = edge.pstyle('overlay-color').value;
      context.lineWidth = overlayWidth;

      if (rs.edgeType === 'self' && !usePaths) {
        context.lineCap = 'butt';
      } else {
        context.lineCap = 'round';
      }

      r.colorStrokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
      r.drawEdgePath(edge, context, rs.allpts, 'solid');
    };

    CRp$2.drawEdgePath = function (edge, context, pts, type) {
      var rs = edge._private.rscratch;
      var canvasCxt = context;
      var path;
      var pathCacheHit = false;
      var usePaths = this.usePaths();
      var lineDashPattern = edge.pstyle('line-dash-pattern').pfValue;
      var lineDashOffset = edge.pstyle('line-dash-offset').pfValue;

      if (usePaths) {
        var pathCacheKey = pts.join('$');
        var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

        if (keyMatches) {
          path = context = rs.pathCache;
          pathCacheHit = true;
        } else {
          path = context = new Path2D();
          rs.pathCacheKey = pathCacheKey;
          rs.pathCache = path;
        }
      }

      if (canvasCxt.setLineDash) {
        // for very outofdate browsers
        switch (type) {
          case 'dotted':
            canvasCxt.setLineDash([1, 1]);
            break;

          case 'dashed':
            canvasCxt.setLineDash(lineDashPattern);
            canvasCxt.lineDashOffset = lineDashOffset;
            break;

          case 'solid':
            canvasCxt.setLineDash([]);
            break;
        }
      }

      if (!pathCacheHit && !rs.badLine) {
        if (context.beginPath) {
          context.beginPath();
        }

        context.moveTo(pts[0], pts[1]);

        switch (rs.edgeType) {
          case 'bezier':
          case 'self':
          case 'compound':
          case 'multibezier':
            for (var i = 2; i + 3 < pts.length; i += 4) {
              context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
            }

            break;

          case 'straight':
          case 'segments':
          case 'haystack':
            for (var _i = 2; _i + 1 < pts.length; _i += 2) {
              context.lineTo(pts[_i], pts[_i + 1]);
            }

            break;
        }
      }

      context = canvasCxt;

      if (usePaths) {
        context.stroke(path);
      } else {
        context.stroke();
      } // reset any line dashes


      if (context.setLineDash) {
        // for very outofdate browsers
        context.setLineDash([]);
      }
    };

    CRp$2.drawArrowheads = function (context, edge, opacity) {
      var rs = edge._private.rscratch;
      var isHaystack = rs.edgeType === 'haystack';

      if (!isHaystack) {
        this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
      }

      this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
      this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);

      if (!isHaystack) {
        this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
      }
    };

    CRp$2.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
      if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
        return;
      }

      var self = this;
      var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;

      if (arrowShape === 'none') {
        return;
      }

      var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
      var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
      var edgeWidth = edge.pstyle('width').pfValue;
      var edgeOpacity = edge.pstyle('opacity').value;

      if (opacity === undefined) {
        opacity = edgeOpacity;
      }

      var gco = context.globalCompositeOperation;

      if (opacity !== 1 || arrowFill === 'hollow') {
        // then extra clear is needed
        context.globalCompositeOperation = 'destination-out';
        self.colorFillStyle(context, 255, 255, 255, 1);
        self.colorStrokeStyle(context, 255, 255, 255, 1);
        self.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);
        context.globalCompositeOperation = gco;
      } // otherwise, the opaque arrow clears it for free :)


      var color = edge.pstyle(prefix + '-arrow-color').value;
      self.colorFillStyle(context, color[0], color[1], color[2], opacity);
      self.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
      self.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
    };

    CRp$2.drawArrowShape = function (edge, context, fill, edgeWidth, shape, x, y, angle) {
      var r = this;
      var usePaths = this.usePaths() && shape !== 'triangle-cross';
      var pathCacheHit = false;
      var path;
      var canvasContext = context;
      var translation = {
        x: x,
        y: y
      };
      var scale = edge.pstyle('arrow-scale').value;
      var size = this.getArrowWidth(edgeWidth, scale);
      var shapeImpl = r.arrowShapes[shape];

      if (usePaths) {
        var cache = r.arrowPathCache = r.arrowPathCache || [];
        var key = hashString(shape);
        var cachedPath = cache[key];

        if (cachedPath != null) {
          path = context = cachedPath;
          pathCacheHit = true;
        } else {
          path = context = new Path2D();
          cache[key] = path;
        }
      }

      if (context.beginPath) {
        context.beginPath();
      }

      if (!pathCacheHit) {
        if (usePaths) {
          // store in the path cache with values easily manipulated later
          shapeImpl.draw(context, 1, 0, {
            x: 0,
            y: 0
          }, 1);
        } else {
          shapeImpl.draw(context, size, angle, translation, edgeWidth);
        }
      }

      if (context.closePath) {
        context.closePath();
      }

      context = canvasContext;

      if (usePaths) {
        // set transform to arrow position/orientation
        context.translate(x, y);
        context.rotate(angle);
        context.scale(size, size);
      }

      if (fill === 'filled' || fill === 'both') {
        if (usePaths) {
          context.fill(path);
        } else {
          context.fill();
        }
      }

      if (fill === 'hollow' || fill === 'both') {
        context.lineWidth = (shapeImpl.matchEdgeWidth ? edgeWidth : 1) / (usePaths ? size : 1);
        context.lineJoin = 'miter';

        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }
      }

      if (usePaths) {
        // reset transform by applying inverse
        context.scale(1 / size, 1 / size);
        context.rotate(-angle);
        context.translate(-x, -y);
      }
    };

    var CRp$3 = {};

    CRp$3.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {
      // detect problematic cases for old browsers with bad images (cheaper than try-catch)
      if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
        return;
      }

      context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
    };

    CRp$3.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
      var r = this;
      var pos = node.position();
      var nodeX = pos.x;
      var nodeY = pos.y;
      var styleObj = node.cy().style();
      var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
      var fit = getIndexedStyle(node, 'background-fit', 'value', index);
      var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
      var nodeW = node.width();
      var nodeH = node.height();
      var paddingX2 = node.padding() * 2;
      var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
      var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
      var rs = node._private.rscratch;
      var clip = node.pstyle('background-clip').value;
      var shouldClip = clip === 'node';
      var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;
      var imgW = img.width || img.cachedW;
      var imgH = img.height || img.cachedH; // workaround for broken browsers like ie

      if (null == imgW || null == imgH) {
        document.body.appendChild(img); // eslint-disable-line no-undef

        imgW = img.cachedW = img.width || img.offsetWidth;
        imgH = img.cachedH = img.height || img.offsetHeight;
        document.body.removeChild(img); // eslint-disable-line no-undef
      }

      var w = imgW;
      var h = imgH;

      if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
        if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
          w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
        } else {
          w = getIndexedStyle(node, 'background-width', 'pfValue', index);
        }
      }

      if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
        if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
          h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
        } else {
          h = getIndexedStyle(node, 'background-height', 'pfValue', index);
        }
      }

      if (w === 0 || h === 0) {
        return; // no point in drawing empty image (and chrome is broken in this case)
      }

      if (fit === 'contain') {
        var scale = Math.min(nodeTW / w, nodeTH / h);
        w *= scale;
        h *= scale;
      } else if (fit === 'cover') {
        var scale = Math.max(nodeTW / w, nodeTH / h);
        w *= scale;
        h *= scale;
      }

      var x = nodeX - nodeTW / 2; // left

      var posXUnits = getIndexedStyle(node, 'background-position-x', 'units', index);
      var posXPfVal = getIndexedStyle(node, 'background-position-x', 'pfValue', index);

      if (posXUnits === '%') {
        x += (nodeTW - w) * posXPfVal;
      } else {
        x += posXPfVal;
      }

      var offXUnits = getIndexedStyle(node, 'background-offset-x', 'units', index);
      var offXPfVal = getIndexedStyle(node, 'background-offset-x', 'pfValue', index);

      if (offXUnits === '%') {
        x += (nodeTW - w) * offXPfVal;
      } else {
        x += offXPfVal;
      }

      var y = nodeY - nodeTH / 2; // top

      var posYUnits = getIndexedStyle(node, 'background-position-y', 'units', index);
      var posYPfVal = getIndexedStyle(node, 'background-position-y', 'pfValue', index);

      if (posYUnits === '%') {
        y += (nodeTH - h) * posYPfVal;
      } else {
        y += posYPfVal;
      }

      var offYUnits = getIndexedStyle(node, 'background-offset-y', 'units', index);
      var offYPfVal = getIndexedStyle(node, 'background-offset-y', 'pfValue', index);

      if (offYUnits === '%') {
        y += (nodeTH - h) * offYPfVal;
      } else {
        y += offYPfVal;
      }

      if (rs.pathCache) {
        x -= nodeX;
        y -= nodeY;
        nodeX = 0;
        nodeY = 0;
      }

      var gAlpha = context.globalAlpha;
      context.globalAlpha = imgOpacity;

      if (repeat === 'no-repeat') {
        if (shouldClip) {
          context.save();

          if (rs.pathCache) {
            context.clip(rs.pathCache);
          } else {
            r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
            context.clip();
          }
        }

        r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);

        if (shouldClip) {
          context.restore();
        }
      } else {
        var pattern = context.createPattern(img, repeat);
        context.fillStyle = pattern;
        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
        context.translate(x, y);
        context.fill();
        context.translate(-x, -y);
      }

      context.globalAlpha = gAlpha;
    };

    var CRp$4 = {};

    CRp$4.eleTextBiggerThanMin = function (ele, scale) {
      if (!scale) {
        var zoom = ele.cy().zoom();
        var pxRatio = this.getPixelRatio();
        var lvl = Math.ceil(log2(zoom * pxRatio)); // the effective texture level

        scale = Math.pow(2, lvl);
      }

      var computedSize = ele.pstyle('font-size').pfValue * scale;
      var minSize = ele.pstyle('min-zoomed-font-size').pfValue;

      if (computedSize < minSize) {
        return false;
      }

      return true;
    };

    CRp$4.drawElementText = function (context, ele, shiftToOriginWithBb, force, prefix) {
      var useEleOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var r = this;

      if (force == null) {
        if (!r.eleTextBiggerThanMin(ele)) {
          return;
        }
      } else if (force === false) {
        return;
      }

      if (ele.isNode()) {
        var label = ele.pstyle('label');

        if (!label || !label.value) {
          return;
        }

        var textHalign = ele.pstyle('text-halign').strValue;

        switch (textHalign) {
          case 'left':
            context.textAlign = 'right';
            break;

          case 'right':
            context.textAlign = 'left';
            break;

          default:
            // e.g. center
            context.textAlign = 'center';
        }

        context.textBaseline = 'bottom';
      } else {
        var label = ele.pstyle('label');
        var srcLabel = ele.pstyle('source-label');
        var tgtLabel = ele.pstyle('target-label');

        if ((!label || !label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
          return;
        }

        context.textAlign = 'center';
        context.textBaseline = 'bottom';
      }

      var applyRotation = !shiftToOriginWithBb;
      var bb;

      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      }

      if (prefix == null) {
        r.drawText(context, ele, null, applyRotation, useEleOpacity);

        if (ele.isEdge()) {
          r.drawText(context, ele, 'source', applyRotation, useEleOpacity);
          r.drawText(context, ele, 'target', applyRotation, useEleOpacity);
        }
      } else {
        r.drawText(context, ele, prefix, applyRotation, useEleOpacity);
      }

      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };

    CRp$4.getFontCache = function (context) {
      var cache;
      this.fontCaches = this.fontCaches || [];

      for (var i = 0; i < this.fontCaches.length; i++) {
        cache = this.fontCaches[i];

        if (cache.context === context) {
          return cache;
        }
      }

      cache = {
        context: context
      };
      this.fontCaches.push(cache);
      return cache;
    }; // set up canvas context with font
    // returns transformed text string


    CRp$4.setupTextStyle = function (context, ele) {
      var useEleOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      // Font style
      var labelStyle = ele.pstyle('font-style').strValue;
      var labelSize = ele.pstyle('font-size').pfValue + 'px';
      var labelFamily = ele.pstyle('font-family').strValue;
      var labelWeight = ele.pstyle('font-weight').strValue;
      var opacity = ele.pstyle('text-opacity').value * (useEleOpacity ? ele.effectiveOpacity() : 1);
      var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
      var color = ele.pstyle('color').value;
      var outlineColor = ele.pstyle('text-outline-color').value;
      context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;
      context.lineJoin = 'round'; // so text outlines aren't jagged

      this.colorFillStyle(context, color[0], color[1], color[2], opacity);
      this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
    }; // TODO ensure re-used


    function roundRect(ctx, x, y, width, height, radius) {
      var radius = radius || 5;
      ctx.beginPath();
      ctx.moveTo(x + radius, y);
      ctx.lineTo(x + width - radius, y);
      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
      ctx.lineTo(x + width, y + height - radius);
      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
      ctx.lineTo(x + radius, y + height);
      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
      ctx.lineTo(x, y + radius);
      ctx.quadraticCurveTo(x, y, x + radius, y);
      ctx.closePath();
      ctx.fill();
    }

    CRp$4.getTextAngle = function (ele, prefix) {
      var theta;
      var _p = ele._private;
      var rscratch = _p.rscratch;
      var pdash = prefix ? prefix + '-' : '';
      var rotation = ele.pstyle(pdash + 'text-rotation');
      var textAngle = getPrefixedProperty(rscratch, 'labelAngle', prefix);

      if (rotation.strValue === 'autorotate') {
        theta = ele.isEdge() ? textAngle : 0;
      } else if (rotation.strValue === 'none') {
        theta = 0;
      } else {
        theta = rotation.pfValue;
      }

      return theta;
    };

    CRp$4.drawText = function (context, ele, prefix) {
      var applyRotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var useEleOpacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var _p = ele._private;
      var rscratch = _p.rscratch;
      var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;

      if (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0) {
        return;
      } // use 'main' as an alias for the main label (i.e. null prefix)


      if (prefix === 'main') {
        prefix = null;
      }

      var textX = getPrefixedProperty(rscratch, 'labelX', prefix);
      var textY = getPrefixedProperty(rscratch, 'labelY', prefix);
      var text = this.getLabelText(ele, prefix);

      if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
        this.setupTextStyle(context, ele, useEleOpacity);
        var pdash = prefix ? prefix + '-' : '';
        var textW = getPrefixedProperty(rscratch, 'labelWidth', prefix);
        var textH = getPrefixedProperty(rscratch, 'labelHeight', prefix);
        var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
        var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;
        var isEdge = ele.isEdge();
        var halign = ele.pstyle('text-halign').value;
        var valign = ele.pstyle('text-valign').value;

        if (isEdge) {
          halign = 'center';
          valign = 'center';
        }

        textX += marginX;
        textY += marginY;
        var theta;

        if (!applyRotation) {
          theta = 0;
        } else {
          theta = this.getTextAngle(ele, prefix);
        }

        if (theta !== 0) {
          var orgTextX = textX;
          var orgTextY = textY;
          context.translate(orgTextX, orgTextY);
          context.rotate(theta);
          textX = 0;
          textY = 0;
        }

        switch (valign) {
          case 'top':
            break;

          case 'center':
            textY += textH / 2;
            break;

          case 'bottom':
            textY += textH;
            break;
        }

        var backgroundOpacity = ele.pstyle('text-background-opacity').value;
        var borderOpacity = ele.pstyle('text-border-opacity').value;
        var textBorderWidth = ele.pstyle('text-border-width').pfValue;
        var backgroundPadding = ele.pstyle('text-background-padding').pfValue;

        if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
          var bgX = textX - backgroundPadding;

          switch (halign) {
            case 'left':
              bgX -= textW;
              break;

            case 'center':
              bgX -= textW / 2;
              break;
          }

          var bgY = textY - textH - backgroundPadding;
          var bgW = textW + 2 * backgroundPadding;
          var bgH = textH + 2 * backgroundPadding;

          if (backgroundOpacity > 0) {
            var textFill = context.fillStyle;
            var textBackgroundColor = ele.pstyle('text-background-color').value;
            context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
            var styleShape = ele.pstyle('text-background-shape').strValue;

            if (styleShape == 'roundrectangle') {
              roundRect(context, bgX, bgY, bgW, bgH, 2);
            } else {
              context.fillRect(bgX, bgY, bgW, bgH);
            }

            context.fillStyle = textFill;
          }

          if (textBorderWidth > 0 && borderOpacity > 0) {
            var textStroke = context.strokeStyle;
            var textLineWidth = context.lineWidth;
            var textBorderColor = ele.pstyle('text-border-color').value;
            var textBorderStyle = ele.pstyle('text-border-style').value;
            context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
            context.lineWidth = textBorderWidth;

            if (context.setLineDash) {
              // for very outofdate browsers
              switch (textBorderStyle) {
                case 'dotted':
                  context.setLineDash([1, 1]);
                  break;

                case 'dashed':
                  context.setLineDash([4, 2]);
                  break;

                case 'double':
                  context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders

                  context.setLineDash([]);
                  break;

                case 'solid':
                  context.setLineDash([]);
                  break;
              }
            }

            context.strokeRect(bgX, bgY, bgW, bgH);

            if (textBorderStyle === 'double') {
              var whiteWidth = textBorderWidth / 2;
              context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
            }

            if (context.setLineDash) {
              // for very outofdate browsers
              context.setLineDash([]);
            }

            context.lineWidth = textLineWidth;
            context.strokeStyle = textStroke;
          }
        }

        var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

        if (lineWidth > 0) {
          context.lineWidth = lineWidth;
        }

        if (ele.pstyle('text-wrap').value === 'wrap') {
          var lines = getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
          var lineHeight = textH / lines.length;

          switch (valign) {
            case 'top':
              textY -= (lines.length - 1) * lineHeight;
              break;

            case 'center':
            case 'bottom':
              textY -= (lines.length - 1) * lineHeight;
              break;
          }

          for (var l = 0; l < lines.length; l++) {
            if (lineWidth > 0) {
              context.strokeText(lines[l], textX, textY);
            }

            context.fillText(lines[l], textX, textY);
            textY += lineHeight;
          }
        } else {
          if (lineWidth > 0) {
            context.strokeText(text, textX, textY);
          }

          context.fillText(text, textX, textY);
        }

        if (theta !== 0) {
          context.rotate(-theta);
          context.translate(-orgTextX, -orgTextY);
        }
      }
    };

    /* global Path2D */
    var CRp$5 = {};

    CRp$5.drawNode = function (context, node, shiftToOriginWithBb) {
      var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
      var r = this;
      var nodeWidth, nodeHeight;
      var _p = node._private;
      var rs = _p.rscratch;
      var pos = node.position();

      if (!number(pos.x) || !number(pos.y)) {
        return; // can't draw node with undefined position
      }

      if (!node.visible()) {
        return;
      }

      var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
      var usePaths = r.usePaths();
      var path;
      var pathCacheHit = false;
      var padding = node.padding();
      nodeWidth = node.width() + 2 * padding;
      nodeHeight = node.height() + 2 * padding; //
      // setup shift

      var bb;

      if (shiftToOriginWithBb) {
        bb = shiftToOriginWithBb;
        context.translate(-bb.x1, -bb.y1);
      } //
      // load bg image


      var bgImgProp = node.pstyle('background-image');
      var urls = bgImgProp.value;
      var urlDefined = new Array(urls.length);
      var image = new Array(urls.length);
      var numImages = 0;

      for (var i = 0; i < urls.length; i++) {
        var url = urls[i];
        var defd = urlDefined[i] = url != null && url !== 'none';

        if (defd) {
          var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);
          numImages++; // get image, and if not loaded then ask to redraw when later loaded

          image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
            _p.backgroundTimestamp = Date.now();
            node.emitAndNotify('background');
          });
        }
      } //
      // setup styles


      var darkness = node.pstyle('background-blacken').value;
      var borderWidth = node.pstyle('border-width').pfValue;
      var bgOpacity = node.pstyle('background-opacity').value * eleOpacity;
      var borderColor = node.pstyle('border-color').value;
      var borderStyle = node.pstyle('border-style').value;
      var borderOpacity = node.pstyle('border-opacity').value * eleOpacity;
      context.lineJoin = 'miter'; // so borders are square with the node shape

      var setupShapeColor = function setupShapeColor() {
        var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;
        r.eleFillStyle(context, node, bgOpy);
      };

      var setupBorderColor = function setupBorderColor() {
        var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;
        r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
      }; //
      // setup shape


      var styleShape = node.pstyle('shape').strValue;
      var shapePts = node.pstyle('shape-polygon-points').pfValue;

      if (usePaths) {
        context.translate(pos.x, pos.y);
        var pathCache = r.nodePathCache = r.nodePathCache || [];
        var key = hashStrings(styleShape === 'polygon' ? styleShape + ',' + shapePts.join(',') : styleShape, '' + nodeHeight, '' + nodeWidth);
        var cachedPath = pathCache[key];

        if (cachedPath != null) {
          path = cachedPath;
          pathCacheHit = true;
          rs.pathCache = path;
        } else {
          path = new Path2D();
          pathCache[key] = rs.pathCache = path;
        }
      }

      var drawShape = function drawShape() {
        if (!pathCacheHit) {
          var npos = pos;

          if (usePaths) {
            npos = {
              x: 0,
              y: 0
            };
          }

          r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
        }

        if (usePaths) {
          context.fill(path);
        } else {
          context.fill();
        }
      };

      var drawImages = function drawImages() {
        var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
        var prevBging = _p.backgrounding;
        var totalCompleted = 0;

        for (var _i = 0; _i < image.length; _i++) {
          if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
            totalCompleted++;
            r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
          }
        }

        _p.backgrounding = !(totalCompleted === numImages);

        if (prevBging !== _p.backgrounding) {
          // update style b/c :backgrounding state changed
          node.updateStyle(false);
        }
      };

      var drawPie = function drawPie() {
        var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eleOpacity;

        if (r.hasPie(node)) {
          r.drawPie(context, node, pieOpacity); // redraw/restore path if steps after pie need it

          if (redrawShape) {
            if (!usePaths) {
              r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
            }
          }
        }
      };

      var darken = function darken() {
        var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
        var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
        var c = darkness > 0 ? 0 : 255;

        if (darkness !== 0) {
          r.colorFillStyle(context, c, c, c, opacity);

          if (usePaths) {
            context.fill(path);
          } else {
            context.fill();
          }
        }
      };

      var drawBorder = function drawBorder() {
        if (borderWidth > 0) {
          context.lineWidth = borderWidth;
          context.lineCap = 'butt';

          if (context.setLineDash) {
            // for very outofdate browsers
            switch (borderStyle) {
              case 'dotted':
                context.setLineDash([1, 1]);
                break;

              case 'dashed':
                context.setLineDash([4, 2]);
                break;

              case 'solid':
              case 'double':
                context.setLineDash([]);
                break;
            }
          }

          if (usePaths) {
            context.stroke(path);
          } else {
            context.stroke();
          }

          if (borderStyle === 'double') {
            context.lineWidth = borderWidth / 3;
            var gco = context.globalCompositeOperation;
            context.globalCompositeOperation = 'destination-out';

            if (usePaths) {
              context.stroke(path);
            } else {
              context.stroke();
            }

            context.globalCompositeOperation = gco;
          } // reset in case we changed the border style


          if (context.setLineDash) {
            // for very outofdate browsers
            context.setLineDash([]);
          }
        }
      };

      var drawOverlay = function drawOverlay() {
        if (shouldDrawOverlay) {
          r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
        }
      };

      var drawText = function drawText() {
        r.drawElementText(context, node, null, drawLabel);
      };

      var ghost = node.pstyle('ghost').value === 'yes';

      if (ghost) {
        var gx = node.pstyle('ghost-offset-x').pfValue;
        var gy = node.pstyle('ghost-offset-y').pfValue;
        var ghostOpacity = node.pstyle('ghost-opacity').value;
        var effGhostOpacity = ghostOpacity * eleOpacity;
        context.translate(gx, gy);
        setupShapeColor(ghostOpacity * bgOpacity);
        drawShape();
        drawImages(effGhostOpacity);
        drawPie(darkness !== 0 || borderWidth !== 0);
        darken(effGhostOpacity);
        setupBorderColor(ghostOpacity * borderOpacity);
        drawBorder();
        context.translate(-gx, -gy);
      }

      setupShapeColor();
      drawShape();
      drawImages();
      drawPie(darkness !== 0 || borderWidth !== 0);
      darken();
      setupBorderColor();
      drawBorder();

      if (usePaths) {
        context.translate(-pos.x, -pos.y);
      }

      drawText();
      drawOverlay(); //
      // clean up shift

      if (shiftToOriginWithBb) {
        context.translate(bb.x1, bb.y1);
      }
    };

    CRp$5.drawNodeOverlay = function (context, node, pos, nodeWidth, nodeHeight) {
      var r = this;

      if (!node.visible()) {
        return;
      }

      var overlayPadding = node.pstyle('overlay-padding').pfValue;
      var overlayOpacity = node.pstyle('overlay-opacity').value;
      var overlayColor = node.pstyle('overlay-color').value;

      if (overlayOpacity > 0) {
        pos = pos || node.position();

        if (nodeWidth == null || nodeHeight == null) {
          var padding = node.padding();
          nodeWidth = node.width() + 2 * padding;
          nodeHeight = node.height() + 2 * padding;
        }

        r.colorFillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
        r.nodeShapes['roundrectangle'].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);
        context.fill();
      }
    }; // does the node have at least one pie piece?


    CRp$5.hasPie = function (node) {
      node = node[0]; // ensure ele ref

      return node._private.hasPie;
    };

    CRp$5.drawPie = function (context, node, nodeOpacity, pos) {
      node = node[0]; // ensure ele ref

      pos = pos || node.position();
      var cyStyle = node.cy().style();
      var pieSize = node.pstyle('pie-size');
      var x = pos.x;
      var y = pos.y;
      var nodeW = node.width();
      var nodeH = node.height();
      var radius = Math.min(nodeW, nodeH) / 2; // must fit in node

      var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]

      var usePaths = this.usePaths();

      if (usePaths) {
        x = 0;
        y = 0;
      }

      if (pieSize.units === '%') {
        radius = radius * pieSize.pfValue;
      } else if (pieSize.pfValue !== undefined) {
        radius = pieSize.pfValue / 2;
      }

      for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
        // 1..N
        var size = node.pstyle('pie-' + i + '-background-size').value;
        var color = node.pstyle('pie-' + i + '-background-color').value;
        var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
        var percent = size / 100; // map integer range [0, 100] to [0, 1]
        // percent can't push beyond 1

        if (percent + lastPercent > 1) {
          percent = 1 - lastPercent;
        }

        var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise

        var angleDelta = 2 * Math.PI * percent;
        var angleEnd = angleStart + angleDelta; // ignore if
        // - zero size
        // - we're already beyond the full circle
        // - adding the current slice would go beyond the full circle

        if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
          continue;
        }

        context.beginPath();
        context.moveTo(x, y);
        context.arc(x, y, radius, angleStart, angleEnd);
        context.closePath();
        this.colorFillStyle(context, color[0], color[1], color[2], opacity);
        context.fill();
        lastPercent += percent;
      }
    };

    var CRp$6 = {};
    var motionBlurDelay = 100; // var isFirefox = typeof InstallTrigger !== 'undefined';

    CRp$6.getPixelRatio = function () {
      var context = this.data.contexts[0];

      if (this.forcedPixelRatio != null) {
        return this.forcedPixelRatio;
      }

      var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
      return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
    };

    CRp$6.paintCache = function (context) {
      var caches = this.paintCaches = this.paintCaches || [];
      var needToCreateCache = true;
      var cache;

      for (var i = 0; i < caches.length; i++) {
        cache = caches[i];

        if (cache.context === context) {
          needToCreateCache = false;
          break;
        }
      }

      if (needToCreateCache) {
        cache = {
          context: context
        };
        caches.push(cache);
      }

      return cache;
    };

    CRp$6.createGradientStyleFor = function (context, shapeStyleName, ele, fill, opacity) {
      var gradientStyle;
      var usePaths = this.usePaths();
      var colors = ele.pstyle(shapeStyleName + '-gradient-stop-colors').value,
          positions = ele.pstyle(shapeStyleName + '-gradient-stop-positions').pfValue;

      if (fill === 'radial-gradient') {
        if (ele.isEdge()) {
          var start = ele.sourceEndpoint(),
              end = ele.targetEndpoint(),
              mid = ele.midpoint();
          var d1 = dist(start, mid);
          var d2 = dist(end, mid);
          gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
        } else {
          var pos = usePaths ? {
            x: 0,
            y: 0
          } : ele.position(),
              width = ele.width(),
              height = ele.height();
          gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));
        }
      } else {
        if (ele.isEdge()) {
          var _start = ele.sourceEndpoint(),
              _end = ele.targetEndpoint();

          gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
        } else {
          var _pos = usePaths ? {
            x: 0,
            y: 0
          } : ele.position(),
              _width = ele.width(),
              _height = ele.height(),
              halfWidth = _width / 2,
              halfHeight = _height / 2;

          var direction = ele.pstyle('background-gradient-direction').value;

          switch (direction) {
            case 'to-bottom':
              gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
              break;

            case 'to-top':
              gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
              break;

            case 'to-left':
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
              break;

            case 'to-right':
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
              break;

            case 'to-bottom-right':
            case 'to-right-bottom':
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
              break;

            case 'to-top-right':
            case 'to-right-top':
              gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
              break;

            case 'to-bottom-left':
            case 'to-left-bottom':
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
              break;

            case 'to-top-left':
            case 'to-left-top':
              gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
              break;
          }
        }
      }

      if (!gradientStyle) return null; // invalid gradient style

      var hasPositions = positions.length === colors.length;
      var length = colors.length;

      for (var i = 0; i < length; i++) {
        gradientStyle.addColorStop(hasPositions ? positions[i] : i / (length - 1), 'rgba(' + colors[i][0] + ',' + colors[i][1] + ',' + colors[i][2] + ',' + opacity + ')');
      }

      return gradientStyle;
    };

    CRp$6.gradientFillStyle = function (context, ele, fill, opacity) {
      var gradientStyle = this.createGradientStyleFor(context, 'background', ele, fill, opacity);
      if (!gradientStyle) return null; // error

      context.fillStyle = gradientStyle;
    };

    CRp$6.colorFillStyle = function (context, r, g, b, a) {
      context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
      // var cache = this.paintCache(context);
      // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
      // if( cache.fillStyle !== fillStyle ){
      //   context.fillStyle = cache.fillStyle = fillStyle;
      // }
    };

    CRp$6.eleFillStyle = function (context, ele, opacity) {
      var backgroundFill = ele.pstyle('background-fill').value;

      if (backgroundFill === 'linear-gradient' || backgroundFill === 'radial-gradient') {
        this.gradientFillStyle(context, ele, backgroundFill, opacity);
      } else {
        var backgroundColor = ele.pstyle('background-color').value;
        this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
      }
    };

    CRp$6.gradientStrokeStyle = function (context, ele, fill, opacity) {
      var gradientStyle = this.createGradientStyleFor(context, 'line', ele, fill, opacity);
      if (!gradientStyle) return null; // error

      context.strokeStyle = gradientStyle;
    };

    CRp$6.colorStrokeStyle = function (context, r, g, b, a) {
      context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
      // var cache = this.paintCache(context);
      // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
      // if( cache.strokeStyle !== strokeStyle ){
      //   context.strokeStyle = cache.strokeStyle = strokeStyle;
      // }
    };

    CRp$6.eleStrokeStyle = function (context, ele, opacity) {
      var lineFill = ele.pstyle('line-fill').value;

      if (lineFill === 'linear-gradient' || lineFill === 'radial-gradient') {
        this.gradientStrokeStyle(context, ele, lineFill, opacity);
      } else {
        var lineColor = ele.pstyle('line-color').value;
        this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
      }
    }; // Resize canvas


    CRp$6.matchCanvasSize = function (container) {
      var r = this;
      var data = r.data;
      var bb = r.findContainerClientCoords();
      var width = bb[2];
      var height = bb[3];
      var pixelRatio = r.getPixelRatio();
      var mbPxRatio = r.motionBlurPxRatio;

      if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
        pixelRatio = mbPxRatio;
      }

      var canvasWidth = width * pixelRatio;
      var canvasHeight = height * pixelRatio;
      var canvas;

      if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
        return; // save cycles if same
      }

      r.fontCaches = null; // resizing resets the style

      var canvasContainer = data.canvasContainer;
      canvasContainer.style.width = width + 'px';
      canvasContainer.style.height = height + 'px';

      for (var i = 0; i < r.CANVAS_LAYERS; i++) {
        canvas = data.canvases[i];
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
      }

      for (var i = 0; i < r.BUFFER_COUNT; i++) {
        canvas = data.bufferCanvases[i];
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
      }

      r.textureMult = 1;

      if (pixelRatio <= 1) {
        canvas = data.bufferCanvases[r.TEXTURE_BUFFER];
        r.textureMult = 2;
        canvas.width = canvasWidth * r.textureMult;
        canvas.height = canvasHeight * r.textureMult;
      }

      r.canvasWidth = canvasWidth;
      r.canvasHeight = canvasHeight;
    };

    CRp$6.renderTo = function (cxt, zoom, pan, pxRatio) {
      this.render({
        forcedContext: cxt,
        forcedZoom: zoom,
        forcedPan: pan,
        drawAllLayers: true,
        forcedPxRatio: pxRatio
      });
    };

    CRp$6.render = function (options) {
      options = options || staticEmptyObject();
      var forcedContext = options.forcedContext;
      var drawAllLayers = options.drawAllLayers;
      var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
      var forcedZoom = options.forcedZoom;
      var forcedPan = options.forcedPan;
      var r = this;
      var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
      var cy = r.cy;
      var data = r.data;
      var needDraw = data.canvasNeedsRedraw;
      var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
      var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
      var mbPxRatio = r.motionBlurPxRatio;
      var hasCompoundNodes = cy.hasCompoundNodes();
      var inNodeDragGesture = r.hoverData.draggingEles;
      var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
      motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
      var motionBlurFadeEffect = motionBlur;

      if (!forcedContext) {
        if (r.prevPxRatio !== pixelRatio) {
          r.invalidateContainerClientCoordsCache();
          r.matchCanvasSize(r.container);
          r.redrawHint('eles', true);
          r.redrawHint('drag', true);
        }

        r.prevPxRatio = pixelRatio;
      }

      if (!forcedContext && r.motionBlurTimeout) {
        clearTimeout(r.motionBlurTimeout);
      }

      if (motionBlur) {
        if (r.mbFrames == null) {
          r.mbFrames = 0;
        }

        r.mbFrames++;

        if (r.mbFrames < 3) {
          // need several frames before even high quality motionblur
          motionBlurFadeEffect = false;
        } // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)


        if (r.mbFrames > r.minMbLowQualFrames) {
          //r.fullQualityMb = false;
          r.motionBlurPxRatio = r.mbPxRBlurry;
        }
      }

      if (r.clearingMotionBlur) {
        r.motionBlurPxRatio = 1;
      } // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
      // because a rogue async texture frame would clear needDraw


      if (r.textureDrawLastFrame && !textureDraw) {
        needDraw[r.NODE] = true;
        needDraw[r.SELECT_BOX] = true;
      }

      var style = cy.style();
      var zoom = cy.zoom();
      var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
      var pan = cy.pan();
      var effectivePan = {
        x: pan.x,
        y: pan.y
      };
      var vp = {
        zoom: zoom,
        pan: {
          x: pan.x,
          y: pan.y
        }
      };
      var prevVp = r.prevViewport;
      var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y; // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)

      if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
        r.motionBlurPxRatio = 1;
      }

      if (forcedPan) {
        effectivePan = forcedPan;
      } // apply pixel ratio


      effectiveZoom *= pixelRatio;
      effectivePan.x *= pixelRatio;
      effectivePan.y *= pixelRatio;
      var eles = r.getCachedZSortedEles();

      function mbclear(context, x, y, w, h) {
        var gco = context.globalCompositeOperation;
        context.globalCompositeOperation = 'destination-out';
        r.colorFillStyle(context, 255, 255, 255, r.motionBlurTransparency);
        context.fillRect(x, y, w, h);
        context.globalCompositeOperation = gco;
      }

      function setContextTransform(context, clear) {
        var ePan, eZoom, w, h;

        if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
          ePan = {
            x: pan.x * mbPxRatio,
            y: pan.y * mbPxRatio
          };
          eZoom = zoom * mbPxRatio;
          w = r.canvasWidth * mbPxRatio;
          h = r.canvasHeight * mbPxRatio;
        } else {
          ePan = effectivePan;
          eZoom = effectiveZoom;
          w = r.canvasWidth;
          h = r.canvasHeight;
        }

        context.setTransform(1, 0, 0, 1, 0, 0);

        if (clear === 'motionBlur') {
          mbclear(context, 0, 0, w, h);
        } else if (!forcedContext && (clear === undefined || clear)) {
          context.clearRect(0, 0, w, h);
        }

        if (!drawAllLayers) {
          context.translate(ePan.x, ePan.y);
          context.scale(eZoom, eZoom);
        }

        if (forcedPan) {
          context.translate(forcedPan.x, forcedPan.y);
        }

        if (forcedZoom) {
          context.scale(forcedZoom, forcedZoom);
        }
      }

      if (!textureDraw) {
        r.textureDrawLastFrame = false;
      }

      if (textureDraw) {
        r.textureDrawLastFrame = true;

        if (!r.textureCache) {
          r.textureCache = {};
          r.textureCache.bb = cy.mutableElements().boundingBox();
          r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];
          var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];
          cxt.setTransform(1, 0, 0, 1, 0, 0);
          cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);
          r.render({
            forcedContext: cxt,
            drawOnlyNodeLayer: true,
            forcedPxRatio: pixelRatio * r.textureMult
          });
          var vp = r.textureCache.viewport = {
            zoom: cy.zoom(),
            pan: cy.pan(),
            width: r.canvasWidth,
            height: r.canvasHeight
          };
          vp.mpan = {
            x: (0 - vp.pan.x) / vp.zoom,
            y: (0 - vp.pan.y) / vp.zoom
          };
        }

        needDraw[r.DRAG] = false;
        needDraw[r.NODE] = false;
        var context = data.contexts[r.NODE];
        var texture = r.textureCache.texture;
        var vp = r.textureCache.viewport;
        context.setTransform(1, 0, 0, 1, 0, 0);

        if (motionBlur) {
          mbclear(context, 0, 0, vp.width, vp.height);
        } else {
          context.clearRect(0, 0, vp.width, vp.height);
        }

        var outsideBgColor = style.core('outside-texture-bg-color').value;
        var outsideBgOpacity = style.core('outside-texture-bg-opacity').value;
        r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
        context.fillRect(0, 0, vp.width, vp.height);
        var zoom = cy.zoom();
        setContextTransform(context, false);
        context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
        context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
      } else if (r.textureOnViewport && !forcedContext) {
        // clear the cache since we don't need it
        r.textureCache = null;
      }

      var extent = cy.extent();
      var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles;
      var hideEdges = r.hideEdgesOnViewport && vpManip;
      var needMbClear = [];
      needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;

      if (needMbClear[r.NODE]) {
        r.clearedForMotionBlur[r.NODE] = true;
      }

      needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;

      if (needMbClear[r.DRAG]) {
        r.clearedForMotionBlur[r.DRAG] = true;
      }

      if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
        var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
        var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
        var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;
        setContextTransform(context, clear);

        if (hideEdges) {
          r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
        } else {
          r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
        }

        if (r.debug) {
          r.drawDebugPoints(context, eles.nondrag);
        }

        if (!drawAllLayers && !motionBlur) {
          needDraw[r.NODE] = false;
        }
      }

      if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
        var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
        var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);
        setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);

        if (hideEdges) {
          r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
        } else {
          r.drawCachedElements(context, eles.drag, pixelRatio, extent);
        }

        if (r.debug) {
          r.drawDebugPoints(context, eles.drag);
        }

        if (!drawAllLayers && !motionBlur) {
          needDraw[r.DRAG] = false;
        }
      }

      if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
        var context = forcedContext || data.contexts[r.SELECT_BOX];
        setContextTransform(context);

        if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
          var zoom = r.cy.zoom();
          var borderWidth = style.core('selection-box-border-width').value / zoom;
          context.lineWidth = borderWidth;
          context.fillStyle = 'rgba(' + style.core('selection-box-color').value[0] + ',' + style.core('selection-box-color').value[1] + ',' + style.core('selection-box-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
          context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);

          if (borderWidth > 0) {
            context.strokeStyle = 'rgba(' + style.core('selection-box-border-color').value[0] + ',' + style.core('selection-box-border-color').value[1] + ',' + style.core('selection-box-border-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
            context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
          }
        }

        if (data.bgActivePosistion && !r.hoverData.selecting) {
          var zoom = r.cy.zoom();
          var pos = data.bgActivePosistion;
          context.fillStyle = 'rgba(' + style.core('active-bg-color').value[0] + ',' + style.core('active-bg-color').value[1] + ',' + style.core('active-bg-color').value[2] + ',' + style.core('active-bg-opacity').value + ')';
          context.beginPath();
          context.arc(pos.x, pos.y, style.core('active-bg-size').pfValue / zoom, 0, 2 * Math.PI);
          context.fill();
        }

        var timeToRender = r.lastRedrawTime;

        if (r.showFps && timeToRender) {
          timeToRender = Math.round(timeToRender);
          var fps = Math.round(1000 / timeToRender);
          context.setTransform(1, 0, 0, 1, 0, 0);
          context.fillStyle = 'rgba(255, 0, 0, 0.75)';
          context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
          context.lineWidth = 1;
          context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);
          var maxFps = 60;
          context.strokeRect(0, 30, 250, 20);
          context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
        }

        if (!drawAllLayers) {
          needDraw[r.SELECT_BOX] = false;
        }
      } // motionblur: blit rendered blurry frames


      if (motionBlur && mbPxRatio !== 1) {
        var cxtNode = data.contexts[r.NODE];
        var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];
        var cxtDrag = data.contexts[r.DRAG];
        var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];

        var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
          cxt.setTransform(1, 0, 0, 1, 0, 0);

          if (needClear || !motionBlurFadeEffect) {
            cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
          } else {
            mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
          }

          var pxr = mbPxRatio;
          cxt.drawImage(txt, // img
          0, 0, // sx, sy
          r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
          0, 0, // x, y
          r.canvasWidth, r.canvasHeight // w, h
          );
        };

        if (needDraw[r.NODE] || needMbClear[r.NODE]) {
          drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
          needDraw[r.NODE] = false;
        }

        if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
          drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
          needDraw[r.DRAG] = false;
        }
      }

      r.prevViewport = vp;

      if (r.clearingMotionBlur) {
        r.clearingMotionBlur = false;
        r.motionBlurCleared = true;
        r.motionBlur = true;
      }

      if (motionBlur) {
        r.motionBlurTimeout = setTimeout(function () {
          r.motionBlurTimeout = null;
          r.clearedForMotionBlur[r.NODE] = false;
          r.clearedForMotionBlur[r.DRAG] = false;
          r.motionBlur = false;
          r.clearingMotionBlur = !textureDraw;
          r.mbFrames = 0;
          needDraw[r.NODE] = true;
          needDraw[r.DRAG] = true;
          r.redraw();
        }, motionBlurDelay);
      }

      if (!forcedContext) {
        cy.emit('render');
      }
    };

    var CRp$7 = {}; // @O Polygon drawing

    CRp$7.drawPolygonPath = function (context, x, y, width, height, points) {
      var halfW = width / 2;
      var halfH = height / 2;

      if (context.beginPath) {
        context.beginPath();
      }

      context.moveTo(x + halfW * points[0], y + halfH * points[1]);

      for (var i = 1; i < points.length / 2; i++) {
        context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
      }

      context.closePath();
    }; // Round rectangle drawing


    CRp$7.drawRoundRectanglePath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerRadius = getRoundRectangleRadius(width, height);

      if (context.beginPath) {
        context.beginPath();
      } // Start at top middle


      context.moveTo(x, y - halfHeight); // Arc from middle top to right side

      context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom

      context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side

      context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder

      context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line

      context.lineTo(x, y - halfHeight);
      context.closePath();
    };

    CRp$7.drawBottomRoundRectanglePath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerRadius = getRoundRectangleRadius(width, height);

      if (context.beginPath) {
        context.beginPath();
      } // Start at top middle


      context.moveTo(x, y - halfHeight);
      context.lineTo(x + halfWidth, y - halfHeight);
      context.lineTo(x + halfWidth, y);
      context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
      context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
      context.lineTo(x - halfWidth, y - halfHeight);
      context.lineTo(x, y - halfHeight);
      context.closePath();
    };

    CRp$7.drawCutRectanglePath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var cornerLength = getCutRectangleCornerLength();

      if (context.beginPath) {
        context.beginPath();
      }

      context.moveTo(x - halfWidth + cornerLength, y - halfHeight);
      context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
      context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
      context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
      context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
      context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
      context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
      context.lineTo(x - halfWidth, y - halfHeight + cornerLength);
      context.closePath();
    };

    CRp$7.drawBarrelPath = function (context, x, y, width, height) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var xBegin = x - halfWidth;
      var xEnd = x + halfWidth;
      var yBegin = y - halfHeight;
      var yEnd = y + halfHeight;
      var barrelCurveConstants = getBarrelCurveConstants(width, height);
      var wOffset = barrelCurveConstants.widthOffset;
      var hOffset = barrelCurveConstants.heightOffset;
      var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;

      if (context.beginPath) {
        context.beginPath();
      }

      context.moveTo(xBegin, yBegin + hOffset);
      context.lineTo(xBegin, yEnd - hOffset);
      context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
      context.lineTo(xEnd - wOffset, yEnd);
      context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
      context.lineTo(xEnd, yBegin + hOffset);
      context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
      context.lineTo(xBegin + wOffset, yBegin);
      context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
      context.closePath();
    };

    var sin0 = Math.sin(0);
    var cos0 = Math.cos(0);
    var sin = {};
    var cos = {};
    var ellipseStepSize = Math.PI / 40;

    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
      sin[i] = Math.sin(i);
      cos[i] = Math.cos(i);
    }

    CRp$7.drawEllipsePath = function (context, centerX, centerY, width, height) {
      if (context.beginPath) {
        context.beginPath();
      }

      if (context.ellipse) {
        context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
      } else {
        var xPos, yPos;
        var rw = width / 2;
        var rh = height / 2;

        for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
          xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
          yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;

          if (i === 0) {
            context.moveTo(xPos, yPos);
          } else {
            context.lineTo(xPos, yPos);
          }
        }
      }

      context.closePath();
    };

    /* global atob, ArrayBuffer, Uint8Array, Blob */
    var CRp$8 = {};

    CRp$8.createBuffer = function (w, h) {
      var buffer = document.createElement('canvas'); // eslint-disable-line no-undef

      buffer.width = w;
      buffer.height = h;
      return [buffer, buffer.getContext('2d')];
    };

    CRp$8.bufferCanvasImage = function (options) {
      var cy = this.cy;
      var eles = cy.mutableElements();
      var bb = eles.boundingBox();
      var ctrRect = this.findContainerClientCoords();
      var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
      var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
      var specdMaxDims = number(options.maxWidth) || number(options.maxHeight);
      var pxRatio = this.getPixelRatio();
      var scale = 1;

      if (options.scale !== undefined) {
        width *= options.scale;
        height *= options.scale;
        scale = options.scale;
      } else if (specdMaxDims) {
        var maxScaleW = Infinity;
        var maxScaleH = Infinity;

        if (number(options.maxWidth)) {
          maxScaleW = scale * options.maxWidth / width;
        }

        if (number(options.maxHeight)) {
          maxScaleH = scale * options.maxHeight / height;
        }

        scale = Math.min(maxScaleW, maxScaleH);
        width *= scale;
        height *= scale;
      }

      if (!specdMaxDims) {
        width *= pxRatio;
        height *= pxRatio;
        scale *= pxRatio;
      }

      var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

      buffCanvas.width = width;
      buffCanvas.height = height;
      buffCanvas.style.width = width + 'px';
      buffCanvas.style.height = height + 'px';
      var buffCxt = buffCanvas.getContext('2d'); // Rasterize the layers, but only if container has nonzero size

      if (width > 0 && height > 0) {
        buffCxt.clearRect(0, 0, width, height);
        buffCxt.globalCompositeOperation = 'source-over';
        var zsortedEles = this.getCachedZSortedEles();

        if (options.full) {
          // draw the full bounds of the graph
          buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
          buffCxt.scale(scale, scale);
          this.drawElements(buffCxt, zsortedEles);
          buffCxt.scale(1 / scale, 1 / scale);
          buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
        } else {
          // draw the current view
          var pan = cy.pan();
          var translation = {
            x: pan.x * scale,
            y: pan.y * scale
          };
          scale *= cy.zoom();
          buffCxt.translate(translation.x, translation.y);
          buffCxt.scale(scale, scale);
          this.drawElements(buffCxt, zsortedEles);
          buffCxt.scale(1 / scale, 1 / scale);
          buffCxt.translate(-translation.x, -translation.y);
        } // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs


        if (options.bg) {
          buffCxt.globalCompositeOperation = 'destination-over';
          buffCxt.fillStyle = options.bg;
          buffCxt.rect(0, 0, width, height);
          buffCxt.fill();
        }
      }

      return buffCanvas;
    };

    function b64ToBlob(b64, mimeType) {
      var bytes = atob(b64);
      var buff = new ArrayBuffer(bytes.length);
      var buffUint8 = new Uint8Array(buff);

      for (var i = 0; i < bytes.length; i++) {
        buffUint8[i] = bytes.charCodeAt(i);
      }

      return new Blob([buff], {
        type: mimeType
      });
    }

    function b64UriToB64(b64uri) {
      var i = b64uri.indexOf(',');
      return b64uri.substr(i + 1);
    }

    function output(options, canvas, mimeType) {
      var getB64Uri = function getB64Uri() {
        return canvas.toDataURL(mimeType, options.quality);
      };

      switch (options.output) {
        case 'blob-promise':
          return new Promise$1(function (resolve, reject) {
            try {
              canvas.toBlob(function (blob) {
                if (blob != null) {
                  resolve(blob);
                } else {
                  reject(new Error('`canvas.toBlob()` sent a null value in its callback'));
                }
              }, mimeType, options.quality);
            } catch (err) {
              reject(err);
            }
          });

        case 'blob':
          return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);

        case 'base64':
          return b64UriToB64(getB64Uri());

        case 'base64uri':
        default:
          return getB64Uri();
      }
    }

    CRp$8.png = function (options) {
      return output(options, this.bufferCanvasImage(options), 'image/png');
    };

    CRp$8.jpg = function (options) {
      return output(options, this.bufferCanvasImage(options), 'image/jpeg');
    };

    var CRp$9 = {};

    CRp$9.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {
      switch (name) {
        case 'ellipse':
          return this.drawEllipsePath(context, centerX, centerY, width, height);

        case 'polygon':
          return this.drawPolygonPath(context, centerX, centerY, width, height, points);

        case 'roundrectangle':
        case 'round-rectangle':
          return this.drawRoundRectanglePath(context, centerX, centerY, width, height);

        case 'cutrectangle':
        case 'cut-rectangle':
          return this.drawCutRectanglePath(context, centerX, centerY, width, height);

        case 'bottomroundrectangle':
        case 'bottom-round-rectangle':
          return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);

        case 'barrel':
          return this.drawBarrelPath(context, centerX, centerY, width, height);
      }
    };

    var CR = CanvasRenderer;
    var CRp$a = CanvasRenderer.prototype;
    CRp$a.CANVAS_LAYERS = 3; //

    CRp$a.SELECT_BOX = 0;
    CRp$a.DRAG = 1;
    CRp$a.NODE = 2;
    CRp$a.BUFFER_COUNT = 3; //

    CRp$a.TEXTURE_BUFFER = 0;
    CRp$a.MOTIONBLUR_BUFFER_NODE = 1;
    CRp$a.MOTIONBLUR_BUFFER_DRAG = 2;

    function CanvasRenderer(options) {
      var r = this;
      r.data = {
        canvases: new Array(CRp$a.CANVAS_LAYERS),
        contexts: new Array(CRp$a.CANVAS_LAYERS),
        canvasNeedsRedraw: new Array(CRp$a.CANVAS_LAYERS),
        bufferCanvases: new Array(CRp$a.BUFFER_COUNT),
        bufferContexts: new Array(CRp$a.CANVAS_LAYERS)
      };
      var tapHlOff = '-webkit-tap-highlight-color: rgba(0,0,0,0);';
      r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef

      var containerStyle = r.data.canvasContainer.style;
      r.data.canvasContainer.setAttribute('style', tapHlOff);
      containerStyle.position = 'relative';
      containerStyle.zIndex = '0';
      containerStyle.overflow = 'hidden';
      var container = options.cy.container();
      container.appendChild(r.data.canvasContainer);

      if ((container.getAttribute('style') || '').indexOf(tapHlOff) < 0) {
        container.setAttribute('style', (container.getAttribute('style') || '') + tapHlOff);
      }

      for (var i = 0; i < CRp$a.CANVAS_LAYERS; i++) {
        var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

        r.data.contexts[i] = canvas.getContext('2d');
        canvas.setAttribute('style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + (ms() ? ' -ms-touch-action: none; touch-action: none; ' : ''));
        canvas.style.position = 'absolute';
        canvas.setAttribute('data-id', 'layer' + i);
        canvas.style.zIndex = String(CRp$a.CANVAS_LAYERS - i);
        r.data.canvasContainer.appendChild(canvas);
        r.data.canvasNeedsRedraw[i] = false;
      }

      r.data.topCanvas = r.data.canvases[0];
      r.data.canvases[CRp$a.NODE].setAttribute('data-id', 'layer' + CRp$a.NODE + '-node');
      r.data.canvases[CRp$a.SELECT_BOX].setAttribute('data-id', 'layer' + CRp$a.SELECT_BOX + '-selectbox');
      r.data.canvases[CRp$a.DRAG].setAttribute('data-id', 'layer' + CRp$a.DRAG + '-drag');

      for (var i = 0; i < CRp$a.BUFFER_COUNT; i++) {
        r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

        r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
        r.data.bufferCanvases[i].style.position = 'absolute';
        r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
        r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
        r.data.bufferCanvases[i].style.visibility = 'hidden'; //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
      }

      r.pathsEnabled = true;
      var emptyBb = makeBoundingBox();

      var getBoxCenter = function getBoxCenter(bb) {
        return {
          x: (bb.x1 + bb.x2) / 2,
          y: (bb.y1 + bb.y2) / 2
        };
      };

      var getCenterOffset = function getCenterOffset(bb) {
        return {
          x: -bb.w / 2,
          y: -bb.h / 2
        };
      };

      var backgroundTimestampHasChanged = function backgroundTimestampHasChanged(ele) {
        var _p = ele[0]._private;
        var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
        return !same;
      };

      var getStyleKey = function getStyleKey(ele) {
        return ele[0]._private.nodeKey;
      };

      var getLabelKey = function getLabelKey(ele) {
        return ele[0]._private.labelStyleKey;
      };

      var getSourceLabelKey = function getSourceLabelKey(ele) {
        return ele[0]._private.sourceLabelStyleKey;
      };

      var getTargetLabelKey = function getTargetLabelKey(ele) {
        return ele[0]._private.targetLabelStyleKey;
      };

      var drawElement = function drawElement(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElement(context, ele, bb, false, false, useEleOpacity);
      };

      var drawLabel = function drawLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, 'main', useEleOpacity);
      };

      var drawSourceLabel = function drawSourceLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, 'source', useEleOpacity);
      };

      var drawTargetLabel = function drawTargetLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
        return r.drawElementText(context, ele, bb, scaledLabelShown, 'target', useEleOpacity);
      };

      var getElementBox = function getElementBox(ele) {
        ele.boundingBox();
        return ele[0]._private.bodyBounds;
      };

      var getLabelBox = function getLabelBox(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.main || emptyBb;
      };

      var getSourceLabelBox = function getSourceLabelBox(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.source || emptyBb;
      };

      var getTargetLabelBox = function getTargetLabelBox(ele) {
        ele.boundingBox();
        return ele[0]._private.labelBounds.target || emptyBb;
      };

      var isLabelVisibleAtScale = function isLabelVisibleAtScale(ele, scaledLabelShown) {
        return scaledLabelShown;
      };

      var getElementRotationPoint = function getElementRotationPoint(ele) {
        return getBoxCenter(getElementBox(ele));
      };

      var addTextMargin = function addTextMargin(pt, ele) {
        return {
          x: pt.x + ele.pstyle('text-margin-x').pfValue,
          y: pt.y + ele.pstyle('text-margin-y').pfValue
        };
      };

      var getRsPt = function getRsPt(ele, x, y) {
        var rs = ele[0]._private.rscratch;
        return {
          x: rs[x],
          y: rs[y]
        };
      };

      var getLabelRotationPoint = function getLabelRotationPoint(ele) {
        return addTextMargin(getRsPt(ele, 'labelX', 'labelY'), ele);
      };

      var getSourceLabelRotationPoint = function getSourceLabelRotationPoint(ele) {
        return addTextMargin(getRsPt(ele, 'sourceLabelX', 'sourceLabelY'), ele);
      };

      var getTargetLabelRotationPoint = function getTargetLabelRotationPoint(ele) {
        return addTextMargin(getRsPt(ele, 'targetLabelX', 'targetLabelY'), ele);
      };

      var getElementRotationOffset = function getElementRotationOffset(ele) {
        return getCenterOffset(getElementBox(ele));
      };

      var getSourceLabelRotationOffset = function getSourceLabelRotationOffset(ele) {
        return getCenterOffset(getSourceLabelBox(ele));
      };

      var getTargetLabelRotationOffset = function getTargetLabelRotationOffset(ele) {
        return getCenterOffset(getTargetLabelBox(ele));
      };

      var getLabelRotationOffset = function getLabelRotationOffset(ele) {
        var bb = getLabelBox(ele);
        var p = getCenterOffset(getLabelBox(ele));

        if (ele.isNode()) {
          switch (ele.pstyle('text-halign').value) {
            case 'left':
              p.x = -bb.w;
              break;

            case 'right':
              p.x = 0;
              break;
          }

          switch (ele.pstyle('text-valign').value) {
            case 'top':
              p.y = -bb.h;
              break;

            case 'bottom':
              p.y = 0;
              break;
          }
        }

        return p;
      };

      var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {
        getKey: getStyleKey,
        doesEleInvalidateKey: backgroundTimestampHasChanged,
        drawElement: drawElement,
        getBoundingBox: getElementBox,
        getRotationPoint: getElementRotationPoint,
        getRotationOffset: getElementRotationOffset,
        allowEdgeTxrCaching: false,
        allowParentTxrCaching: false
      });
      var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {
        getKey: getLabelKey,
        drawElement: drawLabel,
        getBoundingBox: getLabelBox,
        getRotationPoint: getLabelRotationPoint,
        getRotationOffset: getLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {
        getKey: getSourceLabelKey,
        drawElement: drawSourceLabel,
        getBoundingBox: getSourceLabelBox,
        getRotationPoint: getSourceLabelRotationPoint,
        getRotationOffset: getSourceLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {
        getKey: getTargetLabelKey,
        drawElement: drawTargetLabel,
        getBoundingBox: getTargetLabelBox,
        getRotationPoint: getTargetLabelRotationPoint,
        getRotationOffset: getTargetLabelRotationOffset,
        isVisible: isLabelVisibleAtScale
      });
      var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);
      r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
        // each cache should check for sub-key diff to see that the update affects that cache particularly
        eleTxrCache.invalidateElements(eles);
        lblTxrCache.invalidateElements(eles);
        slbTxrCache.invalidateElements(eles);
        tlbTxrCache.invalidateElements(eles); // any change invalidates the layers

        lyrTxrCache.invalidateElements(eles); // update the old bg timestamp so diffs can be done in the ele txr caches

        for (var _i = 0; _i < eles.length; _i++) {
          var _p = eles[_i]._private;
          _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
        }
      });

      var refineInLayers = function refineInLayers(reqs) {
        for (var i = 0; i < reqs.length; i++) {
          lyrTxrCache.enqueueElementRefinement(reqs[i].ele);
        }
      };

      eleTxrCache.onDequeue(refineInLayers);
      lblTxrCache.onDequeue(refineInLayers);
      slbTxrCache.onDequeue(refineInLayers);
      tlbTxrCache.onDequeue(refineInLayers);
    }

    CRp$a.redrawHint = function (group, bool) {
      var r = this;

      switch (group) {
        case 'eles':
          r.data.canvasNeedsRedraw[CRp$a.NODE] = bool;
          break;

        case 'drag':
          r.data.canvasNeedsRedraw[CRp$a.DRAG] = bool;
          break;

        case 'select':
          r.data.canvasNeedsRedraw[CRp$a.SELECT_BOX] = bool;
          break;
      }
    }; // whether to use Path2D caching for drawing


    var pathsImpld = typeof Path2D !== 'undefined';

    CRp$a.path2dEnabled = function (on) {
      if (on === undefined) {
        return this.pathsEnabled;
      }

      this.pathsEnabled = on ? true : false;
    };

    CRp$a.usePaths = function () {
      return pathsImpld && this.pathsEnabled;
    };

    CRp$a.setImgSmoothing = function (context, bool) {
      if (context.imageSmoothingEnabled != null) {
        context.imageSmoothingEnabled = bool;
      } else {
        context.webkitImageSmoothingEnabled = bool;
        context.mozImageSmoothingEnabled = bool;
        context.msImageSmoothingEnabled = bool;
      }
    };

    CRp$a.getImgSmoothing = function (context) {
      if (context.imageSmoothingEnabled != null) {
        return context.imageSmoothingEnabled;
      } else {
        return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
      }
    };

    CRp$a.makeOffscreenCanvas = function (width, height) {
      var canvas;

      if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== ("undefined")) {
        canvas = new OffscreenCanvas(width, height);
      } else {
        canvas = document.createElement('canvas'); // eslint-disable-line no-undef

        canvas.width = width;
        canvas.height = height;
      }

      return canvas;
    };

    [CRp, CRp$1, CRp$2, CRp$3, CRp$4, CRp$5, CRp$6, CRp$7, CRp$8, CRp$9].forEach(function (props) {
      extend(CRp$a, props);
    });

    var renderer = [{
      name: 'null',
      impl: NullRenderer
    }, {
      name: 'base',
      impl: BR
    }, {
      name: 'canvas',
      impl: CR
    }];

    var incExts = [{
      type: 'layout',
      extensions: layout$1
    }, {
      type: 'renderer',
      extensions: renderer
    }];

    var extensions = {}; // registered modules for extensions, indexed by name

    var modules = {};

    function setExtension(type, name, registrant) {
      var ext = registrant;

      var overrideErr = function overrideErr(field) {
        error('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
      };

      if (type === 'core') {
        if (Core.prototype[name]) {
          return overrideErr(name);
        } else {
          Core.prototype[name] = registrant;
        }
      } else if (type === 'collection') {
        if (Collection.prototype[name]) {
          return overrideErr(name);
        } else {
          Collection.prototype[name] = registrant;
        }
      } else if (type === 'layout') {
        // fill in missing layout functions in the prototype
        var Layout = function Layout(options) {
          this.options = options;
          registrant.call(this, options); // make sure layout has _private for use w/ std apis like .on()

          if (!plainObject(this._private)) {
            this._private = {};
          }

          this._private.cy = options.cy;
          this._private.listeners = [];
          this.createEmitter();
        };

        var layoutProto = Layout.prototype = Object.create(registrant.prototype);
        var optLayoutFns = [];

        for (var i = 0; i < optLayoutFns.length; i++) {
          var fnName = optLayoutFns[i];

          layoutProto[fnName] = layoutProto[fnName] || function () {
            return this;
          };
        } // either .start() or .run() is defined, so autogen the other


        if (layoutProto.start && !layoutProto.run) {
          layoutProto.run = function () {
            this.start();
            return this;
          };
        } else if (!layoutProto.start && layoutProto.run) {
          layoutProto.start = function () {
            this.run();
            return this;
          };
        }

        var regStop = registrant.prototype.stop;

        layoutProto.stop = function () {
          var opts = this.options;

          if (opts && opts.animate) {
            var anis = this.animations;

            if (anis) {
              for (var _i = 0; _i < anis.length; _i++) {
                anis[_i].stop();
              }
            }
          }

          if (regStop) {
            regStop.call(this);
          } else {
            this.emit('layoutstop');
          }

          return this;
        };

        if (!layoutProto.destroy) {
          layoutProto.destroy = function () {
            return this;
          };
        }

        layoutProto.cy = function () {
          return this._private.cy;
        };

        var getCy = function getCy(layout) {
          return layout._private.cy;
        };

        var emitterOpts = {
          addEventFields: function addEventFields(layout, evt) {
            evt.layout = layout;
            evt.cy = getCy(layout);
            evt.target = layout;
          },
          bubble: function bubble() {
            return true;
          },
          parent: function parent(layout) {
            return getCy(layout);
          }
        };
        extend(layoutProto, {
          createEmitter: function createEmitter() {
            this._private.emitter = new Emitter(emitterOpts, this);
            return this;
          },
          emitter: function emitter() {
            return this._private.emitter;
          },
          on: function on(evt, cb) {
            this.emitter().on(evt, cb);
            return this;
          },
          one: function one(evt, cb) {
            this.emitter().one(evt, cb);
            return this;
          },
          once: function once(evt, cb) {
            this.emitter().one(evt, cb);
            return this;
          },
          removeListener: function removeListener(evt, cb) {
            this.emitter().removeListener(evt, cb);
            return this;
          },
          emit: function emit(evt, params) {
            this.emitter().emit(evt, params);
            return this;
          }
        });
        define$3.eventAliasesOn(layoutProto);
        ext = Layout; // replace with our wrapped layout
      } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
        // user registered renderers inherit from base
        var BaseRenderer = getExtension('renderer', 'base');
        var bProto = BaseRenderer.prototype;
        var RegistrantRenderer = registrant;
        var rProto = registrant.prototype;

        var Renderer = function Renderer() {
          BaseRenderer.apply(this, arguments);
          RegistrantRenderer.apply(this, arguments);
        };

        var proto = Renderer.prototype;

        for (var pName in bProto) {
          var pVal = bProto[pName];
          var existsInR = rProto[pName] != null;

          if (existsInR) {
            return overrideErr(pName);
          }

          proto[pName] = pVal; // take impl from base
        }

        for (var _pName in rProto) {
          proto[_pName] = rProto[_pName]; // take impl from registrant
        }

        bProto.clientFunctions.forEach(function (name) {
          proto[name] = proto[name] || function () {
            error('Renderer does not implement `renderer.' + name + '()` on its prototype');
          };
        });
        ext = Renderer;
      }

      return setMap({
        map: extensions,
        keys: [type, name],
        value: ext
      });
    }

    function getExtension(type, name) {
      return getMap({
        map: extensions,
        keys: [type, name]
      });
    }

    function setModule(type, name, moduleType, moduleName, registrant) {
      return setMap({
        map: modules,
        keys: [type, name, moduleType, moduleName],
        value: registrant
      });
    }

    function getModule(type, name, moduleType, moduleName) {
      return getMap({
        map: modules,
        keys: [type, name, moduleType, moduleName]
      });
    }

    var extension = function extension() {
      // e.g. extension('renderer', 'svg')
      if (arguments.length === 2) {
        return getExtension.apply(null, arguments);
      } // e.g. extension('renderer', 'svg', { ... })
      else if (arguments.length === 3) {
          return setExtension.apply(null, arguments);
        } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
        else if (arguments.length === 4) {
            return getModule.apply(null, arguments);
          } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
          else if (arguments.length === 5) {
              return setModule.apply(null, arguments);
            } else {
              error('Invalid extension access syntax');
            }
    }; // allows a core instance to access extensions internally


    Core.prototype.extension = extension; // included extensions

    incExts.forEach(function (group) {
      group.extensions.forEach(function (ext) {
        setExtension(group.type, ext.name, ext.impl);
      });
    });

    // (useful for init)

    var Stylesheet = function Stylesheet() {
      if (!(this instanceof Stylesheet)) {
        return new Stylesheet();
      }

      this.length = 0;
    };

    var sheetfn = Stylesheet.prototype;

    sheetfn.instanceString = function () {
      return 'stylesheet';
    }; // just store the selector to be parsed later


    sheetfn.selector = function (selector) {
      var i = this.length++;
      this[i] = {
        selector: selector,
        properties: []
      };
      return this; // chaining
    }; // just store the property to be parsed later


    sheetfn.css = function (name, value) {
      var i = this.length - 1;

      if (string(name)) {
        this[i].properties.push({
          name: name,
          value: value
        });
      } else if (plainObject(name)) {
        var map = name;
        var propNames = Object.keys(map);

        for (var j = 0; j < propNames.length; j++) {
          var key = propNames[j];
          var mapVal = map[key];

          if (mapVal == null) {
            continue;
          }

          var prop = Style.properties[key] || Style.properties[dash2camel(key)];

          if (prop == null) {
            continue;
          }

          var _name = prop.name;
          var _value = mapVal;
          this[i].properties.push({
            name: _name,
            value: _value
          });
        }
      }

      return this; // chaining
    };

    sheetfn.style = sheetfn.css; // generate a real style object from the dummy stylesheet

    sheetfn.generateStyle = function (cy) {
      var style = new Style(cy);
      return this.appendToStyle(style);
    }; // append a dummy stylesheet object on a real style object


    sheetfn.appendToStyle = function (style) {
      for (var i = 0; i < this.length; i++) {
        var context = this[i];
        var selector = context.selector;
        var props = context.properties;
        style.selector(selector); // apply selector

        for (var j = 0; j < props.length; j++) {
          var prop = props[j];
          style.css(prop.name, prop.value); // apply property
        }
      }

      return style;
    };

    var version$1 = "3.5.7";

    var cytoscape$1 = function cytoscape(options) {
      // if no options specified, use default
      if (options === undefined) {
        options = {};
      } // create instance


      if (plainObject(options)) {
        return new Core(options);
      } // allow for registration of extensions
      else if (string(options)) {
          return extension.apply(extension, arguments);
        }
    }; // e.g. cytoscape.use( require('cytoscape-foo'), bar )


    cytoscape$1.use = function (ext) {
      var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

      args.unshift(cytoscape$1); // cytoscape is first arg to ext

      ext.apply(null, args);
      return this;
    };

    cytoscape$1.warnings = function (bool) {
      return warnings(bool);
    }; // replaced by build system


    cytoscape$1.version = version$1; // expose public apis (mostly for extensions)

    cytoscape$1.stylesheet = cytoscape$1.Stylesheet = Stylesheet;

    var cytoscape_cjs = cytoscape$1;

    /* global window */

    var graphlib;

    if (typeof commonjsRequire === "function") {
      try {
        graphlib = graphlib$1;
      } catch (e) {}
    }

    if (!graphlib) {
      graphlib = window.graphlib;
    }

    var graphlib_1 = graphlib;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_SYMBOLS_FLAG = 4;

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return _baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    var cloneDeep_1 = cloneDeep;

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject_1(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike_1(object) && _isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq_1(object[index], value);
      }
      return false;
    }

    var _isIterateeCall = isIterateeCall;

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = _baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn_1(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq_1(value, objectProto$1[key]) && !hasOwnProperty$1.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    var defaults_1 = defaults;

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike_1(collection)) {
          var iteratee = _baseIteratee(predicate);
          collection = keys_1(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    var _createFind = createFind;

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol_1(value)) {
        return NAN;
      }
      if (isObject_1(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject_1(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    var toNumber_1 = toNumber;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber_1(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    var toFinite_1 = toFinite;

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite_1(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    var toInteger_1 = toInteger;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$1 = Math.max;

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger_1(fromIndex);
      if (index < 0) {
        index = nativeMax$1(length + index, 0);
      }
      return _baseFindIndex(array, _baseIteratee(predicate), index);
    }

    var findIndex_1 = findIndex;

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = _createFind(findIndex_1);

    var find_1 = find;

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? _baseFlatten(array, 1) : [];
    }

    var flatten_1 = flatten;

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : _baseFor(object, _castFunction(iteratee), keysIn_1);
    }

    var forIn_1 = forIn;

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    var last_1 = last;

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = _baseIteratee(iteratee);

      _baseForOwn(object, function(value, key, object) {
        _baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    var mapValues_1 = mapValues;

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol_1(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    var _baseExtremum = baseExtremum;

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    var _baseGt = baseGt;

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? _baseExtremum(array, identity_1, _baseGt)
        : undefined;
    }

    var max_1 = max;

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq_1(object[key], value)) ||
          (value === undefined && !(key in object))) {
        _baseAssignValue(object, key, value);
      }
    }

    var _assignMergeValue = assignMergeValue;

    /** `Object#toString` result references. */
    var objectTag = '[object Object]';

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = _getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    var isPlainObject_1 = isPlainObject;

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    var _safeGet = safeGet;

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return _copyObject(value, keysIn_1(value));
    }

    var toPlainObject_1 = toPlainObject;

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = _safeGet(object, key),
          srcValue = _safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        _assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray_1(srcValue),
            isBuff = !isArr && isBuffer_1(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray_1(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject_1(objValue)) {
            newValue = _copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = _cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = _cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {
          newValue = objValue;
          if (isArguments_1(objValue)) {
            newValue = toPlainObject_1(objValue);
          }
          else if (!isObject_1(objValue) || isFunction_1(objValue)) {
            newValue = _initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      _assignMergeValue(object, key, newValue);
    }

    var _baseMergeDeep = baseMergeDeep;

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      _baseFor(source, function(srcValue, key) {
        if (isObject_1(srcValue)) {
          stack || (stack = new _Stack);
          _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(_safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          _assignMergeValue(object, key, newValue);
        }
      }, keysIn_1);
    }

    var _baseMerge = baseMerge;

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return _baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    var _createAssigner = createAssigner;

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = _createAssigner(function(object, source, srcIndex) {
      _baseMerge(object, source, srcIndex);
    });

    var merge_1 = merge;

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    var _baseLt = baseLt;

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? _baseExtremum(array, identity_1, _baseLt)
        : undefined;
    }

    var min_1 = min;

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? _baseExtremum(array, _baseIteratee(iteratee), _baseLt)
        : undefined;
    }

    var minBy_1 = minBy;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function() {
      return _root.Date.now();
    };

    var now_1 = now;

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject_1(object)) {
        return object;
      }
      path = _castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = _toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject_1(objValue)
              ? objValue
              : (_isIndex(path[index + 1]) ? [] : {});
          }
        }
        _assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    var _baseSet = baseSet;

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = _baseGet(object, path);

        if (predicate(value, path)) {
          _baseSet(result, _castPath(path, object), value);
        }
      }
      return result;
    }

    var _basePickBy = basePickBy;

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return _basePickBy(object, paths, function(value, path) {
        return hasIn_1(object, path);
      });
    }

    var _basePick = basePick;

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return _setToString(_overRest(func, undefined, flatten_1), func + '');
    }

    var _flatRest = flatRest;

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = _flatRest(function(object, paths) {
      return object == null ? {} : _basePick(object, paths);
    });

    var pick_1 = pick;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeMax = Math.max;

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    var _baseRange = baseRange;

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && _isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite_1(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite_1(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite_1(step);
        return _baseRange(start, end, step, fromRight);
      };
    }

    var _createRange = createRange;

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = _createRange();

    var range_1 = range;

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    var _baseSortBy = baseSortBy;

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol_1(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol_1(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    var _compareAscending = compareAscending;

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = _compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    var _compareMultiple = compareMultiple;

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = _arrayMap(iteratees.length ? iteratees : [identity_1], _baseUnary(_baseIteratee));

      var result = _baseMap(collection, function(value, key, collection) {
        var criteria = _arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return _baseSortBy(result, function(object, other) {
        return _compareMultiple(object, other, orders);
      });
    }

    var _baseOrderBy = baseOrderBy;

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = _baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && _isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && _isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return _baseOrderBy(collection, _baseFlatten(iteratees, 1), []);
    });

    var sortBy_1 = sortBy;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString_1(prefix) + id;
    }

    var uniqueId_1 = uniqueId;

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    var _baseZipObject = baseZipObject;

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return _baseZipObject(props || [], values || [], _assignValue);
    }

    var zipObject_1 = zipObject;

    /* global window */

    var lodash;

    if (typeof commonjsRequire === "function") {
      try {
        lodash = {
          cloneDeep: cloneDeep_1,
          constant: constant_1,
          defaults: defaults_1,
          each: each,
          filter: filter_1,
          find: find_1,
          flatten: flatten_1,
          forEach: forEach_1,
          forIn: forIn_1,
          has:  has_1,
          isUndefined: isUndefined_1,
          last: last_1,
          map: map_1,
          mapValues: mapValues_1,
          max: max_1,
          merge: merge_1,
          min: min_1,
          minBy: minBy_1,
          now: now_1,
          pick: pick_1,
          range: range_1,
          reduce: reduce_1,
          sortBy: sortBy_1,
          uniqueId: uniqueId_1,
          values: values_1,
          zipObject: zipObject_1,
        };
      } catch (e) {}
    }

    if (!lodash) {
      lodash = window._;
    }

    var lodash_1 = lodash;

    /*
     * Simple doubly linked list implementation derived from Cormen, et al.,
     * "Introduction to Algorithms".
     */

    var list = List;

    function List() {
      var sentinel = {};
      sentinel._next = sentinel._prev = sentinel;
      this._sentinel = sentinel;
    }

    List.prototype.dequeue = function() {
      var sentinel = this._sentinel,
          entry = sentinel._prev;
      if (entry !== sentinel) {
        unlink(entry);
        return entry;
      }
    };

    List.prototype.enqueue = function(entry) {
      var sentinel = this._sentinel;
      if (entry._prev && entry._next) {
        unlink(entry);
      }
      entry._next = sentinel._next;
      sentinel._next._prev = entry;
      sentinel._next = entry;
      entry._prev = sentinel;
    };

    List.prototype.toString = function() {
      var strs = [],
          sentinel = this._sentinel,
          curr = sentinel._prev;
      while (curr !== sentinel) {
        strs.push(JSON.stringify(curr, filterOutLinks));
        curr = curr._prev;
      }
      return "[" + strs.join(", ") + "]";
    };

    function unlink(entry) {
      entry._prev._next = entry._next;
      entry._next._prev = entry._prev;
      delete entry._next;
      delete entry._prev;
    }

    function filterOutLinks(k, v) {
      if (k !== "_next" && k !== "_prev") {
        return v;
      }
    }

    var Graph$7 = graphlib_1.Graph;

    /*
     * A greedy heuristic for finding a feedback arc set for a graph. A feedback
     * arc set is a set of edges that can be removed to make a graph acyclic.
     * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, "A fast and
     * effective heuristic for the feedback arc set problem." This implementation
     * adjusts that from the paper to allow for weighted edges.
     */
    var greedyFas = greedyFAS;

    var DEFAULT_WEIGHT_FN = lodash_1.constant(1);

    function greedyFAS(g, weightFn) {
      if (g.nodeCount() <= 1) {
        return [];
      }
      var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
      var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);

      // Expand multi-edges
      return lodash_1.flatten(lodash_1.map(results, function(e) {
        return g.outEdges(e.v, e.w);
      }), true);
    }

    function doGreedyFAS(g, buckets, zeroIdx) {
      var results = [],
          sources = buckets[buckets.length - 1],
          sinks = buckets[0];

      var entry;
      while (g.nodeCount()) {
        while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }
        while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }
        if (g.nodeCount()) {
          for (var i = buckets.length - 2; i > 0; --i) {
            entry = buckets[i].dequeue();
            if (entry) {
              results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
              break;
            }
          }
        }
      }

      return results;
    }

    function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
      var results = collectPredecessors ? [] : undefined;

      lodash_1.forEach(g.inEdges(entry.v), function(edge) {
        var weight = g.edge(edge),
            uEntry = g.node(edge.v);

        if (collectPredecessors) {
          results.push({ v: edge.v, w: edge.w });
        }

        uEntry.out -= weight;
        assignBucket(buckets, zeroIdx, uEntry);
      });

      lodash_1.forEach(g.outEdges(entry.v), function(edge) {
        var weight = g.edge(edge),
            w = edge.w,
            wEntry = g.node(w);
        wEntry["in"] -= weight;
        assignBucket(buckets, zeroIdx, wEntry);
      });

      g.removeNode(entry.v);

      return results;
    }

    function buildState(g, weightFn) {
      var fasGraph = new Graph$7(),
          maxIn = 0,
          maxOut = 0;

      lodash_1.forEach(g.nodes(), function(v) {
        fasGraph.setNode(v, { v: v, "in": 0, out: 0 });
      });

      // Aggregate weights on nodes, but also sum the weights across multi-edges
      // into a single edge for the fasGraph.
      lodash_1.forEach(g.edges(), function(e) {
        var prevWeight = fasGraph.edge(e.v, e.w) || 0,
            weight = weightFn(e),
            edgeWeight = prevWeight + weight;
        fasGraph.setEdge(e.v, e.w, edgeWeight);
        maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
        maxIn  = Math.max(maxIn,  fasGraph.node(e.w)["in"]  += weight);
      });

      var buckets = lodash_1.range(maxOut + maxIn + 3).map(function() { return new list(); });
      var zeroIdx = maxIn + 1;

      lodash_1.forEach(fasGraph.nodes(), function(v) {
        assignBucket(buckets, zeroIdx, fasGraph.node(v));
      });

      return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };
    }

    function assignBucket(buckets, zeroIdx, entry) {
      if (!entry.out) {
        buckets[0].enqueue(entry);
      } else if (!entry["in"]) {
        buckets[buckets.length - 1].enqueue(entry);
      } else {
        buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
      }
    }

    var acyclic = {
      run: run$2,
      undo: undo$2
    };

    function run$2(g) {
      var fas = (g.graph().acyclicer === "greedy"
                    ? greedyFas(g, weightFn(g))
                    : dfsFAS(g));
      lodash_1.forEach(fas, function(e) {
        var label = g.edge(e);
        g.removeEdge(e);
        label.forwardName = e.name;
        label.reversed = true;
        g.setEdge(e.w, e.v, label, lodash_1.uniqueId("rev"));
      });

      function weightFn(g) {
        return function(e) {
          return g.edge(e).weight;
        };
      }
    }

    function dfsFAS(g) {
      var fas = [],
          stack = {},
          visited = {};

      function dfs(v) {
        if (lodash_1.has(visited, v)) {
          return;
        }
        visited[v] = true;
        stack[v] = true;
        lodash_1.forEach(g.outEdges(v), function(e) {
          if (lodash_1.has(stack, e.w)) {
            fas.push(e);
          } else {
            dfs(e.w);
          }
        });
        delete stack[v];
      }

      lodash_1.forEach(g.nodes(), dfs);
      return fas;
    }

    function undo$2(g) {
      lodash_1.forEach(g.edges(), function(e) {
        var label = g.edge(e);
        if (label.reversed) {
          g.removeEdge(e);

          var forwardName = label.forwardName;
          delete label.reversed;
          delete label.forwardName;
          g.setEdge(e.w, e.v, label, forwardName);
        }
      });
    }

    var Graph$6 = graphlib_1.Graph;

    var util$2 = {
      addDummyNode: addDummyNode,
      simplify: simplify$1,
      asNonCompoundGraph: asNonCompoundGraph,
      successorWeights: successorWeights,
      predecessorWeights: predecessorWeights,
      intersectRect: intersectRect,
      buildLayerMatrix: buildLayerMatrix,
      normalizeRanks: normalizeRanks$1,
      removeEmptyRanks: removeEmptyRanks$1,
      addBorderNode: addBorderNode$1,
      maxRank: maxRank,
      partition: partition,
      time: time,
      notime: notime
    };

    /*
     * Adds a dummy node to the graph and return v.
     */
    function addDummyNode(g, type, attrs, name) {
      var v;
      do {
        v = lodash_1.uniqueId(name);
      } while (g.hasNode(v));

      attrs.dummy = type;
      g.setNode(v, attrs);
      return v;
    }

    /*
     * Returns a new graph with only simple edges. Handles aggregation of data
     * associated with multi-edges.
     */
    function simplify$1(g) {
      var simplified = new Graph$6().setGraph(g.graph());
      lodash_1.forEach(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });
      lodash_1.forEach(g.edges(), function(e) {
        var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 },
            label = g.edge(e);
        simplified.setEdge(e.v, e.w, {
          weight: simpleLabel.weight + label.weight,
          minlen: Math.max(simpleLabel.minlen, label.minlen)
        });
      });
      return simplified;
    }

    function asNonCompoundGraph(g) {
      var simplified = new Graph$6({ multigraph: g.isMultigraph() }).setGraph(g.graph());
      lodash_1.forEach(g.nodes(), function(v) {
        if (!g.children(v).length) {
          simplified.setNode(v, g.node(v));
        }
      });
      lodash_1.forEach(g.edges(), function(e) {
        simplified.setEdge(e, g.edge(e));
      });
      return simplified;
    }

    function successorWeights(g) {
      var weightMap = lodash_1.map(g.nodes(), function(v) {
        var sucs = {};
        lodash_1.forEach(g.outEdges(v), function(e) {
          sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
        });
        return sucs;
      });
      return lodash_1.zipObject(g.nodes(), weightMap);
    }

    function predecessorWeights(g) {
      var weightMap = lodash_1.map(g.nodes(), function(v) {
        var preds = {};
        lodash_1.forEach(g.inEdges(v), function(e) {
          preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
        });
        return preds;
      });
      return lodash_1.zipObject(g.nodes(), weightMap);
    }

    /*
     * Finds where a line starting at point ({x, y}) would intersect a rectangle
     * ({x, y, width, height}) if it were pointing at the rectangle's center.
     */
    function intersectRect(rect, point) {
      var x = rect.x;
      var y = rect.y;

      // Rectangle intersection algorithm from:
      // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
      var dx = point.x - x;
      var dy = point.y - y;
      var w = rect.width / 2;
      var h = rect.height / 2;

      if (!dx && !dy) {
        throw new Error("Not possible to find intersection inside of the rectangle");
      }

      var sx, sy;
      if (Math.abs(dy) * w > Math.abs(dx) * h) {
        // Intersection is top or bottom of rect.
        if (dy < 0) {
          h = -h;
        }
        sx = h * dx / dy;
        sy = h;
      } else {
        // Intersection is left or right of rect.
        if (dx < 0) {
          w = -w;
        }
        sx = w;
        sy = w * dy / dx;
      }

      return { x: x + sx, y: y + sy };
    }

    /*
     * Given a DAG with each node assigned "rank" and "order" properties, this
     * function will produce a matrix with the ids of each node.
     */
    function buildLayerMatrix(g) {
      var layering = lodash_1.map(lodash_1.range(maxRank(g) + 1), function() { return []; });
      lodash_1.forEach(g.nodes(), function(v) {
        var node = g.node(v),
            rank = node.rank;
        if (!lodash_1.isUndefined(rank)) {
          layering[rank][node.order] = v;
        }
      });
      return layering;
    }

    /*
     * Adjusts the ranks for all nodes in the graph such that all nodes v have
     * rank(v) >= 0 and at least one node w has rank(w) = 0.
     */
    function normalizeRanks$1(g) {
      var min = lodash_1.min(lodash_1.map(g.nodes(), function(v) { return g.node(v).rank; }));
      lodash_1.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (lodash_1.has(node, "rank")) {
          node.rank -= min;
        }
      });
    }

    function removeEmptyRanks$1(g) {
      // Ranks may not start at 0, so we need to offset them
      var offset = lodash_1.min(lodash_1.map(g.nodes(), function(v) { return g.node(v).rank; }));

      var layers = [];
      lodash_1.forEach(g.nodes(), function(v) {
        var rank = g.node(v).rank - offset;
        if (!layers[rank]) {
          layers[rank] = [];
        }
        layers[rank].push(v);
      });

      var delta = 0,
          nodeRankFactor = g.graph().nodeRankFactor;
      lodash_1.forEach(layers, function(vs, i) {
        if (lodash_1.isUndefined(vs) && i % nodeRankFactor !== 0) {
          --delta;
        } else if (delta) {
          lodash_1.forEach(vs, function(v) { g.node(v).rank += delta; });
        }
      });
    }

    function addBorderNode$1(g, prefix, rank, order) {
      var node = {
        width: 0,
        height: 0
      };
      if (arguments.length >= 4) {
        node.rank = rank;
        node.order = order;
      }
      return addDummyNode(g, "border", node, prefix);
    }

    function maxRank(g) {
      return lodash_1.max(lodash_1.map(g.nodes(), function(v) {
        var rank = g.node(v).rank;
        if (!lodash_1.isUndefined(rank)) {
          return rank;
        }
      }));
    }

    /*
     * Partition a collection into two groups: `lhs` and `rhs`. If the supplied
     * function returns true for an entry it goes into `lhs`. Otherwise it goes
     * into `rhs.
     */
    function partition(collection, fn) {
      var result = { lhs: [], rhs: [] };
      lodash_1.forEach(collection, function(value) {
        if (fn(value)) {
          result.lhs.push(value);
        } else {
          result.rhs.push(value);
        }
      });
      return result;
    }

    /*
     * Returns a new function that wraps `fn` with a timer. The wrapper logs the
     * time it takes to execute the function.
     */
    function time(name, fn) {
      var start = lodash_1.now();
      try {
        return fn();
      } finally {
        console.log(name + " time: " + (lodash_1.now() - start) + "ms");
      }
    }

    function notime(name, fn) {
      return fn();
    }

    var normalize = {
      run: run$1,
      undo: undo$1
    };

    /*
     * Breaks any long edges in the graph into short segments that span 1 layer
     * each. This operation is undoable with the denormalize function.
     *
     * Pre-conditions:
     *
     *    1. The input graph is a DAG.
     *    2. Each node in the graph has a "rank" property.
     *
     * Post-condition:
     *
     *    1. All edges in the graph have a length of 1.
     *    2. Dummy nodes are added where edges have been split into segments.
     *    3. The graph is augmented with a "dummyChains" attribute which contains
     *       the first dummy in each chain of dummy nodes produced.
     */
    function run$1(g) {
      g.graph().dummyChains = [];
      lodash_1.forEach(g.edges(), function(edge) { normalizeEdge(g, edge); });
    }

    function normalizeEdge(g, e) {
      var v = e.v,
          vRank = g.node(v).rank,
          w = e.w,
          wRank = g.node(w).rank,
          name = e.name,
          edgeLabel = g.edge(e),
          labelRank = edgeLabel.labelRank;

      if (wRank === vRank + 1) return;

      g.removeEdge(e);

      var dummy, attrs, i;
      for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
        edgeLabel.points = [];
        attrs = {
          width: 0, height: 0,
          edgeLabel: edgeLabel, edgeObj: e,
          rank: vRank
        };
        dummy = util$2.addDummyNode(g, "edge", attrs, "_d");
        if (vRank === labelRank) {
          attrs.width = edgeLabel.width;
          attrs.height = edgeLabel.height;
          attrs.dummy = "edge-label";
          attrs.labelpos = edgeLabel.labelpos;
        }
        g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);
        if (i === 0) {
          g.graph().dummyChains.push(dummy);
        }
        v = dummy;
      }

      g.setEdge(v, w, { weight: edgeLabel.weight }, name);
    }

    function undo$1(g) {
      lodash_1.forEach(g.graph().dummyChains, function(v) {
        var node = g.node(v),
            origLabel = node.edgeLabel,
            w;
        g.setEdge(node.edgeObj, origLabel);
        while (node.dummy) {
          w = g.successors(v)[0];
          g.removeNode(v);
          origLabel.points.push({ x: node.x, y: node.y });
          if (node.dummy === "edge-label") {
            origLabel.x = node.x;
            origLabel.y = node.y;
            origLabel.width = node.width;
            origLabel.height = node.height;
          }
          v = w;
          node = g.node(v);
        }
      });
    }

    var util$1 = {
      longestPath: longestPath$1,
      slack: slack$2
    };

    /*
     * Initializes ranks for the input graph using the longest path algorithm. This
     * algorithm scales well and is fast in practice, it yields rather poor
     * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom
     * ranks wide and leaving edges longer than necessary. However, due to its
     * speed, this algorithm is good for getting an initial ranking that can be fed
     * into other algorithms.
     *
     * This algorithm does not normalize layers because it will be used by other
     * algorithms in most cases. If using this algorithm directly, be sure to
     * run normalize at the end.
     *
     * Pre-conditions:
     *
     *    1. Input graph is a DAG.
     *    2. Input graph node labels can be assigned properties.
     *
     * Post-conditions:
     *
     *    1. Each node will be assign an (unnormalized) "rank" property.
     */
    function longestPath$1(g) {
      var visited = {};

      function dfs(v) {
        var label = g.node(v);
        if (lodash_1.has(visited, v)) {
          return label.rank;
        }
        visited[v] = true;

        var rank = lodash_1.min(lodash_1.map(g.outEdges(v), function(e) {
          return dfs(e.w) - g.edge(e).minlen;
        }));

        if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
            rank === undefined || // return value of _.map([]) for Lodash 4
            rank === null) { // return value of _.map([null])
          rank = 0;
        }

        return (label.rank = rank);
      }

      lodash_1.forEach(g.sources(), dfs);
    }

    /*
     * Returns the amount of slack for the given edge. The slack is defined as the
     * difference between the length of the edge and its minimum length.
     */
    function slack$2(g, e) {
      return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
    }

    var Graph$5 = graphlib_1.Graph,
        slack$1 = util$1.slack;

    var feasibleTree_1 = feasibleTree;

    /*
     * Constructs a spanning tree with tight edges and adjusted the input node's
     * ranks to achieve this. A tight edge is one that is has a length that matches
     * its "minlen" attribute.
     *
     * The basic structure for this function is derived from Gansner, et al., "A
     * Technique for Drawing Directed Graphs."
     *
     * Pre-conditions:
     *
     *    1. Graph must be a DAG.
     *    2. Graph must be connected.
     *    3. Graph must have at least one node.
     *    5. Graph nodes must have been previously assigned a "rank" property that
     *       respects the "minlen" property of incident edges.
     *    6. Graph edges must have a "minlen" property.
     *
     * Post-conditions:
     *
     *    - Graph nodes will have their rank adjusted to ensure that all edges are
     *      tight.
     *
     * Returns a tree (undirected graph) that is constructed using only "tight"
     * edges.
     */
    function feasibleTree(g) {
      var t = new Graph$5({ directed: false });

      // Choose arbitrary node from which to start our tree
      var start = g.nodes()[0],
          size = g.nodeCount();
      t.setNode(start, {});

      var edge, delta;
      while (tightTree(t, g) < size) {
        edge = findMinSlackEdge(t, g);
        delta = t.hasNode(edge.v) ? slack$1(g, edge) : -slack$1(g, edge);
        shiftRanks(t, g, delta);
      }

      return t;
    }

    /*
     * Finds a maximal tree of tight edges and returns the number of nodes in the
     * tree.
     */
    function tightTree(t, g) {
      function dfs(v) {
        lodash_1.forEach(g.nodeEdges(v), function(e) {
          var edgeV = e.v,
              w = (v === edgeV) ? e.w : edgeV;
          if (!t.hasNode(w) && !slack$1(g, e)) {
            t.setNode(w, {});
            t.setEdge(v, w, {});
            dfs(w);
          }
        });
      }

      lodash_1.forEach(t.nodes(), dfs);
      return t.nodeCount();
    }

    /*
     * Finds the edge with the smallest slack that is incident on tree and returns
     * it.
     */
    function findMinSlackEdge(t, g) {
      return lodash_1.minBy(g.edges(), function(e) {
        if (t.hasNode(e.v) !== t.hasNode(e.w)) {
          return slack$1(g, e);
        }
      });
    }

    function shiftRanks(t, g, delta) {
      lodash_1.forEach(t.nodes(), function(v) {
        g.node(v).rank += delta;
      });
    }

    var slack = util$1.slack,
        initRank = util$1.longestPath,
        preorder = graphlib_1.alg.preorder,
        postorder$1 = graphlib_1.alg.postorder,
        simplify = util$2.simplify;

    var networkSimplex_1 = networkSimplex;

    // Expose some internals for testing purposes
    networkSimplex.initLowLimValues = initLowLimValues;
    networkSimplex.initCutValues = initCutValues;
    networkSimplex.calcCutValue = calcCutValue;
    networkSimplex.leaveEdge = leaveEdge;
    networkSimplex.enterEdge = enterEdge;
    networkSimplex.exchangeEdges = exchangeEdges;

    /*
     * The network simplex algorithm assigns ranks to each node in the input graph
     * and iteratively improves the ranking to reduce the length of edges.
     *
     * Preconditions:
     *
     *    1. The input graph must be a DAG.
     *    2. All nodes in the graph must have an object value.
     *    3. All edges in the graph must have "minlen" and "weight" attributes.
     *
     * Postconditions:
     *
     *    1. All nodes in the graph will have an assigned "rank" attribute that has
     *       been optimized by the network simplex algorithm. Ranks start at 0.
     *
     *
     * A rough sketch of the algorithm is as follows:
     *
     *    1. Assign initial ranks to each node. We use the longest path algorithm,
     *       which assigns ranks to the lowest position possible. In general this
     *       leads to very wide bottom ranks and unnecessarily long edges.
     *    2. Construct a feasible tight tree. A tight tree is one such that all
     *       edges in the tree have no slack (difference between length of edge
     *       and minlen for the edge). This by itself greatly improves the assigned
     *       rankings by shorting edges.
     *    3. Iteratively find edges that have negative cut values. Generally a
     *       negative cut value indicates that the edge could be removed and a new
     *       tree edge could be added to produce a more compact graph.
     *
     * Much of the algorithms here are derived from Gansner, et al., "A Technique
     * for Drawing Directed Graphs." The structure of the file roughly follows the
     * structure of the overall algorithm.
     */
    function networkSimplex(g) {
      g = simplify(g);
      initRank(g);
      var t = feasibleTree_1(g);
      initLowLimValues(t);
      initCutValues(t, g);

      var e, f;
      while ((e = leaveEdge(t))) {
        f = enterEdge(t, g, e);
        exchangeEdges(t, g, e, f);
      }
    }

    /*
     * Initializes cut values for all edges in the tree.
     */
    function initCutValues(t, g) {
      var vs = postorder$1(t, t.nodes());
      vs = vs.slice(0, vs.length - 1);
      lodash_1.forEach(vs, function(v) {
        assignCutValue(t, g, v);
      });
    }

    function assignCutValue(t, g, child) {
      var childLab = t.node(child),
          parent = childLab.parent;
      t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
    }

    /*
     * Given the tight tree, its graph, and a child in the graph calculate and
     * return the cut value for the edge between the child and its parent.
     */
    function calcCutValue(t, g, child) {
      var childLab = t.node(child),
          parent = childLab.parent,
          // True if the child is on the tail end of the edge in the directed graph
          childIsTail = true,
          // The graph's view of the tree edge we're inspecting
          graphEdge = g.edge(child, parent),
          // The accumulated cut value for the edge between this node and its parent
          cutValue = 0;

      if (!graphEdge) {
        childIsTail = false;
        graphEdge = g.edge(parent, child);
      }

      cutValue = graphEdge.weight;

      lodash_1.forEach(g.nodeEdges(child), function(e) {
        var isOutEdge = e.v === child,
            other = isOutEdge ? e.w : e.v;

        if (other !== parent) {
          var pointsToHead = isOutEdge === childIsTail,
              otherWeight = g.edge(e).weight;

          cutValue += pointsToHead ? otherWeight : -otherWeight;
          if (isTreeEdge(t, child, other)) {
            var otherCutValue = t.edge(child, other).cutvalue;
            cutValue += pointsToHead ? -otherCutValue : otherCutValue;
          }
        }
      });

      return cutValue;
    }

    function initLowLimValues(tree, root) {
      if (arguments.length < 2) {
        root = tree.nodes()[0];
      }
      dfsAssignLowLim(tree, {}, 1, root);
    }

    function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
      var low = nextLim,
          label = tree.node(v);

      visited[v] = true;
      lodash_1.forEach(tree.neighbors(v), function(w) {
        if (!lodash_1.has(visited, w)) {
          nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
        }
      });

      label.low = low;
      label.lim = nextLim++;
      if (parent) {
        label.parent = parent;
      } else {
        // TODO should be able to remove this when we incrementally update low lim
        delete label.parent;
      }

      return nextLim;
    }

    function leaveEdge(tree) {
      return lodash_1.find(tree.edges(), function(e) {
        return tree.edge(e).cutvalue < 0;
      });
    }

    function enterEdge(t, g, edge) {
      var v = edge.v,
          w = edge.w;

      // For the rest of this function we assume that v is the tail and w is the
      // head, so if we don't have this edge in the graph we should flip it to
      // match the correct orientation.
      if (!g.hasEdge(v, w)) {
        v = edge.w;
        w = edge.v;
      }

      var vLabel = t.node(v),
          wLabel = t.node(w),
          tailLabel = vLabel,
          flip = false;

      // If the root is in the tail of the edge then we need to flip the logic that
      // checks for the head and tail nodes in the candidates function below.
      if (vLabel.lim > wLabel.lim) {
        tailLabel = wLabel;
        flip = true;
      }

      var candidates = lodash_1.filter(g.edges(), function(edge) {
        return flip === isDescendant(t, t.node(edge.v), tailLabel) &&
               flip !== isDescendant(t, t.node(edge.w), tailLabel);
      });

      return lodash_1.minBy(candidates, function(edge) { return slack(g, edge); });
    }

    function exchangeEdges(t, g, e, f) {
      var v = e.v,
          w = e.w;
      t.removeEdge(v, w);
      t.setEdge(f.v, f.w, {});
      initLowLimValues(t);
      initCutValues(t, g);
      updateRanks(t, g);
    }

    function updateRanks(t, g) {
      var root = lodash_1.find(t.nodes(), function(v) { return !g.node(v).parent; }),
          vs = preorder(t, root);
      vs = vs.slice(1);
      lodash_1.forEach(vs, function(v) {
        var parent = t.node(v).parent,
            edge = g.edge(v, parent),
            flipped = false;

        if (!edge) {
          edge = g.edge(parent, v);
          flipped = true;
        }

        g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
      });
    }

    /*
     * Returns true if the edge is in the tree.
     */
    function isTreeEdge(tree, u, v) {
      return tree.hasEdge(u, v);
    }

    /*
     * Returns true if the specified node is descendant of the root node per the
     * assigned low and lim attributes in the tree.
     */
    function isDescendant(tree, vLabel, rootLabel) {
      return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
    }

    var longestPath = util$1.longestPath;

    var rank_1 = rank;

    /*
     * Assigns a rank to each node in the input graph that respects the "minlen"
     * constraint specified on edges between nodes.
     *
     * This basic structure is derived from Gansner, et al., "A Technique for
     * Drawing Directed Graphs."
     *
     * Pre-conditions:
     *
     *    1. Graph must be a connected DAG
     *    2. Graph nodes must be objects
     *    3. Graph edges must have "weight" and "minlen" attributes
     *
     * Post-conditions:
     *
     *    1. Graph nodes will have a "rank" attribute based on the results of the
     *       algorithm. Ranks can start at any index (including negative), we'll
     *       fix them up later.
     */
    function rank(g) {
      switch(g.graph().ranker) {
        case "network-simplex": networkSimplexRanker(g); break;
        case "tight-tree": tightTreeRanker(g); break;
        case "longest-path": longestPathRanker(g); break;
        default: networkSimplexRanker(g);
      }
    }

    // A fast and simple ranker, but results are far from optimal.
    var longestPathRanker = longestPath;

    function tightTreeRanker(g) {
      longestPath(g);
      feasibleTree_1(g);
    }

    function networkSimplexRanker(g) {
      networkSimplex_1(g);
    }

    var parentDummyChains_1 = parentDummyChains;

    function parentDummyChains(g) {
      var postorderNums = postorder(g);

      lodash_1.forEach(g.graph().dummyChains, function(v) {
        var node = g.node(v),
            edgeObj = node.edgeObj,
            pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w),
            path = pathData.path,
            lca = pathData.lca,
            pathIdx = 0,
            pathV = path[pathIdx],
            ascending = true;

        while (v !== edgeObj.w) {
          node = g.node(v);

          if (ascending) {
            while ((pathV = path[pathIdx]) !== lca &&
                   g.node(pathV).maxRank < node.rank) {
              pathIdx++;
            }

            if (pathV === lca) {
              ascending = false;
            }
          }

          if (!ascending) {
            while (pathIdx < path.length - 1 &&
                   g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
              pathIdx++;
            }
            pathV = path[pathIdx];
          }

          g.setParent(v, pathV);
          v = g.successors(v)[0];
        }
      });
    }

    // Find a path from v to w through the lowest common ancestor (LCA). Return the
    // full path and the LCA.
    function findPath(g, postorderNums, v, w) {
      var vPath = [],
          wPath = [],
          low = Math.min(postorderNums[v].low, postorderNums[w].low),
          lim = Math.max(postorderNums[v].lim, postorderNums[w].lim),
          parent,
          lca;

      // Traverse up from v to find the LCA
      parent = v;
      do {
        parent = g.parent(parent);
        vPath.push(parent);
      } while (parent &&
               (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
      lca = parent;

      // Traverse from w to LCA
      parent = w;
      while ((parent = g.parent(parent)) !== lca) {
        wPath.push(parent);
      }

      return { path: vPath.concat(wPath.reverse()), lca: lca };
    }

    function postorder(g) {
      var result = {},
          lim = 0;

      function dfs(v) {
        var low = lim;
        lodash_1.forEach(g.children(v), dfs);
        result[v] = { low: low, lim: lim++ };
      }
      lodash_1.forEach(g.children(), dfs);

      return result;
    }

    var nestingGraph = {
      run: run,
      cleanup: cleanup
    };

    /*
     * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,
     * adds appropriate edges to ensure that all cluster nodes are placed between
     * these boundries, and ensures that the graph is connected.
     *
     * In addition we ensure, through the use of the minlen property, that nodes
     * and subgraph border nodes to not end up on the same rank.
     *
     * Preconditions:
     *
     *    1. Input graph is a DAG
     *    2. Nodes in the input graph has a minlen attribute
     *
     * Postconditions:
     *
     *    1. Input graph is connected.
     *    2. Dummy nodes are added for the tops and bottoms of subgraphs.
     *    3. The minlen attribute for nodes is adjusted to ensure nodes do not
     *       get placed on the same rank as subgraph border nodes.
     *
     * The nesting graph idea comes from Sander, "Layout of Compound Directed
     * Graphs."
     */
    function run(g) {
      var root = util$2.addDummyNode(g, "root", {}, "_root");
      var depths = treeDepths(g);
      var height = lodash_1.max(lodash_1.values(depths)) - 1; // Note: depths is an Object not an array
      var nodeSep = 2 * height + 1;

      g.graph().nestingRoot = root;

      // Multiply minlen by nodeSep to align nodes on non-border ranks.
      lodash_1.forEach(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });

      // Calculate a weight that is sufficient to keep subgraphs vertically compact
      var weight = sumWeights(g) + 1;

      // Create border nodes and link them up
      lodash_1.forEach(g.children(), function(child) {
        dfs(g, root, nodeSep, weight, height, depths, child);
      });

      // Save the multiplier for node layers for later removal of empty border
      // layers.
      g.graph().nodeRankFactor = nodeSep;
    }

    function dfs(g, root, nodeSep, weight, height, depths, v) {
      var children = g.children(v);
      if (!children.length) {
        if (v !== root) {
          g.setEdge(root, v, { weight: 0, minlen: nodeSep });
        }
        return;
      }

      var top = util$2.addBorderNode(g, "_bt"),
          bottom = util$2.addBorderNode(g, "_bb"),
          label = g.node(v);

      g.setParent(top, v);
      label.borderTop = top;
      g.setParent(bottom, v);
      label.borderBottom = bottom;

      lodash_1.forEach(children, function(child) {
        dfs(g, root, nodeSep, weight, height, depths, child);

        var childNode = g.node(child),
            childTop = childNode.borderTop ? childNode.borderTop : child,
            childBottom = childNode.borderBottom ? childNode.borderBottom : child,
            thisWeight = childNode.borderTop ? weight : 2 * weight,
            minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;

        g.setEdge(top, childTop, {
          weight: thisWeight,
          minlen: minlen,
          nestingEdge: true
        });

        g.setEdge(childBottom, bottom, {
          weight: thisWeight,
          minlen: minlen,
          nestingEdge: true
        });
      });

      if (!g.parent(v)) {
        g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });
      }
    }

    function treeDepths(g) {
      var depths = {};
      function dfs(v, depth) {
        var children = g.children(v);
        if (children && children.length) {
          lodash_1.forEach(children, function(child) {
            dfs(child, depth + 1);
          });
        }
        depths[v] = depth;
      }
      lodash_1.forEach(g.children(), function(v) { dfs(v, 1); });
      return depths;
    }

    function sumWeights(g) {
      return lodash_1.reduce(g.edges(), function(acc, e) {
        return acc + g.edge(e).weight;
      }, 0);
    }

    function cleanup(g) {
      var graphLabel = g.graph();
      g.removeNode(graphLabel.nestingRoot);
      delete graphLabel.nestingRoot;
      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (edge.nestingEdge) {
          g.removeEdge(e);
        }
      });
    }

    var addBorderSegments_1 = addBorderSegments;

    function addBorderSegments(g) {
      function dfs(v) {
        var children = g.children(v),
            node = g.node(v);
        if (children.length) {
          lodash_1.forEach(children, dfs);
        }

        if (lodash_1.has(node, "minRank")) {
          node.borderLeft = [];
          node.borderRight = [];
          for (var rank = node.minRank, maxRank = node.maxRank + 1;
               rank < maxRank;
               ++rank) {
            addBorderNode(g, "borderLeft", "_bl", v, node, rank);
            addBorderNode(g, "borderRight", "_br", v, node, rank);
          }
        }
      }

      lodash_1.forEach(g.children(), dfs);
    }

    function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
      var label = { width: 0, height: 0, rank: rank, borderType: prop },
          prev = sgNode[prop][rank - 1],
          curr = util$2.addDummyNode(g, "border", label, prefix);
      sgNode[prop][rank] = curr;
      g.setParent(curr, sg);
      if (prev) {
        g.setEdge(prev, curr, { weight: 1 });
      }
    }

    var coordinateSystem = {
      adjust: adjust,
      undo: undo
    };

    function adjust(g) {
      var rankDir = g.graph().rankdir.toLowerCase();
      if (rankDir === "lr" || rankDir === "rl") {
        swapWidthHeight(g);
      }
    }

    function undo(g) {
      var rankDir = g.graph().rankdir.toLowerCase();
      if (rankDir === "bt" || rankDir === "rl") {
        reverseY(g);
      }

      if (rankDir === "lr" || rankDir === "rl") {
        swapXY(g);
        swapWidthHeight(g);
      }
    }

    function swapWidthHeight(g) {
      lodash_1.forEach(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });
      lodash_1.forEach(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });
    }

    function swapWidthHeightOne(attrs) {
      var w = attrs.width;
      attrs.width = attrs.height;
      attrs.height = w;
    }

    function reverseY(g) {
      lodash_1.forEach(g.nodes(), function(v) { reverseYOne(g.node(v)); });

      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        lodash_1.forEach(edge.points, reverseYOne);
        if (lodash_1.has(edge, "y")) {
          reverseYOne(edge);
        }
      });
    }

    function reverseYOne(attrs) {
      attrs.y = -attrs.y;
    }

    function swapXY(g) {
      lodash_1.forEach(g.nodes(), function(v) { swapXYOne(g.node(v)); });

      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        lodash_1.forEach(edge.points, swapXYOne);
        if (lodash_1.has(edge, "x")) {
          swapXYOne(edge);
        }
      });
    }

    function swapXYOne(attrs) {
      var x = attrs.x;
      attrs.x = attrs.y;
      attrs.y = x;
    }

    var initOrder_1 = initOrder;

    /*
     * Assigns an initial order value for each node by performing a DFS search
     * starting from nodes in the first rank. Nodes are assigned an order in their
     * rank as they are first visited.
     *
     * This approach comes from Gansner, et al., "A Technique for Drawing Directed
     * Graphs."
     *
     * Returns a layering matrix with an array per layer and each layer sorted by
     * the order of its nodes.
     */
    function initOrder(g) {
      var visited = {},
          simpleNodes = lodash_1.filter(g.nodes(), function(v) {
            return !g.children(v).length;
          }),
          maxRank = lodash_1.max(lodash_1.map(simpleNodes, function(v) { return g.node(v).rank; })),
          layers = lodash_1.map(lodash_1.range(maxRank + 1), function() { return []; });

      function dfs(v) {
        if (lodash_1.has(visited, v)) return;
        visited[v] = true;
        var node = g.node(v);
        layers[node.rank].push(v);
        lodash_1.forEach(g.successors(v), dfs);
      }

      var orderedVs = lodash_1.sortBy(simpleNodes, function(v) { return g.node(v).rank; });
      lodash_1.forEach(orderedVs, dfs);

      return layers;
    }

    var crossCount_1 = crossCount;

    /*
     * A function that takes a layering (an array of layers, each with an array of
     * ordererd nodes) and a graph and returns a weighted crossing count.
     *
     * Pre-conditions:
     *
     *    1. Input graph must be simple (not a multigraph), directed, and include
     *       only simple edges.
     *    2. Edges in the input graph must have assigned weights.
     *
     * Post-conditions:
     *
     *    1. The graph and layering matrix are left unchanged.
     *
     * This algorithm is derived from Barth, et al., "Bilayer Cross Counting."
     */
    function crossCount(g, layering) {
      var cc = 0;
      for (var i = 1; i < layering.length; ++i) {
        cc += twoLayerCrossCount(g, layering[i-1], layering[i]);
      }
      return cc;
    }

    function twoLayerCrossCount(g, northLayer, southLayer) {
      // Sort all of the edges between the north and south layers by their position
      // in the north layer and then the south. Map these edges to the position of
      // their head in the south layer.
      var southPos = lodash_1.zipObject(southLayer,
                                 lodash_1.map(southLayer, function (v, i) { return i; }));
      var southEntries = lodash_1.flatten(lodash_1.map(northLayer, function(v) {
        return lodash_1.sortBy(lodash_1.map(g.outEdges(v), function(e) {
                  return { pos: southPos[e.w], weight: g.edge(e).weight };
                }), "pos");
      }), true);

      // Build the accumulator tree
      var firstIndex = 1;
      while (firstIndex < southLayer.length) firstIndex <<= 1;
      var treeSize = 2 * firstIndex - 1;
      firstIndex -= 1;
      var tree = lodash_1.map(new Array(treeSize), function() { return 0; });

      // Calculate the weighted crossings
      var cc = 0;
      lodash_1.forEach(southEntries.forEach(function(entry) {
        var index = entry.pos + firstIndex;
        tree[index] += entry.weight;
        var weightSum = 0;
        while (index > 0) {
          if (index % 2) {
            weightSum += tree[index + 1];
          }
          index = (index - 1) >> 1;
          tree[index] += entry.weight;
        }
        cc += entry.weight * weightSum;
      }));

      return cc;
    }

    var barycenter_1 = barycenter;

    function barycenter(g, movable) {
      return lodash_1.map(movable, function(v) {
        var inV = g.inEdges(v);
        if (!inV.length) {
          return { v: v };
        } else {
          var result = lodash_1.reduce(inV, function(acc, e) {
            var edge = g.edge(e),
                nodeU = g.node(e.v);
            return {
              sum: acc.sum + (edge.weight * nodeU.order),
              weight: acc.weight + edge.weight
            };
          }, { sum: 0, weight: 0 });

          return {
            v: v,
            barycenter: result.sum / result.weight,
            weight: result.weight
          };
        }
      });
    }

    var resolveConflicts_1 = resolveConflicts;

    /*
     * Given a list of entries of the form {v, barycenter, weight} and a
     * constraint graph this function will resolve any conflicts between the
     * constraint graph and the barycenters for the entries. If the barycenters for
     * an entry would violate a constraint in the constraint graph then we coalesce
     * the nodes in the conflict into a new node that respects the contraint and
     * aggregates barycenter and weight information.
     *
     * This implementation is based on the description in Forster, "A Fast and
     * Simple Hueristic for Constrained Two-Level Crossing Reduction," thought it
     * differs in some specific details.
     *
     * Pre-conditions:
     *
     *    1. Each entry has the form {v, barycenter, weight}, or if the node has
     *       no barycenter, then {v}.
     *
     * Returns:
     *
     *    A new list of entries of the form {vs, i, barycenter, weight}. The list
     *    `vs` may either be a singleton or it may be an aggregation of nodes
     *    ordered such that they do not violate constraints from the constraint
     *    graph. The property `i` is the lowest original index of any of the
     *    elements in `vs`.
     */
    function resolveConflicts(entries, cg) {
      var mappedEntries = {};
      lodash_1.forEach(entries, function(entry, i) {
        var tmp = mappedEntries[entry.v] = {
          indegree: 0,
          "in": [],
          out: [],
          vs: [entry.v],
          i: i
        };
        if (!lodash_1.isUndefined(entry.barycenter)) {
          tmp.barycenter = entry.barycenter;
          tmp.weight = entry.weight;
        }
      });

      lodash_1.forEach(cg.edges(), function(e) {
        var entryV = mappedEntries[e.v],
            entryW = mappedEntries[e.w];
        if (!lodash_1.isUndefined(entryV) && !lodash_1.isUndefined(entryW)) {
          entryW.indegree++;
          entryV.out.push(mappedEntries[e.w]);
        }
      });

      var sourceSet = lodash_1.filter(mappedEntries, function(entry) {
        return !entry.indegree;
      });

      return doResolveConflicts(sourceSet);
    }

    function doResolveConflicts(sourceSet) {
      var entries = [];

      function handleIn(vEntry) {
        return function(uEntry) {
          if (uEntry.merged) {
            return;
          }
          if (lodash_1.isUndefined(uEntry.barycenter) ||
              lodash_1.isUndefined(vEntry.barycenter) ||
              uEntry.barycenter >= vEntry.barycenter) {
            mergeEntries(vEntry, uEntry);
          }
        };
      }

      function handleOut(vEntry) {
        return function(wEntry) {
          wEntry["in"].push(vEntry);
          if (--wEntry.indegree === 0) {
            sourceSet.push(wEntry);
          }
        };
      }

      while (sourceSet.length) {
        var entry = sourceSet.pop();
        entries.push(entry);
        lodash_1.forEach(entry["in"].reverse(), handleIn(entry));
        lodash_1.forEach(entry.out, handleOut(entry));
      }

      return lodash_1.map(lodash_1.filter(entries, function(entry) { return !entry.merged; }),
                   function(entry) {
                     return lodash_1.pick(entry, ["vs", "i", "barycenter", "weight"]);
                   });

    }

    function mergeEntries(target, source) {
      var sum = 0,
          weight = 0;

      if (target.weight) {
        sum += target.barycenter * target.weight;
        weight += target.weight;
      }

      if (source.weight) {
        sum += source.barycenter * source.weight;
        weight += source.weight;
      }

      target.vs = source.vs.concat(target.vs);
      target.barycenter = sum / weight;
      target.weight = weight;
      target.i = Math.min(source.i, target.i);
      source.merged = true;
    }

    var sort_1 = sort;

    function sort(entries, biasRight) {
      var parts = util$2.partition(entries, function(entry) {
        return lodash_1.has(entry, "barycenter");
      });
      var sortable = parts.lhs,
          unsortable = lodash_1.sortBy(parts.rhs, function(entry) { return -entry.i; }),
          vs = [],
          sum = 0,
          weight = 0,
          vsIndex = 0;

      sortable.sort(compareWithBias(!!biasRight));

      vsIndex = consumeUnsortable(vs, unsortable, vsIndex);

      lodash_1.forEach(sortable, function (entry) {
        vsIndex += entry.vs.length;
        vs.push(entry.vs);
        sum += entry.barycenter * entry.weight;
        weight += entry.weight;
        vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
      });

      var result = { vs: lodash_1.flatten(vs, true) };
      if (weight) {
        result.barycenter = sum / weight;
        result.weight = weight;
      }
      return result;
    }

    function consumeUnsortable(vs, unsortable, index) {
      var last;
      while (unsortable.length && (last = lodash_1.last(unsortable)).i <= index) {
        unsortable.pop();
        vs.push(last.vs);
        index++;
      }
      return index;
    }

    function compareWithBias(bias) {
      return function(entryV, entryW) {
        if (entryV.barycenter < entryW.barycenter) {
          return -1;
        } else if (entryV.barycenter > entryW.barycenter) {
          return 1;
        }

        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
      };
    }

    var sortSubgraph_1 = sortSubgraph;

    function sortSubgraph(g, v, cg, biasRight) {
      var movable = g.children(v),
          node = g.node(v),
          bl = node ? node.borderLeft : undefined,
          br = node ? node.borderRight: undefined,
          subgraphs = {};

      if (bl) {
        movable = lodash_1.filter(movable, function(w) {
          return w !== bl && w !== br;
        });
      }

      var barycenters = barycenter_1(g, movable);
      lodash_1.forEach(barycenters, function(entry) {
        if (g.children(entry.v).length) {
          var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
          subgraphs[entry.v] = subgraphResult;
          if (lodash_1.has(subgraphResult, "barycenter")) {
            mergeBarycenters(entry, subgraphResult);
          }
        }
      });

      var entries = resolveConflicts_1(barycenters, cg);
      expandSubgraphs(entries, subgraphs);

      var result = sort_1(entries, biasRight);

      if (bl) {
        result.vs = lodash_1.flatten([bl, result.vs, br], true);
        if (g.predecessors(bl).length) {
          var blPred = g.node(g.predecessors(bl)[0]),
              brPred = g.node(g.predecessors(br)[0]);
          if (!lodash_1.has(result, "barycenter")) {
            result.barycenter = 0;
            result.weight = 0;
          }
          result.barycenter = (result.barycenter * result.weight +
                               blPred.order + brPred.order) / (result.weight + 2);
          result.weight += 2;
        }
      }

      return result;
    }

    function expandSubgraphs(entries, subgraphs) {
      lodash_1.forEach(entries, function(entry) {
        entry.vs = lodash_1.flatten(entry.vs.map(function(v) {
          if (subgraphs[v]) {
            return subgraphs[v].vs;
          }
          return v;
        }), true);
      });
    }

    function mergeBarycenters(target, other) {
      if (!lodash_1.isUndefined(target.barycenter)) {
        target.barycenter = (target.barycenter * target.weight +
                             other.barycenter * other.weight) /
                            (target.weight + other.weight);
        target.weight += other.weight;
      } else {
        target.barycenter = other.barycenter;
        target.weight = other.weight;
      }
    }

    var Graph$4 = graphlib_1.Graph;

    var buildLayerGraph_1 = buildLayerGraph;

    /*
     * Constructs a graph that can be used to sort a layer of nodes. The graph will
     * contain all base and subgraph nodes from the request layer in their original
     * hierarchy and any edges that are incident on these nodes and are of the type
     * requested by the "relationship" parameter.
     *
     * Nodes from the requested rank that do not have parents are assigned a root
     * node in the output graph, which is set in the root graph attribute. This
     * makes it easy to walk the hierarchy of movable nodes during ordering.
     *
     * Pre-conditions:
     *
     *    1. Input graph is a DAG
     *    2. Base nodes in the input graph have a rank attribute
     *    3. Subgraph nodes in the input graph has minRank and maxRank attributes
     *    4. Edges have an assigned weight
     *
     * Post-conditions:
     *
     *    1. Output graph has all nodes in the movable rank with preserved
     *       hierarchy.
     *    2. Root nodes in the movable layer are made children of the node
     *       indicated by the root attribute of the graph.
     *    3. Non-movable nodes incident on movable nodes, selected by the
     *       relationship parameter, are included in the graph (without hierarchy).
     *    4. Edges incident on movable nodes, selected by the relationship
     *       parameter, are added to the output graph.
     *    5. The weights for copied edges are aggregated as need, since the output
     *       graph is not a multi-graph.
     */
    function buildLayerGraph(g, rank, relationship) {
      var root = createRootNode(g),
          result = new Graph$4({ compound: true }).setGraph({ root: root })
                      .setDefaultNodeLabel(function(v) { return g.node(v); });

      lodash_1.forEach(g.nodes(), function(v) {
        var node = g.node(v),
            parent = g.parent(v);

        if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
          result.setNode(v);
          result.setParent(v, parent || root);

          // This assumes we have only short edges!
          lodash_1.forEach(g[relationship](v), function(e) {
            var u = e.v === v ? e.w : e.v,
                edge = result.edge(u, v),
                weight = !lodash_1.isUndefined(edge) ? edge.weight : 0;
            result.setEdge(u, v, { weight: g.edge(e).weight + weight });
          });

          if (lodash_1.has(node, "minRank")) {
            result.setNode(v, {
              borderLeft: node.borderLeft[rank],
              borderRight: node.borderRight[rank]
            });
          }
        }
      });

      return result;
    }

    function createRootNode(g) {
      var v;
      while (g.hasNode((v = lodash_1.uniqueId("_root"))));
      return v;
    }

    var addSubgraphConstraints_1 = addSubgraphConstraints;

    function addSubgraphConstraints(g, cg, vs) {
      var prev = {},
          rootPrev;

      lodash_1.forEach(vs, function(v) {
        var child = g.parent(v),
            parent,
            prevChild;
        while (child) {
          parent = g.parent(child);
          if (parent) {
            prevChild = prev[parent];
            prev[parent] = child;
          } else {
            prevChild = rootPrev;
            rootPrev = child;
          }
          if (prevChild && prevChild !== child) {
            cg.setEdge(prevChild, child);
            return;
          }
          child = parent;
        }
      });

      /*
      function dfs(v) {
        var children = v ? g.children(v) : g.children();
        if (children.length) {
          var min = Number.POSITIVE_INFINITY,
              subgraphs = [];
          _.each(children, function(child) {
            var childMin = dfs(child);
            if (g.children(child).length) {
              subgraphs.push({ v: child, order: childMin });
            }
            min = Math.min(min, childMin);
          });
          _.reduce(_.sortBy(subgraphs, "order"), function(prev, curr) {
            cg.setEdge(prev.v, curr.v);
            return curr;
          });
          return min;
        }
        return g.node(v).order;
      }
      dfs(undefined);
      */
    }

    var Graph$3 = graphlib_1.Graph;

    var order_1 = order;

    /*
     * Applies heuristics to minimize edge crossings in the graph and sets the best
     * order solution as an order attribute on each node.
     *
     * Pre-conditions:
     *
     *    1. Graph must be DAG
     *    2. Graph nodes must be objects with a "rank" attribute
     *    3. Graph edges must have the "weight" attribute
     *
     * Post-conditions:
     *
     *    1. Graph nodes will have an "order" attribute based on the results of the
     *       algorithm.
     */
    function order(g) {
      var maxRank = util$2.maxRank(g),
          downLayerGraphs = buildLayerGraphs(g, lodash_1.range(1, maxRank + 1), "inEdges"),
          upLayerGraphs = buildLayerGraphs(g, lodash_1.range(maxRank - 1, -1, -1), "outEdges");

      var layering = initOrder_1(g);
      assignOrder(g, layering);

      var bestCC = Number.POSITIVE_INFINITY,
          best;

      for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);

        layering = util$2.buildLayerMatrix(g);
        var cc = crossCount_1(g, layering);
        if (cc < bestCC) {
          lastBest = 0;
          best = lodash_1.cloneDeep(layering);
          bestCC = cc;
        }
      }

      assignOrder(g, best);
    }

    function buildLayerGraphs(g, ranks, relationship) {
      return lodash_1.map(ranks, function(rank) {
        return buildLayerGraph_1(g, rank, relationship);
      });
    }

    function sweepLayerGraphs(layerGraphs, biasRight) {
      var cg = new Graph$3();
      lodash_1.forEach(layerGraphs, function(lg) {
        var root = lg.graph().root;
        var sorted = sortSubgraph_1(lg, root, cg, biasRight);
        lodash_1.forEach(sorted.vs, function(v, i) {
          lg.node(v).order = i;
        });
        addSubgraphConstraints_1(lg, cg, sorted.vs);
      });
    }

    function assignOrder(g, layering) {
      lodash_1.forEach(layering, function(layer) {
        lodash_1.forEach(layer, function(v, i) {
          g.node(v).order = i;
        });
      });
    }

    var Graph$2 = graphlib_1.Graph;

    /*
     * This module provides coordinate assignment based on Brandes and Köpf, "Fast
     * and Simple Horizontal Coordinate Assignment."
     */

    var bk = {
      positionX: positionX$1,
      findType1Conflicts: findType1Conflicts,
      findType2Conflicts: findType2Conflicts,
      addConflict: addConflict,
      hasConflict: hasConflict,
      verticalAlignment: verticalAlignment,
      horizontalCompaction: horizontalCompaction,
      alignCoordinates: alignCoordinates,
      findSmallestWidthAlignment: findSmallestWidthAlignment,
      balance: balance
    };

    /*
     * Marks all edges in the graph with a type-1 conflict with the "type1Conflict"
     * property. A type-1 conflict is one where a non-inner segment crosses an
     * inner segment. An inner segment is an edge with both incident nodes marked
     * with the "dummy" property.
     *
     * This algorithm scans layer by layer, starting with the second, for type-1
     * conflicts between the current layer and the previous layer. For each layer
     * it scans the nodes from left to right until it reaches one that is incident
     * on an inner segment. It then scans predecessors to determine if they have
     * edges that cross that inner segment. At the end a final scan is done for all
     * nodes on the current rank to see if they cross the last visited inner
     * segment.
     *
     * This algorithm (safely) assumes that a dummy node will only be incident on a
     * single node in the layers being scanned.
     */
    function findType1Conflicts(g, layering) {
      var conflicts = {};

      function visitLayer(prevLayer, layer) {
        var
          // last visited node in the previous layer that is incident on an inner
          // segment.
          k0 = 0,
          // Tracks the last node in this layer scanned for crossings with a type-1
          // segment.
          scanPos = 0,
          prevLayerLength = prevLayer.length,
          lastNode = lodash_1.last(layer);

        lodash_1.forEach(layer, function(v, i) {
          var w = findOtherInnerSegmentNode(g, v),
              k1 = w ? g.node(w).order : prevLayerLength;

          if (w || v === lastNode) {
            lodash_1.forEach(layer.slice(scanPos, i +1), function(scanNode) {
              lodash_1.forEach(g.predecessors(scanNode), function(u) {
                var uLabel = g.node(u),
                    uPos = uLabel.order;
                if ((uPos < k0 || k1 < uPos) &&
                    !(uLabel.dummy && g.node(scanNode).dummy)) {
                  addConflict(conflicts, u, scanNode);
                }
              });
            });
            scanPos = i + 1;
            k0 = k1;
          }
        });

        return layer;
      }

      lodash_1.reduce(layering, visitLayer);
      return conflicts;
    }

    function findType2Conflicts(g, layering) {
      var conflicts = {};

      function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
        var v;
        lodash_1.forEach(lodash_1.range(southPos, southEnd), function(i) {
          v = south[i];
          if (g.node(v).dummy) {
            lodash_1.forEach(g.predecessors(v), function(u) {
              var uNode = g.node(u);
              if (uNode.dummy &&
                  (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
                addConflict(conflicts, u, v);
              }
            });
          }
        });
      }


      function visitLayer(north, south) {
        var prevNorthPos = -1,
            nextNorthPos,
            southPos = 0;

        lodash_1.forEach(south, function(v, southLookahead) {
          if (g.node(v).dummy === "border") {
            var predecessors = g.predecessors(v);
            if (predecessors.length) {
              nextNorthPos = g.node(predecessors[0]).order;
              scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
              southPos = southLookahead;
              prevNorthPos = nextNorthPos;
            }
          }
          scan(south, southPos, south.length, nextNorthPos, north.length);
        });

        return south;
      }

      lodash_1.reduce(layering, visitLayer);
      return conflicts;
    }

    function findOtherInnerSegmentNode(g, v) {
      if (g.node(v).dummy) {
        return lodash_1.find(g.predecessors(v), function(u) {
          return g.node(u).dummy;
        });
      }
    }

    function addConflict(conflicts, v, w) {
      if (v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }

      var conflictsV = conflicts[v];
      if (!conflictsV) {
        conflicts[v] = conflictsV = {};
      }
      conflictsV[w] = true;
    }

    function hasConflict(conflicts, v, w) {
      if (v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      return lodash_1.has(conflicts[v], w);
    }

    /*
     * Try to align nodes into vertical "blocks" where possible. This algorithm
     * attempts to align a node with one of its median neighbors. If the edge
     * connecting a neighbor is a type-1 conflict then we ignore that possibility.
     * If a previous node has already formed a block with a node after the node
     * we're trying to form a block with, we also ignore that possibility - our
     * blocks would be split in that scenario.
     */
    function verticalAlignment(g, layering, conflicts, neighborFn) {
      var root = {},
          align = {},
          pos = {};

      // We cache the position here based on the layering because the graph and
      // layering may be out of sync. The layering matrix is manipulated to
      // generate different extreme alignments.
      lodash_1.forEach(layering, function(layer) {
        lodash_1.forEach(layer, function(v, order) {
          root[v] = v;
          align[v] = v;
          pos[v] = order;
        });
      });

      lodash_1.forEach(layering, function(layer) {
        var prevIdx = -1;
        lodash_1.forEach(layer, function(v) {
          var ws = neighborFn(v);
          if (ws.length) {
            ws = lodash_1.sortBy(ws, function(w) { return pos[w]; });
            var mp = (ws.length - 1) / 2;
            for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
              var w = ws[i];
              if (align[v] === v &&
                  prevIdx < pos[w] &&
                  !hasConflict(conflicts, v, w)) {
                align[w] = v;
                align[v] = root[v] = root[w];
                prevIdx = pos[w];
              }
            }
          }
        });
      });

      return { root: root, align: align };
    }

    function horizontalCompaction(g, layering, root, align, reverseSep) {
      // This portion of the algorithm differs from BK due to a number of problems.
      // Instead of their algorithm we construct a new block graph and do two
      // sweeps. The first sweep places blocks with the smallest possible
      // coordinates. The second sweep removes unused space by moving blocks to the
      // greatest coordinates without violating separation.
      var xs = {},
          blockG = buildBlockGraph(g, layering, root, reverseSep),
          borderType = reverseSep ? "borderLeft" : "borderRight";

      function iterate(setXsFunc, nextNodesFunc) {
        var stack = blockG.nodes();
        var elem = stack.pop();
        var visited = {};
        while (elem) {
          if (visited[elem]) {
            setXsFunc(elem);
          } else {
            visited[elem] = true;
            stack.push(elem);
            stack = stack.concat(nextNodesFunc(elem));
          }

          elem = stack.pop();
        }
      }

      // First pass, assign smallest coordinates
      function pass1(elem) {
        xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {
          return Math.max(acc, xs[e.v] + blockG.edge(e));
        }, 0);
      }

      // Second pass, assign greatest coordinates
      function pass2(elem) {
        var min = blockG.outEdges(elem).reduce(function(acc, e) {
          return Math.min(acc, xs[e.w] - blockG.edge(e));
        }, Number.POSITIVE_INFINITY);

        var node = g.node(elem);
        if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
          xs[elem] = Math.max(xs[elem], min);
        }
      }

      iterate(pass1, blockG.predecessors.bind(blockG));
      iterate(pass2, blockG.successors.bind(blockG));

      // Assign x coordinates to all nodes
      lodash_1.forEach(align, function(v) {
        xs[v] = xs[root[v]];
      });

      return xs;
    }


    function buildBlockGraph(g, layering, root, reverseSep) {
      var blockGraph = new Graph$2(),
          graphLabel = g.graph(),
          sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);

      lodash_1.forEach(layering, function(layer) {
        var u;
        lodash_1.forEach(layer, function(v) {
          var vRoot = root[v];
          blockGraph.setNode(vRoot);
          if (u) {
            var uRoot = root[u],
                prevMax = blockGraph.edge(uRoot, vRoot);
            blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
          }
          u = v;
        });
      });

      return blockGraph;
    }

    /*
     * Returns the alignment that has the smallest width of the given alignments.
     */
    function findSmallestWidthAlignment(g, xss) {
      return lodash_1.minBy(lodash_1.values(xss), function (xs) {
        var max = Number.NEGATIVE_INFINITY;
        var min = Number.POSITIVE_INFINITY;

        lodash_1.forIn(xs, function (x, v) {
          var halfWidth = width(g, v) / 2;

          max = Math.max(x + halfWidth, max);
          min = Math.min(x - halfWidth, min);
        });

        return max - min;
      });
    }

    /*
     * Align the coordinates of each of the layout alignments such that
     * left-biased alignments have their minimum coordinate at the same point as
     * the minimum coordinate of the smallest width alignment and right-biased
     * alignments have their maximum coordinate at the same point as the maximum
     * coordinate of the smallest width alignment.
     */
    function alignCoordinates(xss, alignTo) {
      var alignToVals = lodash_1.values(alignTo),
          alignToMin = lodash_1.min(alignToVals),
          alignToMax = lodash_1.max(alignToVals);

      lodash_1.forEach(["u", "d"], function(vert) {
        lodash_1.forEach(["l", "r"], function(horiz) {
          var alignment = vert + horiz,
              xs = xss[alignment],
              delta;
          if (xs === alignTo) return;

          var xsVals = lodash_1.values(xs);
          delta = horiz === "l" ? alignToMin - lodash_1.min(xsVals) : alignToMax - lodash_1.max(xsVals);

          if (delta) {
            xss[alignment] = lodash_1.mapValues(xs, function(x) { return x + delta; });
          }
        });
      });
    }

    function balance(xss, align) {
      return lodash_1.mapValues(xss.ul, function(ignore, v) {
        if (align) {
          return xss[align.toLowerCase()][v];
        } else {
          var xs = lodash_1.sortBy(lodash_1.map(xss, v));
          return (xs[1] + xs[2]) / 2;
        }
      });
    }

    function positionX$1(g) {
      var layering = util$2.buildLayerMatrix(g),
          conflicts = lodash_1.merge(findType1Conflicts(g, layering),
                              findType2Conflicts(g, layering));

      var xss = {},
          adjustedLayering;
      lodash_1.forEach(["u", "d"], function(vert) {
        adjustedLayering = vert === "u" ? layering : lodash_1.values(layering).reverse();
        lodash_1.forEach(["l", "r"], function(horiz) {
          if (horiz === "r") {
            adjustedLayering = lodash_1.map(adjustedLayering, function(inner) {
              return lodash_1.values(inner).reverse();
            });
          }

          var neighborFn = (vert === "u" ? g.predecessors : g.successors).bind(g);
          var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
          var xs = horizontalCompaction(g, adjustedLayering,
                                        align.root, align.align,
                                        horiz === "r");
          if (horiz === "r") {
            xs = lodash_1.mapValues(xs, function(x) { return -x; });
          }
          xss[vert + horiz] = xs;
        });
      });

      var smallestWidth = findSmallestWidthAlignment(g, xss);
      alignCoordinates(xss, smallestWidth);
      return balance(xss, g.graph().align);
    }

    function sep(nodeSep, edgeSep, reverseSep) {
      return function(g, v, w) {
        var vLabel = g.node(v),
            wLabel = g.node(w),
            sum = 0,
            delta;

        sum += vLabel.width / 2;
        if (lodash_1.has(vLabel, "labelpos")) {
          switch (vLabel.labelpos.toLowerCase()) {
            case "l": delta = -vLabel.width / 2; break;
            case "r": delta = vLabel.width / 2; break;
          }
        }
        if (delta) {
          sum += reverseSep ? delta : -delta;
        }
        delta = 0;

        sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
        sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;

        sum += wLabel.width / 2;
        if (lodash_1.has(wLabel, "labelpos")) {
          switch (wLabel.labelpos.toLowerCase()) {
            case "l": delta = wLabel.width / 2; break;
            case "r": delta = -wLabel.width / 2; break;
          }
        }
        if (delta) {
          sum += reverseSep ? delta : -delta;
        }
        delta = 0;

        return sum;
      };
    }

    function width(g, v) {
      return g.node(v).width;
    }

    var positionX = bk.positionX;

    var position_1 = position;

    function position(g) {
      g = util$2.asNonCompoundGraph(g);

      positionY(g);
      lodash_1.forEach(positionX(g), function(x, v) {
        g.node(v).x = x;
      });
    }

    function positionY(g) {
      var layering = util$2.buildLayerMatrix(g),
          rankSep = g.graph().ranksep,
          prevY = 0;
      lodash_1.forEach(layering, function(layer) {
        var maxHeight = lodash_1.max(lodash_1.map(layer, function(v) { return g.node(v).height; }));
        lodash_1.forEach(layer, function(v) {
          g.node(v).y = prevY + maxHeight / 2;
        });
        prevY += maxHeight + rankSep;
      });
    }

    var normalizeRanks = util$2.normalizeRanks,
        removeEmptyRanks = util$2.removeEmptyRanks,
        util = util$2,
        Graph$1 = graphlib_1.Graph;

    var layout_1 = layout;

    function layout(g, opts) {
      var time = opts && opts.debugTiming ? util.time : util.notime;
      time("layout", function() {
        var layoutGraph = time("  buildLayoutGraph",
                                   function() { return buildLayoutGraph(g); });
        time("  runLayout",        function() { runLayout(layoutGraph, time); });
        time("  updateInputGraph", function() { updateInputGraph(g, layoutGraph); });
      });
    }

    function runLayout(g, time) {
      time("    makeSpaceForEdgeLabels", function() { makeSpaceForEdgeLabels(g); });
      time("    removeSelfEdges",        function() { removeSelfEdges(g); });
      time("    acyclic",                function() { acyclic.run(g); });
      time("    nestingGraph.run",       function() { nestingGraph.run(g); });
      time("    rank",                   function() { rank_1(util.asNonCompoundGraph(g)); });
      time("    injectEdgeLabelProxies", function() { injectEdgeLabelProxies(g); });
      time("    removeEmptyRanks",       function() { removeEmptyRanks(g); });
      time("    nestingGraph.cleanup",   function() { nestingGraph.cleanup(g); });
      time("    normalizeRanks",         function() { normalizeRanks(g); });
      time("    assignRankMinMax",       function() { assignRankMinMax(g); });
      time("    removeEdgeLabelProxies", function() { removeEdgeLabelProxies(g); });
      time("    normalize.run",          function() { normalize.run(g); });
      time("    parentDummyChains",      function() { parentDummyChains_1(g); });
      time("    addBorderSegments",      function() { addBorderSegments_1(g); });
      time("    order",                  function() { order_1(g); });
      time("    insertSelfEdges",        function() { insertSelfEdges(g); });
      time("    adjustCoordinateSystem", function() { coordinateSystem.adjust(g); });
      time("    position",               function() { position_1(g); });
      time("    positionSelfEdges",      function() { positionSelfEdges(g); });
      time("    removeBorderNodes",      function() { removeBorderNodes(g); });
      time("    normalize.undo",         function() { normalize.undo(g); });
      time("    fixupEdgeLabelCoords",   function() { fixupEdgeLabelCoords(g); });
      time("    undoCoordinateSystem",   function() { coordinateSystem.undo(g); });
      time("    translateGraph",         function() { translateGraph(g); });
      time("    assignNodeIntersects",   function() { assignNodeIntersects(g); });
      time("    reversePoints",          function() { reversePointsForReversedEdges(g); });
      time("    acyclic.undo",           function() { acyclic.undo(g); });
    }

    /*
     * Copies final layout information from the layout graph back to the input
     * graph. This process only copies whitelisted attributes from the layout graph
     * to the input graph, so it serves as a good place to determine what
     * attributes can influence layout.
     */
    function updateInputGraph(inputGraph, layoutGraph) {
      lodash_1.forEach(inputGraph.nodes(), function(v) {
        var inputLabel = inputGraph.node(v),
            layoutLabel = layoutGraph.node(v);

        if (inputLabel) {
          inputLabel.x = layoutLabel.x;
          inputLabel.y = layoutLabel.y;

          if (layoutGraph.children(v).length) {
            inputLabel.width = layoutLabel.width;
            inputLabel.height = layoutLabel.height;
          }
        }
      });

      lodash_1.forEach(inputGraph.edges(), function(e) {
        var inputLabel = inputGraph.edge(e),
            layoutLabel = layoutGraph.edge(e);

        inputLabel.points = layoutLabel.points;
        if (lodash_1.has(layoutLabel, "x")) {
          inputLabel.x = layoutLabel.x;
          inputLabel.y = layoutLabel.y;
        }
      });

      inputGraph.graph().width = layoutGraph.graph().width;
      inputGraph.graph().height = layoutGraph.graph().height;
    }

    var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"],
        graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" },
        graphAttrs = ["acyclicer", "ranker", "rankdir", "align"],
        nodeNumAttrs = ["width", "height"],
        nodeDefaults = { width: 0, height: 0 },
        edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"],
        edgeDefaults = {
          minlen: 1, weight: 1, width: 0, height: 0,
          labeloffset: 10, labelpos: "r"
        },
        edgeAttrs = ["labelpos"];

    /*
     * Constructs a new graph from the input graph, which can be used for layout.
     * This process copies only whitelisted attributes from the input graph to the
     * layout graph. Thus this function serves as a good place to determine what
     * attributes can influence layout.
     */
    function buildLayoutGraph(inputGraph) {
      var g = new Graph$1({ multigraph: true, compound: true }),
          graph = canonicalize(inputGraph.graph());

      g.setGraph(lodash_1.merge({},
        graphDefaults,
        selectNumberAttrs(graph, graphNumAttrs),
        lodash_1.pick(graph, graphAttrs)));

      lodash_1.forEach(inputGraph.nodes(), function(v) {
        var node = canonicalize(inputGraph.node(v));
        g.setNode(v, lodash_1.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
        g.setParent(v, inputGraph.parent(v));
      });

      lodash_1.forEach(inputGraph.edges(), function(e) {
        var edge = canonicalize(inputGraph.edge(e));
        g.setEdge(e, lodash_1.merge({},
          edgeDefaults,
          selectNumberAttrs(edge, edgeNumAttrs),
          lodash_1.pick(edge, edgeAttrs)));
      });

      return g;
    }

    /*
     * This idea comes from the Gansner paper: to account for edge labels in our
     * layout we split each rank in half by doubling minlen and halving ranksep.
     * Then we can place labels at these mid-points between nodes.
     *
     * We also add some minimal padding to the width to push the label for the edge
     * away from the edge itself a bit.
     */
    function makeSpaceForEdgeLabels(g) {
      var graph = g.graph();
      graph.ranksep /= 2;
      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        edge.minlen *= 2;
        if (edge.labelpos.toLowerCase() !== "c") {
          if (graph.rankdir === "TB" || graph.rankdir === "BT") {
            edge.width += edge.labeloffset;
          } else {
            edge.height += edge.labeloffset;
          }
        }
      });
    }

    /*
     * Creates temporary dummy nodes that capture the rank in which each edge's
     * label is going to, if it has one of non-zero width and height. We do this
     * so that we can safely remove empty ranks while preserving balance for the
     * label's position.
     */
    function injectEdgeLabelProxies(g) {
      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (edge.width && edge.height) {
          var v = g.node(e.v),
              w = g.node(e.w),
              label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };
          util.addDummyNode(g, "edge-proxy", label, "_ep");
        }
      });
    }

    function assignRankMinMax(g) {
      var maxRank = 0;
      lodash_1.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (node.borderTop) {
          node.minRank = g.node(node.borderTop).rank;
          node.maxRank = g.node(node.borderBottom).rank;
          maxRank = lodash_1.max(maxRank, node.maxRank);
        }
      });
      g.graph().maxRank = maxRank;
    }

    function removeEdgeLabelProxies(g) {
      lodash_1.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (node.dummy === "edge-proxy") {
          g.edge(node.e).labelRank = node.rank;
          g.removeNode(v);
        }
      });
    }

    function translateGraph(g) {
      var minX = Number.POSITIVE_INFINITY,
          maxX = 0,
          minY = Number.POSITIVE_INFINITY,
          maxY = 0,
          graphLabel = g.graph(),
          marginX = graphLabel.marginx || 0,
          marginY = graphLabel.marginy || 0;

      function getExtremes(attrs) {
        var x = attrs.x,
            y = attrs.y,
            w = attrs.width,
            h = attrs.height;
        minX = Math.min(minX, x - w / 2);
        maxX = Math.max(maxX, x + w / 2);
        minY = Math.min(minY, y - h / 2);
        maxY = Math.max(maxY, y + h / 2);
      }

      lodash_1.forEach(g.nodes(), function(v) { getExtremes(g.node(v)); });
      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (lodash_1.has(edge, "x")) {
          getExtremes(edge);
        }
      });

      minX -= marginX;
      minY -= marginY;

      lodash_1.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        node.x -= minX;
        node.y -= minY;
      });

      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        lodash_1.forEach(edge.points, function(p) {
          p.x -= minX;
          p.y -= minY;
        });
        if (lodash_1.has(edge, "x")) { edge.x -= minX; }
        if (lodash_1.has(edge, "y")) { edge.y -= minY; }
      });

      graphLabel.width = maxX - minX + marginX;
      graphLabel.height = maxY - minY + marginY;
    }

    function assignNodeIntersects(g) {
      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e),
            nodeV = g.node(e.v),
            nodeW = g.node(e.w),
            p1, p2;
        if (!edge.points) {
          edge.points = [];
          p1 = nodeW;
          p2 = nodeV;
        } else {
          p1 = edge.points[0];
          p2 = edge.points[edge.points.length - 1];
        }
        edge.points.unshift(util.intersectRect(nodeV, p1));
        edge.points.push(util.intersectRect(nodeW, p2));
      });
    }

    function fixupEdgeLabelCoords(g) {
      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (lodash_1.has(edge, "x")) {
          if (edge.labelpos === "l" || edge.labelpos === "r") {
            edge.width -= edge.labeloffset;
          }
          switch (edge.labelpos) {
            case "l": edge.x -= edge.width / 2 + edge.labeloffset; break;
            case "r": edge.x += edge.width / 2 + edge.labeloffset; break;
          }
        }
      });
    }

    function reversePointsForReversedEdges(g) {
      lodash_1.forEach(g.edges(), function(e) {
        var edge = g.edge(e);
        if (edge.reversed) {
          edge.points.reverse();
        }
      });
    }

    function removeBorderNodes(g) {
      lodash_1.forEach(g.nodes(), function(v) {
        if (g.children(v).length) {
          var node = g.node(v),
              t = g.node(node.borderTop),
              b = g.node(node.borderBottom),
              l = g.node(lodash_1.last(node.borderLeft)),
              r = g.node(lodash_1.last(node.borderRight));

          node.width = Math.abs(r.x - l.x);
          node.height = Math.abs(b.y - t.y);
          node.x = l.x + node.width / 2;
          node.y = t.y + node.height / 2;
        }
      });

      lodash_1.forEach(g.nodes(), function(v) {
        if (g.node(v).dummy === "border") {
          g.removeNode(v);
        }
      });
    }

    function removeSelfEdges(g) {
      lodash_1.forEach(g.edges(), function(e) {
        if (e.v === e.w) {
          var node = g.node(e.v);
          if (!node.selfEdges) {
            node.selfEdges = [];
          }
          node.selfEdges.push({ e: e, label: g.edge(e) });
          g.removeEdge(e);
        }
      });
    }

    function insertSelfEdges(g) {
      var layers = util.buildLayerMatrix(g);
      lodash_1.forEach(layers, function(layer) {
        var orderShift = 0;
        lodash_1.forEach(layer, function(v, i) {
          var node = g.node(v);
          node.order = i + orderShift;
          lodash_1.forEach(node.selfEdges, function(selfEdge) {
            util.addDummyNode(g, "selfedge", {
              width: selfEdge.label.width,
              height: selfEdge.label.height,
              rank: node.rank,
              order: i + (++orderShift),
              e: selfEdge.e,
              label: selfEdge.label
            }, "_se");
          });
          delete node.selfEdges;
        });
      });
    }

    function positionSelfEdges(g) {
      lodash_1.forEach(g.nodes(), function(v) {
        var node = g.node(v);
        if (node.dummy === "selfedge") {
          var selfNode = g.node(node.e.v),
              x = selfNode.x + selfNode.width / 2,
              y = selfNode.y,
              dx = node.x - x,
              dy = selfNode.height / 2;
          g.setEdge(node.e, node.label);
          g.removeNode(v);
          node.label.points = [
            { x: x + 2 * dx / 3, y: y - dy },
            { x: x + 5 * dx / 6, y: y - dy },
            { x: x +     dx    , y: y },
            { x: x + 5 * dx / 6, y: y + dy },
            { x: x + 2 * dx / 3, y: y + dy }
          ];
          node.label.x = node.x;
          node.label.y = node.y;
        }
      });
    }

    function selectNumberAttrs(obj, attrs) {
      return lodash_1.mapValues(lodash_1.pick(obj, attrs), Number);
    }

    function canonicalize(attrs) {
      var newAttrs = {};
      lodash_1.forEach(attrs, function(v, k) {
        newAttrs[k.toLowerCase()] = v;
      });
      return newAttrs;
    }

    var Graph = graphlib_1.Graph;

    var debug = {
      debugOrdering: debugOrdering
    };

    /* istanbul ignore next */
    function debugOrdering(g) {
      var layerMatrix = util$2.buildLayerMatrix(g);

      var h = new Graph({ compound: true, multigraph: true }).setGraph({});

      lodash_1.forEach(g.nodes(), function(v) {
        h.setNode(v, { label: v });
        h.setParent(v, "layer" + g.node(v).rank);
      });

      lodash_1.forEach(g.edges(), function(e) {
        h.setEdge(e.v, e.w, {}, e.name);
      });

      lodash_1.forEach(layerMatrix, function(layer, i) {
        var layerV = "layer" + i;
        h.setNode(layerV, { rank: "same" });
        lodash_1.reduce(layer, function(u, v) {
          h.setEdge(u, v, { style: "invis" });
          return v;
        });
      });

      return h;
    }
    debug.debugOrdering;

    var version = "0.8.4";

    /*
    Copyright (c) 2012-2014 Chris Pettitt

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    */

    var dagre$1 = {
      graphlib: graphlib_1,

      layout: layout_1,
      debug: debug,
      util: {
        time: util$2.time,
        notime: util$2.notime
      },
      version: version
    };
    dagre$1.graphlib;
    dagre$1.layout;
    dagre$1.debug;
    dagre$1.util;
    dagre$1.version;

    var cytoscapeDagre = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory(dagre$1);
    })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_4__) {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/ 	__webpack_require__.i = function(value) { return value; };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 3);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {


    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var isFunction = function isFunction(o) {
      return typeof o === 'function';
    };
    var defaults = __webpack_require__(2);
    var assign = __webpack_require__(1);
    var dagre = __webpack_require__(4);

    // constructor
    // options : object containing layout options
    function DagreLayout(options) {
      this.options = assign({}, defaults, options);
    }

    // runs the layout
    DagreLayout.prototype.run = function () {
      var options = this.options;
      var layout = this;

      var cy = options.cy; // cy is automatically populated for us in the constructor
      var eles = options.eles;

      var getVal = function getVal(ele, val) {
        return isFunction(val) ? val.apply(ele, [ele]) : val;
      };

      var bb = options.boundingBox || { x1: 0, y1: 0, w: cy.width(), h: cy.height() };
      if (bb.x2 === undefined) {
        bb.x2 = bb.x1 + bb.w;
      }
      if (bb.w === undefined) {
        bb.w = bb.x2 - bb.x1;
      }
      if (bb.y2 === undefined) {
        bb.y2 = bb.y1 + bb.h;
      }
      if (bb.h === undefined) {
        bb.h = bb.y2 - bb.y1;
      }

      var g = new dagre.graphlib.Graph({
        multigraph: true,
        compound: true
      });

      var gObj = {};
      var setGObj = function setGObj(name, val) {
        if (val != null) {
          gObj[name] = val;
        }
      };

      setGObj('nodesep', options.nodeSep);
      setGObj('edgesep', options.edgeSep);
      setGObj('ranksep', options.rankSep);
      setGObj('rankdir', options.rankDir);
      setGObj('ranker', options.ranker);

      g.setGraph(gObj);

      g.setDefaultEdgeLabel(function () {
        return {};
      });
      g.setDefaultNodeLabel(function () {
        return {};
      });

      // add nodes to dagre
      var nodes = eles.nodes();
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var nbb = node.layoutDimensions(options);

        g.setNode(node.id(), {
          width: nbb.w,
          height: nbb.h,
          name: node.id()
        });

        // console.log( g.node(node.id()) );
      }

      // set compound parents
      for (var _i = 0; _i < nodes.length; _i++) {
        var _node = nodes[_i];

        if (_node.isChild()) {
          g.setParent(_node.id(), _node.parent().id());
        }
      }

      // add edges to dagre
      var edges = eles.edges().stdFilter(function (edge) {
        return !edge.source().isParent() && !edge.target().isParent(); // dagre can't handle edges on compound nodes
      });
      for (var _i2 = 0; _i2 < edges.length; _i2++) {
        var edge = edges[_i2];

        g.setEdge(edge.source().id(), edge.target().id(), {
          minlen: getVal(edge, options.minLen),
          weight: getVal(edge, options.edgeWeight),
          name: edge.id()
        }, edge.id());

        // console.log( g.edge(edge.source().id(), edge.target().id(), edge.id()) );
      }

      dagre.layout(g);

      var gNodeIds = g.nodes();
      for (var _i3 = 0; _i3 < gNodeIds.length; _i3++) {
        var id = gNodeIds[_i3];
        var n = g.node(id);

        cy.getElementById(id).scratch().dagre = n;
      }

      var dagreBB = void 0;

      if (options.boundingBox) {
        dagreBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };
        nodes.forEach(function (node) {
          var dModel = node.scratch().dagre;

          dagreBB.x1 = Math.min(dagreBB.x1, dModel.x);
          dagreBB.x2 = Math.max(dagreBB.x2, dModel.x);

          dagreBB.y1 = Math.min(dagreBB.y1, dModel.y);
          dagreBB.y2 = Math.max(dagreBB.y2, dModel.y);
        });

        dagreBB.w = dagreBB.x2 - dagreBB.x1;
        dagreBB.h = dagreBB.y2 - dagreBB.y1;
      } else {
        dagreBB = bb;
      }

      var constrainPos = function constrainPos(p) {
        if (options.boundingBox) {
          var xPct = dagreBB.w === 0 ? 0 : (p.x - dagreBB.x1) / dagreBB.w;
          var yPct = dagreBB.h === 0 ? 0 : (p.y - dagreBB.y1) / dagreBB.h;

          return {
            x: bb.x1 + xPct * bb.w,
            y: bb.y1 + yPct * bb.h
          };
        } else {
          return p;
        }
      };

      nodes.layoutPositions(layout, options, function (ele) {
        ele = (typeof ele === 'undefined' ? 'undefined' : _typeof(ele)) === "object" ? ele : this;
        var dModel = ele.scratch().dagre;

        return constrainPos({
          x: dModel.x,
          y: dModel.y
        });
      });

      return this; // chaining
    };

    module.exports = DagreLayout;

    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {


    // Simple, internal Object.assign() polyfill for options objects etc.

    module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
      for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        srcs[_key - 1] = arguments[_key];
      }

      srcs.forEach(function (src) {
        Object.keys(src).forEach(function (k) {
          return tgt[k] = src[k];
        });
      });

      return tgt;
    };

    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {


    var defaults = {
      // dagre algo options, uses default value on undefined
      nodeSep: undefined, // the separation between adjacent nodes in the same rank
      edgeSep: undefined, // the separation between adjacent edges in the same rank
      rankSep: undefined, // the separation between adjacent nodes in the same rank
      rankDir: undefined, // 'TB' for top to bottom flow, 'LR' for left to right,
      ranker: undefined, // Type of algorithm to assigns a rank to each node in the input graph.
      // Possible values: network-simplex, tight-tree or longest-path
      minLen: function minLen(edge) {
        return 1;
      }, // number of ranks to keep between the source and target of the edge
      edgeWeight: function edgeWeight(edge) {
        return 1;
      }, // higher weight edges are generally made shorter and straighter than lower weight edges

      // general layout options
      fit: true, // whether to fit to viewport
      padding: 30, // fit padding
      spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
      nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node
      animate: false, // whether to transition the node positions
      animateFilter: function animateFilter(node, i) {
        return true;
      }, // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions
      animationDuration: 500, // duration of animation in ms if enabled
      animationEasing: undefined, // easing of animation if enabled
      boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      transform: function transform(node, pos) {
        return pos;
      }, // a function that applies a transform to the final node position
      ready: function ready() {}, // on layoutready
      stop: function stop() {} // on layoutstop
    };

    module.exports = defaults;

    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {


    var impl = __webpack_require__(0);

    // registers the extension on a cytoscape lib ref
    var register = function register(cytoscape) {
      if (!cytoscape) {
        return;
      } // can't register if cytoscape unspecified

      cytoscape('layout', 'dagre', impl); // register with cytoscape.js
    };

    if (typeof cytoscape !== 'undefined') {
      // expose to global cytoscape (i.e. window.cytoscape)
      register(cytoscape);
    }

    module.exports = register;

    /***/ }),
    /* 4 */
    /***/ (function(module, exports) {

    module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

    /***/ })
    /******/ ]);
    });
    });

    var dagre = unwrapExports(cytoscapeDagre);

    var GraphStyles = [
        {
            selector: "node",
            style: {
                "width": "50",
                "height": "50",
                "font-size": "18",
                "font-weight": "bold",
                "content": "data(label)",
                "text-valign": "center",
                "text-wrap": "wrap",
                "text-max-width": "140",
                "background-color": "gold",
                "border-color": "orange",
                "border-width": "3",
                "color": "darkred"
            }
        },
        {
            selector: "node:selected",
            style: {
                "background-color": "darkred",
                color: "black",
                "border-color": "darkred",
                "line-color": "#0e76ba",
                "target-arrow-color": "#0e76ba"
            }
        },
        {
            selector: "edge",
            style: {
                "curve-style": "bezier",
                "color": "darkred",
                "text-background-color": "#ffffff",
                "text-background-opacity": "1",
                "text-background-padding": "3",
                "width": "3",
                "target-arrow-shape": "triangle",
                "line-color": "darkred",
                "target-arrow-color": "darkred",
                "font-weight": "bold"
            }
        },
        {
            selector: "edge[label]",
            style: {
                "content": "data(label)",
            }
        },
        {
            selector: "edge.label",
            style: {
                "line-color": "orange",
                "target-arrow-color": "orange"
            }
        }
    ];

    /* src/components/GraphComponent_graphlib.svelte generated by Svelte v3.58.0 */

    const { console: console_1$1 } = globals;
    const file = "src/components/GraphComponent_graphlib.svelte";

    // (95:2) {#if cyInstance}
    function create_if_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(95:2) {#if cyInstance}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div;
    	let current;
    	let if_block = /*cyInstance*/ ctx[1] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div = element$1("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "graph");
    			add_location(div, file, 93, 0, 4005);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			/*div_binding*/ ctx[4](div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*cyInstance*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*cyInstance*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			/*div_binding*/ ctx[4](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('GraphComponent_graphlib', slots, ['default']);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	setContext("graphSharedState", { getCyInstance: () => cyInstance });
    	let refElement = null;
    	let cyInstance = null;
    	let g = new graphlib$1.Graph();
    	let id_map = new Map();
    	let lastAction = "";

    	graphStore.subscribe(value => __awaiter(void 0, void 0, void 0, function* () {
    		console.log("graphStore value: ", value);

    		if (value.lastAction === "addNode" && value.actedOn != null && Array.isArray(value.actedOn)) {
    			id_map = id_map.set(value.actedOn[0], value.actedOn[1]);
    			console.log("id_map: ", id_map);
    			g.setNode(value.actedOn[0], value.actedOn[1]);
    		} else if (value.lastAction === "addEdge" && value.actedOn != null && !Array.isArray(value.actedOn)) {
    			g.setEdge(value.actedOn.v, value.actedOn.w, value.actedOn);
    		} else if (value.lastAction === "removeEdge" && value.actedOn != null && !Array.isArray(value.actedOn)) {
    			console.log("Removing edge: ", value.actedOn.v, value.actedOn.w);
    			g.removeEdge(value.actedOn.v, value.actedOn.w);
    		} else if (value.lastAction === "removeNode" && value.actedOn != null && Array.isArray(value.actedOn)) {
    			g.removeNode(value.actedOn[0]);
    		} else if (value.lastAction === "resetGraph") {
    			g = new graphlib$1.Graph(); // reset graph
    			resetLastAction();
    		}

    		lastAction = value.lastAction;

    		// Now update cytoscape graph based on graphlib graph
    		if (cyInstance && (lastAction === "addNode" || lastAction === "addEdge" || lastAction === "removeEdge" || lastAction === "removeNode")) {
    			// show the id_map
    			console.log("id_map: ", id_map);

    			cyInstance.elements().remove(); // clear the cytoscape graph
    			const elements = [];

    			g.nodes().forEach(node => {
    				console.log("Adding node: ", node, id_map.get(node));

    				elements.push({
    					data: { id: node, label: id_map.get(node) }
    				});
    			});

    			g.edges().forEach(edge => {
    				elements.push({ data: { source: edge.v, target: edge.w } });
    			});

    			cyInstance.add(elements); // add new elements
    		}
    	}));

    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		cytoscape_cjs.use(dagre);

    		$$invalidate(1, cyInstance = cytoscape_cjs({
    			container: refElement,
    			style: GraphStyles
    		}));

    		cyInstance.on("add", () => {
    			console.log("add event fired, lastAction: ", lastAction);

    			if (cyInstance && (lastAction === "addNode" || lastAction === "addEdge" || lastAction === "removeEdge" || lastAction === "removeNode")) {
    				cyInstance.layout({ name: "dagre" }).run();
    			}
    		});

    		cyInstance.on("select", "node", evt => {
    			const selectedNode = evt.target.data();
    			selectNode(selectedNode.id);
    		});

    		cyInstance.on("select", "edge", event => {
    			selectEdge(event.target.data().source, event.target.data().target);
    		});
    	}));

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<GraphComponent_graphlib> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refElement = $$value;
    			$$invalidate(0, refElement);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		__awaiter,
    		onMount,
    		setContext,
    		cytoscape: cytoscape_cjs,
    		dagre,
    		GraphStyles,
    		graphStore,
    		selectNode,
    		resetLastAction,
    		selectEdge,
    		graphlib: graphlib$1,
    		refElement,
    		cyInstance,
    		g,
    		id_map,
    		lastAction
    	});

    	$$self.$inject_state = $$props => {
    		if ('__awaiter' in $$props) __awaiter = $$props.__awaiter;
    		if ('refElement' in $$props) $$invalidate(0, refElement = $$props.refElement);
    		if ('cyInstance' in $$props) $$invalidate(1, cyInstance = $$props.cyInstance);
    		if ('g' in $$props) g = $$props.g;
    		if ('id_map' in $$props) id_map = $$props.id_map;
    		if ('lastAction' in $$props) lastAction = $$props.lastAction;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [refElement, cyInstance, $$scope, slots, div_binding];
    }

    class GraphComponent_graphlib extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GraphComponent_graphlib",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "/* Global Styles */\n* {\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n    color: #2c3e50; /* Dark Blue */\n  }\n  \n  textarea, input {\n    resize: vertical;\n    width: 100%;\n    height: 100%;\n    white-space: pre-wrap;\n    border-radius: 4px;\n    border: 2px solid #27ae60; /* Green */\n    background-color: #ecf0f1; /* Light Gray */\n  }\n  \n  button {\n    display: block;\n    border: none;\n    padding: 10px;\n    font-size: 14px;\n    border-radius: 12px;\n    cursor: pointer;\n    width: 100%;\n    background-color: #e74c3c; /* Red */\n    color: #ecf0f1; /* Light Gray */\n  }\n  \n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 1em;\n  }\n  \n  /* Styles specific to components */\n  /* ./components/RightSidebar.svelte */\n  .right_sidebar {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 300px;\n    background-color: #3498db; /* Blue */\n    transition: width 0.3s;\n    border-radius: 12px;\n  }\n  \n  .right_sidebar.collapsed {\n    width: 30px;\n  }\n  \n  .expandTab {\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 30px;\n    height: 100%;\n    background-color: #8e44ad; /* Purple */\n    cursor: pointer;\n    text-align: center;\n    writing-mode: vertical-lr;\n    transform: rotate(180deg);\n  }\n  \n  .content {\n    position: absolute;\n    top: 0;\n    left: 30px;\n  }\n  \n  /* ./components/GraphComponent_graphlib.svelte */\n  .graph {\n    position: absolute;\n    left: 300px;\n    right: 300px;\n    height: 100%;\n  }\n  \n  /* ./components/Sidebar.svelte */\n  .sidebar {\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 300px;\n    background-color: #2ecc71; /* Green */\n    overflow-y: auto;\n    box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.541);\n    border-radius: 12px;\n  }\n  \n  .section {\n    margin-bottom: 10px;\n    border-radius: 12px;\n    background-color: #9b59b6; /* Purple */\n  }\n  \n  .section-header, .section-content {\n    padding: 10px;\n    background-color: #f1c40f; /* Yellow */\n    border-radius: 12px;\n  }\n  \n  .section-content {\n    background-color: #ecf0f1; /* Light Gray */\n  }\n  \n  /* ./components/sidebarComponents/CreateProcess.svelte */\n  .sidebar {\n    padding: 20px;\n    background-color: #e67e22; /* Orange */\n    color: #ecf0f1; /* Light Gray */\n    border-right: 1px solid #34495e; /* Dark Blue */\n    width: 300px;\n    height: 100%;\n    overflow-y: auto;\n    border-radius: 12px;\n  }\n  \n  ul {\n    list-style-type: none;\n    padding: 0;\n  }\n  \n  ul li {\n    margin-bottom: 20px;\n    color: #2c3e50; /* Dark Blue */\n  }\n  \n  .section-header {\n    margin-top: 20px;\n    margin-bottom: 10px;\n  }\n  \n  button.selected {\n    background-color: #2ecc71; /* Green */\n    color: #ecf0f1; /* Light Gray */\n  }\n  \n  .add-button {\n    background-color: #16a085; /* Green */\n    margin-top: 20px;\n    margin-bottom: 10px;\n  }\n  \n  .remove-button {\n    background-color: #c0392b; /* Dark Red */\n  }\n  .add-edge-button {\n    background-color: #f39c12; /* Orange */\n    color: #ecf0f1; /* Light Gray */\n    border: none;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    transition-duration: 0.4s;\n    cursor: pointer;\n    border-radius: 12px;\n    width: 100%;\n  }\n  \n  .add-edge-button:hover {\n    background-color: #d35400; /* Dark Orange */\n    color: white;\n  }\n  ";
    styleInject(css_248z);

    function populateInputVariables(action) {
        const tagPattern = /\[(.*?)\](.*?)\[\/\1\]/gs;
        const regex = /\[(.*?)\]/g;
        const filteredInput = action.prompt.replace(tagPattern, "");
        let match;
        const variables = [];
        while ((match = regex.exec(filteredInput)) !== null) {
            // This is necessary to avoid infinite loops with zero-width matches
            if (match.index === regex.lastIndex) {
                regex.lastIndex++;
            }
            // The result can be accessed through the `match`-variable.
            match.forEach((tag, groupIndex) => {
                if (groupIndex === 1) { // Ignore the full match, just add the capture group
                    variables.push(tag);
                }
            });
        }
        return variables;
    }
    function populateOutputVariables(action) {
        const input = action.prompt;
        const exampleTagPattern = /\[example\][\s\S]*?\[\/example\]/g;
        const tagPattern = /\[(.*?)\](.*?)\[\/\1\]/gs;
        // Remove content within [example] tags
        const filteredInput = input.replace(exampleTagPattern, "");
        // Find all tags in the remaining text
        const matches = [...filteredInput.matchAll(tagPattern)];
        // Extract the tag names from the matches
        const tags = matches.map(match => match[1]);
        return tags;
    }

    /* src/App.svelte generated by Svelte v3.58.0 */

    const { Object: Object_1, console: console_1 } = globals;

    function create_fragment(ctx) {
    	let sidebar;
    	let t0;
    	let graphcomponentgraphlib;
    	let t1;
    	let rightsidebar;
    	let current;
    	sidebar = new Sidebar({ $$inline: true });
    	graphcomponentgraphlib = new GraphComponent_graphlib({ $$inline: true });
    	rightsidebar = new RightSidebar({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(sidebar.$$.fragment);
    			t0 = space();
    			create_component(graphcomponentgraphlib.$$.fragment);
    			t1 = space();
    			create_component(rightsidebar.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(sidebar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(graphcomponentgraphlib, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(rightsidebar, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(graphcomponentgraphlib.$$.fragment, local);
    			transition_in(rightsidebar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sidebar.$$.fragment, local);
    			transition_out(graphcomponentgraphlib.$$.fragment, local);
    			transition_out(rightsidebar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sidebar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(graphcomponentgraphlib, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(rightsidebar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $systemStateStore;
    	let $websocketStore;
    	validate_store(systemStateStore, 'systemStateStore');
    	component_subscribe($$self, systemStateStore, $$value => $$invalidate(1, $systemStateStore = $$value));
    	validate_store(websocketStore, 'websocketStore');
    	component_subscribe($$self, websocketStore, $$value => $$invalidate(2, $websocketStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let lastSelectedProcess = null;

    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		// start the websocket connection 
    		$websocketStore.addEventListener("open", () => {
    			console.log("websocket connection opened");
    			$websocketStore.send(JSON.stringify({ initial_message: "initial message" }));
    		});

    		$websocketStore.addEventListener("message", event => {
    			console.log("websocket message received: ", event.data);
    			let data = JSON.parse(event.data);

    			// check to see if the data has the shape of a Process or Action
    			if (isProcess(data)) {
    				let process = data;

    				aiSystemStore.update(state => {
    					console.log("Adding process to state:");
    					state.processes.push(process);
    					return state;
    				});
    			} else if (isAction(data)) {
    				let action = data;
    				console.log(getId(action));

    				aiSystemStore.update(state => {
    					console.log("Adding action to state:");
    					let input_variables = populateInputVariables(action);
    					console.log("input_variables: ", input_variables);
    					let output_variables = populateOutputVariables(action);
    					console.log("output_variables: ", output_variables);

    					// check to see that the variables stored in the action are valid
    					let compareThese = action.input_variables;

    					let compareThese2 = action.output_variables;
    					let set1 = new Set(input_variables);
    					let set2 = new Set(compareThese);
    					let union = new Set([...set1, ...set2]);
    					let set3 = new Set(output_variables);
    					let set4 = new Set(compareThese2);
    					let union2 = new Set([...set3, ...set4]);
    					let invalid = false;

    					// This ensures that the input variables are always up-to-date
    					if (union.size !== set1.size || union.size !== set2.size) {
    						console.log("invalid input variables");
    						action.input_variables = input_variables;
    						invalid = true;
    					}

    					// This ensures that the output variables are always up-to-date
    					if (union2.size !== set3.size || union2.size !== set4.size) {
    						console.log("invalid output variables");
    						action.output_variables = output_variables;
    						invalid = true;
    					}

    					if (invalid) {
    						$websocketStore.send(JSON.stringify({ action }));
    						return state;
    					}

    					// check if the action is already in the state by looking at the name
    					let actionIndex = state.actions.findIndex(a => a.name === action.name);

    					if (actionIndex === -1) {
    						state.actions.push(action);
    					} else {
    						state.actions[actionIndex] = action;
    					}

    					return state;
    				});
    			} else if (Object.prototype.hasOwnProperty.call(data, "create_action")) {
    				let action = data.create_action;

    				aiSystemStore.update(state => {
    					state.actions.push(action);
    					return state;
    				});
    			} else if (Object.prototype.hasOwnProperty.call(data, "create_process")) {
    				let process = data.create_process;

    				// check if process.graph is a string
    				if (typeof process.graph === "string") {
    					process.graph = graphlib_2.read(process.graph);
    				}

    				aiSystemStore.update(state => {
    					if (process != null) {
    						state.processes.push(process);
    						return state;
    					}

    					return state;
    				});
    			}
    		});
    	}));

    	function handleProcessChange(process) {
    		return __awaiter(this, void 0, void 0, function* () {
    			console.log("selected process changed: ", process);
    			yield processToGraph(process);
    		});
    	}

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		__awaiter,
    		Sidebar,
    		RightSidebar,
    		GraphComponentGraphlib: GraphComponent_graphlib,
    		json: graphlib_2,
    		isAction,
    		isProcess,
    		getId,
    		onMount,
    		websocketStore,
    		aiSystemStore,
    		systemStateStore,
    		processToGraph,
    		populateInputVariables,
    		populateOutputVariables,
    		lastSelectedProcess,
    		handleProcessChange,
    		$systemStateStore,
    		$websocketStore
    	});

    	$$self.$inject_state = $$props => {
    		if ('__awaiter' in $$props) __awaiter = $$props.__awaiter;
    		if ('lastSelectedProcess' in $$props) $$invalidate(0, lastSelectedProcess = $$props.lastSelectedProcess);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$systemStateStore, lastSelectedProcess*/ 3) {
    			{
    				let process = $systemStateStore.selectedProcess;

    				if (lastSelectedProcess == null || process && process.name !== lastSelectedProcess.name) {
    					handleProcessChange(process);
    					$$invalidate(0, lastSelectedProcess = process);
    				}
    			}
    		}
    	};

    	return [lastSelectedProcess, $systemStateStore];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    var app = new App({
      target: document.body
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
