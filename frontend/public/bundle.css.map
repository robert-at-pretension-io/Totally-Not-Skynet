{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "ChevronIcon.svelte",
    "ClearIcon.svelte",
    "LoadingIcon.svelte",
    "Select.svelte",
    "GraphComponent.svelte",
    "RightSidebar.svelte",
    "Sidebar.svelte",
    "AddNodeButton.svelte",
    "JsonEditor.svelte",
    "SetOpenaiKey.svelte"
  ],
  "sourcesContent": [
    "<svg\n    width=\"100%\"\n    height=\"100%\"\n    viewBox=\"0 0 20 20\"\n    focusable=\"false\"\n    aria-hidden=\"true\">\n    <path\n    fill=\"currentColor\"\n        d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747\n          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0\n          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502\n          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0\n          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\" />\n</svg>\n\n<style>\n  svg {\n      width: var(--chevron-icon-width, 20px);\n      height: var(--chevron-icon-width, 20px);\n      color: var(--chevron-icon-colour, currentColor);\n  }\n\n</style>",
    "<svg\n    width=\"100%\"\n    height=\"100%\"\n    viewBox=\"-2 -2 50 50\"\n    focusable=\"false\"\n    aria-hidden=\"true\"\n    role=\"presentation\"\n>\n    <path\n        fill=\"currentColor\"\n        d=\"M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124\n    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z\"\n    />\n</svg>\n\n<style>\n    svg {\n        width: var(--clear-icon-width, 20px);\n        height: var(--clear-icon-width, 20px);\n        color: var(--clear-icon-color, currentColor);\n    }\n\n</style>",
    "<svg class=\"loading\" viewBox=\"25 25 50 50\">\n    <circle\n        class=\"circle_path\"\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"5\"\n        stroke-miterlimit=\"10\" />\n</svg>\n\n<style>\n    .loading {\n        width: var(--spinner-width, 20px);\n        height: var(--spinner-height, 20px);\n        color: var(--spinner-color, var(--icons-color));\n        animation: rotate 0.75s linear infinite;\n        transform-origin: center center;\n        transform: none;\n    }\n\n    .circle_path {\n        stroke-dasharray: 90;\n        stroke-linecap: round;\n    }\n\n    @keyframes rotate {\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n\n</style>",
    "<script>\n    import { beforeUpdate, createEventDispatcher, onDestroy, onMount } from 'svelte';\n    import { offset, flip, shift } from '@floating-ui/dom';\n    import { createFloatingActions } from 'svelte-floating-ui';\n\n    const dispatch = createEventDispatcher();\n\n    import _filter from './filter';\n    import _getItems from './get-items';\n\n    import ChevronIcon from './ChevronIcon.svelte';\n    import ClearIcon from './ClearIcon.svelte';\n    import LoadingIcon from './LoadingIcon.svelte';\n\n    export let justValue = null; // read-only\n\n    export let filter = _filter;\n    export let getItems = _getItems;\n\n    export let id = null;\n    export let name = null;\n    export let container = undefined;\n    export let input = undefined;\n    export let multiple = false;\n    export let multiFullItemClearable = false;\n    export let disabled = false;\n    export let focused = false;\n    export let value = null;\n    export let filterText = '';\n    export let placeholder = 'Please select';\n    export let placeholderAlwaysShow = false;\n    export let items = null;\n    export let label = 'label';\n    export let itemFilter = (label, filterText, option) => `${label}`.toLowerCase().includes(filterText.toLowerCase());\n    export let groupBy = undefined;\n    export let groupFilter = (groups) => groups;\n    export let groupHeaderSelectable = false;\n    export let itemId = 'value';\n    export let loadOptions = undefined;\n    export let containerStyles = '';\n    export let hasError = false;\n    export let filterSelectedItems = true;\n    export let required = false;\n    export let closeListOnChange = true;\n\n    export let createGroupHeaderItem = (groupValue, item) => {\n        return {\n            value: groupValue,\n            [label]: groupValue,\n        };\n    };\n\n    export const getFilteredItems = () => {\n        return filteredItems;\n    };\n\n    export let searchable = true;\n    export let inputStyles = '';\n    export let clearable = true;\n    export let loading = false;\n    export let listOpen = false;\n\n    let timeout;\n    export let debounce = (fn, wait = 1) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(fn, wait);\n    };\n\n    export let debounceWait = 300;\n    export let hideEmptyState = false;\n    export let inputAttributes = {};\n    export let listAutoWidth = true;\n    export let showChevron = false;\n    export let listOffset = 5;\n    export let hoverItemIndex = 0;\n    export let floatingConfig = {};\n\n    export { containerClasses as class };\n\n    let containerClasses = '';\n    let activeValue;\n    let prev_value;\n    let prev_filterText;\n    let prev_multiple;\n\n    function setValue() {\n        if (typeof value === 'string') {\n            let item = (items || []).find((item) => item[itemId] === value);\n            value = item || {\n                [itemId]: value,\n                label: value,\n            };\n        } else if (multiple && Array.isArray(value) && value.length > 0) {\n            value = value.map((item) => (typeof item === 'string' ? { value: item, label: item } : item));\n        }\n    }\n\n    let _inputAttributes;\n    function assignInputAttributes() {\n        _inputAttributes = Object.assign(\n            {\n                autocapitalize: 'none',\n                autocomplete: 'off',\n                autocorrect: 'off',\n                spellcheck: false,\n                tabindex: 0,\n                type: 'text',\n                'aria-autocomplete': 'list',\n            },\n            inputAttributes\n        );\n\n        if (id) {\n            _inputAttributes['id'] = id;\n        }\n\n        if (!searchable) {\n            _inputAttributes['readonly'] = true;\n        }\n    }\n\n    function convertStringItemsToObjects(_items) {\n        return _items.map((item, index) => {\n            return {\n                index,\n                value: item,\n                label: `${item}`,\n            };\n        });\n    }\n\n    function filterGroupedItems(_items) {\n        const groupValues = [];\n        const groups = {};\n\n        _items.forEach((item) => {\n            const groupValue = groupBy(item);\n\n            if (!groupValues.includes(groupValue)) {\n                groupValues.push(groupValue);\n                groups[groupValue] = [];\n\n                if (groupValue) {\n                    groups[groupValue].push(\n                        Object.assign(createGroupHeaderItem(groupValue, item), {\n                            id: groupValue,\n                            groupHeader: true,\n                            selectable: groupHeaderSelectable,\n                        })\n                    );\n                }\n            }\n\n            groups[groupValue].push(Object.assign({ groupItem: !!groupValue }, item));\n        });\n\n        const sortedGroupedItems = [];\n\n        groupFilter(groupValues).forEach((groupValue) => {\n            if (groups[groupValue]) sortedGroupedItems.push(...groups[groupValue]);\n        });\n\n        return sortedGroupedItems;\n    }\n\n    function dispatchSelectedItem() {\n        if (multiple) {\n            if (JSON.stringify(value) !== JSON.stringify(prev_value)) {\n                if (checkValueForDuplicates()) {\n                    dispatch('input', value);\n                }\n            }\n            return;\n        }\n\n        if (!prev_value || JSON.stringify(value[itemId]) !== JSON.stringify(prev_value[itemId])) {\n            dispatch('input', value);\n        }\n    }\n\n    function setupMulti() {\n        if (value) {\n            if (Array.isArray(value)) {\n                value = [...value];\n            } else {\n                value = [value];\n            }\n        }\n    }\n\n    function setupSingle() {\n        if (value) value = null;\n    }\n\n    $: if ((items, value)) setValue();\n    $: if (inputAttributes || !searchable) assignInputAttributes();\n    $: if (multiple) setupMulti();\n    $: if (prev_multiple && !multiple) setupSingle();\n    $: if (multiple && value && value.length > 1) checkValueForDuplicates();\n    $: if (value) dispatchSelectedItem();\n    $: if (!value && multiple && prev_value) dispatch('input', value);\n    $: if (!focused && input) closeList();\n    $: if (filterText !== prev_filterText) setupFilterText();\n    $: if (!multiple && listOpen && value && filteredItems) setValueIndexAsHoverIndex();\n    $: dispatchHover(hoverItemIndex);\n\n    function setValueIndexAsHoverIndex() {\n        const valueIndex = filteredItems.findIndex((i) => {\n            return i[itemId] === value[itemId];\n        });\n\n        checkHoverSelectable(valueIndex, true);\n    }\n\n    function dispatchHover(i) {\n        dispatch('hoverItem', i);\n    }\n\n    function checkHoverSelectable(startingIndex = 0, ignoreGroup) {\n        hoverItemIndex = startingIndex < 0 ? 0 : startingIndex;\n        if (!ignoreGroup && groupBy && filteredItems[hoverItemIndex] && !filteredItems[hoverItemIndex].selectable) {\n            setHoverIndex(1);\n        }\n    }\n\n    function setupFilterText() {\n        if (!loadOptions && filterText.length === 0) return;\n\n        if (loadOptions) {\n            debounce(async function () {\n                loading = true;\n                let res = await getItems({\n                    dispatch,\n                    loadOptions,\n                    convertStringItemsToObjects,\n                    filterText,\n                });\n\n                if (res) {\n                    loading = res.loading;\n                    listOpen = listOpen ? res.listOpen : filterText.length > 0 ? true : false;\n                    focused = listOpen && res.focused;\n                    items = groupBy ? filterGroupedItems(res.filteredItems) : res.filteredItems;\n                } else {\n                    loading = false;\n                    focused = true;\n                    listOpen = true;\n                }\n            }, debounceWait);\n        } else {\n            listOpen = true;\n\n            if (multiple) {\n                activeValue = undefined;\n            }\n        }\n    }\n\n    $: hasValue = multiple ? value && value.length > 0 : value;\n    $: hideSelectedItem = hasValue && filterText.length > 0;\n    $: showClear = hasValue && clearable && !disabled && !loading;\n    $: placeholderText =\n        placeholderAlwaysShow && multiple\n            ? placeholder\n            : multiple && value?.length === 0\n            ? placeholder\n            : value\n            ? ''\n            : placeholder;\n    $: ariaSelection = value ? handleAriaSelection(multiple) : '';\n    $: ariaContext = handleAriaContent({ filteredItems, hoverItemIndex, focused, listOpen });\n    $: updateValueDisplay(items);\n    $: justValue = computeJustValue(multiple, value, itemId);\n    $: if (!multiple && prev_value && !value) dispatch('input', value);\n    $: filteredItems = filter({\n        loadOptions,\n        filterText,\n        items,\n        multiple,\n        value,\n        itemId,\n        groupBy,\n        label,\n        filterSelectedItems,\n        itemFilter,\n        convertStringItemsToObjects,\n        filterGroupedItems,\n    });\n    $: if (listOpen && filteredItems && !multiple && !value) checkHoverSelectable();\n    $: handleFilterEvent(filteredItems);\n    $: if (container && floatingConfig) floatingUpdate(Object.assign(_floatingConfig, floatingConfig));\n    $: listDom = !!list;\n    $: listMounted(list, listOpen);\n    $: if (listOpen && container && list) setListWidth();\n    $: scrollToHoverItem = hoverItemIndex;\n    $: if (listOpen && multiple) hoverItemIndex = 0;\n    $: if (input && listOpen && !focused) handleFocus();\n    $: if (filterText) hoverItemIndex = 0;\n\n    function handleFilterEvent(items) {\n        if (listOpen) dispatch('filter', items);\n    }\n\n    beforeUpdate(async () => {\n        prev_value = value;\n        prev_filterText = filterText;\n        prev_multiple = multiple;\n    });\n\n    function computeJustValue() {\n        if (multiple) return value ? value.map((item) => item[itemId]) : null;\n        return value ? value[itemId] : value;\n    }\n\n    function checkValueForDuplicates() {\n        let noDuplicates = true;\n        if (value) {\n            const ids = [];\n            const uniqueValues = [];\n\n            value.forEach((val) => {\n                if (!ids.includes(val[itemId])) {\n                    ids.push(val[itemId]);\n                    uniqueValues.push(val);\n                } else {\n                    noDuplicates = false;\n                }\n            });\n\n            if (!noDuplicates) value = uniqueValues;\n        }\n        return noDuplicates;\n    }\n\n    function findItem(selection) {\n        let matchTo = selection ? selection[itemId] : value[itemId];\n        return items.find((item) => item[itemId] === matchTo);\n    }\n\n    function updateValueDisplay(items) {\n        if (!items || items.length === 0 || items.some((item) => typeof item !== 'object')) return;\n        if (!value || (multiple ? value.some((selection) => !selection || !selection[itemId]) : !value[itemId])) return;\n\n        if (Array.isArray(value)) {\n            value = value.map((selection) => findItem(selection) || selection);\n        } else {\n            value = findItem() || value;\n        }\n    }\n\n    async function handleMultiItemClear(i) {\n        const itemToRemove = value[i];\n\n        if (value.length === 1) {\n            value = undefined;\n        } else {\n            value = value.filter((item) => {\n                return item !== itemToRemove;\n            });\n        }\n\n        dispatch('clear', itemToRemove);\n    }\n\n    function handleKeyDown(e) {\n        if (!focused) return;\n        e.stopPropagation();\n        switch (e.key) {\n            case 'Escape':\n                e.preventDefault();\n                closeList();\n                break;\n            case 'Enter':\n                e.preventDefault();\n\n                if (listOpen) {\n                    if (filteredItems.length === 0) break;\n                    const hoverItem = filteredItems[hoverItemIndex];\n\n                    if (value && !multiple && value[itemId] === hoverItem[itemId]) {\n                        closeList();\n                        break;\n                    } else {\n                        handleSelect(filteredItems[hoverItemIndex]);\n                    }\n                }\n\n                break;\n            case 'ArrowDown':\n                e.preventDefault();\n\n                if (listOpen) {\n                    setHoverIndex(1);\n                } else {\n                    listOpen = true;\n                    activeValue = undefined;\n                }\n\n                break;\n            case 'ArrowUp':\n                e.preventDefault();\n\n                if (listOpen) {\n                    setHoverIndex(-1);\n                } else {\n                    listOpen = true;\n                    activeValue = undefined;\n                }\n\n                break;\n            case 'Tab':\n                if (listOpen && focused) {\n                    if (\n                        filteredItems.length === 0 ||\n                        (value && value[itemId] === filteredItems[hoverItemIndex][itemId])\n                    )\n                        return closeList();\n\n                    e.preventDefault();\n                    handleSelect(filteredItems[hoverItemIndex]);\n                    closeList();\n                }\n\n                break;\n            case 'Backspace':\n                if (!multiple || filterText.length > 0) return;\n\n                if (multiple && value && value.length > 0) {\n                    handleMultiItemClear(activeValue !== undefined ? activeValue : value.length - 1);\n                    if (activeValue === 0 || activeValue === undefined) break;\n                    activeValue = value.length > activeValue ? activeValue - 1 : undefined;\n                }\n\n                break;\n            case 'ArrowLeft':\n                if (!value || !multiple || filterText.length > 0) return;\n                if (activeValue === undefined) {\n                    activeValue = value.length - 1;\n                } else if (value.length > activeValue && activeValue !== 0) {\n                    activeValue -= 1;\n                }\n                break;\n            case 'ArrowRight':\n                if (!value || !multiple || filterText.length > 0 || activeValue === undefined) return;\n                if (activeValue === value.length - 1) {\n                    activeValue = undefined;\n                } else if (activeValue < value.length - 1) {\n                    activeValue += 1;\n                }\n                break;\n        }\n    }\n\n    function handleFocus(e) {\n        if (focused && input === document?.activeElement) return;\n        if (e) dispatch('focus', e);\n        input.focus();\n        focused = true;\n    }\n\n    async function handleBlur(e) {\n        if (isScrolling) return;\n        if (listOpen || focused) {\n            dispatch('blur', e);\n            closeList();\n            focused = false;\n            activeValue = undefined;\n            input.blur();\n        }\n    }\n\n    function handleClick() {\n        if (disabled) return;\n        listOpen = !listOpen;\n    }\n\n    export function handleClear() {\n        dispatch('clear', value);\n        value = undefined;\n        closeList();\n        handleFocus();\n    }\n\n    onMount(() => {\n        if (listOpen) focused = true;\n        if (focused && input) input.focus();\n    });\n\n    function itemSelected(selection) {\n        if (selection) {\n            filterText = '';\n            const item = Object.assign({}, selection);\n\n            if (item.groupHeader && !item.selectable) return;\n            value = multiple ? (value ? value.concat([item]) : [item]) : (value = item);\n\n            setTimeout(() => {\n                if (closeListOnChange) closeList();\n                activeValue = undefined;\n                dispatch('change', value);\n                dispatch('select', selection);\n            });\n        }\n    }\n\n    function closeList() {\n        filterText = '';\n        listOpen = false;\n    }\n\n    export let ariaValues = (values) => {\n        return `Option ${values}, selected.`;\n    };\n\n    export let ariaListOpen = (label, count) => {\n        return `You are currently focused on option ${label}. There are ${count} results available.`;\n    };\n\n    export let ariaFocused = () => {\n        return `Select is focused, type to refine list, press down to open the menu.`;\n    };\n\n    function handleAriaSelection(_multiple) {\n        let selected = undefined;\n\n        if (_multiple && value.length > 0) {\n            selected = value.map((v) => v[label]).join(', ');\n        } else {\n            selected = value[label];\n        }\n\n        return ariaValues(selected);\n    }\n\n    function handleAriaContent() {\n        if (!filteredItems || filteredItems.length === 0) return '';\n        let _item = filteredItems[hoverItemIndex];\n        if (listOpen && _item) {\n            let count = filteredItems ? filteredItems.length : 0;\n            return ariaListOpen(_item[label], count);\n        } else {\n            return ariaFocused();\n        }\n    }\n\n    let list = null;\n\n    let isScrollingTimer;\n    function handleListScroll() {\n        clearTimeout(isScrollingTimer);\n        isScrollingTimer = setTimeout(() => {\n            isScrolling = false;\n        }, 100);\n    }\n\n    function handleClickOutside(event) {\n        if (!listOpen && !focused && container && !container.contains(event.target) && !list?.contains(event.target)) {\n            handleBlur();\n        }\n    }\n\n    onDestroy(() => {\n        list?.remove();\n    });\n\n    let isScrolling = false;\n\n    function handleSelect(item) {\n        if (!item || item.selectable === false) return;\n        itemSelected(item);\n    }\n\n    function handleHover(i) {\n        if (isScrolling) return;\n        hoverItemIndex = i;\n    }\n\n    function handleItemClick(args) {\n        const { item, i } = args;\n        if (item?.selectable === false) return;\n        if (value && !multiple && value[itemId] === item[itemId]) return closeList();\n        if (isItemSelectable(item)) {\n            hoverItemIndex = i;\n            handleSelect(item);\n        }\n    }\n\n    function setHoverIndex(increment) {\n        let selectableFilteredItems = filteredItems.filter(\n            (item) => !Object.hasOwn(item, 'selectable') || item.selectable === true\n        );\n\n        if (selectableFilteredItems.length === 0) {\n            return (hoverItemIndex = 0);\n        }\n\n        if (increment > 0 && hoverItemIndex === filteredItems.length - 1) {\n            hoverItemIndex = 0;\n        } else if (increment < 0 && hoverItemIndex === 0) {\n            hoverItemIndex = filteredItems.length - 1;\n        } else {\n            hoverItemIndex = hoverItemIndex + increment;\n        }\n\n        const hover = filteredItems[hoverItemIndex];\n\n        if (hover && hover.selectable === false) {\n            if (increment === 1 || increment === -1) setHoverIndex(increment);\n            return;\n        }\n    }\n\n    function isItemActive(item, value, itemId) {\n        if (multiple) return;\n        return value && value[itemId] === item[itemId];\n    }\n\n    function isItemFirst(itemIndex) {\n        return itemIndex === 0;\n    }\n\n    function isItemSelectable(item) {\n        return (item.groupHeader && item.selectable) || item.selectable || !item.hasOwnProperty('selectable');\n    }\n\n    const activeScroll = scrollAction;\n    const hoverScroll = scrollAction;\n\n    function scrollAction(node) {\n        return {\n            update(args) {\n                if (args.scroll) {\n                    handleListScroll();\n                    node.scrollIntoView({ behavior: 'auto', block: 'nearest' });\n                }\n            },\n        };\n    }\n\n    function setListWidth() {\n        const { width } = container.getBoundingClientRect();\n        list.style.width = listAutoWidth ? width + 'px' : 'auto';\n    }\n\n    let _floatingConfig = {\n        strategy: 'absolute',\n        placement: 'bottom-start',\n        middleware: [offset(listOffset), flip(), shift()],\n        autoUpdate: false,\n    };\n\n    const [floatingRef, floatingContent, floatingUpdate] = createFloatingActions(_floatingConfig);\n\n    $: if (container && floatingConfig?.autoUpdate === undefined) {\n        _floatingConfig.autoUpdate = true;\n    }\n\n    let prefloat = true;\n    function listMounted(list, listOpen) {\n        if (!list || !listOpen) return (prefloat = true);\n        setTimeout(() => {\n            prefloat = false;\n        }, 0);\n    }\n</script>\n\n<svelte:window on:click={handleClickOutside} on:keydown={handleKeyDown} />\n\n<div\n    class=\"svelte-select {containerClasses}\"\n    class:multi={multiple}\n    class:disabled\n    class:focused\n    class:list-open={listOpen}\n    class:show-chevron={showChevron}\n    class:error={hasError}\n    style={containerStyles}\n    on:pointerup|preventDefault={handleClick}\n    on:mousedown|preventDefault\n    bind:this={container}\n    use:floatingRef>\n    {#if listOpen}\n        <div\n            use:floatingContent\n            bind:this={list}\n            class=\"svelte-select-list\"\n            class:prefloat\n            on:scroll={handleListScroll}\n            on:pointerup|preventDefault|stopPropagation>\n            {#if $$slots['list-prepend']}<slot name=\"list-prepend\" />{/if}\n            {#if $$slots.list}<slot name=\"list\" {filteredItems} />\n            {:else if filteredItems.length > 0}\n                {#each filteredItems as item, i}\n                    <div\n                        on:mouseover={() => handleHover(i)}\n                        on:focus={() => handleHover(i)}\n                        on:click|stopPropagation={() => handleItemClick({ item, i })}\n                        on:keydown|preventDefault|stopPropagation\n                        class=\"list-item\"\n                        tabindex=\"-1\">\n                        <div\n                            use:activeScroll={{ scroll: isItemActive(item, value, itemId), listDom }}\n                            use:hoverScroll={{ scroll: scrollToHoverItem === i, listDom }}\n                            class=\"item\"\n                            class:list-group-title={item.groupHeader}\n                            class:active={isItemActive(item, value, itemId)}\n                            class:first={isItemFirst(i)}\n                            class:hover={hoverItemIndex === i}\n                            class:group-item={item.groupItem}\n                            class:not-selectable={item?.selectable === false}>\n                            <slot name=\"item\" {item} index={i}>\n                                {item?.[label]}\n                            </slot>\n                        </div>\n                    </div>\n                {/each}\n            {:else if !hideEmptyState}\n                <slot name=\"empty\">\n                    <div class=\"empty\">No options</div>\n                </slot>\n            {/if}\n            {#if $$slots['list-append']}<slot name=\"list-append\" />{/if}\n        </div>\n    {/if}\n\n    <span aria-live=\"polite\" aria-atomic=\"false\" aria-relevant=\"additions text\" class=\"a11y-text\">\n        {#if focused}\n            <span id=\"aria-selection\">{ariaSelection}</span>\n            <span id=\"aria-context\">\n                {ariaContext}\n            </span>\n        {/if}\n    </span>\n\n    <div class=\"prepend\">\n        <slot name=\"prepend\" />\n    </div>\n\n    <div class=\"value-container\">\n        {#if hasValue}\n            {#if multiple}\n                {#each value as item, i}\n                    <div\n                        class=\"multi-item\"\n                        class:active={activeValue === i}\n                        class:disabled\n                        on:click|preventDefault={() => (multiFullItemClearable ? handleMultiItemClear(i) : {})}\n                        on:keydown|preventDefault|stopPropagation>\n                        <span class=\"multi-item-text\">\n                            <slot name=\"selection\" selection={item} index={i}>\n                                {item[label]}\n                            </slot>\n                        </span>\n\n                        {#if !disabled && !multiFullItemClearable && ClearIcon}\n                            <div\n                                class=\"multi-item-clear\"\n                                on:pointerup|preventDefault|stopPropagation={() => handleMultiItemClear(i)}>\n                                <slot name=\"multi-clear-icon\">\n                                    <ClearIcon />\n                                </slot>\n                            </div>\n                        {/if}\n                    </div>\n                {/each}\n            {:else}\n                <div class=\"selected-item\" class:hide-selected-item={hideSelectedItem}>\n                    <slot name=\"selection\" selection={value}>\n                        {value[label]}\n                    </slot>\n                </div>\n            {/if}\n        {/if}\n\n        <input\n            on:keydown={handleKeyDown}\n            on:blur={handleBlur}\n            on:focus={handleFocus}\n            readOnly={!searchable}\n            {..._inputAttributes}\n            bind:this={input}\n            bind:value={filterText}\n            placeholder={placeholderText}\n            style={inputStyles}\n            {disabled} />\n    </div>\n\n    <div class=\"indicators\">\n        {#if loading}\n            <div class=\"icon loading\" aria-hidden=\"true\">\n                <slot name=\"loading-icon\">\n                    <LoadingIcon />\n                </slot>\n            </div>\n        {/if}\n\n        {#if showClear}\n            <button class=\"icon clear-select\" on:pointerup|preventDefault|stopPropagation={handleClear}>\n                <slot name=\"clear-icon\">\n                    <ClearIcon />\n                </slot>\n            </button>\n        {/if}\n\n        {#if showChevron}\n            <div class=\"icon chevron\" aria-hidden=\"true\">\n                <slot name=\"chevron-icon\" {listOpen}>\n                    <ChevronIcon />\n                </slot>\n            </div>\n        {/if}\n    </div>\n\n    <slot name=\"input-hidden\" {value}>\n        <input {name} type=\"hidden\" value={value ? JSON.stringify(value) : null} />\n    </slot>\n\n    {#if required && (!value || value.length === 0)}\n        <slot name=\"required\" {value}>\n            <select class=\"required\" required tabindex=\"-1\" aria-hidden=\"true\" />\n        </slot>\n    {/if}\n</div>\n\n<style>\n    .svelte-select {\n        /* deprecating camelCase custom props in favour of kebab-case for v5 */\n        --borderRadius: var(--border-radius);\n        --clearSelectColor: var(--clear-select-color);\n        --clearSelectWidth: var(--clear-select-width);\n        --disabledBackground: var(--disabled-background);\n        --disabledBorderColor: var(--disabled-border-color);\n        --disabledColor: var(--disabled-color);\n        --disabledPlaceholderColor: var(--disabled-placeholder-color);\n        --disabledPlaceholderOpacity: var(--disabled-placeholder-opacity);\n        --errorBackground: var(--error-background);\n        --errorBorder: var(--error-border);\n        --groupItemPaddingLeft: var(--group-item-padding-left);\n        --groupTitleColor: var(--group-title-color);\n        --groupTitleFontSize: var(--group-title-font-size);\n        --groupTitleFontWeight: var(--group-title-font-weight);\n        --groupTitlePadding: var(--group-title-padding);\n        --groupTitleTextTransform: var(--group-title-text-transform);\n        --indicatorColor: var(--chevron-color);\n        --indicatorHeight: var(--chevron-height);\n        --indicatorWidth: var(--chevron-width);\n        --inputColor: var(--input-color);\n        --inputLeft: var(--input-left);\n        --inputLetterSpacing: var(--input-letter-spacing);\n        --inputMargin: var(--input-margin);\n        --inputPadding: var(--input-padding);\n        --itemActiveBackground: var(--item-active-background);\n        --itemColor: var(--item-color);\n        --itemFirstBorderRadius: var(--item-first-border-radius);\n        --itemHoverBG: var(--item-hover-bg);\n        --itemHoverColor: var(--item-hover-color);\n        --itemIsActiveBG: var(--item-is-active-bg);\n        --itemIsActiveColor: var(--item-is-active-color);\n        --itemIsNotSelectableColor: var(--item-is-not-selectable-color);\n        --itemPadding: var(--item-padding);\n        --listBackground: var(--list-background);\n        --listBorder: var(--list-border);\n        --listBorderRadius: var(--list-border-radius);\n        --listEmptyColor: var(--list-empty-color);\n        --listEmptyPadding: var(--list-empty-padding);\n        --listEmptyTextAlign: var(--list-empty-text-align);\n        --listMaxHeight: var(--list-max-height);\n        --listPosition: var(--list-position);\n        --listShadow: var(--list-shadow);\n        --listZIndex: var(--list-z-index);\n        --multiItemBG: var(--multi-item-bg);\n        --multiItemBorderRadius: var(--multi-item-border-radius);\n        --multiItemDisabledHoverBg: var(--multi-item-disabled-hover-bg);\n        --multiItemDisabledHoverColor: var(--multi-item-disabled-hover-color);\n        --multiItemHeight: var(--multi-item-height);\n        --multiItemMargin: var(--multi-item-margin);\n        --multiItemPadding: var(--multi-item-padding);\n        --multiSelectInputMargin: var(--multi-select-input-margin);\n        --multiSelectInputPadding: var(--multi-select-input-padding);\n        --multiSelectPadding: var(--multi-select-padding);\n        --placeholderColor: var(--placeholder-color);\n        --placeholderOpacity: var(--placeholder-opacity);\n        --selectedItemPadding: var(--selected-item-padding);\n        --spinnerColor: var(--spinner-color);\n        --spinnerHeight: var(--spinner-height);\n        --spinnerWidth: var(--spinner-width);\n\n        --internal-padding: 0 0 0 16px;\n\n        border: var(--border, 1px solid #d8dbdf);\n        border-radius: var(--border-radius, 6px);\n        min-height: var(--height, 42px);\n        position: relative;\n        display: flex;\n        align-items: stretch;\n        padding: var(--padding, var(--internal-padding));\n        background: var(--background, #fff);\n        margin: var(--margin, 0);\n        width: var(--width, 100%);\n        font-size: var(--font-size, 16px);\n        max-height: var(--max-height);\n    }\n\n    * {\n        box-sizing: var(--box-sizing, border-box);\n    }\n\n    .svelte-select:hover {\n        border: var(--border-hover, 1px solid #b2b8bf);\n    }\n\n    .value-container {\n        display: flex;\n        flex: 1 1 0%;\n        flex-wrap: wrap;\n        align-items: center;\n        gap: 5px 10px;\n        padding: var(--value-container-padding, 5px 0);\n        position: relative;\n        overflow: var(--value-container-overflow, hidden);\n        align-self: stretch;\n    }\n\n    .prepend,\n    .indicators {\n        display: flex;\n        flex-shrink: 0;\n        align-items: center;\n    }\n\n    .indicators {\n        position: var(--indicators-position);\n        top: var(--indicators-top);\n        right: var(--indicators-right);\n        bottom: var(--indicators-bottom);\n    }\n\n    input {\n        position: absolute;\n        cursor: default;\n        border: none;\n        color: var(--input-color, var(--item-color));\n        padding: var(--input-padding, 0);\n        letter-spacing: var(--input-letter-spacing, inherit);\n        margin: var(--input-margin, 0);\n        min-width: 10px;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        background: transparent;\n        font-size: var(--font-size, 16px);\n    }\n\n    :not(.multi) > .value-container > input {\n        width: 100%;\n        height: 100%;\n    }\n\n    input::placeholder {\n        color: var(--placeholder-color, #78848f);\n        opacity: var(--placeholder-opacity, 1);\n    }\n\n    input:focus {\n        outline: none;\n    }\n\n    .svelte-select.focused {\n        border: var(--border-focused, 1px solid #006fe8);\n        border-radius: var(--border-radius-focused, var(--border-radius, 6px));\n    }\n\n    .disabled {\n        background: var(--disabled-background, #ebedef);\n        border-color: var(--disabled-border-color, #ebedef);\n        color: var(--disabled-color, #c1c6cc);\n    }\n\n    .disabled input::placeholder {\n        color: var(--disabled-placeholder-color, #c1c6cc);\n        opacity: var(--disabled-placeholder-opacity, 1);\n    }\n\n    .selected-item {\n        position: relative;\n        overflow: var(--selected-item-overflow, hidden);\n        padding: var(--selected-item-padding, 0 20px 0 0);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        color: var(--selected-item-color, inherit);\n        font-size: var(--font-size, 16px);\n    }\n\n    .multi .selected-item {\n        position: absolute;\n        line-height: var(--height, 42px);\n        height: var(--height, 42px);\n    }\n\n    .selected-item:focus {\n        outline: none;\n    }\n\n    .hide-selected-item {\n        opacity: 0;\n    }\n\n    .icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .clear-select {\n        all: unset;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: var(--clear-select-width, 40px);\n        height: var(--clear-select-height, 100%);\n        color: var(--clear-select-color, var(--icons-color));\n        margin: var(--clear-select-margin, 0);\n        pointer-events: all;\n        flex-shrink: 0;\n    }\n\n    .clear-select:focus {\n        outline: var(--clear-select-focus-outline, 1px solid #006fe8);\n    }\n\n    .loading {\n        width: var(--loading-width, 40px);\n        height: var(--loading-height);\n        color: var(--loading-color, var(--icons-color));\n        margin: var(--loading--margin, 0);\n        flex-shrink: 0;\n    }\n\n    .chevron {\n        width: var(--chevron-width, 40px);\n        height: var(--chevron-height, 40px);\n        background: var(--chevron-background, transparent);\n        pointer-events: var(--chevron-pointer-events, none);\n        color: var(--chevron-color, var(--icons-color));\n        border: var(--chevron-border, 0 0 0 1px solid #d8dbdf);\n        flex-shrink: 0;\n    }\n\n    .multi {\n        padding: var(--multi-select-padding, var(--internal-padding));\n    }\n\n    .multi input {\n        padding: var(--multi-select-input-padding, 0);\n        position: relative;\n        margin: var(--multi-select-input-margin, 5px 0);\n        flex: 1 1 40px;\n    }\n\n    .svelte-select.error {\n        border: var(--error-border, 1px solid #ff2d55);\n        background: var(--error-background, #fff);\n    }\n\n    .a11y-text {\n        z-index: 9999;\n        border: 0px;\n        clip: rect(1px, 1px, 1px, 1px);\n        height: 1px;\n        width: 1px;\n        position: absolute;\n        overflow: hidden;\n        padding: 0px;\n        white-space: nowrap;\n    }\n\n    .multi-item {\n        background: var(--multi-item-bg, #ebedef);\n        margin: var(--multi-item-margin, 0);\n        outline: var(--multi-item-outline, 1px solid #ddd);\n        border-radius: var(--multi-item-border-radius, 4px);\n        height: var(--multi-item-height, 25px);\n        line-height: var(--multi-item-height, 25px);\n        display: flex;\n        cursor: default;\n        padding: var(--multi-item-padding, 0 5px);\n        overflow: hidden;\n        gap: var(--multi-item-gap, 4px);\n        outline-offset: -1px;\n        max-width: var(--multi-max-width, none);\n        color: var(--multi-item-color, var(--item-color));\n    }\n\n    .multi-item.disabled:hover {\n        background: var(--multi-item-disabled-hover-bg, #ebedef);\n        color: var(--multi-item-disabled-hover-color, #c1c6cc);\n    }\n\n    .multi-item-text {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n\n    .multi-item-clear {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        --clear-icon-color: var(--multi-item-clear-icon-color, #000);\n    }\n\n    .multi-item.active {\n        outline: var(--multi-item-active-outline, 1px solid #006fe8);\n    }\n\n    .svelte-select-list {\n        box-shadow: var(--list-shadow, 0 2px 3px 0 rgba(44, 62, 80, 0.24));\n        border-radius: var(--list-border-radius, 4px);\n        max-height: var(--list-max-height, 252px);\n        overflow-y: auto;\n        background: var(--list-background, #fff);\n        position: var(--list-position, absolute);\n        z-index: var(--list-z-index, 2);\n        border: var(--list-border);\n    }\n\n    .prefloat {\n        opacity: 0;\n        pointer-events: none;\n    }\n\n    .list-group-title {\n        color: var(--group-title-color, #8f8f8f);\n        cursor: default;\n        font-size: var(--group-title-font-size, 16px);\n        font-weight: var(--group-title-font-weight, 600);\n        height: var(--height, 42px);\n        line-height: var(--height, 42px);\n        padding: var(--group-title-padding, 0 20px);\n        text-overflow: ellipsis;\n        overflow-x: hidden;\n        white-space: nowrap;\n        text-transform: var(--group-title-text-transform, uppercase);\n    }\n\n    .empty {\n        text-align: var(--list-empty-text-align, center);\n        padding: var(--list-empty-padding, 20px 0);\n        color: var(--list-empty-color, #78848f);\n    }\n\n    .item {\n        cursor: default;\n        height: var(--item-height, var(--height, 42px));\n        line-height: var(--item-line-height, var(--height, 42px));\n        padding: var(--item-padding, 0 20px);\n        color: var(--item-color, inherit);\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n        transition: var(--item-transition, all 0.2s);\n        align-items: center;\n        width: 100%;\n    }\n\n    .item.group-item {\n        padding-left: var(--group-item-padding-left, 40px);\n    }\n\n    .item:active {\n        background: var(--item-active-background, #b9daff);\n    }\n\n    .item.active {\n        background: var(--item-is-active-bg, #007aff);\n        color: var(--item-is-active-color, #fff);\n    }\n\n    .item.first {\n        border-radius: var(--item-first-border-radius, 4px 4px 0 0);\n    }\n\n    .item.hover:not(.active) {\n        background: var(--item-hover-bg, #e7f2ff);\n        color: var(--item-hover-color, inherit);\n    }\n\n    .item.not-selectable,\n    .item.hover.item.not-selectable,\n    .item.active.item.not-selectable,\n    .item.not-selectable:active {\n        color: var(--item-is-not-selectable-color, #999);\n        background: transparent;\n    }\n\n    .required {\n        opacity: 0;\n        z-index: -1;\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n    }\n\n</style>\n",
    "<script lang=\"ts\">/*\nThis Svelte component is used to create a Cytoscape graph.\nIt will listen to the graphStore and populate the graph with\nnodes and edges, as well as allow for selection of nodes and edges.\nIt also includes a slot for additional components to be rendered\nwithin the graph.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount, setContext } from \"svelte\";\nimport cytoscape from \"cytoscape\";\nimport dagre from \"cytoscape-dagre\";\nimport GraphStyles from \"./GraphStyles.js\";\n// import { Node, Edge, Graph } from '../system_types/graph';\nimport { graphStore } from \"../stores/graphStore\";\nimport { edges, nodes, resetLastAction, selectNode, selectEdge, } from \"../helper_functions/graph\";\n// Set context to graphSharedState, which can be accessed from other components\nsetContext(\"graphSharedState\", {\n    getCyInstance: () => cyInstance,\n});\n// Initialize refElement as null and cyInstance as null\nlet refElement = null;\nlet cyInstance = null;\n// Listen to graphStore and add nodes and edges to the graph\ngraphStore.subscribe((value) => {\n    // console.log(\"graphStore\", value);\n    if (cyInstance && value.lastAction === \"addNode\" && value.actedOn != null) {\n        cyInstance.add({\n            group: \"nodes\",\n            data: Object.assign({}, value.actedOn),\n        });\n        resetLastAction();\n    }\n    else if (cyInstance &&\n        value.lastAction === \"addEdge\" &&\n        value.actedOn != null) {\n        cyInstance.add({\n            group: \"edges\",\n            data: Object.assign({}, value.actedOn),\n        });\n        resetLastAction();\n    }\n    else if (cyInstance &&\n        value.lastAction === \"updateNode\" &&\n        value.actedOn != null) {\n        cyInstance.$(\"#\" + value.actedOn.id).css({\n            label: value.actedOn.label,\n        });\n        cyInstance.$(\"#\" + value.actedOn.id).data(value.actedOn.data);\n    }\n    else if (cyInstance &&\n        value.lastAction === \"updateEdge\" &&\n        value.actedOn != null) {\n        cyInstance.$(\"#\" + value.actedOn.id).css({\n            label: value.actedOn.label,\n        });\n        cyInstance.$(\"#\" + value.actedOn.id).data(value.actedOn.data);\n    }\n    else if (cyInstance &&\n        value.lastAction === \"removeEdge\" &&\n        value.actedOn != null) {\n        cyInstance.$(\"#\" + value.actedOn.id).remove();\n        resetLastAction();\n    }\n    else if (cyInstance &&\n        value.lastAction === \"removeNode\" &&\n        value.actedOn != null) {\n        cyInstance.$(\"#\" + value.actedOn.id).remove();\n        resetLastAction();\n    }\n    else if (cyInstance &&\n        value.lastAction === \"resetGraph\") {\n        cyInstance.elements().remove();\n        resetLastAction();\n    }\n});\n// Get nodes and edges from the graphStore on component mount\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    nodes().then((nodes) => {\n        nodes.forEach((node) => {\n            cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.add({\n                group: \"nodes\",\n                data: Object.assign({}, node),\n            });\n        });\n    });\n    edges().then((edges) => {\n        edges.forEach((edge) => {\n            cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.add({\n                group: \"edges\",\n                data: Object.assign({}, edge),\n            });\n        });\n    });\n    // Use the dagre plugin to layout the graph\n    cytoscape.use(dagre);\n    // Instantiate the cytoscape instance and set the styles\n    cyInstance = cytoscape({\n        container: refElement,\n        style: GraphStyles,\n    });\n    // Layout the graph when a node or edge is added\n    cyInstance.on(\"add\", () => {\n        if (cyInstance) {\n            cyInstance\n                .layout({\n                name: \"dagre\",\n            })\n                .run();\n        }\n    });\n    // Listen for node selection and call selectNode\n    cyInstance.on(\"select\", \"node\", (evt) => {\n        const selectedNode = evt.target.data();\n        selectNode(selectedNode.id);\n    });\n    // Listen for edge selection and call selectEdge\n    cyInstance.on(\"select\", \"edge\", (event) => {\n        selectEdge(event.target.data().source, event.target.data().target);\n    });\n}));\n</script>\n\n<div class=\"graph\" bind:this={refElement}>\n  {#if cyInstance}\n    <slot />\n  {/if}\n</div>\n\n<style>\n  .graph {\n    left: 300px;\n    height: 100%;\n    width: 100%;\n    right: 300px;\n  }\n\n</style>\n",
    "<script>\n      let isExpanded = true;\n\n      function toggleSidebar(event) {\n        if (event.type === \"click\" || [\"Enter\", \" \"].includes(event.key)) {\n          isExpanded = !isExpanded;\n        }\n      }\n  </script>\n  \n  <style>\n    .sidebar {\n      position: fixed;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: 300px;\n      background-color: lightgray;\n      transition: width 0.3s;\n    }\n    \n    .sidebar.collapsed {\n      width: 30px;\n    }\n    \n    .expandTab {\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 30px;\n  height: 100%;\n  background-color: gray;\n  cursor: pointer;\n  text-align: center;\n  writing-mode: vertical-lr;  /* This will change the text orientation to vertical */\n  transform: rotate(180deg);  /* This will flip the text so it's readable top-to-bottom */\n}\n\n    .content {\n        position: absolute;\n        top: 0;\n        left: 30px;\n    }\n  \n</style>\n  \n  <div class={isExpanded ? \"sidebar\" : \"sidebar collapsed\"}>\n    {#if isExpanded}\n      <button class=\"expandTab\" on:click={toggleSidebar} on:keydown={toggleSidebar}>Shrink</button>\n      <div class=\"content\">\n      <p>Some content...</p>\n      </div>\n      {:else}\n      <button class=\"expandTab\" on:click={toggleSidebar} on:keydown={toggleSidebar}>Expand</button>\n    {/if}\n  </div>\n",
    "<script>\n  import AddNodeButton from \"./sidebarComponents/AddNodeButton.svelte\";\n  // import ModifyNodesOrEdges from \"./sidebarComponents/ModifyNodesOrEdges.svelte\";\n  // import DeleteEdge from \"./sidebarComponents/DeleteEdge.svelte\";\n  import SetOpenaiKey from \"./sidebarComponents/SetOpenaiKey.svelte\";\n  // import SendPrompt from \"./sidebarComponents/SendPrompt.svelte\";\n  import InteractWithActionsAndProcesses from \"./sidebarComponents/InteractWithActionsAndProcesses.svelte\";\n  import CreateProcess from \"./sidebarComponents/CreateProcess.svelte\";\n\n  import { blur, fade } from \"svelte/transition\";\n\n  let sections = [\n    { header: \"Set API Key\", component: SetOpenaiKey, open: true},\n    // { header: \"Send Prompt\", component: SendPrompt, open: false},\n    { header : \"Edit Actions and Processes\", component: InteractWithActionsAndProcesses, open: false},\n    // {header: \"Edit Action or Process\", component: JsonEditor, open: false},\n    { header: \"Create Action\", component: AddNodeButton, open: false },\n    { header: \"Create Process\" , component: CreateProcess, open: false}\n    // {\n    //   header: \"Modify Nodes or Edges\",\n    //   component: ModifyNodesOrEdges,\n    //   open: false,\n    // },\n    // { header: \"Delete Edge\", component: DeleteEdge, open: false },\n    // { header: \"View Available Actions\"}\n  ];\n\n  function toggleSection(clickedSection) {\n    sections = sections.map(section => {\n      return {...section, open: section === clickedSection};\n    });\n  }\n</script>\n\n<div class=\"sidebar\">\n  {#each sections as section (section.header)}\n    <div class=\"section\">\n      <div\n        class=\"section-header\"\n        on:keydown={(event) => {\n          if (event.key === \"Enter\") {\n            toggleSection(section);\n          }\n        }}\n        on:click={() => toggleSection(section)}\n        \n      >\n        {section.header}\n      </div>\n      {#if section.open}\n        <div class=\"section-content\" \n             in:fade={{duration: 700}} \n             out:blur={{duration: 700, amount: 5}}>\n          <svelte:component this={section.component} />\n        </div>\n      {/if}\n    </div>\n  {/each}\n</div>\n\n<style>\n  /* styles for the sidebar */\n  .sidebar {\n    box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.541);\n    position: fixed; /* Make the sidebar fixed so it doesn't move with the rest of the content */\n    top: 0; /* Align the top of the sidebar with the top of the screen */\n    left: 0; /* Align the left side of the sidebar with the left side of the screen */\n    bottom: 0; /* Make the sidebar as tall as the screen */\n    width: 300px;\n    background-color: #f3f3f3; /* Add a background color */\n    overflow-y: auto; /* Add scrollbar if the content is too tall */\n  }\n\n  /* styles for the sections */\n  .section {\n    margin-bottom: 10px;\n  }\n\n  /* styles for the section headers */\n  .section-header {\n    cursor: pointer;\n    padding: 10px;\n    background-color: #e0e0e0;\n  }\n\n  /* styles for the section content */\n  .section-content {\n    padding: 10px;\n    background-color: #fff;\n  }\n\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport websocketStore from \"stores/websocketStore\";\nlet action = {\n    _id: \"\",\n    prompt: \"\",\n    name: \"\",\n    system: \"\"\n};\nfunction localAddNode() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // The id should come from the mongod database after the creation of the action\n        // create the action in the database by sending a message to the backend\n        $websocketStore.send(JSON.stringify({ create_action: action }));\n    });\n}\n</script>\n\n<style>\n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 1em;\n  }\n\n</style>\n\n<form on:submit|preventDefault={localAddNode}>\n  <label for=\"prompt\">Prompt</label>\n  <input id=\"prompt\" bind:value={action.prompt} type=\"text\" required>\n\n  <label for=\"name\">Name</label>\n  <input id=\"name\" bind:value={action.name} type=\"text\" required>\n\n  <label for=\"system\">System</label>\n  <input id=\"system\" bind:value={action.system} type=\"text\" required>\n\n  <button type=\"submit\">Submit</button>\n</form>",
    "<script lang=\"ts\">import systemStateStore from \"stores/systemStateStore\";\nimport { aiSystemStore } from \"stores/aiSystemStore\";\nimport websocketStore from \"stores/websocketStore\";\nimport \"system_types\";\nimport Select from \"svelte-select\";\nimport { isProcess, isAction } from \"helper_functions/type_checker\";\nlet mainObject;\nlet options = [];\n$: {\n    mainObject = $systemStateStore.selectedAction || $systemStateStore.selectedProcess;\n    console.log(\"mainObject: \", mainObject);\n    if (isProcess(mainObject)) {\n        options = mainObject.steps.map(step => ({ value: step, label: step }));\n    }\n}\nfunction save() {\n    if (isAction(mainObject)) {\n        let updateAction = {\n            action: mainObject\n        };\n        console.log(\"sending: \" + JSON.stringify(updateAction));\n        $websocketStore.send(JSON.stringify(updateAction));\n    }\n}\nfunction handleStepsChange(selected, index) {\n    if (isProcess(mainObject)) {\n        mainObject.steps[index] = selected.value;\n        options[index] = { value: selected.value, label: selected.value };\n        mainObject = Object.assign({}, mainObject); // trigger reactivity\n    }\n}\n</script>\n\n<style>\ntextarea {\n  resize: vertical;\n  width: 100%;\n  height: 100%;\n}\n\n</style>\n\n<div class=\"json-editor\">\n  {#if mainObject !== null && Object.keys(mainObject).length > 0}\n    {#each Object.entries(mainObject) as [key, value], index (index)}\n      <div class=\"object-field\">\n        \n        <label for=\"input-{index}\">{key}:</label>\n        {#if key === \"steps\" && Array.isArray(value) && isProcess(mainObject)}\n        {#each value as _step, index (index)}\n        <Select id=\"steps_{index}\"\n        value={options[index]}\n        items={$aiSystemStore.actions.map(action => ({value: action.name, label: action.name}))}\n        on:change={(event) => handleStepsChange(event.detail, index)}\n        placeholder=\"Select step...\"\n        />\n        {/each}\n        \n        {:else if typeof value === \"boolean\" && (isAction(mainObject) || isProcess(mainObject))}\n          <input id=\"input-{index}\" type=\"checkbox\" bind:checked={mainObject[key]} />\n        {:else if typeof value === \"number\" && (isAction(mainObject) || isProcess(mainObject))}\n          <input id=\"input-{index}\" type=\"number\" bind:value={mainObject[key]} />\n        {:else if (isAction(mainObject) || isProcess(mainObject))}\n          <textarea id=\"input-{index}\" rows=\"1\" bind:value={mainObject[key]} />\n        {/if}\n      </div>\n    {/each}\n    <button on:click={save}>Save</button>\n  {/if}\n</div>\n",
    "<script lang=\"ts\">import websocketStore from \"../../stores/websocketStore\";\nlet apiKey = localStorage.getItem(\"apiKey\") || \"Api Key\";\nfunction set_api_key() {\n    localStorage.setItem(\"apiKey\", apiKey);\n    $websocketStore.send(JSON.stringify({ key: apiKey }));\n    console.log(\"Set api key to: \" + apiKey);\n}\n</script>\n  \n  <div id=\"cy\" />\n  <input type=\"text\" bind:value={apiKey} placeholder=\"Enter the openai api key here.\" />\n  <button on:click={set_api_key}>Set Key</button>\n  \n  <style>\n    input {\n      width: 100%;\n      height: 100%;\n      box-sizing: border-box;\n      white-space: pre-wrap;\n    }\n  \n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}