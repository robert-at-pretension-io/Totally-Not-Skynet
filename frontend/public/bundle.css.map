{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "AuthPage.svelte",
    "Loading.svelte",
    "PromptComponent.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import {\n    AuthenticationMessage,\n    CrudBundle,\n    VerbTypeNames,\n  } from \"../generated/system_types_pb\";\n  import { sendWebsocketMessage } from \"helper_functions/websocket\";\n  import systemStateStore from \"stores/systemStateStore\";\n  import { websocketStore } from \"stores/websocketStore\";\n\n  let username = \"\";\n  let password = \"\";\n\n  async function handleSubmit() {\n    console.log(\"Username:\", username);\n    console.log(\"Password:\", password);\n    $systemStateStore = $systemStateStore.setAuthenticated(true);\n    let websocket = $websocketStore.websocket;\n\n    let crud_bundle = new CrudBundle();\n\n    let authentication_message = new AuthenticationMessage();\n\n    // authentication_message.sest\n\n    let verb = VerbTypeNames.POST;\n\n    crud_bundle.setVerb(verb);\n    crud_bundle.setAuthenticationMessage(authentication_message);\n\n    await sendWebsocketMessage(crud_bundle, websocket);\n  }\n\n  // Send POST with authentication Message\n</script>\n\n<div class=\"container\">\n  <div class=\"fields\">\n    <input type=\"text\" bind:value={username} placeholder=\"Username\" />\n    <input type=\"password\" bind:value={password} placeholder=\"Password\" />\n    <button class=\"submit-button\" on:click={handleSubmit}>Submit</button>\n  </div>\n</div>\n\n<style>\n  .container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n  }\n  .fields {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n  .submit-button {\n    background-color: green;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n    font-size: 16px;\n    transition: 0.3s;\n  }\n  .submit-button:hover {\n    background-color: darkgreen;\n  }\n</style>\n",
    "<script>\n</script>\n\n<div class=\"loading-container\">\n    <span class=\"loading-text\">Loading...</span>\n</div>\n\n<!-- CSS -->\n<style>\n    .loading-container {\n        overflow: hidden;\n        white-space: nowrap;\n    }\n    .loading-text {\n        display: inline-block;\n        animation: scrollText 1s linear infinite;\n    }\n\n    @keyframes scrollText {\n        from {\n            transform: translateX(100%);\n        }\n        to {\n            transform: translateX(-100%);\n        }\n    }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { websocketStore } from \"stores/websocketStore\";\nexport let prompt;\nimport { CrudBundle, VerbTypeNames, Node, GraphNodeInfo, } from \"../../../generated/system_types_pb\";\nimport { sendWebsocketMessage } from \"helper_functions/websocket\";\nlet system_text = \"\";\nlet prompt_text = \"\";\nlet description = \"\";\nlet name = \"\";\nfunction submitPrompt() {\n    return __awaiter(this, void 0, void 0, function* () {\n        prompt.setPrompt(prompt_text);\n        prompt.setSystem(system_text);\n        // create and send crud bundle:\n        let crud_bundle = new CrudBundle();\n        let verb = VerbTypeNames.POST;\n        let node = new Node();\n        node.setPrompt(prompt);\n        let node_info = new GraphNodeInfo();\n        node_info.setName(name);\n        node.setDescription(description);\n        node.setNodeInfo(node_info);\n        crud_bundle.setNode(node);\n        crud_bundle.setVerb(verb);\n        let websocket = $websocketStore.websocket;\n        yield sendWebsocketMessage(crud_bundle, websocket);\n        reset_component();\n    });\n}\nfunction reset_component() {\n    system_text = \"\";\n    prompt_text = \"\";\n    description = \"\";\n    name = \"\";\n}\n</script>\n\n<form on:submit|preventDefault={submitPrompt}>\n  <div>\n    <div>\n      <input bind:value={name} placeholder=\"Name\" />\n\n      <input bind:value={description} placeholder=\"Description\" />\n      <!--   \n      <div>\n        <h4>Input Variables</h4>\n        {#each inputVariablesList as _inputVar, index}\n          <input\n            bind:value={inputVariablesList[index]}\n            placeholder={`Input variable ${index + 1}`}\n          />\n          <button on:click={() => inputVariablesList.splice(index, 1)}>x</button>\n        {/each}\n        <button on:click={() => inputVariablesList.push(\"\")}\n          >Add Input Variable</button\n        >\n      </div>\n  \n      <div>\n        <h4>Output Variables</h4>\n        {#each outputVariablesList as _outputVar, index}\n          <input\n            bind:value={outputVariablesList[index]}\n            placeholder={`Output variable ${index + 1}`}\n          />\n          <button on:click={() => outputVariablesList.splice(index, 1)}>x</button>\n        {/each}\n        <button on:click={() => outputVariablesList.push(\"\")}\n          >Add Output Variable</button\n        >\n      </div> -->\n\n      <label for=\"prompt\" class=\"required-label\">Prompt</label>\n      <input\n        id=\"prompt\"\n        bind:value={prompt_text}\n        type=\"text\"\n        required\n        class=\"required-input\"\n      />\n\n      <label for=\"system\" class=\"required-label\">System</label>\n      <input\n        id=\"system\"\n        bind:value={system_text}\n        type=\"text\"\n        required\n        class=\"required-input\"\n      />\n      <button type=\"submit\">Submit</button>\n    </div>\n  </div>\n</form>\n\n<style>\n  .required-input:invalid {\n    border: 2px solid red;\n  }\n\n  .required-label::after {\n    content: \" *\";\n    color: red;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA6CE,wBAAW,CACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,KACV,CACA,qBAAQ,CACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,GAAG,CAAE,IACP,CACA,4BAAe,CACb,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IACd,CACA,4BAAc,MAAO,CACnB,gBAAgB,CAAE,SACpB;AC3DE,iCAAmB,CACf,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MACjB,CACA,4BAAc,CACV,OAAO,CAAE,YAAY,CACrB,SAAS,CAAE,yBAAU,CAAC,EAAE,CAAC,MAAM,CAAC,QACpC,CAEA,WAAW,yBAAW,CAClB,IAAK,CACD,SAAS,CAAE,WAAW,IAAI,CAC9B,CACA,EAAG,CACC,SAAS,CAAE,WAAW,KAAK,CAC/B,CACJ;AC8EF,6BAAe,QAAS,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,GACpB,CAEA,6BAAe,OAAQ,CACrB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,GACT"
}