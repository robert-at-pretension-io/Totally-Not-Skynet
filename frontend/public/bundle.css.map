{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "AuthPage.svelte",
    "GraphComponent_graphlib.svelte",
    "Loading.svelte",
    "Sidebar.svelte",
    "ProcessComponent.svelte",
    "PromptComponent.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import Sidebar from \"./components/Sidebar.svelte\";\nimport GraphComponentGraphlib from \"./components/GraphComponent_graphlib.svelte\";\nimport { setupWebsocketConnection } from \"helper_functions/websocket\";\nimport { onMount } from \"svelte\";\nimport systemStateStore from \"stores/systemStateStore\";\nimport { websocketStore } from \"stores/websocketStore\";\nimport AuthPage from \"./components/AuthPage.svelte\";\nimport \"./generated/system_types\";\nimport Loading from \"./components/Loading.svelte\";\nimport { initializeSystemState } from \"helper_functions/misc\";\n// import { initializeSystemState } from \"helper_functions/misc\";\nconsole.log(\"Script started\");\n// let authenticated = true;\nlet websocket;\nlet system_state;\nlet websocket_ready = false;\nlet authenticated;\nonMount(() => {\n    console.log(\"onMount triggered\");\n    $systemStateStore = initializeSystemState($systemStateStore);\n    system_state = $systemStateStore;\n    console.log(\"Initial system_state:\", system_state);\n    // let intialized_system = initializeSystemState(system_state);\n    // console.log(\"Initialized system:\", intialized_system);\n    // systemStateStore.set(intialized_system);\n    alert(\"onMount triggered... auth: \" + system_state.authenticated);\n    // authenticated = true;\n    if (!websocket_ready) {\n        console.log(\"Websocket not ready. Initializing...\");\n        websocket = setupWebsocketConnection();\n        console.log(\"Websocket initialized:\", websocket);\n        websocketStore.set({ websocket });\n        websocket_ready = true;\n        $systemStateStore = system_state;\n    }\n});\n$: {\n    console.log(\"auth state\", $systemStateStore.authenticated);\n    authenticated = $systemStateStore.authenticated;\n}\n</script>\n\n{#if !authenticated}\n  {#if websocket_ready}\n    <AuthPage />\n  {:else}\n    <Loading />\n  {/if}\n{/if}\n\n{#if authenticated}\n  <div class=\"app-container\">\n    <Sidebar />\n    <GraphComponentGraphlib />\n  </div>\n{/if}\n\n<style>\n  .app-container {\n    display: grid;\n    grid-template-columns: 25vw 1fr;\n  }\n</style>\n",
    "<script>\n  import { websocketStore } from \"stores/websocketStore\";\n  import { authenticate } from \"helper_functions/authentication\";\n\n  let username = \"\";\n  let password = \"\";\n\n  function handleSubmit() {\n    console.log(\"Username:\", username);\n    console.log(\"Password:\", password);\n\n    // set authentication to true\n\n    let websocket = $websocketStore.websocket;\n    authenticate(websocket, \"\", \"\");\n  }\n\n  // Send POST with authentication Message\n</script>\n\n<div class=\"container\">\n  <div class=\"fields\">\n    <input type=\"text\" bind:value={username} placeholder=\"Username\" />\n    <input type=\"password\" bind:value={password} placeholder=\"Password\" />\n    <button class=\"submit-button\" on:click={handleSubmit}>Submit</button>\n  </div>\n</div>\n\n<style>\n  .container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n  }\n  .fields {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n  .submit-button {\n    background-color: green;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n    font-size: 16px;\n    transition: 0.3s;\n  }\n  .submit-button:hover {\n    background-color: darkgreen;\n  }\n</style>\n",
    "<script lang=\"ts\">import { onMount, setContext } from \"svelte\";\nimport cytoscape from \"cytoscape\";\nimport systemStateStore from \"stores/systemStateStore.js\";\nimport * as helper_functions from \"../helper_functions/graph\";\nimport * as proto from \"../generated/system_types\";\nimport dagre from \"cytoscape-dagre\";\n// import { generateDynamicStyles } from \"../helper_functions/graph\";\nlet current_graph = new proto.Graph();\nonMount(() => {\n    console.log(\"Graph Component Mounted\");\n    cytoscape.use(dagre);\n    if ($systemStateStore.graph != undefined) {\n        current_graph = $systemStateStore.graph;\n    }\n    else {\n        current_graph = new proto.Graph();\n    }\n    // const dynamicStyles = generateDynamicStyles(); // Generate the dynamic styles\n    cyInstance = cytoscape({\n        container: refElement,\n        style: [\n            {\n                selector: \"node\",\n                style: {\n                    width: \"label\",\n                    height: \"label\",\n                    \"font-size\": \"14px\",\n                    \"font-weight\": \"bold\",\n                    content: \"data(label)\",\n                    \"text-valign\": \"center\",\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": \"100px\",\n                    \"background-color\": \"#fff\",\n                    \"border-color\": \"#000\",\n                    \"border-width\": \"1px\",\n                    \"border-style\": \"solid\",\n                },\n            },\n            {\n                selector: \"edge\",\n                style: {\n                    \"curve-style\": \"bezier\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"line-color\": \"#000\",\n                    \"target-arrow-color\": \"#000\",\n                    width: \"2px\",\n                },\n            },\n            // ...dynamicStyles,\n        ],\n    });\n    cyInstance.on(\"select\", \"node\", (evt) => {\n        console.log(\"event: \", evt);\n        const selectedNode = evt.target.data();\n        console.log(\"selectedNode: \", selectedNode);\n        $systemStateStore.local_nodes.find((node) => {\n            if (node.node_info.id == selectedNode.id) {\n                $systemStateStore.selected_nodes.push(node.node_info);\n            }\n        });\n    });\n    cyInstance.on(\"select\", \"edge\", (evt) => {\n        console.log(\"event: \", evt);\n        let edge = new proto.Edge();\n        let source = new proto.GraphNodeInfo();\n        let target = new proto.GraphNodeInfo();\n        source.id = evt.target.data().source;\n        target.id = evt.target.data().target;\n        edge.source = source;\n        edge.target = target;\n        console.log(\"selectedEdge: \", evt.target.data());\n        $systemStateStore = helper_functions.selectEdge(edge, $systemStateStore);\n    });\n    cyInstance.on(\"unselect\", \"node\", function (evt) {\n        const node = evt.target;\n        console.log(\"deselected \" + node.id());\n        let selected_list = $systemStateStore.selected_nodes;\n        // remove the node the graphNodeInfo from the selected_list where the id is the same as the node.id()\n        selected_list = selected_list.filter((graphNodeInfo) => {\n            return graphNodeInfo.id == node.id();\n        });\n        $systemStateStore.selected_nodes = selected_list;\n    });\n    // Listen to unselect event on any edge\n    cyInstance.on(\"unselect\", \"edge\", function (evt) {\n        const edge = evt.target;\n        console.log(\"deselected \" + edge.data().source + \" -> \" + edge.data().target);\n    });\n});\n$: {\n    // Whenever the systemState.graph changes, we will change the cytoscape graph. It might be good to check if the graph has actually changed rather than always re-draw\n    // let test_graph =\n    // $systemStateStore.selected_process.node_content.process.graph;\n    // // check that the test_graph is different from the current_graph\n    // if (test_graph != current_graph && test_graph != undefined) {\n    //   current_graph = test_graph;\n    // clear the cytoscape graph\n    cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.elements().remove();\n    // add the nodes to the cytoscape graph\n    let nodes = current_graph.nodes_info;\n    nodes.forEach((node_info) => {\n        if (node_info) {\n            cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.add({\n                data: {\n                    id: node_info.id,\n                    label: node_info.name,\n                },\n            });\n        }\n    });\n    // add the edges to the cytoscape graph\n    let edges = current_graph.edges;\n    edges.forEach((edge) => {\n        let source = edge.source;\n        let target = edge.target;\n        if (source && target) {\n            cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.add({\n                data: {\n                    source: source.id,\n                    target: target.id,\n                },\n            });\n        }\n    });\n    // cyInstance?.fit();\n    cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.layout({\n        name: \"dagre\",\n        fit: true,\n    }).run();\n}\nsetContext(\"graphSharedState\", {\n    getCyInstance: () => cyInstance,\n});\nlet refElement = null;\nlet cyInstance = null;\n</script>\n\n<div class=\"graph\" bind:this={refElement}>\n  {#if cyInstance}\n    <slot />\n  {/if}\n</div>\n\n<style>\n  .graph {\n    grid-column: 2;\n    height: 100%;\n  }\n</style>\n",
    "<script>\n</script>\n\n<div class=\"loading-container\">\n    <span class=\"loading-text\">Loading...</span>\n</div>\n\n<!-- CSS -->\n<style>\n    .loading-container {\n        overflow: hidden;\n        white-space: nowrap;\n    }\n    .loading-text {\n        display: inline-block;\n        animation: scrollText 1s linear infinite;\n    }\n\n    @keyframes scrollText {\n        from {\n            transform: translateX(100%);\n        }\n        to {\n            transform: translateX(-100%);\n        }\n    }\n</style>\n",
    "<script>\n  import modifyNode from \"./sidebarComponents/modifyNode.svelte\";\n  import NewNode from \"./sidebarComponents/newNode.svelte\";\n\n  import { blur, fade } from \"svelte/transition\";\n  import { onMount } from \"svelte\";\n  import ExecuteNode from \"./sidebarComponents/executeNode.svelte\";\n  import systemStateStore from \"stores/systemStateStore\";\n\n  onMount(() => {\n    console.log(\"Sidebar mounted\");\n  });\n\n  let sections = [\n    {\n      header: \"Create a New Node\",\n      component: NewNode,\n      open: false,\n    },\n    {\n      header: \"Modify Node\",\n      component: modifyNode,\n      open: false,\n    },\n    {\n      header: \"Execute Process\",\n      component: ExecuteNode,\n      open: false,\n    },\n  ];\n\n  function toggleSection(clickedSection) {\n    sections = sections.map((section) => {\n      if (section === clickedSection) {\n        let open = !section.open;\n        return { ...section, open }; // just invert the `open` property of the clicked section\n      } else {\n        return section; // don't modify other sections\n      }\n    });\n  }\n</script>\n\n<div class=\"sidebar\">\n  {#each sections as section (section.header)}\n    <div class=\"section\" bind:this={section.ref}>\n      <div\n        class=\"section-header\"\n        on:keydown={(event) => {\n          if (event.key === \"Enter\") {\n            toggleSection(section);\n          }\n        }}\n        on:click={() => toggleSection(section)}\n      >\n        {section.header}\n      </div>\n      {#if section.open}\n        <div\n          class=\"section-content\"\n          in:fade={{ duration: 100 }}\n          out:blur={{ duration: 100, amount: 5 }}\n        >\n          <svelte:component this={section.component} />\n        </div>\n      {/if}\n    </div>\n  {/each}\n</div>\n\n<style>\n  /* \n    overflow-y: auto;\n    box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.541);\n    border-radius: 12px;\n  }\n\n  .section {\n    margin-bottom: 20px;\n  }\n\n  .section-header {\n    font-size: 18px;\n    padding: 10px;\n    cursor: pointer;\n    background-color: #e9e9e9;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    transition: background-color 0.3s ease;\n  }\n\n  .section-header:hover {\n    background-color: #ddd;\n  }\n\n  .section-content {\n    margin-top: 10px;\n    padding: 15px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #fff;\n  } */\n\n  /* Sidebar */\n  .sidebar {\n    grid-column: 1;\n    position: sticky;\n    top: 0;\n    max-width: 200px;\n    height: 100vh;\n    background-color: #ecf0f1;\n    overflow-y: auto;\n    box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.1);\n    border-radius: 12px;\n    padding: 20px;\n  }\n\n  .section {\n    margin-bottom: 25px;\n  }\n\n  .section-header {\n    font-size: 18px;\n    padding: 10px;\n    cursor: pointer;\n    background-color: #bdc3c7;\n    border: 1px solid #a5a9ab;\n    border-radius: 8px;\n    transition: background-color 0.3s ease, transform 0.2s ease;\n  }\n\n  .section-header:hover {\n    background-color: #a5a9ab;\n    transform: scale(1.03);\n  }\n\n  .section-content {\n    margin-top: 15px;\n    padding: 15px;\n    border: 1px solid #a5a9ab;\n    border-radius: 8px;\n    background-color: #fff;\n  }\n</style>\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\nimport { NodeTypes, } from \"generated/system_types\";\nimport systemStateStore from \"stores/systemStateStore\";\nimport \"svelte/store\";\nimport { websocketStore } from \"stores/websocketStore\";\nimport \"helper_functions/websocket\";\nlet name = \"\";\nlet description = \"\";\nlet node_list = [];\nlet selected_node_list = [];\nlet error = \"\";\nlet key_list = Object.keys(NodeTypes).filter((key) => isNaN(Number(key)));\n// setup onmount:\nonMount(() => {\n    node_list = $systemStateStore.nodes;\n});\n$: {\n    node_list = $systemStateStore.nodes;\n}\nfunction isSelected(node) {\n    return selected_node_list.includes(node);\n}\nfunction toggleNodeSelect(node) {\n    if (isSelected(node)) {\n        selected_node_list = selected_node_list.filter((selected_node) => selected_node !== node);\n    }\n    else {\n        selected_node_list = [...selected_node_list, node];\n    }\n}\nfunction sendNodes() {\n    if (!name.trim() || !description.trim()) {\n        error = \"Both name and description are required!\";\n        return; // Return early to stop execution if validation fails\n    }\n    else {\n        error = \"\";\n    }\n    alert(\"sendNodes feature is not yet implemented!\");\n    console.log(\"sending selected_node_list: \", selected_node_list);\n    // let crud_message = new MessageBundle();\n    // crud_message.verb = VerbTypeNames.Validate;\n    // // let validate_nodes = new ValidateNodes();\n    // let graph_node_info = new GraphNodeInfo();\n    // graph_node_info.name = name;\n    // graph_node_info.description = description;\n    // validate_nodes.containing_node = graph_node_info;\n    // validate_nodes.nodes = selected_node_list;\n    // // crud_message.validate_nodes = validate_nodes;\n    // sendWebsocketMessage(crud_message, $websocketStore.websocket as WebSocket);\n    // selected_node_list = [];\n    // description = \"\";\n    // name = \"\";\n}\n</script>\n\n<p>Please set a descriptive name for your process:</p>\n<input type=\"text\" bind:value={name} />\n<p>\n  Please set a description for your process, please talk about what purpose it\n  serves:\n</p>\n<input type=\"text\" bind:value={description} />\n\n<p>\n  Click the node buttons below to add them to the graph. Then click \"Add Node(s)\n  to see them populate on the graph.\"\n</p>\n\n<ul>\n  {#each node_list as node}\n    <li>\n      <button\n        class:selected={isSelected(node)}\n        type=\"button\"\n        on:click={() => toggleNodeSelect(node)}\n        >{key_list[node.type_name]} : {node.node_info.name}</button\n      >\n    </li>\n  {/each}\n</ul>\n\n<h3>Nodes to add:</h3>\n\n{#each selected_node_list as node}\n  <li>\n    <p>{key_list[node.type_name]} : {node.node_info.name}</p>\n  </li>\n{/each}\n\n{#if error}\n  <p class=\"error\">{error}</p>\n{/if}\n\n<button class=\"add-button\" on:click={sendNodes}>Save Process</button>\n\n<style>\n  .error {\n    color: red;\n  }\n</style>\n",
    "<script lang=\"ts\">import { websocketStore } from \"stores/websocketStore\";\nimport { VerbTypes, Node, GraphNodeInfo, Contents, Body, NodeTypes, } from \"../../../generated/system_types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { sendEnvelope } from \"helper_functions/websocket\";\nlet system_text = \"\";\nlet prompt_text = \"\";\nlet description = \"\";\nlet name = \"\";\nlet input_variables = [];\nlet output_variables = [];\nlet new_input_variable = \"\";\nlet new_output_variable = \"\";\nexport let prompt;\nfunction submitPrompt() {\n    prompt.prompt = prompt_text;\n    prompt.system = system_text;\n    let node = new Node();\n    if (new_input_variable != \"\") {\n        input_variables = [...input_variables, new_input_variable];\n    }\n    if (new_output_variable != \"\") {\n        output_variables = [...output_variables, new_output_variable];\n    }\n    node.input_variables = input_variables;\n    node.output_variables = output_variables;\n    let node_info = new GraphNodeInfo();\n    node_info.name = name;\n    node_info.id = new uuidv4();\n    node_info.description = description;\n    node.node_info = node_info;\n    node.node_content.prompt = prompt;\n    node.node_type = NodeTypes.PROMPT;\n    let websocket = $websocketStore.websocket;\n    let body = new Body();\n    body.node = node;\n    let contents = new Contents();\n    contents.body = body;\n    contents.verb = VerbTypes.Create;\n    sendEnvelope(websocket);\n    reset_component();\n}\nfunction reset_component() {\n    system_text = \"\";\n    prompt_text = \"\";\n    description = \"\";\n    name = \"\";\n    input_variables = [];\n    output_variables = [];\n    new_input_variable = \"\";\n    new_output_variable = \"\";\n}\n</script>\n\n<form on:submit|preventDefault={submitPrompt}>\n  <div>\n    <div>\n      <input bind:value={name} placeholder=\"Name\" />\n\n      <input bind:value={description} placeholder=\"Description\" />\n\n      <div>\n        <h4>Input Variables</h4>\n        {#each input_variables as _inputVar, index}\n          <button\n            type=\"button\"\n            on:click={() => {\n              input_variables.splice(index, 1);\n              input_variables = input_variables;\n            }}>`Remove input var: {input_variables[index]}`</button\n          >\n        {/each}\n        <input\n          bind:value={new_input_variable}\n          placeholder=\"New Input Variable\"\n        />\n        <button\n          type=\"button\"\n          on:click={() => {\n            input_variables = [...input_variables, new_input_variable];\n            new_input_variable = \"\";\n          }}>Add</button\n        >\n      </div>\n\n      <div>\n        <h4>Output Variables</h4>\n        {#each output_variables as _outputVar, index}\n          <button\n            type=\"button\"\n            on:click={() => {\n              output_variables.splice(index, 1);\n              output_variables = output_variables;\n            }}>`Remove output Var: {output_variables[index]}`</button\n          >\n        {/each}\n        <input\n          bind:value={new_output_variable}\n          placeholder=\"New Output Variable\"\n        />\n        <button\n          type=\"button\"\n          on:click={() => {\n            output_variables = [...output_variables, new_output_variable];\n            new_output_variable = \"\";\n          }}>Add</button\n        >\n      </div>\n\n      <label for=\"prompt\" class=\"required-label\">Prompt</label>\n      <input\n        id=\"prompt\"\n        bind:value={prompt_text}\n        type=\"text\"\n        required\n        class=\"required-input\"\n      />\n\n      <label for=\"system\" class=\"required-label\">System</label>\n      <input\n        id=\"system\"\n        bind:value={system_text}\n        type=\"text\"\n        required\n        class=\"required-input\"\n      />\n      <button type=\"submit\">Submit</button>\n    </div>\n  </div>\n</form>\n\n<style>\n  .required-input:invalid {\n    border: 2px solid red;\n  }\n\n  .required-label::after {\n    content: \" *\";\n    color: red;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA0DE,4BAAe,CACb,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,GAC9B;AChCA,wBAAW,CACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,KACV,CACA,qBAAQ,CACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,GAAG,CAAE,IACP,CACA,4BAAe,CACb,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IACd,CACA,4BAAc,MAAO,CACnB,gBAAgB,CAAE,SACpB;AC4FA,qBAAO,CACL,WAAW,CAAE,CAAC,CACd,MAAM,CAAE,IACV;AC1IE,iCAAmB,CACf,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MACjB,CACA,4BAAc,CACV,OAAO,CAAE,YAAY,CACrB,SAAS,CAAE,yBAAU,CAAC,EAAE,CAAC,MAAM,CAAC,QACpC,CAEA,WAAW,yBAAW,CAClB,IAAK,CACD,SAAS,CAAE,WAAW,IAAI,CAC9B,CACA,EAAG,CACC,SAAS,CAAE,WAAW,KAAK,CAC/B,CACJ;AC+EF,sBAAS,CACP,WAAW,CAAE,CAAC,CACd,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,CAAC,CACN,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,KAAK,CACb,gBAAgB,CAAE,OAAO,CACzB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9C,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IACX,CAEA,sBAAS,CACP,aAAa,CAAE,IACjB,CAEA,6BAAgB,CACd,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,CACf,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,IACzD,CAEA,6BAAe,MAAO,CACpB,gBAAgB,CAAE,OAAO,CACzB,SAAS,CAAE,MAAM,IAAI,CACvB,CAEA,8BAAiB,CACf,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,IACpB;AC7CA,qBAAO,CACL,KAAK,CAAE,GACT;ACgCA,6BAAe,QAAS,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,GACpB,CAEA,6BAAe,OAAQ,CACrB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,GACT"
}