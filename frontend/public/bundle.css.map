{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "GraphComponent.svelte",
    "Sidebar.svelte",
    "AddNodeButton.svelte",
    "SendPrompt.svelte",
    "SetOpenaiKey.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">/*\nThis Svelte component is used to create a Cytoscape graph.\nIt will listen to the graphStore and populate the graph with\nnodes and edges, as well as allow for selection of nodes and edges.\nIt also includes a slot for additional components to be rendered\nwithin the graph.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount, setContext } from \"svelte\";\nimport cytoscape from \"cytoscape\";\nimport dagre from \"cytoscape-dagre\";\nimport GraphStyles from \"./GraphStyles.js\";\n// import { Node, Edge, Graph } from '../system_types/graph';\nimport { graphStore } from \"../stores/graphStore\";\nimport { edges, nodes, resetLastAction, selectNode, selectEdge, } from \"../helper_functions/graph\";\n// Set context to graphSharedState, which can be accessed from other components\nsetContext(\"graphSharedState\", {\n    getCyInstance: () => cyInstance,\n});\n// Initialize refElement as null and cyInstance as null\nlet refElement = null;\nlet cyInstance = null;\n// Listen to graphStore and add nodes and edges to the graph\ngraphStore.subscribe((value) => {\n    console.log(\"graphStore\", value);\n    if (cyInstance && value.lastAction === \"addNode\" && value.actedOn != null) {\n        cyInstance.add({\n            group: \"nodes\",\n            data: Object.assign({}, value.actedOn),\n        });\n        resetLastAction();\n    }\n    else if (cyInstance &&\n        value.lastAction === \"addEdge\" &&\n        value.actedOn != null) {\n        cyInstance.add({\n            group: \"edges\",\n            data: Object.assign({}, value.actedOn),\n        });\n        resetLastAction();\n    }\n    else if (cyInstance &&\n        value.lastAction === \"updateNode\" &&\n        value.actedOn != null) {\n        cyInstance.$(\"#\" + value.actedOn.id).css({\n            label: value.actedOn.label,\n        });\n        cyInstance.$(\"#\" + value.actedOn.id).data(value.actedOn.data);\n    }\n    else if (cyInstance &&\n        value.lastAction === \"updateEdge\" &&\n        value.actedOn != null) {\n        cyInstance.$(\"#\" + value.actedOn.id).css({\n            label: value.actedOn.label,\n        });\n        cyInstance.$(\"#\" + value.actedOn.id).data(value.actedOn.data);\n    }\n    else if (cyInstance &&\n        value.lastAction === \"removeEdge\" &&\n        value.actedOn != null) {\n        cyInstance.$(\"#\" + value.actedOn.id).remove();\n        resetLastAction();\n    }\n});\n// Get nodes and edges from the graphStore on component mount\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    nodes().then((nodes) => {\n        nodes.forEach((node) => {\n            cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.add({\n                group: \"nodes\",\n                data: Object.assign({}, node),\n            });\n        });\n    });\n    edges().then((edges) => {\n        edges.forEach((edge) => {\n            cyInstance === null || cyInstance === void 0 ? void 0 : cyInstance.add({\n                group: \"edges\",\n                data: Object.assign({}, edge),\n            });\n        });\n    });\n    // Use the dagre plugin to layout the graph\n    cytoscape.use(dagre);\n    // Instantiate the cytoscape instance and set the styles\n    cyInstance = cytoscape({\n        container: refElement,\n        style: GraphStyles,\n    });\n    // Layout the graph when a node or edge is added\n    cyInstance.on(\"add\", () => {\n        if (cyInstance) {\n            cyInstance\n                .layout({\n                name: \"dagre\",\n            })\n                .run();\n        }\n    });\n    // Listen for node selection and call selectNode\n    cyInstance.on(\"select\", \"node\", (evt) => {\n        const selectedNode = evt.target.data();\n        selectNode(selectedNode.id);\n    });\n    // Listen for edge selection and call selectEdge\n    cyInstance.on(\"select\", \"edge\", (event) => {\n        selectEdge(event.target.data().source, event.target.data().target);\n    });\n}));\n</script>\n\n<div class=\"graph\" bind:this={refElement}>\n  {#if cyInstance}\n    <slot />\n  {/if}\n</div>\n\n<style>\n  .graph {\n    left: 200px;\n    height: 100%;\n    width: 100%;\n  }\n\n</style>\n",
    "<script>\n  import AddNodeButton from \"./sidebarComponents/AddNodeButton.svelte\";\n  import ModifyNodesOrEdges from \"./sidebarComponents/ModifyNodesOrEdges.svelte\";\n  import DeleteEdge from \"./sidebarComponents/DeleteEdge.svelte\";\n  import SetOpenaiKey from \"./sidebarComponents/SetOpenaiKey.svelte\";\n  import SendPrompt from \"./sidebarComponents/SendPrompt.svelte\";\n\n  let sections = [\n    { header: \"Set API Key\", component: SetOpenaiKey, open: true},\n    { header: \"Send Prompt\", component: SendPrompt, open: true},\n    { header: \"Add Node\", component: AddNodeButton, open: false },\n    {\n      header: \"Modify Nodes or Edges\",\n      component: ModifyNodesOrEdges,\n      open: false,\n    },\n    { header: \"Delete Edge\", component: DeleteEdge, open: false },\n    { header: \"View Available Actions\"}\n  ];\n</script>\n\n<div class=\"sidebar\">\n  {#each sections as section}\n    <div class=\"section\">\n      <div\n        class=\"section-header\"\n        on:keydown={(event) => {\n          if (event.key === \"Enter\") {\n            section.open = !section.open;\n          }\n        }}\n        on:click={() => (section.open = !section.open)}\n      >\n        {section.header}\n      </div>\n      {#if section.open}\n        <div class=\"section-content\">\n          <svelte:component this={section.component} />\n        </div>\n      {/if}\n    </div>\n  {/each}\n</div>\n\n<style>\n  /* styles for the sidebar */\n  .sidebar {\n    box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.541);\n    position: fixed; /* Make the sidebar fixed so it doesn't move with the rest of the content */\n    top: 0; /* Align the top of the sidebar with the top of the screen */\n    left: 0; /* Align the left side of the sidebar with the left side of the screen */\n    bottom: 0; /* Make the sidebar as tall as the screen */\n    width: 300px;\n    background-color: #f3f3f3; /* Add a background color */\n    overflow-y: auto; /* Add scrollbar if the content is too tall */\n  }\n\n  /* styles for the sections */\n  .section {\n    margin-bottom: 10px;\n  }\n\n  /* styles for the section headers */\n  .section-header {\n    cursor: pointer;\n    padding: 10px;\n    background-color: #e0e0e0;\n  }\n\n  /* styles for the section content */\n  .section-content {\n    padding: 10px;\n    background-color: #fff;\n  }\n\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getUniqueId, addNode } from \"../../helper_functions/graph\";\nlet label = \"Node Label\";\nfunction localAddNode() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let id = yield getUniqueId();\n        let newNode = {\n            id: id,\n            label: label,\n            data: {},\n        };\n        yield addNode(newNode);\n    });\n}\n</script>\n\n<div id=\"cy\" />\n<input type=\"text\" bind:value={label} placeholder=\"Enter label for new node\" />\n<button on:click={localAddNode}>Add Node</button>\n\n<style>\n  input {\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n    white-space: pre-wrap;\n  }\n\n</style>\n",
    "<script lang=\"ts\">import websocketStore from \"../../stores/websocketStore\";\nlet prompt = \"Prompt\";\nfunction send_prompt() {\n    $websocketStore.send(JSON.stringify({ text: prompt }));\n    console.log(\"Sending prompt: \" + prompt);\n}\n</script>\n  \n  <div id=\"cy\" />\n  <input type=\"text\" bind:value={prompt} placeholder=\"Enter the openai api key here.\" />\n  <button on:click={send_prompt}>Set Key</button>\n  \n  <style>\n    input {\n      width: 100%;\n      height: 100%;\n      box-sizing: border-box;\n      white-space: pre-wrap;\n    }\n  \n</style>\n",
    "<script lang=\"ts\">import websocketStore from \"../../stores/websocketStore\";\nlet apiKey = localStorage.getItem(\"apiKey\") || \"Api Key\";\nfunction set_api_key() {\n    localStorage.setItem(\"apiKey\", apiKey);\n    $websocketStore.send(JSON.stringify({ key: apiKey }));\n    console.log(\"Set api key to: \" + apiKey);\n}\n</script>\n  \n  <div id=\"cy\" />\n  <input type=\"text\" bind:value={apiKey} placeholder=\"Enter the openai api key here.\" />\n  <button on:click={set_api_key}>Set Key</button>\n  \n  <style>\n    input {\n      width: 100%;\n      height: 100%;\n      box-sizing: border-box;\n      white-space: pre-wrap;\n    }\n  \n</style>\n"
  ],
  "names": [],
  "mappings": "AA8HE,qBAAO,CACL,IAAI,CAAE,KAAK,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IACT;ACpFA,uBAAS,CACP,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAChD,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,OAAO,CACzB,UAAU,CAAE,IACd,CAGA,uBAAS,CACP,aAAa,CAAE,IACjB,CAGA,8BAAgB,CACd,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,OACpB,CAGA,+BAAiB,CACf,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,IACpB;AC5CA,oBAAM,CACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,UAAU,CACtB,WAAW,CAAE,QACf;ACrBE,mBAAM,CACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,UAAU,CACtB,WAAW,CAAE,QACf;ACJA,mBAAM,CACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,UAAU,CACtB,WAAW,CAAE,QACf"
}