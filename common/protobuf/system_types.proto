syntax = "proto3";

package skynet.types;
import "google/protobuf/wrappers.proto";

// GraphNodeInfo
message GraphNodeInfo {
  string id = 1;
  string name = 2;
  string description = 3;
}

// Edge
message Edge {
  GraphNodeInfo source = 1;
  GraphNodeInfo target = 2;
}

// Prompt
message Prompt {
  string prompt = 1;
  string system = 2;
}

// Command
message Command {
  string command = 1;
}

// NodeTypeNames
enum NodeTypeNames {
  PROMPT = 0;
  PROCESS = 1;
  CONDITIONAL = 2;
  COMMAND = 3;
}

// Conditional
message Conditional {
  map<string, string> system_variables = 1;
  string statement = 2;
  map<string, string> options = 3; // assuming ObjectId is replaced with string
}

// Graph
message Graph {
  repeated GraphNodeInfo nodes = 1;
  repeated Edge edges = 2;
}

// Process
message Process {
  Graph graph = 1;
  repeated GraphNodeInfo topological_order = 2;
}

// Node
message Node {
  GraphNodeInfo node_info = 1;
  NodeTypeNames type_name = 2;
  repeated string input_variables = 3;
  repeated string output_variables = 4;
  oneof node_content {
    Prompt prompt = 5;
    Process process = 6;
    Conditional conditional = 7;
    Command command = 8;
  }
}


// SystemErrors
enum SystemErrors {
  GRAPH_DOESNT_EXIST = 0;
  GRAPH_STATE_DOESNT_EXIST = 1;
  OTHER_ERROR = 2;
  NODE_DOESNT_EXIST = 3;
}

// VerbTypeNames
enum VerbTypeNames {
  Post = 0;
  Put = 1;
  Patch = 2;
  Delete = 3;
  Get = 4;
  Execute = 5;
}

// ExecutionStep
message ExecutionStep {
  repeated string topological_order = 1;
  Node current_node = 2; // Use your actual Node type here
  map<string, string> variable_definitions = 3;
  string execution_id = 4;
}

// SystemState
message SystemState {
  bool authenticated = 1;
  bool websocket_ready = 2;
  Graph graph = 3;
  repeated Node nodes = 4;
  repeated GraphNodeInfo selected_node = 5; 
  repeated Edge selected_edge = 6; 
  ExecutionStep execution_step = 7;
  Node selected_process = 8;
}

// AuthenticationMessage
message AuthenticationMessage {
  string client_email = 1;
  string client_password = 2;
}

// UserSettings
message UserSettings {
  string openai_api_key = 1;
  string mongo_db_uri = 2;
}

message ValidateNodes {
  repeated Node nodes = 1;
  GraphNodeInfo containing_node = 2;
}

// CrudBundle
message CrudBundle {
  VerbTypeNames verb = 1;
  oneof object {
    Node node = 2;
    AuthenticationMessage authentication_message = 3;
    UserSettings user_settings = 4;
    ExecutionStep execution_context = 5;
    ValidateNodes validate_nodes = 6;
  }
}

// CommandResponse
message CommandResponse {
  string error = 1; 
  string output = 2;
}

// PromptResponse
message PromptResponse {
  string ai_text_response = 1;
}

// ConditionalResponse
message ConditionalResponse {
  string chosen_option = 1;
}

// NodeExecutionResponse
message NodeExecutionResponse {
  oneof response {
    PromptResponse prompt_response = 1;
    CommandResponse command_response = 2;
    ConditionalResponse conditional_response = 3;
  }
}

// ExecutionResponse
message ExecutionResponse {
  string execution_id = 1;
  string container_execution_id = 2; // Adapted to string, consider using wrapper or default value
  string current_node_id = 3;
  NodeTypeNames current_node_type = 4;
  NodeExecutionResponse response = 5;
}

message ValidateNodesResponse {
  repeated SystemErrors errors = 1;
  Node process = 2;
}

// ResponseObject
message ResponseObject {
  oneof object {
    Node node = 1;
    string authentication_message = 2; // Adapted to string
    string user_settings = 3; // Adapted to string
    ExecutionResponse execution_response = 4;
    ValidateNodesResponse validate_nodes_response = 5;
  }
}
