syntax = "proto3";

package skynet.types;
import "google/protobuf/timestamp.proto";

/* Ideally, this information will be used for providing context on the frontend when visualizing the graph. The id contained within is guaranteed to be unique. */
message GraphNodeInfo {
  string id = 1;
  string name = 2;
  string description = 3;
}

/* This is a representation of an edge that will be easy to convert to system types -- it is especially easy to convert to a visualization of the graph. */
message Edge {
  GraphNodeInfo source = 1;
  GraphNodeInfo target = 2;
}

// Node type that is fed into a large language model
message Prompt {
  string prompt = 1;
  string system = 2;
}

/* Node type that will send a command line command to a linux distro contained in a docker container. */
message Command {
  string command = 1;
}

/* This node type is not yet implemented, the idea is that it will allow for choosing amongst a few different nodes for future execution. */
message Conditional {
  string statement = 1;
  repeated Node options = 2; 
}

// This is a simple object used for passing between system entities that is easier to translate into the domain object within each system. (The purpose is to make it easier to implement future graph systems within future systems).
message Graph {
  repeated GraphNodeInfo nodes_info = 1;
  repeated Edge edges = 2;
}

/* Node type that always contains enough information to be executed as is. Any process that is not able to be executed will never be saved to the database. Even in cases where the Nodes are updated, these Processes will contain a local version of the node. */
message Process {
  Graph graph = 1;
  repeated GraphNodeInfo topological_order = 2;
  repeated Node nodes = 3;
}

enum NodeTypes {
  PROMPT = 0;
  PROCESS = 1;
  CONDITIONAL = 2;
  COMMAND = 3;
}

message NodeContent {
  oneof node_content {
    Prompt prompt = 1;
    Process process = 2;
    Conditional conditional = 3;
    Command command = 4;
  }
}

message Node {
  GraphNodeInfo node_info = 1;
  repeated string input_variables = 2;
  repeated string output_variables = 3;
  NodeTypes node_type = 4;
  NodeContent node_content = 5;
}

message Nodes {
  repeated Node nodes = 1;
}

enum VerbTypes {
  Create = 0;
  Update = 1;
  Replace = 2;
  Delete = 3;
  Get = 4;
  Execute = 5;
  Validate = 6;
  Acknowledge = 7;
  Initiate = 8;
  Authorized = 9;
}

// This is given to every "entity" within the system. Each is self-declared. For instance, the backend will generate an Identity for itself and use it for any messages that it sends to any client.
message Identity {
  string id = 1;
  string ip_address = 2;
}

message Execution {
  GraphNodeInfo current_node = 1;
  Process process = 2;
  repeated VariableDefinition current_variable_definitions = 3;
  string execution_id = 4;
}

message VariableDefinition {
  string name = 1;
  oneof value {
    string string_value = 2;
    int32 int_value = 3;
    float float_value = 4;
    bool bool_value = 5;
  }
}

/* This is the frontend state of the application, it will store all information needed for creating/modifiying and executing processes on the backend */
message SystemState {
  bool authenticated = 1;
  bool websocket_ready = 2;
  Graph graph = 3;
  // Might not be synced with the backend, but this is the best we have. To get the most up to date version, we will have to query the backend.
  repeated Node local_nodes = 4;
  repeated GraphNodeInfo selected_nodes = 5; 
  repeated Edge selected_edges = 6; 
  Execution execution_step = 7;
  Node selected_process = 8;
  repeated Identity backend_identities = 9;
  repeated Identity peer_identities = 10;
  Identity primary_backend = 11;
  Identity client_identity = 12;
  // This one contains both the sent and received messages. To find out which are paired,look at the verification_id field.
  repeated Envelope message_log = 13;
}

message AuthenticationMessage {
  string client_email = 1;
  string client_password = 2;
}

message UserSettings {
  string openai_api_key = 1;
  string mongo_db_uri = 2;
}


message SystemError {
  string error_message = 1;
  Identity originator = 2;
}

message Letter {
  Body body = 1;
  VerbTypes verb = 2;
}

message Body {
oneof contents {
    Node node = 1;
    AuthenticationMessage authentication_message = 2;
    UserSettings user_settings = 3;
    Execution execution_details = 4;
    SystemError errors = 5;
    Identity identity = 6;
    NodesToProcess nodes_to_process = 7;
  }
}

message NodesToProcess {
  repeated Node nodes = 1;
  GraphNodeInfo containing_node_info = 2;
}




message Envelope {
  /* There could potentially be multipe messages for a particular client. Instead of sending them individually, they can be sent at once to save number of trips. */
  repeated Letter letters = 1;
  Identity sender = 2;
  Identity receiver = 3;
  /* This will be set by the sender of a message and copied over to the response so that the sender knows which message to pair it with as a response. This allows us to get rid of the need for specifying if a message is either a request or a response. */
  string verification_id = 4;

}


