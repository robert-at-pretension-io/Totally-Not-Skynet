{
    "objects": [
        "fib_numbers : [i64; 1000];",
        "fractal_canvas : [[u8; 800]; 800];"
    ],
    "functions": [
        "calculate_fib_numbers() -> [i64; 1000];",
        "print_fib_numbers(fib_numbers : [i64; 1000]) -> None;",
        "render_fractal(fib_numbers : [i64; 1000], fractal_canvas : &mut [[u8; 800]; 800]) -> None;"
    ]
}
{
    "objects": [
        "fib_numbers : [i64; 1000];",
        "fractal_canvas : [[u8; 800]; 800];"
    ],
    "functions": [
        "calculate_fib_numbers() -> [i64; 1000];",
        "print_fib_numbers(fib_numbers : [i64; 1000]) -> None;",
        "render_fractal(fib_numbers : [i64; 1000], fractal_canvas : &mut [[u8; 800]; 800]) -> None;"
    ],
    "currentFunction": "calculate_fib_numbers() -> [i64; 1000];",
    "description": "The calculate_fib_numbers function should compute all Fibonacci numbers up to 1000 and return an array with those values. The print_fib_numbers function should take in an array of Fibonacci numbers and print them out. The render_fractal function should take in an array of Fibonacci numbers and a canvas, and use the Fibonacci numbers to generate a fractal on the canvas.",
    "testCases": [
        {
            "input": "",
            "output": "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987"
        }
    ]
}
{
    "objects": [
        "fib_numbers : [i64; 1000];",
        "fractal_canvas : [[u8; 800]; 800];"
    ],
    "functions": [
        "calculate_fib_numbers() -> [i64; 1000];",
        "print_fib_numbers(fib_numbers : [i64; 1000]) -> None;",
        "render_fractal(fib_numbers : [i64; 1000], fractal_canvas : &mut [[u8; 800]; 800]) -> None;"
    ],
    "currentFunction": "render_fractal(fib_numbers : [i64; 1000], fractal_canvas : &mut [[u8; 800]; 800]) -> None;",
    "description": "The render_fractal function should take in two arguments: an array of fibonacci numbers, and a mutable 2D array of bytes to represent a canvas for the fractal. It should use the fibonacci numbers to determine which pixels of the canvas should be colored.",
    "testCases": [
        {
            "input": "calculate_fib_numbers(); [[0;800];800]",
            "output": "fractal_canvas where the appropriate pixels have been colored"
        }
    ]
}
{
    "objects": [
        "fib_numbers : [i64; 1000];",
        "fractal_canvas : [[u8; 800]; 800];"
    ],
    "functions": [
        "calculate_fib_numbers() -> [i64; 1000];",
        "print_fib_numbers(fib_numbers : [i64; 1000]) -> None;",
        "render_fractal(fib_numbers : [i64; 1000], fractal_canvas : &mut [[u8; 800]; 800]) -> None;"
    ],
    "currentFunction": "print_fib_numbers(fib_numbers : [i64; 1000]) -> None;",
    "description": "The print_fib_numbers function should take in as input an array containing Fibonacci numbers up to 1000 and print them out to the console. The calculate_fib_numbers function should calculate all of the Fibonacci numbers up to 1000 and return them as an array. The render_fractal function should take in an array of Fibonacci numbers and a mutable 800x800 canvas, and use the Fibonacci numbers to render a fractal on the canvas.",
    "testCases": [
        {
            "input": "[0, 1, 1, 2, 3]",
            "output": "0
1
1
2
3"
        }
    ]
}{
    "filename": "fibonacci.rs",
    "currentFunction": "print_fib_numbers",
    "language": "Rust",
    "command": "rustc fibonacci.rs && ./fibonacci",
    "code": "fn calculate_fib_numbers() -> [i64; 1000] {
    let mut fib_nums = [0; 1000];

    fib_nums[1] = 1;

    for i in 2..1000 {
        fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2];
    }

    fib_nums
}

fn print_fib_numbers(fib_numbers: [i64; 1000]) -> () {
    for &num in fib_numbers.iter() {
        println!(\"{}\", num);
    }
}

fn render_fractal(fib_numbers: [i64; 1000], fractal_canvas: &mut [[u8; 800]; 800]) -> () {
    // implementation here
}

fn main() {
    let fib_numbers = calculate_fib_numbers();
    print_fib_numbers(fib_numbers);
}",
    "instructions": "To run the code, open your terminal and navigate to the directory where you saved 'fibonacci.rs'.
Compile the code by typing 'rustc fibonacci.rs' and hit enter.
Then run the program with the command './fibonacci'.
The program will output the Fibonacci numbers up to 1000 to the terminal."
}
{
    "filename": "fractal_generator.rs",
    "currentFunction": "render_fractal",
    "language": "Rust",
    "command": "rustc fractal_generator.rs && ./fractal_generator",
    "code": "fn calculate_fib_numbers() -> [i64; 1000] {
    // implementation details
}

fn print_fib_numbers(fib_numbers: [i64; 1000]) -> () {
    // implementation details
}

fn render_fractal(fib_numbers: [i64; 1000], fractal_canvas: &mut [[u8; 800]; 800]) -> () {
    // implementation details using fibonacci numbers to color pixels
}

fn main() -> () {
    let fib_numbers = calculate_fib_numbers();
    let mut fractal_canvas = [[0; 800]; 800];

    render_fractal(fib_numbers, &mut fractal_canvas);
    print_fib_numbers(fib_numbers);
}
",
    "instructions": "To run the code:
1. Install Rust if it is not already installed. Instruction can be found at https://www.rust-lang.org/tools/install
2. Open a terminal and navigate to the directory the code file is saved in.
3. Type 'rustc fractal_generator.rs' to compile the code.
4. Type './fractal_generator' to run the compiled code.
5. The output will be printed to the console."
}{"objects":["fib_array : Array<Int>;","frac_value : Int;"],"functions":["calculate_fibonacci(limit : Int) : Array<Int>;","print_fibonacci(fib_array : Array<Int>) : Void;","render_fractal(fib_array : Array<Int>) : Int;"]}
{"objects":["fib_array : Array<Int>;","frac_value : Int;"],"functions":["calculate_fibonacci(limit : Int) : Array<Int>;","print_fibonacci(fib_array : Array<Int>) : Void;","render_fractal(fib_array : Array<Int>) : Int;"],"currentFunction":"render_fractal(fib_array : Array<Int>) : Int;","description":"The render_fractal function takes in an array of fibonacci numbers and returns an integer representing the fractal value. The fractal is rendered using the fibonacci sequence as input.","testCases":[{"input":"[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987]","output":"Some integer representing the fractal value"}]}
{"objects":["fib_array : Array<Int>;","frac_value : Int;"],"functions":["calculate_fibonacci(limit : Int) : Array<Int>;","print_fibonacci(fib_array : Array<Int>) : Void;","render_fractal(fib_array : Array<Int>) : Int;"],"currentFunction":"calculate_fibonacci(limit : Int) : Array<Int>;","description":"The calculate_fibonacci function should take in a limit integer as input and return an array of all Fibonacci numbers less than or equal to the limit. The print_fibonacci function should take in an array of Fibonacci numbers and print them out to the console. The render_fractal function should take in the array of Fibonacci numbers and render a fractal using that information.","testCases":[{"input":"1000","output":"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]"}]}
{"objects":["fib_array : Array<Int>;","frac_value : Int;"],"functions":["calculate_fibonacci(limit : Int) : Array<Int>;","print_fibonacci(fib_array : Array<Int>) : Void;","render_fractal(fib_array : Array<Int>) : Int;"],"currentFunction":"print_fibonacci(fib_array : Array<Int>) : Void;","description":"The print_fibonacci function should take in an array of Fibonacci numbers as its input and print them out to the console. The function should not print any numbers greater than 1000.","testCases":[{"input":"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]","output":"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n"}]}
{"filename":"render_fractal.js","currentFunction":"render_fractal(fib_array : Array<Int>) : Int;","language":"JavaScript","command":"node render_fractal.js","code":"function render_fractal(fib_array) {\n  // implementation goes here\n}\n","instructions":"To run the code, open a unix terminal and navigate to the directory where the 'render_fractal.js' file is located. Then type 'node render_fractal.js' and press enter. Make sure that the fib_array input is an array of fibonacci numbers in ascending order. The function will return an integer representing the fractal value."}
{"filename":"print_fibonacci.js","currentFunction":"print_fibonacci(fib_array : Array<Int>) : Void;","language":"JavaScript","command":"node print_fibonacci.js","code":"function print_fibonacci(fib_array){\n  for(let i=0;i<fib_array.length;i++){\n    if(fib_array[i]<=1000){\n      console.log(fib_array[i]);\n    }\n  }\n}","instructions":"To run this script, you must have Node.js installed on your computer. \n1. Open your terminal application. \n2. Navigate to the directory where the script file is located. \n3. Run the command 'node print_fibonacci.js' to execute the script. \n4. If successful, the script will print out the Fibonacci numbers in the array, excluding any number greater than 1000."}
